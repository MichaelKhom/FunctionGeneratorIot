
IotFuncGen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000424  00800060  00003a24  00003ab8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001d4  00800484  00800484  00003edc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003edc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003f38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00003f78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000598d  00000000  00000000  00004288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f3c  00000000  00000000  00009c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bbc  00000000  00000000  0000ab51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000774  00000000  00000000  0000d710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001027  00000000  00000000  0000de84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003793  00000000  00000000  0000eeab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0001263e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9c 00 	jmp	0x138	; 0x138 <__ctors_end>
       4:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
       8:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
       c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      10:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      14:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      18:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      1c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      20:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      24:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      28:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      2c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      30:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      34:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__vector_13>
      38:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      3c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      40:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      44:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      48:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      4c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      50:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      54:	8e 0b       	sbc	r24, r30
      56:	c2 0b       	sbc	r28, r18
      58:	05 0c       	add	r0, r5
      5a:	d5 0b       	sbc	r29, r21
      5c:	ed 0c       	add	r14, r13
      5e:	03 0d       	add	r16, r3
      60:	db 0b       	sbc	r29, r27
      62:	4e 0d       	add	r20, r14
      64:	5a 0d       	add	r21, r10
      66:	7f 0d       	add	r23, r15
      68:	9a 0d       	add	r25, r10
      6a:	bf 0d       	add	r27, r15
      6c:	da 0d       	add	r29, r10
      6e:	fe 0d       	add	r31, r14
      70:	31 0e       	add	r3, r17
      72:	17 10       	cpse	r1, r7
      74:	23 10       	cpse	r2, r3
      76:	4f 10       	cpse	r4, r15
      78:	71 10       	cpse	r7, r1
      7a:	9d 10       	cpse	r9, r13
      7c:	bf 10       	cpse	r11, r15
      7e:	ea 10       	cpse	r14, r10
      80:	1a 11       	cpse	r17, r10
      82:	61 11       	cpse	r22, r1
      84:	a7 11       	cpse	r26, r7
      86:	0c 13       	cpse	r16, r28
      88:	0e 13       	cpse	r16, r30
      8a:	10 13       	cpse	r17, r16
      8c:	12 13       	cpse	r17, r18
      8e:	14 13       	cpse	r17, r20
      90:	16 13       	cpse	r17, r22
      92:	18 13       	cpse	r17, r24
      94:	32 13       	cpse	r19, r18
      96:	34 13       	cpse	r19, r20
      98:	36 13       	cpse	r19, r22
      9a:	38 13       	cpse	r19, r24
      9c:	3a 13       	cpse	r19, r26
      9e:	3c 13       	cpse	r19, r28
      a0:	3e 13       	cpse	r19, r30
      a2:	79 13       	cpse	r23, r25
      a4:	a4 13       	cpse	r26, r20
      a6:	cf 13       	cpse	r28, r31
      a8:	fa 13       	cpse	r31, r26
      aa:	2d 14       	cp	r2, r13
      ac:	60 14       	cp	r6, r0
      ae:	93 14       	cp	r9, r3
      b0:	c6 14       	cp	r12, r6
      b2:	c6 14       	cp	r12, r6
      b4:	3a 15       	cp	r19, r10
      b6:	07 63       	ori	r16, 0x37	; 55
      b8:	42 36       	cpi	r20, 0x62	; 98
      ba:	b7 9b       	sbis	0x16, 7	; 22
      bc:	d8 a7       	std	Y+40, r29	; 0x28
      be:	1a 39       	cpi	r17, 0x9A	; 154
      c0:	68 56       	subi	r22, 0x68	; 104
      c2:	18 ae       	std	Y+56, r1	; 0x38
      c4:	ba ab       	std	Y+50, r27	; 0x32
      c6:	55 8c       	ldd	r5, Z+29	; 0x1d
      c8:	1d 3c       	cpi	r17, 0xCD	; 205
      ca:	b7 cc       	rjmp	.-1682   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      cc:	57 63       	ori	r21, 0x37	; 55
      ce:	bd 6d       	ori	r27, 0xDD	; 221
      d0:	ed fd       	.word	0xfded	; ????
      d2:	75 3e       	cpi	r23, 0xE5	; 229
      d4:	f6 17       	cp	r31, r22
      d6:	72 31       	cpi	r23, 0x12	; 18
      d8:	bf 00       	.word	0x00bf	; ????
      da:	00 00       	nop
      dc:	80 3f       	cpi	r24, 0xF0	; 240
      de:	08 00       	.word	0x0008	; ????
      e0:	00 00       	nop
      e2:	be 92       	st	-X, r11
      e4:	24 49       	sbci	r18, 0x94	; 148
      e6:	12 3e       	cpi	r17, 0xE2	; 226
      e8:	ab aa       	std	Y+51, r10	; 0x33
      ea:	aa 2a       	or	r10, r26
      ec:	be cd       	rjmp	.-1156   	; 0xfffffc6a <__eeprom_end+0xff7efc6a>
      ee:	cc cc       	rjmp	.-1640   	; 0xfffffa88 <__eeprom_end+0xff7efa88>
      f0:	4c 3e       	cpi	r20, 0xEC	; 236
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	be ab       	std	Y+54, r27	; 0x36
      f8:	aa aa       	std	Y+50, r10	; 0x32
      fa:	aa 3e       	cpi	r26, 0xEA	; 234
      fc:	00 00       	nop
      fe:	00 00       	nop
     100:	bf 00       	.word	0x00bf	; ????
     102:	00 00       	nop
     104:	80 3f       	cpi	r24, 0xF0	; 240
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	00 08       	sbc	r0, r0
     10c:	41 78       	andi	r20, 0x81	; 129
     10e:	d3 bb       	out	0x13, r29	; 19
     110:	43 87       	std	Z+11, r20	; 0x0b
     112:	d1 13       	cpse	r29, r17
     114:	3d 19       	sub	r19, r13
     116:	0e 3c       	cpi	r16, 0xCE	; 206
     118:	c3 bd       	out	0x23, r28	; 35
     11a:	42 82       	std	Z+2, r4	; 0x02
     11c:	ad 2b       	or	r26, r29
     11e:	3e 68       	ori	r19, 0x8E	; 142
     120:	ec 82       	std	Y+4, r14	; 0x04
     122:	76 be       	out	0x36, r7	; 54
     124:	d9 8f       	std	Y+25, r29	; 0x19
     126:	e1 a9       	ldd	r30, Z+49	; 0x31
     128:	3e 4c       	sbci	r19, 0xCE	; 206
     12a:	80 ef       	ldi	r24, 0xF0	; 240
     12c:	ff be       	out	0x3f, r15	; 63
     12e:	01 c4       	rjmp	.+2050   	; 0x932 <save_wifi_credentials+0xa>
     130:	ff 7f       	andi	r31, 0xFF	; 255
     132:	3f 00       	.word	0x003f	; ????
     134:	00 00       	nop
	...

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf e5       	ldi	r28, 0x5F	; 95
     13e:	d8 e0       	ldi	r29, 0x08	; 8
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	14 e0       	ldi	r17, 0x04	; 4
     146:	a0 e6       	ldi	r26, 0x60	; 96
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	e4 e2       	ldi	r30, 0x24	; 36
     14c:	fa e3       	ldi	r31, 0x3A	; 58
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	a4 38       	cpi	r26, 0x84	; 132
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	26 e0       	ldi	r18, 0x06	; 6
     15c:	a4 e8       	ldi	r26, 0x84	; 132
     15e:	b4 e0       	ldi	r27, 0x04	; 4
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	a8 35       	cpi	r26, 0x58	; 88
     166:	b2 07       	cpc	r27, r18
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <main>
     16e:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <_exit>

00000172 <__bad_interrupt>:
     172:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000176 <Init_LCD>:
#include "Headers/SPIMaster.h"
#include "Headers/LCD.h"

void Init_LCD(void)
{
	lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
     176:	8f 9a       	sbi	0x11, 7	; 17
	lcd_D6_ddr |= (1<<lcd_D6_bit);
     178:	8e 9a       	sbi	0x11, 6	; 17
	lcd_D5_ddr |= (1<<lcd_D5_bit);
     17a:	8d 9a       	sbi	0x11, 5	; 17
	lcd_D4_ddr |= (1<<lcd_D4_bit);
     17c:	8c 9a       	sbi	0x11, 4	; 17
	lcd_E_ddr  |= (1<<lcd_E_bit);                    // E line - output
     17e:	b9 9a       	sbi	0x17, 1	; 23
	lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
     180:	b8 9a       	sbi	0x17, 0	; 23
     182:	08 95       	ret

00000184 <lcd_write_4>:
	lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
	lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
}

void lcd_write_4(uint8_t theByte) {
	lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
     184:	97 98       	cbi	0x12, 7	; 18
	if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
     186:	88 23       	and	r24, r24
     188:	0c f4       	brge	.+2      	; 0x18c <lcd_write_4+0x8>
     18a:	97 9a       	sbi	0x12, 7	; 18
	lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
     18c:	96 98       	cbi	0x12, 6	; 18
	if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
     18e:	86 fd       	sbrc	r24, 6
     190:	96 9a       	sbi	0x12, 6	; 18
	lcd_D5_port &= ~(1<<lcd_D5_bit);
     192:	95 98       	cbi	0x12, 5	; 18
	if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
     194:	85 fd       	sbrc	r24, 5
     196:	95 9a       	sbi	0x12, 5	; 18
	lcd_D4_port &= ~(1<<lcd_D4_bit);
     198:	94 98       	cbi	0x12, 4	; 18
	if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
     19a:	84 fd       	sbrc	r24, 4
     19c:	94 9a       	sbi	0x12, 4	; 18
	// write the data
	// 'Address set-up time' (40 nS)
	lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
     19e:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a0:	8a eb       	ldi	r24, 0xBA	; 186
     1a2:	8a 95       	dec	r24
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_write_4+0x1e>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_write_4+0x24>
	_delay_us(70);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
	lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
     1a8:	c1 98       	cbi	0x18, 1	; 24
     1aa:	8a eb       	ldi	r24, 0xBA	; 186
     1ac:	8a 95       	dec	r24
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_write_4+0x28>
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_write_4+0x2e>
     1b2:	08 95       	ret

000001b4 <lcd_write_character_4d>:
	i++;
	_delay_us(160);                              // 40 uS delay (min)
	}
	}

void lcd_write_character_4d(uint8_t theData) {
     1b4:	cf 93       	push	r28
     1b6:	c8 2f       	mov	r28, r24
	lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
     1b8:	c0 9a       	sbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     1ba:	c1 98       	cbi	0x18, 1	; 24
	lcd_write_4(theData);                           // write the upper 4-bits of the data
     1bc:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
	lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     1c0:	8c 2f       	mov	r24, r28
     1c2:	82 95       	swap	r24
     1c4:	80 7f       	andi	r24, 0xF0	; 240
     1c6:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
}
     1ca:	cf 91       	pop	r28
     1cc:	08 95       	ret

000001ce <lcd_write_string_4d>:
	lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
	_delay_us(90);                                  // 40uS delay (min)
}


void lcd_write_string_4d(char theString[]) {
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	00 d0       	rcall	.+0      	; 0x1d8 <lcd_write_string_4d+0xa>
     1d8:	cd b7       	in	r28, 0x3d	; 61
     1da:	de b7       	in	r29, 0x3e	; 62
     1dc:	8c 01       	movw	r16, r24
	volatile int i = 0;                             // character counter*/
     1de:	1a 82       	std	Y+2, r1	; 0x02
     1e0:	19 82       	std	Y+1, r1	; 0x01
	while (theString[i] != 0)
     1e2:	e9 81       	ldd	r30, Y+1	; 0x01
     1e4:	fa 81       	ldd	r31, Y+2	; 0x02
     1e6:	e8 0f       	add	r30, r24
     1e8:	f9 1f       	adc	r31, r25
     1ea:	80 81       	ld	r24, Z
     1ec:	88 23       	and	r24, r24
     1ee:	c9 f0       	breq	.+50     	; 0x222 <lcd_write_string_4d+0x54>
	{
	lcd_write_character_4d(theString[i]);
     1f0:	e9 81       	ldd	r30, Y+1	; 0x01
     1f2:	fa 81       	ldd	r31, Y+2	; 0x02
     1f4:	e0 0f       	add	r30, r16
     1f6:	f1 1f       	adc	r31, r17
     1f8:	80 81       	ld	r24, Z
     1fa:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_character_4d>
	i++;
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	9a 81       	ldd	r25, Y+2	; 0x02
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	9a 83       	std	Y+2, r25	; 0x02
     206:	89 83       	std	Y+1, r24	; 0x01
     208:	8f e3       	ldi	r24, 0x3F	; 63
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	01 97       	sbiw	r24, 0x01	; 1
     20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_write_string_4d+0x3e>
     210:	00 c0       	rjmp	.+0      	; 0x212 <lcd_write_string_4d+0x44>
     212:	00 00       	nop
}


void lcd_write_string_4d(char theString[]) {
	volatile int i = 0;                             // character counter*/
	while (theString[i] != 0)
     214:	e9 81       	ldd	r30, Y+1	; 0x01
     216:	fa 81       	ldd	r31, Y+2	; 0x02
     218:	e0 0f       	add	r30, r16
     21a:	f1 1f       	adc	r31, r17
     21c:	80 81       	ld	r24, Z
     21e:	81 11       	cpse	r24, r1
     220:	e7 cf       	rjmp	.-50     	; 0x1f0 <lcd_write_string_4d+0x22>
	{
	lcd_write_character_4d(theString[i]);
	i++;
	_delay_us(160);                              // 40 uS delay (min)
	}
	}
     222:	0f 90       	pop	r0
     224:	0f 90       	pop	r0
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	1f 91       	pop	r17
     22c:	0f 91       	pop	r16
     22e:	08 95       	ret

00000230 <lcd_write_instruction_4d>:
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
	lcd_write_4(theData);                           // write the upper 4-bits of the data
	lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
}

void lcd_write_instruction_4d(uint8_t theInstruction) {
     230:	cf 93       	push	r28
     232:	c8 2f       	mov	r28, r24
	lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     234:	c0 98       	cbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     236:	c1 98       	cbi	0x18, 1	; 24
	lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     238:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
	lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     23c:	8c 2f       	mov	r24, r28
     23e:	82 95       	swap	r24
     240:	80 7f       	andi	r24, 0xF0	; 240
     242:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
}
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <Init_LCD_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     24a:	2f ef       	ldi	r18, 0xFF	; 255
     24c:	80 e7       	ldi	r24, 0x70	; 112
     24e:	92 e0       	ldi	r25, 0x02	; 2
     250:	21 50       	subi	r18, 0x01	; 1
     252:	80 40       	sbci	r24, 0x00	; 0
     254:	90 40       	sbci	r25, 0x00	; 0
     256:	e1 f7       	brne	.-8      	; 0x250 <Init_LCD_4bit+0x6>
     258:	00 c0       	rjmp	.+0      	; 0x25a <Init_LCD_4bit+0x10>
     25a:	00 00       	nop
{
	// Power-up delay
	_delay_ms(100);                                 // initial 40 mSec delay

	// Set up the RS and E lines for the 'lcd_write_4' subroutine.
	lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     25c:	c0 98       	cbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     25e:	c1 98       	cbi	0x18, 1	; 24

	// Reset the LCD controller
	lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     260:	80 e3       	ldi	r24, 0x30	; 48
     262:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
     266:	8f e3       	ldi	r24, 0x3F	; 63
     268:	9c e9       	ldi	r25, 0x9C	; 156
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <Init_LCD_4bit+0x20>
     26e:	00 c0       	rjmp	.+0      	; 0x270 <Init_LCD_4bit+0x26>
     270:	00 00       	nop
	_delay_ms(20);                                  // 4.1 mS delay (min)

	lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     272:	80 e3       	ldi	r24, 0x30	; 48
     274:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     278:	87 e5       	ldi	r24, 0x57	; 87
     27a:	92 e0       	ldi	r25, 0x02	; 2
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <Init_LCD_4bit+0x32>
     280:	00 c0       	rjmp	.+0      	; 0x282 <Init_LCD_4bit+0x38>
     282:	00 00       	nop
	_delay_us(300);                                 // 100uS delay (min)

	lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     284:	80 e3       	ldi	r24, 0x30	; 48
     286:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
     28a:	87 e5       	ldi	r24, 0x57	; 87
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <Init_LCD_4bit+0x44>
     292:	00 c0       	rjmp	.+0      	; 0x294 <Init_LCD_4bit+0x4a>
     294:	00 00       	nop
	_delay_us(300);                                 // this delay is omitted in the data sheet
	
	lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     296:	88 e2       	ldi	r24, 0x28	; 40
     298:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
     29c:	90 ef       	ldi	r25, 0xF0	; 240
     29e:	9a 95       	dec	r25
     2a0:	f1 f7       	brne	.-4      	; 0x29e <Init_LCD_4bit+0x54>
	_delay_us(90);                                  // 40uS delay (min)

	// Function Set instruction
	lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     2a2:	88 e2       	ldi	r24, 0x28	; 40
     2a4:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
     2a8:	20 ef       	ldi	r18, 0xF0	; 240
     2aa:	2a 95       	dec	r18
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <Init_LCD_4bit+0x60>
	_delay_us(90);                                  // 40uS delay (min)

	// Display On/Off Control instruction
	lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     2ae:	88 e0       	ldi	r24, 0x08	; 8
     2b0:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
     2b4:	80 ef       	ldi	r24, 0xF0	; 240
     2b6:	8a 95       	dec	r24
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <Init_LCD_4bit+0x6c>
	_delay_us(90);                                  // 40uS delay (min)

	// Clear Display instruction
	lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c0:	8f e7       	ldi	r24, 0x7F	; 127
     2c2:	9e e3       	ldi	r25, 0x3E	; 62
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <Init_LCD_4bit+0x7a>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <Init_LCD_4bit+0x80>
     2ca:	00 00       	nop
	_delay_ms(8);                                   // 1.64 mS delay (min)

	// ; Entry Mode Set instruction
	lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     2cc:	86 e0       	ldi	r24, 0x06	; 6
     2ce:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d2:	90 ef       	ldi	r25, 0xF0	; 240
     2d4:	9a 95       	dec	r25
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <Init_LCD_4bit+0x8a>
	_delay_us(90);                                  // 40uS delay (min)

	// Display On/Off Control instruction
	lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     2d8:	8c e0       	ldi	r24, 0x0C	; 12
     2da:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
     2de:	20 ef       	ldi	r18, 0xF0	; 240
     2e0:	2a 95       	dec	r18
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <Init_LCD_4bit+0x96>
     2e4:	08 95       	ret

000002e6 <print_LCD_line>:
	snprintf(lbuff, 20, "  Firmware Rev:%c.%c  ", FIRMWARE_VERSION_A, FIRMWARE_VERSION_B);
	print_LCD_line(lbuff, LCD_LINE_3);
	print_LCD_line("  KhomLabs Design   ", LCD_LINE_4);
}

void print_LCD_line(char *input_string, uint8_t line_number) {
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	ec 01       	movw	r28, r24
	lcd_write_instruction_4d(LCD_SET_CURSOR | line_number);
     2ec:	86 2f       	mov	r24, r22
     2ee:	80 68       	ori	r24, 0x80	; 128
     2f0:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
	lcd_write_string_4d(input_string);
     2f4:	ce 01       	movw	r24, r28
     2f6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_write_string_4d>
}
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <LCD_logo_display>:
	_delay_us(70);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
	lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
	_delay_us(70);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
	}
	
void LCD_logo_display() {
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	64 97       	sbiw	r28, 0x14	; 20
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
	char lbuff[20];
	print_LCD_line("  IoT Dual-Channel  ", LCD_LINE_1);
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	80 e6       	ldi	r24, 0x60	; 96
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
	print_LCD_line(" Function Generator ", LCD_LINE_2);
     322:	60 e4       	ldi	r22, 0x40	; 64
     324:	85 e7       	ldi	r24, 0x75	; 117
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
	snprintf(lbuff, 20, "  Firmware Rev:%c.%c  ", FIRMWARE_VERSION_A, FIRMWARE_VERSION_B);
     32c:	1f 92       	push	r1
     32e:	80 e3       	ldi	r24, 0x30	; 48
     330:	8f 93       	push	r24
     332:	1f 92       	push	r1
     334:	82 e3       	ldi	r24, 0x32	; 50
     336:	8f 93       	push	r24
     338:	8a e8       	ldi	r24, 0x8A	; 138
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	9f 93       	push	r25
     33e:	8f 93       	push	r24
     340:	1f 92       	push	r1
     342:	84 e1       	ldi	r24, 0x14	; 20
     344:	8f 93       	push	r24
     346:	8e 01       	movw	r16, r28
     348:	0f 5f       	subi	r16, 0xFF	; 255
     34a:	1f 4f       	sbci	r17, 0xFF	; 255
     34c:	1f 93       	push	r17
     34e:	0f 93       	push	r16
     350:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
	print_LCD_line(lbuff, LCD_LINE_3);
     354:	64 e1       	ldi	r22, 0x14	; 20
     356:	c8 01       	movw	r24, r16
     358:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
	print_LCD_line("  KhomLabs Design   ", LCD_LINE_4);
     35c:	64 e5       	ldi	r22, 0x54	; 84
     35e:	81 ea       	ldi	r24, 0xA1	; 161
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
}
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	64 96       	adiw	r28, 0x14	; 20
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	de bf       	out	0x3e, r29	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	08 95       	ret

00000386 <clear_LCD_line>:
	lcd_write_instruction_4d(LCD_SET_CURSOR | line_number);
	lcd_write_string_4d(input_string);
}

void clear_LCD_line(unsigned char line) {
	print_LCD_line("                    ", line);
     386:	68 2f       	mov	r22, r24
     388:	86 eb       	ldi	r24, 0xB6	; 182
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     390:	08 95       	ret

00000392 <clear_LCD>:
}

void clear_LCD() {
	clear_LCD_line(LCD_LINE_1);
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	0e 94 c3 01 	call	0x386	; 0x386 <clear_LCD_line>
	clear_LCD_line(LCD_LINE_2);
     398:	80 e4       	ldi	r24, 0x40	; 64
     39a:	0e 94 c3 01 	call	0x386	; 0x386 <clear_LCD_line>
	clear_LCD_line(LCD_LINE_3);
     39e:	84 e1       	ldi	r24, 0x14	; 20
     3a0:	0e 94 c3 01 	call	0x386	; 0x386 <clear_LCD_line>
	clear_LCD_line(LCD_LINE_4);
     3a4:	84 e5       	ldi	r24, 0x54	; 84
     3a6:	0e 94 c3 01 	call	0x386	; 0x386 <clear_LCD_line>
     3aa:	08 95       	ret

000003ac <print_LCD_char>:
}

void print_LCD_char(uint8_t ch_in, uint8_t line, uint8_t position) {
     3ac:	cf 93       	push	r28
     3ae:	c8 2f       	mov	r28, r24
	lcd_write_instruction_4d((LCD_SET_CURSOR | line) + position);
     3b0:	86 2f       	mov	r24, r22
     3b2:	80 68       	ori	r24, 0x80	; 128
     3b4:	84 0f       	add	r24, r20
     3b6:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
	lcd_write_character_4d(ch_in);
     3ba:	8c 2f       	mov	r24, r28
     3bc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_character_4d>
}
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <print_LCD_segment>:

void print_LCD_segment(char *input_string, uint8_t line, uint8_t segment) {
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	ec 01       	movw	r28, r24
	if (segment == 0) lcd_write_instruction_4d(LCD_SET_CURSOR | line);
     3ca:	41 11       	cpse	r20, r1
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <print_LCD_segment+0x14>
     3ce:	86 2f       	mov	r24, r22
     3d0:	80 68       	ori	r24, 0x80	; 128
     3d2:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
     3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <print_LCD_segment+0x32>
	else {
		if (((line == LCD_LINE_1) || (line == LCD_LINE_3))) lcd_write_instruction_4d(LCD_SET_CURSOR | (line + 0x06));
     3d8:	66 23       	and	r22, r22
     3da:	11 f0       	breq	.+4      	; 0x3e0 <print_LCD_segment+0x1c>
     3dc:	64 31       	cpi	r22, 0x14	; 20
     3de:	31 f4       	brne	.+12     	; 0x3ec <print_LCD_segment+0x28>
     3e0:	86 e0       	ldi	r24, 0x06	; 6
     3e2:	86 0f       	add	r24, r22
     3e4:	80 68       	ori	r24, 0x80	; 128
     3e6:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
     3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <print_LCD_segment+0x32>
		else lcd_write_instruction_4d(LCD_SET_CURSOR | (line + 0x0A));
     3ec:	8a e0       	ldi	r24, 0x0A	; 10
     3ee:	86 0f       	add	r24, r22
     3f0:	80 68       	ori	r24, 0x80	; 128
     3f2:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
	}
	lcd_write_string_4d(input_string);
     3f6:	ce 01       	movw	r24, r28
     3f8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_write_string_4d>
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <clear_LCD_segment>:

void clear_LCD_segment(uint8_t line, uint8_t segment) {
	if (segment == 0) {
     402:	61 11       	cpse	r22, r1
     404:	12 c0       	rjmp	.+36     	; 0x42a <clear_LCD_segment+0x28>
		if (((line == LCD_LINE_1) || (line == LCD_LINE_3))) print_LCD_segment("       ", line, segment);
     406:	88 23       	and	r24, r24
     408:	11 f0       	breq	.+4      	; 0x40e <clear_LCD_segment+0xc>
     40a:	84 31       	cpi	r24, 0x14	; 20
     40c:	39 f4       	brne	.+14     	; 0x41c <clear_LCD_segment+0x1a>
     40e:	40 e0       	ldi	r20, 0x00	; 0
     410:	68 2f       	mov	r22, r24
     412:	83 ec       	ldi	r24, 0xC3	; 195
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <print_LCD_segment>
     41a:	08 95       	ret
		else print_LCD_segment("          ", line, segment);
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	68 2f       	mov	r22, r24
     420:	80 ec       	ldi	r24, 0xC0	; 192
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <print_LCD_segment>
     428:	08 95       	ret
	}
	else {
		if (((line == LCD_LINE_1) || (line == LCD_LINE_3))) print_LCD_segment("             ", line, segment);
     42a:	88 23       	and	r24, r24
     42c:	11 f0       	breq	.+4      	; 0x432 <clear_LCD_segment+0x30>
     42e:	84 31       	cpi	r24, 0x14	; 20
     430:	39 f4       	brne	.+14     	; 0x440 <clear_LCD_segment+0x3e>
     432:	46 2f       	mov	r20, r22
     434:	68 2f       	mov	r22, r24
     436:	8d eb       	ldi	r24, 0xBD	; 189
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <print_LCD_segment>
     43e:	08 95       	ret
		else print_LCD_segment("           ", line, segment);
     440:	46 2f       	mov	r20, r22
     442:	68 2f       	mov	r22, r24
     444:	8f eb       	ldi	r24, 0xBF	; 191
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <print_LCD_segment>
     44c:	08 95       	ret

0000044e <beep>:
	memset(UI.amplitude_A, 0, 4);
	memset(UI.amplitude_B, 0, 4);
	memset(UI.bias_A, 0, 5);
	memset(UI.bias_B, 0, 5);
	memset(UI.type_A, 0, 4);
	memset(UI.type_B, 0, 4);
     44e:	86 e4       	ldi	r24, 0x46	; 70
     450:	db 9a       	sbi	0x1b, 3	; 27
     452:	e3 e5       	ldi	r30, 0x53	; 83
     454:	f3 e0       	ldi	r31, 0x03	; 3
     456:	31 97       	sbiw	r30, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <beep+0x8>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <beep+0xe>
     45c:	00 00       	nop
     45e:	db 98       	cbi	0x1b, 3	; 27
     460:	e3 e5       	ldi	r30, 0x53	; 83
     462:	f3 e0       	ldi	r31, 0x03	; 3
     464:	31 97       	sbiw	r30, 0x01	; 1
     466:	f1 f7       	brne	.-4      	; 0x464 <beep+0x16>
     468:	00 c0       	rjmp	.+0      	; 0x46a <beep+0x1c>
     46a:	00 00       	nop
     46c:	81 50       	subi	r24, 0x01	; 1
     46e:	81 f7       	brne	.-32     	; 0x450 <beep+0x2>
     470:	08 95       	ret

00000472 <play_melody>:
     472:	88 23       	and	r24, r24
     474:	b1 f1       	breq	.+108    	; 0x4e2 <play_melody+0x70>
     476:	8c ee       	ldi	r24, 0xEC	; 236
     478:	db 9a       	sbi	0x1b, 3	; 27
     47a:	e3 e5       	ldi	r30, 0x53	; 83
     47c:	f3 e0       	ldi	r31, 0x03	; 3
     47e:	31 97       	sbiw	r30, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <play_melody+0xc>
     482:	00 c0       	rjmp	.+0      	; 0x484 <play_melody+0x12>
     484:	00 00       	nop
     486:	db 98       	cbi	0x1b, 3	; 27
     488:	e3 e5       	ldi	r30, 0x53	; 83
     48a:	f3 e0       	ldi	r31, 0x03	; 3
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <play_melody+0x1a>
     490:	00 c0       	rjmp	.+0      	; 0x492 <play_melody+0x20>
     492:	00 00       	nop
     494:	81 50       	subi	r24, 0x01	; 1
     496:	81 f7       	brne	.-32     	; 0x478 <play_melody+0x6>
     498:	88 e2       	ldi	r24, 0x28	; 40
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	db 9a       	sbi	0x1b, 3	; 27
     49e:	e3 ea       	ldi	r30, 0xA3	; 163
     4a0:	f2 e0       	ldi	r31, 0x02	; 2
     4a2:	31 97       	sbiw	r30, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <play_melody+0x30>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <play_melody+0x36>
     4a8:	00 00       	nop
     4aa:	db 98       	cbi	0x1b, 3	; 27
     4ac:	e3 ea       	ldi	r30, 0xA3	; 163
     4ae:	f2 e0       	ldi	r31, 0x02	; 2
     4b0:	31 97       	sbiw	r30, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <play_melody+0x3e>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <play_melody+0x44>
     4b6:	00 00       	nop
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	81 f7       	brne	.-32     	; 0x49c <play_melody+0x2a>
     4bc:	80 ec       	ldi	r24, 0xC0	; 192
     4be:	92 e0       	ldi	r25, 0x02	; 2
     4c0:	db 9a       	sbi	0x1b, 3	; 27
     4c2:	e7 e3       	ldi	r30, 0x37	; 55
     4c4:	f2 e0       	ldi	r31, 0x02	; 2
     4c6:	31 97       	sbiw	r30, 0x01	; 1
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <play_melody+0x54>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <play_melody+0x5a>
     4cc:	00 00       	nop
     4ce:	db 98       	cbi	0x1b, 3	; 27
     4d0:	e7 e3       	ldi	r30, 0x37	; 55
     4d2:	f2 e0       	ldi	r31, 0x02	; 2
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <play_melody+0x62>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <play_melody+0x68>
     4da:	00 00       	nop
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	81 f7       	brne	.-32     	; 0x4c0 <play_melody+0x4e>
     4e0:	08 95       	ret
     4e2:	88 e2       	ldi	r24, 0x28	; 40
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	db 9a       	sbi	0x1b, 3	; 27
     4e8:	e3 ea       	ldi	r30, 0xA3	; 163
     4ea:	f2 e0       	ldi	r31, 0x02	; 2
     4ec:	31 97       	sbiw	r30, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <play_melody+0x7a>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <play_melody+0x80>
     4f2:	00 00       	nop
     4f4:	db 98       	cbi	0x1b, 3	; 27
     4f6:	e3 ea       	ldi	r30, 0xA3	; 163
     4f8:	f2 e0       	ldi	r31, 0x02	; 2
     4fa:	31 97       	sbiw	r30, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <play_melody+0x88>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <play_melody+0x8e>
     500:	00 00       	nop
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	81 f7       	brne	.-32     	; 0x4e6 <play_melody+0x74>
     506:	8c ee       	ldi	r24, 0xEC	; 236
     508:	db 9a       	sbi	0x1b, 3	; 27
     50a:	e3 e5       	ldi	r30, 0x53	; 83
     50c:	f3 e0       	ldi	r31, 0x03	; 3
     50e:	31 97       	sbiw	r30, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <play_melody+0x9c>
     512:	00 c0       	rjmp	.+0      	; 0x514 <play_melody+0xa2>
     514:	00 00       	nop
     516:	db 98       	cbi	0x1b, 3	; 27
     518:	e3 e5       	ldi	r30, 0x53	; 83
     51a:	f3 e0       	ldi	r31, 0x03	; 3
     51c:	31 97       	sbiw	r30, 0x01	; 1
     51e:	f1 f7       	brne	.-4      	; 0x51c <play_melody+0xaa>
     520:	00 c0       	rjmp	.+0      	; 0x522 <play_melody+0xb0>
     522:	00 00       	nop
     524:	81 50       	subi	r24, 0x01	; 1
     526:	81 f7       	brne	.-32     	; 0x508 <play_melody+0x96>
     528:	80 e6       	ldi	r24, 0x60	; 96
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	db 9a       	sbi	0x1b, 3	; 27
     52e:	ef e6       	ldi	r30, 0x6F	; 111
     530:	f4 e0       	ldi	r31, 0x04	; 4
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <play_melody+0xc0>
     536:	00 c0       	rjmp	.+0      	; 0x538 <play_melody+0xc6>
     538:	00 00       	nop
     53a:	db 98       	cbi	0x1b, 3	; 27
     53c:	ef e6       	ldi	r30, 0x6F	; 111
     53e:	f4 e0       	ldi	r31, 0x04	; 4
     540:	31 97       	sbiw	r30, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <play_melody+0xce>
     544:	00 c0       	rjmp	.+0      	; 0x546 <play_melody+0xd4>
     546:	00 00       	nop
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	81 f7       	brne	.-32     	; 0x52c <play_melody+0xba>
     54c:	08 95       	ret

0000054e <Init_Ports>:
     54e:	84 b3       	in	r24, 0x14	; 20
     550:	8c 6f       	ori	r24, 0xFC	; 252
     552:	84 bb       	out	0x14, r24	; 20
     554:	d4 9a       	sbi	0x1a, 4	; 26
     556:	87 b3       	in	r24, 0x17	; 23
     558:	8c 61       	ori	r24, 0x1C	; 28
     55a:	87 bb       	out	0x17, r24	; 23
     55c:	87 b3       	in	r24, 0x17	; 23
     55e:	83 60       	ori	r24, 0x03	; 3
     560:	87 bb       	out	0x17, r24	; 23
     562:	81 b3       	in	r24, 0x11	; 17
     564:	80 6f       	ori	r24, 0xF0	; 240
     566:	81 bb       	out	0x11, r24	; 17
     568:	8a b3       	in	r24, 0x1a	; 26
     56a:	8c 7f       	andi	r24, 0xFC	; 252
     56c:	8a bb       	out	0x1a, r24	; 26
     56e:	87 b3       	in	r24, 0x17	; 23
     570:	80 6a       	ori	r24, 0xA0	; 160
     572:	87 bb       	out	0x17, r24	; 23
     574:	be 98       	cbi	0x17, 6	; 23
     576:	89 9a       	sbi	0x11, 1	; 17
     578:	88 98       	cbi	0x11, 0	; 17
     57a:	84 b3       	in	r24, 0x14	; 20
     57c:	83 60       	ori	r24, 0x03	; 3
     57e:	84 bb       	out	0x14, r24	; 20
     580:	8a 98       	cbi	0x11, 2	; 17
     582:	8a b3       	in	r24, 0x1a	; 26
     584:	8c 60       	ori	r24, 0x0C	; 12
     586:	8a bb       	out	0x1a, r24	; 26
     588:	08 95       	ret

0000058a <Init_ADC>:
     58a:	86 b1       	in	r24, 0x06	; 6
     58c:	87 68       	ori	r24, 0x87	; 135
     58e:	86 b9       	out	0x06, r24	; 6
     590:	3e 9a       	sbi	0x07, 6	; 7
     592:	08 95       	ret

00000594 <set_output_selection>:
     594:	63 30       	cpi	r22, 0x03	; 3
     596:	41 f4       	brne	.+16     	; 0x5a8 <set_output_selection+0x14>
     598:	85 30       	cpi	r24, 0x05	; 5
     59a:	11 f4       	brne	.+4      	; 0x5a0 <set_output_selection+0xc>
     59c:	a8 98       	cbi	0x15, 0	; 21
     59e:	08 95       	ret
     5a0:	86 30       	cpi	r24, 0x06	; 6
     5a2:	49 f4       	brne	.+18     	; 0x5b6 <set_output_selection+0x22>
     5a4:	a9 98       	cbi	0x15, 1	; 21
     5a6:	08 95       	ret
     5a8:	85 30       	cpi	r24, 0x05	; 5
     5aa:	11 f4       	brne	.+4      	; 0x5b0 <set_output_selection+0x1c>
     5ac:	a8 9a       	sbi	0x15, 0	; 21
     5ae:	08 95       	ret
     5b0:	86 30       	cpi	r24, 0x06	; 6
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <set_output_selection+0x22>
     5b4:	a9 9a       	sbi	0x15, 1	; 21
     5b6:	08 95       	ret

000005b8 <set_functionality>:
     5b8:	8f 92       	push	r8
     5ba:	9f 92       	push	r9
     5bc:	af 92       	push	r10
     5be:	bf 92       	push	r11
     5c0:	ef 92       	push	r14
     5c2:	ff 92       	push	r15
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	f8 2e       	mov	r15, r24
     5ce:	4a 01       	movw	r8, r20
     5d0:	5b 01       	movw	r10, r22
     5d2:	e2 2e       	mov	r14, r18
     5d4:	0e 94 42 13 	call	0x2684	; 0x2684 <Init_SPI_AD9834>
     5d8:	c5 01       	movw	r24, r10
     5da:	b4 01       	movw	r22, r8
     5dc:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__floatunsisf>
     5e0:	27 e7       	ldi	r18, 0x77	; 119
     5e2:	3c ec       	ldi	r19, 0xCC	; 204
     5e4:	4b e2       	ldi	r20, 0x2B	; 43
     5e6:	51 e4       	ldi	r21, 0x41	; 65
     5e8:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__mulsf3>
     5ec:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fixunssfsi>
     5f0:	eb 01       	movw	r28, r22
     5f2:	df 73       	andi	r29, 0x3F	; 63
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	07 2e       	mov	r0, r23
     5fa:	7e e0       	ldi	r23, 0x0E	; 14
     5fc:	b6 95       	lsr	r27
     5fe:	a7 95       	ror	r26
     600:	97 95       	ror	r25
     602:	87 95       	ror	r24
     604:	7a 95       	dec	r23
     606:	d1 f7       	brne	.-12     	; 0x5fc <set_functionality+0x44>
     608:	70 2d       	mov	r23, r0
     60a:	8c 01       	movw	r16, r24
     60c:	1f 73       	andi	r17, 0x3F	; 63
     60e:	4f 2d       	mov	r20, r15
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	81 e2       	ldi	r24, 0x21	; 33
     614:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     618:	8d 2f       	mov	r24, r29
     61a:	8f 73       	andi	r24, 0x3F	; 63
     61c:	4f 2d       	mov	r20, r15
     61e:	6c 2f       	mov	r22, r28
     620:	80 64       	ori	r24, 0x40	; 64
     622:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     626:	81 2f       	mov	r24, r17
     628:	8f 73       	andi	r24, 0x3F	; 63
     62a:	4f 2d       	mov	r20, r15
     62c:	60 2f       	mov	r22, r16
     62e:	80 64       	ori	r24, 0x40	; 64
     630:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     634:	4f 2d       	mov	r20, r15
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	80 ec       	ldi	r24, 0xC0	; 192
     63a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	e8 16       	cp	r14, r24
     642:	61 f0       	breq	.+24     	; 0x65c <set_functionality+0xa4>
     644:	83 e0       	ldi	r24, 0x03	; 3
     646:	e8 16       	cp	r14, r24
     648:	79 f0       	breq	.+30     	; 0x668 <set_functionality+0xb0>
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	e8 12       	cpse	r14, r24
     64e:	12 c0       	rjmp	.+36     	; 0x674 <set_functionality+0xbc>
     650:	4f 2d       	mov	r20, r15
     652:	60 e2       	ldi	r22, 0x20	; 32
     654:	80 e2       	ldi	r24, 0x20	; 32
     656:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     65a:	11 c0       	rjmp	.+34     	; 0x67e <set_functionality+0xc6>
     65c:	4f 2d       	mov	r20, r15
     65e:	62 e0       	ldi	r22, 0x02	; 2
     660:	80 e2       	ldi	r24, 0x20	; 32
     662:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     666:	0b c0       	rjmp	.+22     	; 0x67e <set_functionality+0xc6>
     668:	4f 2d       	mov	r20, r15
     66a:	68 e2       	ldi	r22, 0x28	; 40
     66c:	80 e2       	ldi	r24, 0x20	; 32
     66e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     672:	05 c0       	rjmp	.+10     	; 0x67e <set_functionality+0xc6>
     674:	4f 2d       	mov	r20, r15
     676:	60 e8       	ldi	r22, 0x80	; 128
     678:	80 e2       	ldi	r24, 0x20	; 32
     67a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     67e:	6e 2d       	mov	r22, r14
     680:	8f 2d       	mov	r24, r15
     682:	0e 94 ca 02 	call	0x594	; 0x594 <set_output_selection>
     686:	0e 94 51 13 	call	0x26a2	; 0x26a2 <Init_SPI_All>
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	ff 90       	pop	r15
     694:	ef 90       	pop	r14
     696:	bf 90       	pop	r11
     698:	af 90       	pop	r10
     69a:	9f 90       	pop	r9
     69c:	8f 90       	pop	r8
     69e:	08 95       	ret

000006a0 <set_amplitude>:
     6a0:	2f ef       	ldi	r18, 0xFF	; 255
     6a2:	3f e0       	ldi	r19, 0x0F	; 15
     6a4:	28 1b       	sub	r18, r24
     6a6:	39 0b       	sbc	r19, r25
     6a8:	83 2f       	mov	r24, r19
     6aa:	8f 70       	andi	r24, 0x0F	; 15
     6ac:	65 30       	cpi	r22, 0x05	; 5
     6ae:	41 f4       	brne	.+16     	; 0x6c0 <set_amplitude+0x20>
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	62 2f       	mov	r22, r18
     6b4:	80 6f       	ori	r24, 0xF0	; 240
     6b6:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	08 95       	ret
     6c0:	66 30       	cpi	r22, 0x06	; 6
     6c2:	41 f4       	brne	.+16     	; 0x6d4 <set_amplitude+0x34>
     6c4:	42 e0       	ldi	r20, 0x02	; 2
     6c6:	62 2f       	mov	r22, r18
     6c8:	80 6f       	ori	r24, 0xF0	; 240
     6ca:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	08 95       	ret
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	9f ef       	ldi	r25, 0xFF	; 255
     6d8:	08 95       	ret

000006da <poll_switch>:
     6da:	82 99       	sbic	0x10, 2	; 16
     6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <poll_switch+0xc>
     6de:	82 9b       	sbis	0x10, 2	; 16
     6e0:	fe cf       	rjmp	.-4      	; 0x6de <poll_switch+0x4>
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	08 95       	ret
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	08 95       	ret

000006ea <set_LCD_contrast>:
     6ea:	2f ef       	ldi	r18, 0xFF	; 255
     6ec:	82 9f       	mul	r24, r18
     6ee:	c0 01       	movw	r24, r0
     6f0:	11 24       	eor	r1, r1
     6f2:	64 e6       	ldi	r22, 0x64	; 100
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	0e 94 2e 19 	call	0x325c	; 0x325c <__divmodhi4>
     6fa:	60 95       	com	r22
     6fc:	47 e0       	ldi	r20, 0x07	; 7
     6fe:	81 e1       	ldi	r24, 0x11	; 17
     700:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     704:	08 95       	ret

00000706 <set_LCD_brightness>:
     706:	85 36       	cpi	r24, 0x65	; 101
     708:	f8 f4       	brcc	.+62     	; 0x748 <set_LCD_brightness+0x42>
     70a:	29 e1       	ldi	r18, 0x19	; 25
     70c:	82 9f       	mul	r24, r18
     70e:	c0 01       	movw	r24, r0
     710:	11 24       	eor	r1, r1
     712:	64 e6       	ldi	r22, 0x64	; 100
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	0e 94 2e 19 	call	0x325c	; 0x325c <__divmodhi4>
     71a:	65 5b       	subi	r22, 0xB5	; 181
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__floatsisf>
     726:	2d ec       	ldi	r18, 0xCD	; 205
     728:	3c ec       	ldi	r19, 0xCC	; 204
     72a:	43 e2       	ldi	r20, 0x23	; 35
     72c:	52 e4       	ldi	r21, 0x42	; 66
     72e:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__mulsf3>
     732:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fixunssfsi>
     736:	87 2f       	mov	r24, r23
     738:	8f 70       	andi	r24, 0x0F	; 15
     73a:	42 e0       	ldi	r20, 0x02	; 2
     73c:	80 67       	ori	r24, 0x70	; 112
     73e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	08 95       	ret
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	9f ef       	ldi	r25, 0xFF	; 255
     74c:	08 95       	ret

0000074e <set_animated_brightness>:
     74e:	cf 93       	push	r28
     750:	c0 e0       	ldi	r28, 0x00	; 0
     752:	8c 2f       	mov	r24, r28
     754:	0e 94 83 03 	call	0x706	; 0x706 <set_LCD_brightness>
     758:	8f e1       	ldi	r24, 0x1F	; 31
     75a:	9e e4       	ldi	r25, 0x4E	; 78
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <set_animated_brightness+0xe>
     760:	00 c0       	rjmp	.+0      	; 0x762 <set_animated_brightness+0x14>
     762:	00 00       	nop
     764:	cf 5f       	subi	r28, 0xFF	; 255
     766:	c5 36       	cpi	r28, 0x65	; 101
     768:	a1 f7       	brne	.-24     	; 0x752 <set_animated_brightness+0x4>
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <Init_UI>:
     76e:	0e 94 a7 03 	call	0x74e	; 0x74e <set_animated_brightness>
     772:	84 e6       	ldi	r24, 0x64	; 100
     774:	0e 94 75 03 	call	0x6ea	; 0x6ea <set_LCD_contrast>
     778:	0e 94 80 01 	call	0x300	; 0x300 <LCD_logo_display>
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	0e 94 39 02 	call	0x472	; 0x472 <play_melody>
     782:	2f ef       	ldi	r18, 0xFF	; 255
     784:	83 ed       	ldi	r24, 0xD3	; 211
     786:	90 e3       	ldi	r25, 0x30	; 48
     788:	21 50       	subi	r18, 0x01	; 1
     78a:	80 40       	sbci	r24, 0x00	; 0
     78c:	90 40       	sbci	r25, 0x00	; 0
     78e:	e1 f7       	brne	.-8      	; 0x788 <Init_UI+0x1a>
     790:	00 c0       	rjmp	.+0      	; 0x792 <Init_UI+0x24>
     792:	00 00       	nop
     794:	08 95       	ret

00000796 <set_dc_bias>:
     796:	7f 70       	andi	r23, 0x0F	; 15
     798:	85 30       	cpi	r24, 0x05	; 5
     79a:	19 f0       	breq	.+6      	; 0x7a2 <set_dc_bias+0xc>
     79c:	86 30       	cpi	r24, 0x06	; 6
     79e:	99 f0       	breq	.+38     	; 0x7c6 <set_dc_bias+0x30>
     7a0:	24 c0       	rjmp	.+72     	; 0x7ea <set_dc_bias+0x54>
     7a2:	44 23       	and	r20, r20
     7a4:	41 f0       	breq	.+16     	; 0x7b6 <set_dc_bias+0x20>
     7a6:	43 e0       	ldi	r20, 0x03	; 3
     7a8:	87 2f       	mov	r24, r23
     7aa:	80 67       	ori	r24, 0x70	; 112
     7ac:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	08 95       	ret
     7b6:	43 e0       	ldi	r20, 0x03	; 3
     7b8:	87 2f       	mov	r24, r23
     7ba:	80 6f       	ori	r24, 0xF0	; 240
     7bc:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	08 95       	ret
     7c6:	44 23       	and	r20, r20
     7c8:	41 f0       	breq	.+16     	; 0x7da <set_dc_bias+0x44>
     7ca:	44 e0       	ldi	r20, 0x04	; 4
     7cc:	87 2f       	mov	r24, r23
     7ce:	80 67       	ori	r24, 0x70	; 112
     7d0:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	08 95       	ret
     7da:	44 e0       	ldi	r20, 0x04	; 4
     7dc:	87 2f       	mov	r24, r23
     7de:	80 6f       	ori	r24, 0xF0	; 240
     7e0:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	08 95       	ret
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	9f ef       	ldi	r25, 0xFF	; 255
     7ee:	08 95       	ret

000007f0 <erase_EEPROM_1K>:
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	c0 e0       	ldi	r28, 0x00	; 0
     7f6:	d0 e0       	ldi	r29, 0x00	; 0
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	ce 01       	movw	r24, r28
     7fc:	0e 94 cc 1c 	call	0x3998	; 0x3998 <eeprom_write_byte>
     800:	21 96       	adiw	r28, 0x01	; 1
     802:	c1 38       	cpi	r28, 0x81	; 129
     804:	d1 05       	cpc	r29, r1
     806:	c1 f7       	brne	.-16     	; 0x7f8 <erase_EEPROM_1K+0x8>
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <shutdown_sequence>:
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	d8 2f       	mov	r29, r24
     814:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
     818:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	8b ec       	ldi	r24, 0xCB	; 203
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     826:	60 e4       	ldi	r22, 0x40	; 64
     828:	80 ee       	ldi	r24, 0xE0	; 224
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     830:	64 e1       	ldi	r22, 0x14	; 20
     832:	85 ef       	ldi	r24, 0xF5	; 245
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     83a:	c5 e3       	ldi	r28, 0x35	; 53
     83c:	43 e0       	ldi	r20, 0x03	; 3
     83e:	64 e1       	ldi	r22, 0x14	; 20
     840:	8c 2f       	mov	r24, r28
     842:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
     846:	2f ef       	ldi	r18, 0xFF	; 255
     848:	89 e6       	ldi	r24, 0x69	; 105
     84a:	98 e1       	ldi	r25, 0x18	; 24
     84c:	21 50       	subi	r18, 0x01	; 1
     84e:	80 40       	sbci	r24, 0x00	; 0
     850:	90 40       	sbci	r25, 0x00	; 0
     852:	e1 f7       	brne	.-8      	; 0x84c <shutdown_sequence+0x3e>
     854:	00 c0       	rjmp	.+0      	; 0x856 <shutdown_sequence+0x48>
     856:	00 00       	nop
     858:	c1 50       	subi	r28, 0x01	; 1
     85a:	c0 33       	cpi	r28, 0x30	; 48
     85c:	79 f7       	brne	.-34     	; 0x83c <shutdown_sequence+0x2e>
     85e:	d1 11       	cpse	r29, r1
     860:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <erase_EEPROM_1K>
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	0e 94 39 02 	call	0x472	; 0x472 <play_melody>
     86a:	da 98       	cbi	0x1b, 2	; 27
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <create_wifi_command>:
     872:	cf 92       	push	r12
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	c6 e9       	ldi	r28, 0x96	; 150
     884:	d4 e0       	ldi	r29, 0x04	; 4
     886:	80 e8       	ldi	r24, 0x80	; 128
     888:	fe 01       	movw	r30, r28
     88a:	11 92       	st	Z+, r1
     88c:	8a 95       	dec	r24
     88e:	e9 f7       	brne	.-6      	; 0x88a <create_wifi_command+0x18>
     890:	09 e5       	ldi	r16, 0x59	; 89
     892:	15 e0       	ldi	r17, 0x05	; 5
     894:	80 e2       	ldi	r24, 0x20	; 32
     896:	f8 01       	movw	r30, r16
     898:	11 92       	st	Z+, r1
     89a:	8a 95       	dec	r24
     89c:	e9 f7       	brne	.-6      	; 0x898 <create_wifi_command+0x26>
     89e:	0f 2e       	mov	r0, r31
     8a0:	f9 e7       	ldi	r31, 0x79	; 121
     8a2:	ef 2e       	mov	r14, r31
     8a4:	f5 e0       	ldi	r31, 0x05	; 5
     8a6:	ff 2e       	mov	r15, r31
     8a8:	f0 2d       	mov	r31, r0
     8aa:	80 e4       	ldi	r24, 0x40	; 64
     8ac:	f7 01       	movw	r30, r14
     8ae:	11 92       	st	Z+, r1
     8b0:	8a 95       	dec	r24
     8b2:	e9 f7       	brne	.-6      	; 0x8ae <create_wifi_command+0x3c>
     8b4:	0f 2e       	mov	r0, r31
     8b6:	f0 ed       	ldi	r31, 0xD0	; 208
     8b8:	cf 2e       	mov	r12, r31
     8ba:	f5 e0       	ldi	r31, 0x05	; 5
     8bc:	df 2e       	mov	r13, r31
     8be:	f0 2d       	mov	r31, r0
     8c0:	f6 01       	movw	r30, r12
     8c2:	10 82       	st	Z, r1
     8c4:	40 e2       	ldi	r20, 0x20	; 32
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	c8 01       	movw	r24, r16
     8ce:	0e 94 aa 1c 	call	0x3954	; 0x3954 <eeprom_read_block>
     8d2:	40 e4       	ldi	r20, 0x40	; 64
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	61 e2       	ldi	r22, 0x21	; 33
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	c7 01       	movw	r24, r14
     8dc:	0e 94 aa 1c 	call	0x3954	; 0x3954 <eeprom_read_block>
     8e0:	81 e6       	ldi	r24, 0x61	; 97
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 ba 1c 	call	0x3974	; 0x3974 <eeprom_read_byte>
     8e8:	f6 01       	movw	r30, r12
     8ea:	80 83       	st	Z, r24
     8ec:	ff 92       	push	r15
     8ee:	ef 92       	push	r14
     8f0:	1f 93       	push	r17
     8f2:	0f 93       	push	r16
     8f4:	8a e0       	ldi	r24, 0x0A	; 10
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	9f 93       	push	r25
     8fa:	8f 93       	push	r24
     8fc:	df 93       	push	r29
     8fe:	cf 93       	push	r28
     900:	0e 94 f7 19 	call	0x33ee	; 0x33ee <sprintf>
     904:	ed b7       	in	r30, 0x3d	; 61
     906:	fe b7       	in	r31, 0x3e	; 62
     908:	38 96       	adiw	r30, 0x08	; 8
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	fe bf       	out	0x3e, r31	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	ed bf       	out	0x3d, r30	; 61
     914:	ce 01       	movw	r24, r28
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	08 95       	ret

00000928 <save_wifi_credentials>:
     928:	40 e2       	ldi	r20, 0x20	; 32
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	89 e5       	ldi	r24, 0x59	; 89
     932:	95 e0       	ldi	r25, 0x05	; 5
     934:	0e 94 c2 1c 	call	0x3984	; 0x3984 <eeprom_write_block>
     938:	40 e4       	ldi	r20, 0x40	; 64
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	61 e2       	ldi	r22, 0x21	; 33
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	89 e7       	ldi	r24, 0x79	; 121
     942:	95 e0       	ldi	r25, 0x05	; 5
     944:	0e 94 c2 1c 	call	0x3984	; 0x3984 <eeprom_write_block>
     948:	60 91 d0 05 	lds	r22, 0x05D0	; 0x8005d0 <WIFI+0x77>
     94c:	81 e6       	ldi	r24, 0x61	; 97
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 cc 1c 	call	0x3998	; 0x3998 <eeprom_write_byte>
     954:	08 95       	ret

00000956 <retrieve_wifi_credentials>:
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	00 d0       	rcall	.+0      	; 0x95c <retrieve_wifi_credentials+0x6>
     95c:	1f 92       	push	r1
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	80 e2       	ldi	r24, 0x20	; 32
     964:	e9 e5       	ldi	r30, 0x59	; 89
     966:	f5 e0       	ldi	r31, 0x05	; 5
     968:	df 01       	movw	r26, r30
     96a:	1d 92       	st	X+, r1
     96c:	8a 95       	dec	r24
     96e:	e9 f7       	brne	.-6      	; 0x96a <retrieve_wifi_credentials+0x14>
     970:	80 e4       	ldi	r24, 0x40	; 64
     972:	e9 e7       	ldi	r30, 0x79	; 121
     974:	f5 e0       	ldi	r31, 0x05	; 5
     976:	df 01       	movw	r26, r30
     978:	1d 92       	st	X+, r1
     97a:	8a 95       	dec	r24
     97c:	e9 f7       	brne	.-6      	; 0x978 <retrieve_wifi_credentials+0x22>
     97e:	1b 82       	std	Y+3, r1	; 0x03
     980:	ea ed       	ldi	r30, 0xDA	; 218
     982:	f5 e0       	ldi	r31, 0x05	; 5
     984:	86 e0       	ldi	r24, 0x06	; 6
     986:	91 91       	ld	r25, Z+
     988:	9c 32       	cpi	r25, 0x2C	; 44
     98a:	49 f4       	brne	.+18     	; 0x99e <retrieve_wifi_credentials+0x48>
     98c:	90 81       	ld	r25, Z
     98e:	90 35       	cpi	r25, 0x50	; 80
     990:	31 f4       	brne	.+12     	; 0x99e <retrieve_wifi_credentials+0x48>
     992:	9f ef       	ldi	r25, 0xFF	; 255
     994:	98 0f       	add	r25, r24
     996:	99 83       	std	Y+1, r25	; 0x01
     998:	8e 5f       	subi	r24, 0xFE	; 254
     99a:	8a 83       	std	Y+2, r24	; 0x02
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <retrieve_wifi_credentials+0x4e>
     99e:	8f 5f       	subi	r24, 0xFF	; 255
     9a0:	86 32       	cpi	r24, 0x26	; 38
     9a2:	89 f7       	brne	.-30     	; 0x986 <retrieve_wifi_credentials+0x30>
     9a4:	4a 81       	ldd	r20, Y+2	; 0x02
     9a6:	24 2f       	mov	r18, r20
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	80 5c       	subi	r24, 0xC0	; 192
     9b0:	9f 4f       	sbci	r25, 0xFF	; 255
     9b2:	28 17       	cp	r18, r24
     9b4:	39 07       	cpc	r19, r25
     9b6:	cc f4       	brge	.+50     	; 0x9ea <retrieve_wifi_credentials+0x94>
     9b8:	f9 01       	movw	r30, r18
     9ba:	ec 52       	subi	r30, 0x2C	; 44
     9bc:	fa 4f       	sbci	r31, 0xFA	; 250
     9be:	80 81       	ld	r24, Z
     9c0:	8c 32       	cpi	r24, 0x2C	; 44
     9c2:	49 f4       	brne	.+18     	; 0x9d6 <retrieve_wifi_credentials+0x80>
     9c4:	f9 01       	movw	r30, r18
     9c6:	ec 52       	subi	r30, 0x2C	; 44
     9c8:	fa 4f       	sbci	r31, 0xFA	; 250
     9ca:	81 81       	ldd	r24, Z+1	; 0x01
     9cc:	85 34       	cpi	r24, 0x45	; 69
     9ce:	19 f4       	brne	.+6      	; 0x9d6 <retrieve_wifi_credentials+0x80>
     9d0:	41 50       	subi	r20, 0x01	; 1
     9d2:	4b 83       	std	Y+3, r20	; 0x03
     9d4:	0a c0       	rjmp	.+20     	; 0x9ea <retrieve_wifi_credentials+0x94>
     9d6:	4f 5f       	subi	r20, 0xFF	; 255
     9d8:	24 2f       	mov	r18, r20
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	8a 81       	ldd	r24, Y+2	; 0x02
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	80 5c       	subi	r24, 0xC0	; 192
     9e2:	9f 4f       	sbci	r25, 0xFF	; 255
     9e4:	28 17       	cp	r18, r24
     9e6:	39 07       	cpc	r19, r25
     9e8:	3c f3       	brlt	.-50     	; 0x9b8 <retrieve_wifi_credentials+0x62>
     9ea:	49 81       	ldd	r20, Y+1	; 0x01
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	45 50       	subi	r20, 0x05	; 5
     9f0:	51 09       	sbc	r21, r1
     9f2:	6a ed       	ldi	r22, 0xDA	; 218
     9f4:	75 e0       	ldi	r23, 0x05	; 5
     9f6:	89 e5       	ldi	r24, 0x59	; 89
     9f8:	95 e0       	ldi	r25, 0x05	; 5
     9fa:	0e 94 b6 19 	call	0x336c	; 0x336c <memcpy>
     9fe:	4b 81       	ldd	r20, Y+3	; 0x03
     a00:	8a 81       	ldd	r24, Y+2	; 0x02
     a02:	6a 81       	ldd	r22, Y+2	; 0x02
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	48 1b       	sub	r20, r24
     a08:	51 09       	sbc	r21, r1
     a0a:	4f 5f       	subi	r20, 0xFF	; 255
     a0c:	5f 4f       	sbci	r21, 0xFF	; 255
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	6c 52       	subi	r22, 0x2C	; 44
     a12:	7a 4f       	sbci	r23, 0xFA	; 250
     a14:	89 e7       	ldi	r24, 0x79	; 121
     a16:	95 e0       	ldi	r25, 0x05	; 5
     a18:	0e 94 b6 19 	call	0x336c	; 0x336c <memcpy>
     a1c:	eb 81       	ldd	r30, Y+3	; 0x03
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	ec 52       	subi	r30, 0x2C	; 44
     a22:	fa 4f       	sbci	r31, 0xFA	; 250
     a24:	83 81       	ldd	r24, Z+3	; 0x03
     a26:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <WIFI+0x77>
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <pack_mac_string>:
     a36:	e9 eb       	ldi	r30, 0xB9	; 185
     a38:	f5 e0       	ldi	r31, 0x05	; 5
     a3a:	8d e4       	ldi	r24, 0x4D	; 77
     a3c:	91 e4       	ldi	r25, 0x41	; 65
     a3e:	91 83       	std	Z+1, r25	; 0x01
     a40:	80 83       	st	Z, r24
     a42:	83 e4       	ldi	r24, 0x43	; 67
     a44:	9d e3       	ldi	r25, 0x3D	; 61
     a46:	93 83       	std	Z+3, r25	; 0x03
     a48:	82 83       	std	Z+2, r24	; 0x02
     a4a:	81 e1       	ldi	r24, 0x11	; 17
     a4c:	e0 ee       	ldi	r30, 0xE0	; 224
     a4e:	f5 e0       	ldi	r31, 0x05	; 5
     a50:	ad eb       	ldi	r26, 0xBD	; 189
     a52:	b5 e0       	ldi	r27, 0x05	; 5
     a54:	01 90       	ld	r0, Z+
     a56:	0d 92       	st	X+, r0
     a58:	8a 95       	dec	r24
     a5a:	e1 f7       	brne	.-8      	; 0xa54 <pack_mac_string+0x1e>
     a5c:	8d e0       	ldi	r24, 0x0D	; 13
     a5e:	9a e0       	ldi	r25, 0x0A	; 10
     a60:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <WIFI+0x76>
     a64:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <WIFI+0x75>
     a68:	08 95       	ret

00000a6a <halt_system>:
     a6a:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	8f e1       	ldi	r24, 0x1F	; 31
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     a78:	60 e4       	ldi	r22, 0x40	; 64
     a7a:	84 e3       	ldi	r24, 0x34	; 52
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     a82:	64 e1       	ldi	r22, 0x14	; 20
     a84:	89 e4       	ldi	r24, 0x49	; 73
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     a8c:	64 e5       	ldi	r22, 0x54	; 84
     a8e:	8e e5       	ldi	r24, 0x5E	; 94
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     a96:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
     a9a:	88 23       	and	r24, r24
     a9c:	e1 f3       	breq	.-8      	; 0xa96 <halt_system+0x2c>
     a9e:	83 e7       	ldi	r24, 0x73	; 115
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
     aa6:	2f ef       	ldi	r18, 0xFF	; 255
     aa8:	89 e6       	ldi	r24, 0x69	; 105
     aaa:	98 e1       	ldi	r25, 0x18	; 24
     aac:	21 50       	subi	r18, 0x01	; 1
     aae:	80 40       	sbci	r24, 0x00	; 0
     ab0:	90 40       	sbci	r25, 0x00	; 0
     ab2:	e1 f7       	brne	.-8      	; 0xaac <halt_system+0x42>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <halt_system+0x4c>
     ab6:	00 00       	nop
     ab8:	98 e0       	ldi	r25, 0x08	; 8
     aba:	88 e1       	ldi	r24, 0x18	; 24
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	a8 95       	wdr
     ac2:	81 bd       	out	0x21, r24	; 33
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	91 bd       	out	0x21, r25	; 33
     ac8:	ff cf       	rjmp	.-2      	; 0xac8 <halt_system+0x5e>

00000aca <set_volume>:
     aca:	2f ef       	ldi	r18, 0xFF	; 255
     acc:	82 9f       	mul	r24, r18
     ace:	c0 01       	movw	r24, r0
     ad0:	11 24       	eor	r1, r1
     ad2:	64 e6       	ldi	r22, 0x64	; 100
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	0e 94 2e 19 	call	0x325c	; 0x325c <__divmodhi4>
     ada:	60 95       	com	r22
     adc:	47 e0       	ldi	r20, 0x07	; 7
     ade:	80 e7       	ldi	r24, 0x70	; 112
     ae0:	0e 94 ff 12 	call	0x25fe	; 0x25fe <SPI_write_16bit>
     ae4:	08 95       	ret

00000ae6 <update_sg_param_value>:
     ae6:	90 91 db 05 	lds	r25, 0x05DB	; 0x8005db <UART+0x7>
     aea:	9d 30       	cpi	r25, 0x0D	; 13
     aec:	c9 f1       	breq	.+114    	; 0xb60 <update_sg_param_value+0x7a>
     aee:	30 91 dc 05 	lds	r19, 0x05DC	; 0x8005dc <UART+0x8>
     af2:	3d 30       	cpi	r19, 0x0D	; 13
     af4:	11 f4       	brne	.+4      	; 0xafa <update_sg_param_value+0x14>
     af6:	90 53       	subi	r25, 0x30	; 48
     af8:	21 c0       	rjmp	.+66     	; 0xb3c <update_sg_param_value+0x56>
     afa:	20 91 dd 05 	lds	r18, 0x05DD	; 0x8005dd <UART+0x9>
     afe:	2d 30       	cpi	r18, 0x0D	; 13
     b00:	51 f4       	brne	.+20     	; 0xb16 <update_sg_param_value+0x30>
     b02:	99 0f       	add	r25, r25
     b04:	20 ea       	ldi	r18, 0xA0	; 160
     b06:	29 0f       	add	r18, r25
     b08:	92 2f       	mov	r25, r18
     b0a:	99 0f       	add	r25, r25
     b0c:	99 0f       	add	r25, r25
     b0e:	92 0f       	add	r25, r18
     b10:	30 53       	subi	r19, 0x30	; 48
     b12:	93 0f       	add	r25, r19
     b14:	13 c0       	rjmp	.+38     	; 0xb3c <update_sg_param_value+0x56>
     b16:	40 91 de 05 	lds	r20, 0x05DE	; 0x8005de <UART+0xa>
     b1a:	4d 30       	cpi	r20, 0x0D	; 13
     b1c:	19 f5       	brne	.+70     	; 0xb64 <update_sg_param_value+0x7e>
     b1e:	33 0f       	add	r19, r19
     b20:	30 56       	subi	r19, 0x60	; 96
     b22:	43 2f       	mov	r20, r19
     b24:	44 0f       	add	r20, r20
     b26:	44 0f       	add	r20, r20
     b28:	34 0f       	add	r19, r20
     b2a:	20 53       	subi	r18, 0x30	; 48
     b2c:	32 0f       	add	r19, r18
     b2e:	20 ed       	ldi	r18, 0xD0	; 208
     b30:	29 0f       	add	r18, r25
     b32:	93 2f       	mov	r25, r19
     b34:	44 e6       	ldi	r20, 0x64	; 100
     b36:	24 9f       	mul	r18, r20
     b38:	90 0d       	add	r25, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	21 f4       	brne	.+8      	; 0xb48 <update_sg_param_value+0x62>
     b40:	90 93 d2 05 	sts	0x05D2, r25	; 0x8005d2 <LCD+0x1>
     b44:	89 2f       	mov	r24, r25
     b46:	08 95       	ret
     b48:	81 11       	cpse	r24, r1
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <update_sg_param_value+0x6e>
     b4c:	90 93 d1 05 	sts	0x05D1, r25	; 0x8005d1 <LCD>
     b50:	89 2f       	mov	r24, r25
     b52:	08 95       	ret
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	41 f4       	brne	.+16     	; 0xb68 <update_sg_param_value+0x82>
     b58:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <LCD+0x2>
     b5c:	89 2f       	mov	r24, r25
     b5e:	08 95       	ret
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	08 95       	ret
     b64:	84 e6       	ldi	r24, 0x64	; 100
     b66:	08 95       	ret
     b68:	89 2f       	mov	r24, r25
     b6a:	08 95       	ret

00000b6c <update_ac_power_status>:
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	00 d0       	rcall	.+0      	; 0xb72 <update_ac_power_status+0x6>
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	1a 82       	std	Y+2, r1	; 0x02
     b78:	19 82       	std	Y+1, r1	; 0x01
     b7a:	38 9a       	sbi	0x07, 0	; 7
     b7c:	36 9a       	sbi	0x06, 6	; 6
     b7e:	36 99       	sbic	0x06, 6	; 6
     b80:	fe cf       	rjmp	.-4      	; 0xb7e <update_ac_power_status+0x12>
     b82:	84 b1       	in	r24, 0x04	; 4
     b84:	95 b1       	in	r25, 0x05	; 5
     b86:	9a 83       	std	Y+2, r25	; 0x02
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	36 9a       	sbi	0x06, 6	; 6
     b8c:	36 99       	sbic	0x06, 6	; 6
     b8e:	fe cf       	rjmp	.-4      	; 0xb8c <update_ac_power_status+0x20>
     b90:	24 b1       	in	r18, 0x04	; 4
     b92:	35 b1       	in	r19, 0x05	; 5
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	82 0f       	add	r24, r18
     b9a:	93 1f       	adc	r25, r19
     b9c:	96 95       	lsr	r25
     b9e:	87 95       	ror	r24
     ba0:	9a 83       	std	Y+2, r25	; 0x02
     ba2:	89 83       	std	Y+1, r24	; 0x01
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	9a 81       	ldd	r25, Y+2	; 0x02
     ba8:	84 3f       	cpi	r24, 0xF4	; 244
     baa:	91 40       	sbci	r25, 0x01	; 1
     bac:	18 f4       	brcc	.+6      	; 0xbb4 <update_ac_power_status+0x48>
     bae:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <STATUS+0x1>
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <update_ac_power_status+0x4e>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <STATUS+0x1>
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	08 95       	ret

00000bc4 <get_battery_status>:
     bc4:	ec e8       	ldi	r30, 0x8C	; 140
     bc6:	f4 e0       	ldi	r31, 0x04	; 4
     bc8:	8a e0       	ldi	r24, 0x0A	; 10
     bca:	df 01       	movw	r26, r30
     bcc:	1d 92       	st	X+, r1
     bce:	8a 95       	dec	r24
     bd0:	e9 f7       	brne	.-6      	; 0xbcc <get_battery_status+0x8>
     bd2:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <STATUS>
     bd6:	1f 92       	push	r1
     bd8:	8f 93       	push	r24
     bda:	8f e7       	ldi	r24, 0x7F	; 127
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	9f 93       	push	r25
     be0:	8f 93       	push	r24
     be2:	1f 92       	push	r1
     be4:	8b e0       	ldi	r24, 0x0B	; 11
     be6:	8f 93       	push	r24
     be8:	ff 93       	push	r31
     bea:	ef 93       	push	r30
     bec:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
     bf0:	8d b7       	in	r24, 0x3d	; 61
     bf2:	9e b7       	in	r25, 0x3e	; 62
     bf4:	08 96       	adiw	r24, 0x08	; 8
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	9e bf       	out	0x3e, r25	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	8d bf       	out	0x3d, r24	; 61
     c00:	8c e8       	ldi	r24, 0x8C	; 140
     c02:	94 e0       	ldi	r25, 0x04	; 4
     c04:	08 95       	ret

00000c06 <get_ac_power_status>:
     c06:	88 e0       	ldi	r24, 0x08	; 8
     c08:	e4 e8       	ldi	r30, 0x84	; 132
     c0a:	f4 e0       	ldi	r31, 0x04	; 4
     c0c:	df 01       	movw	r26, r30
     c0e:	1d 92       	st	X+, r1
     c10:	8a 95       	dec	r24
     c12:	e9 f7       	brne	.-6      	; 0xc0e <get_ac_power_status+0x8>
     c14:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <STATUS+0x1>
     c18:	88 23       	and	r24, r24
     c1a:	99 f0       	breq	.+38     	; 0xc42 <get_ac_power_status+0x3c>
     c1c:	89 e8       	ldi	r24, 0x89	; 137
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	9f 93       	push	r25
     c22:	8f 93       	push	r24
     c24:	1f 92       	push	r1
     c26:	87 e0       	ldi	r24, 0x07	; 7
     c28:	8f 93       	push	r24
     c2a:	cf 01       	movw	r24, r30
     c2c:	9f 93       	push	r25
     c2e:	ef 93       	push	r30
     c30:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	09 c0       	rjmp	.+18     	; 0xc54 <get_ac_power_status+0x4e>
     c42:	89 e0       	ldi	r24, 0x09	; 9
     c44:	e1 e9       	ldi	r30, 0x91	; 145
     c46:	f1 e0       	ldi	r31, 0x01	; 1
     c48:	a4 e8       	ldi	r26, 0x84	; 132
     c4a:	b4 e0       	ldi	r27, 0x04	; 4
     c4c:	01 90       	ld	r0, Z+
     c4e:	0d 92       	st	X+, r0
     c50:	8a 95       	dec	r24
     c52:	e1 f7       	brne	.-8      	; 0xc4c <get_ac_power_status+0x46>
     c54:	84 e8       	ldi	r24, 0x84	; 132
     c56:	94 e0       	ldi	r25, 0x04	; 4
     c58:	08 95       	ret

00000c5a <get_li_ion_percentage>:
     c5a:	84 3e       	cpi	r24, 0xE4	; 228
     c5c:	2c e0       	ldi	r18, 0x0C	; 12
     c5e:	92 07       	cpc	r25, r18
     c60:	08 f4       	brcc	.+2      	; 0xc64 <get_li_ion_percentage+0xa>
     c62:	a6 c0       	rjmp	.+332    	; 0xdb0 <get_li_ion_percentage+0x156>
     c64:	ac 01       	movw	r20, r24
     c66:	9c 01       	movw	r18, r24
     c68:	24 5e       	subi	r18, 0xE4	; 228
     c6a:	3c 40       	sbci	r19, 0x0C	; 12
     c6c:	24 3f       	cpi	r18, 0xF4	; 244
     c6e:	31 40       	sbci	r19, 0x01	; 1
     c70:	b0 f4       	brcc	.+44     	; 0xc9e <get_li_ion_percentage+0x44>
     c72:	94 e2       	ldi	r25, 0x24	; 36
     c74:	94 9f       	mul	r25, r20
     c76:	b0 01       	movw	r22, r0
     c78:	95 9f       	mul	r25, r21
     c7a:	70 0d       	add	r23, r0
     c7c:	11 24       	eor	r1, r1
     c7e:	60 51       	subi	r22, 0x10	; 16
     c80:	70 4d       	sbci	r23, 0xD0	; 208
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__floatunsisf>
     c8a:	2f e6       	ldi	r18, 0x6F	; 111
     c8c:	32 e1       	ldi	r19, 0x12	; 18
     c8e:	43 e0       	ldi	r20, 0x03	; 3
     c90:	5b e3       	ldi	r21, 0x3B	; 59
     c92:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__mulsf3>
     c96:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fixunssfsi>
     c9a:	86 2f       	mov	r24, r22
     c9c:	08 95       	ret
     c9e:	9a 01       	movw	r18, r20
     ca0:	28 5d       	subi	r18, 0xD8	; 216
     ca2:	3e 40       	sbci	r19, 0x0E	; 14
     ca4:	24 36       	cpi	r18, 0x64	; 100
     ca6:	31 05       	cpc	r19, r1
     ca8:	e0 f4       	brcc	.+56     	; 0xce2 <get_li_ion_percentage+0x88>
     caa:	8a e1       	ldi	r24, 0x1A	; 26
     cac:	84 9f       	mul	r24, r20
     cae:	b0 01       	movw	r22, r0
     cb0:	85 9f       	mul	r24, r21
     cb2:	70 0d       	add	r23, r0
     cb4:	11 24       	eor	r1, r1
     cb6:	60 5f       	subi	r22, 0xF0	; 240
     cb8:	71 48       	sbci	r23, 0x81	; 129
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__floatunsisf>
     cc2:	2a e0       	ldi	r18, 0x0A	; 10
     cc4:	37 ed       	ldi	r19, 0xD7	; 215
     cc6:	43 e2       	ldi	r20, 0x23	; 35
     cc8:	5c e3       	ldi	r21, 0x3C	; 60
     cca:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__mulsf3>
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e1       	ldi	r20, 0x10	; 16
     cd4:	52 e4       	ldi	r21, 0x42	; 66
     cd6:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__addsf3>
     cda:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fixunssfsi>
     cde:	86 2f       	mov	r24, r22
     ce0:	08 95       	ret
     ce2:	9a 01       	movw	r18, r20
     ce4:	2c 53       	subi	r18, 0x3C	; 60
     ce6:	3f 40       	sbci	r19, 0x0F	; 15
     ce8:	24 36       	cpi	r18, 0x64	; 100
     cea:	31 05       	cpc	r19, r1
     cec:	e0 f4       	brcc	.+56     	; 0xd26 <get_li_ion_percentage+0xcc>
     cee:	8b e0       	ldi	r24, 0x0B	; 11
     cf0:	84 9f       	mul	r24, r20
     cf2:	b0 01       	movw	r22, r0
     cf4:	85 9f       	mul	r24, r21
     cf6:	70 0d       	add	r23, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	64 59       	subi	r22, 0x94	; 148
     cfc:	77 4a       	sbci	r23, 0xA7	; 167
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__floatunsisf>
     d06:	2a e0       	ldi	r18, 0x0A	; 10
     d08:	37 ed       	ldi	r19, 0xD7	; 215
     d0a:	43 e2       	ldi	r20, 0x23	; 35
     d0c:	5c e3       	ldi	r21, 0x3C	; 60
     d0e:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__mulsf3>
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	48 e7       	ldi	r20, 0x78	; 120
     d18:	52 e4       	ldi	r21, 0x42	; 66
     d1a:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__addsf3>
     d1e:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fixunssfsi>
     d22:	86 2f       	mov	r24, r22
     d24:	08 95       	ret
     d26:	ca 01       	movw	r24, r20
     d28:	80 5a       	subi	r24, 0xA0	; 160
     d2a:	9f 40       	sbci	r25, 0x0F	; 15
     d2c:	84 36       	cpi	r24, 0x64	; 100
     d2e:	91 05       	cpc	r25, r1
     d30:	e8 f4       	brcc	.+58     	; 0xd6c <get_li_ion_percentage+0x112>
     d32:	ba 01       	movw	r22, r20
     d34:	60 5a       	subi	r22, 0xA0	; 160
     d36:	7f 4f       	sbci	r23, 0xFF	; 255
     d38:	62 95       	swap	r22
     d3a:	72 95       	swap	r23
     d3c:	70 7f       	andi	r23, 0xF0	; 240
     d3e:	76 27       	eor	r23, r22
     d40:	60 7f       	andi	r22, 0xF0	; 240
     d42:	76 27       	eor	r23, r22
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__floatunsisf>
     d4c:	2a e0       	ldi	r18, 0x0A	; 10
     d4e:	37 ed       	ldi	r19, 0xD7	; 215
     d50:	43 e2       	ldi	r20, 0x23	; 35
     d52:	5c e3       	ldi	r21, 0x3C	; 60
     d54:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__mulsf3>
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	42 e9       	ldi	r20, 0x92	; 146
     d5e:	52 e4       	ldi	r21, 0x42	; 66
     d60:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__addsf3>
     d64:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fixunssfsi>
     d68:	86 2f       	mov	r24, r22
     d6a:	08 95       	ret
     d6c:	ca 01       	movw	r24, r20
     d6e:	84 50       	subi	r24, 0x04	; 4
     d70:	90 41       	sbci	r25, 0x10	; 16
     d72:	84 36       	cpi	r24, 0x64	; 100
     d74:	91 05       	cpc	r25, r1
     d76:	f0 f4       	brcc	.+60     	; 0xdb4 <get_li_ion_percentage+0x15a>
     d78:	8b e0       	ldi	r24, 0x0B	; 11
     d7a:	84 9f       	mul	r24, r20
     d7c:	b0 01       	movw	r22, r0
     d7e:	85 9f       	mul	r24, r21
     d80:	70 0d       	add	r23, r0
     d82:	11 24       	eor	r1, r1
     d84:	6c 52       	subi	r22, 0x2C	; 44
     d86:	70 4b       	sbci	r23, 0xB0	; 176
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__floatunsisf>
     d90:	2a e0       	ldi	r18, 0x0A	; 10
     d92:	37 ed       	ldi	r19, 0xD7	; 215
     d94:	43 e2       	ldi	r20, 0x23	; 35
     d96:	5c e3       	ldi	r21, 0x3C	; 60
     d98:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__mulsf3>
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	42 eb       	ldi	r20, 0xB2	; 178
     da2:	52 e4       	ldi	r21, 0x42	; 66
     da4:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__addsf3>
     da8:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fixunssfsi>
     dac:	86 2f       	mov	r24, r22
     dae:	08 95       	ret
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	08 95       	ret
     db4:	84 e6       	ldi	r24, 0x64	; 100
     db6:	08 95       	ret

00000db8 <update_battery_status>:
     db8:	17 b8       	out	0x07, r1	; 7
     dba:	36 9a       	sbi	0x06, 6	; 6
     dbc:	36 99       	sbic	0x06, 6	; 6
     dbe:	fe cf       	rjmp	.-4      	; 0xdbc <update_battery_status+0x4>
     dc0:	64 b1       	in	r22, 0x04	; 4
     dc2:	75 b1       	in	r23, 0x05	; 5
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__floatunsisf>
     dcc:	2c ea       	ldi	r18, 0xAC	; 172
     dce:	3c e1       	ldi	r19, 0x1C	; 28
     dd0:	4a e7       	ldi	r20, 0x7A	; 122
     dd2:	5f e3       	ldi	r21, 0x3F	; 63
     dd4:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__mulsf3>
     dd8:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fixunssfsi>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__floatunsisf>
     de4:	26 e9       	ldi	r18, 0x96	; 150
     de6:	33 e4       	ldi	r19, 0x43	; 67
     de8:	43 eb       	ldi	r20, 0xB3	; 179
     dea:	50 e4       	ldi	r21, 0x40	; 64
     dec:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__mulsf3>
     df0:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fixunssfsi>
     df4:	cb 01       	movw	r24, r22
     df6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <get_li_ion_percentage>
     dfa:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <STATUS>
     dfe:	08 95       	ret

00000e00 <update_UI_activity>:
}


void update_UI_activity(uint8_t line, uint8_t segment) {
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	64 97       	sbiw	r28, 0x14	; 20
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	18 2f       	mov	r17, r24
     e1a:	06 2f       	mov	r16, r22
	int sprintf_store = 0;
	char bufX[MAX_STRING_BUFFER];
	clear_LCD_segment(line, segment);
     e1c:	0e 94 01 02 	call	0x402	; 0x402 <clear_LCD_segment>
	memset(bufX, 0, 20);
     e20:	fe 01       	movw	r30, r28
     e22:	31 96       	adiw	r30, 0x01	; 1
     e24:	84 e1       	ldi	r24, 0x14	; 20
     e26:	df 01       	movw	r26, r30
     e28:	1d 92       	st	X+, r1
     e2a:	8a 95       	dec	r24
     e2c:	e9 f7       	brne	.-6      	; 0xe28 <update_UI_activity+0x28>
	switch(line) {
     e2e:	14 31       	cpi	r17, 0x14	; 20
     e30:	09 f4       	brne	.+2      	; 0xe34 <update_UI_activity+0x34>
     e32:	6a c0       	rjmp	.+212    	; 0xf08 <update_UI_activity+0x108>
     e34:	18 f4       	brcc	.+6      	; 0xe3c <update_UI_activity+0x3c>
     e36:	11 23       	and	r17, r17
     e38:	39 f0       	breq	.+14     	; 0xe48 <update_UI_activity+0x48>
     e3a:	c5 c0       	rjmp	.+394    	; 0xfc6 <update_UI_activity+0x1c6>
     e3c:	10 34       	cpi	r17, 0x40	; 64
     e3e:	a1 f1       	breq	.+104    	; 0xea8 <update_UI_activity+0xa8>
     e40:	14 35       	cpi	r17, 0x54	; 84
     e42:	09 f4       	brne	.+2      	; 0xe46 <update_UI_activity+0x46>
     e44:	91 c0       	rjmp	.+290    	; 0xf68 <update_UI_activity+0x168>
     e46:	bf c0       	rjmp	.+382    	; 0xfc6 <update_UI_activity+0x1c6>
		case LCD_LINE_1: 
			if (segment == 0) sprintf_store = snprintf(bufX, 7, "A:%s|", UI.type_A);   
     e48:	01 11       	cpse	r16, r1
     e4a:	17 c0       	rjmp	.+46     	; 0xe7a <update_UI_activity+0x7a>
     e4c:	8b e3       	ldi	r24, 0x3B	; 59
     e4e:	95 e0       	ldi	r25, 0x05	; 5
     e50:	9f 93       	push	r25
     e52:	8f 93       	push	r24
     e54:	8a e9       	ldi	r24, 0x9A	; 154
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	9f 93       	push	r25
     e5a:	8f 93       	push	r24
     e5c:	1f 92       	push	r1
     e5e:	87 e0       	ldi	r24, 0x07	; 7
     e60:	8f 93       	push	r24
     e62:	ce 01       	movw	r24, r28
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	9f 93       	push	r25
     e68:	8f 93       	push	r24
     e6a:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	a6 c0       	rjmp	.+332    	; 0xfc6 <update_UI_activity+0x1c6>
			else sprintf_store = snprintf(bufX, 13, "f:%s Hz", UI.frequency_A);
     e7a:	89 e1       	ldi	r24, 0x19	; 25
     e7c:	95 e0       	ldi	r25, 0x05	; 5
     e7e:	9f 93       	push	r25
     e80:	8f 93       	push	r24
     e82:	80 ea       	ldi	r24, 0xA0	; 160
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	9f 93       	push	r25
     e88:	8f 93       	push	r24
     e8a:	1f 92       	push	r1
     e8c:	8d e0       	ldi	r24, 0x0D	; 13
     e8e:	8f 93       	push	r24
     e90:	ce 01       	movw	r24, r28
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	9f 93       	push	r25
     e96:	8f 93       	push	r24
     e98:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	8f c0       	rjmp	.+286    	; 0xfc6 <update_UI_activity+0x1c6>
			break;
		case LCD_LINE_2: 
			if (segment == 0) sprintf_store = snprintf(bufX, 10, "VA=%sV|", UI.amplitude_A);
     ea8:	01 11       	cpse	r16, r1
     eaa:	17 c0       	rjmp	.+46     	; 0xeda <update_UI_activity+0xda>
     eac:	89 e2       	ldi	r24, 0x29	; 41
     eae:	95 e0       	ldi	r25, 0x05	; 5
     eb0:	9f 93       	push	r25
     eb2:	8f 93       	push	r24
     eb4:	88 ea       	ldi	r24, 0xA8	; 168
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	9f 93       	push	r25
     eba:	8f 93       	push	r24
     ebc:	1f 92       	push	r1
     ebe:	8a e0       	ldi	r24, 0x0A	; 10
     ec0:	8f 93       	push	r24
     ec2:	ce 01       	movw	r24, r28
     ec4:	01 96       	adiw	r24, 0x01	; 1
     ec6:	9f 93       	push	r25
     ec8:	8f 93       	push	r24
     eca:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	76 c0       	rjmp	.+236    	; 0xfc6 <update_UI_activity+0x1c6>
			else sprintf_store = snprintf(bufX, 11, "VbA=%sV", UI.bias_A); 
     eda:	81 e3       	ldi	r24, 0x31	; 49
     edc:	95 e0       	ldi	r25, 0x05	; 5
     ede:	9f 93       	push	r25
     ee0:	8f 93       	push	r24
     ee2:	80 eb       	ldi	r24, 0xB0	; 176
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	9f 93       	push	r25
     ee8:	8f 93       	push	r24
     eea:	1f 92       	push	r1
     eec:	8b e0       	ldi	r24, 0x0B	; 11
     eee:	8f 93       	push	r24
     ef0:	ce 01       	movw	r24, r28
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	9f 93       	push	r25
     ef6:	8f 93       	push	r24
     ef8:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	5f c0       	rjmp	.+190    	; 0xfc6 <update_UI_activity+0x1c6>
			break;
		case LCD_LINE_3: 
			if (segment == 0) sprintf_store = snprintf(bufX, 7, "B:%s|", UI.type_B);
     f08:	01 11       	cpse	r16, r1
     f0a:	17 c0       	rjmp	.+46     	; 0xf3a <update_UI_activity+0x13a>
     f0c:	8e e3       	ldi	r24, 0x3E	; 62
     f0e:	95 e0       	ldi	r25, 0x05	; 5
     f10:	9f 93       	push	r25
     f12:	8f 93       	push	r24
     f14:	88 eb       	ldi	r24, 0xB8	; 184
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	9f 93       	push	r25
     f1a:	8f 93       	push	r24
     f1c:	1f 92       	push	r1
     f1e:	87 e0       	ldi	r24, 0x07	; 7
     f20:	8f 93       	push	r24
     f22:	ce 01       	movw	r24, r28
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	9f 93       	push	r25
     f28:	8f 93       	push	r24
     f2a:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	46 c0       	rjmp	.+140    	; 0xfc6 <update_UI_activity+0x1c6>
			else sprintf_store = snprintf(bufX, 13, "f:%s Hz", UI.frequency_B); 
     f3a:	81 e2       	ldi	r24, 0x21	; 33
     f3c:	95 e0       	ldi	r25, 0x05	; 5
     f3e:	9f 93       	push	r25
     f40:	8f 93       	push	r24
     f42:	80 ea       	ldi	r24, 0xA0	; 160
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	9f 93       	push	r25
     f48:	8f 93       	push	r24
     f4a:	1f 92       	push	r1
     f4c:	8d e0       	ldi	r24, 0x0D	; 13
     f4e:	8f 93       	push	r24
     f50:	ce 01       	movw	r24, r28
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	9f 93       	push	r25
     f56:	8f 93       	push	r24
     f58:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	2f c0       	rjmp	.+94     	; 0xfc6 <update_UI_activity+0x1c6>
			break;
		case LCD_LINE_4:
			if (segment == 0) sprintf_store = snprintf(bufX, 10, "VB=%sV|", UI.amplitude_B); 
     f68:	01 11       	cpse	r16, r1
     f6a:	17 c0       	rjmp	.+46     	; 0xf9a <update_UI_activity+0x19a>
     f6c:	8d e2       	ldi	r24, 0x2D	; 45
     f6e:	95 e0       	ldi	r25, 0x05	; 5
     f70:	9f 93       	push	r25
     f72:	8f 93       	push	r24
     f74:	8e eb       	ldi	r24, 0xBE	; 190
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	9f 93       	push	r25
     f7a:	8f 93       	push	r24
     f7c:	1f 92       	push	r1
     f7e:	8a e0       	ldi	r24, 0x0A	; 10
     f80:	8f 93       	push	r24
     f82:	ce 01       	movw	r24, r28
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	9f 93       	push	r25
     f88:	8f 93       	push	r24
     f8a:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	16 c0       	rjmp	.+44     	; 0xfc6 <update_UI_activity+0x1c6>
			else sprintf_store = snprintf(bufX, 11, "VbB=%sV", UI.bias_B); 
     f9a:	86 e3       	ldi	r24, 0x36	; 54
     f9c:	95 e0       	ldi	r25, 0x05	; 5
     f9e:	9f 93       	push	r25
     fa0:	8f 93       	push	r24
     fa2:	86 ec       	ldi	r24, 0xC6	; 198
     fa4:	91 e0       	ldi	r25, 0x01	; 1
     fa6:	9f 93       	push	r25
     fa8:	8f 93       	push	r24
     faa:	1f 92       	push	r1
     fac:	8b e0       	ldi	r24, 0x0B	; 11
     fae:	8f 93       	push	r24
     fb0:	ce 01       	movw	r24, r28
     fb2:	01 96       	adiw	r24, 0x01	; 1
     fb4:	9f 93       	push	r25
     fb6:	8f 93       	push	r24
     fb8:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
			break;
		default: break;		
	}
	print_LCD_segment(bufX, line, segment);
     fc6:	40 2f       	mov	r20, r16
     fc8:	61 2f       	mov	r22, r17
     fca:	ce 01       	movw	r24, r28
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <print_LCD_segment>
}
     fd2:	64 96       	adiw	r28, 0x14	; 20
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	08 95       	ret

00000fe8 <update_complete_UI>:

void update_complete_UI() {
	update_UI_activity(LCD_LINE_1, 0);
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
	update_UI_activity(LCD_LINE_1, 1);
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
	update_UI_activity(LCD_LINE_2, 0);
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	80 e4       	ldi	r24, 0x40	; 64
     ffc:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
	update_UI_activity(LCD_LINE_2, 1);
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	80 e4       	ldi	r24, 0x40	; 64
    1004:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
	update_UI_activity(LCD_LINE_3, 0);
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	84 e1       	ldi	r24, 0x14	; 20
    100c:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
	update_UI_activity(LCD_LINE_3, 1);
    1010:	61 e0       	ldi	r22, 0x01	; 1
    1012:	84 e1       	ldi	r24, 0x14	; 20
    1014:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
	update_UI_activity(LCD_LINE_4, 0);
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	84 e5       	ldi	r24, 0x54	; 84
    101c:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
	update_UI_activity(LCD_LINE_4, 1);
    1020:	61 e0       	ldi	r22, 0x01	; 1
    1022:	84 e5       	ldi	r24, 0x54	; 84
    1024:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
    1028:	08 95       	ret

0000102a <retrieve_frequency_uint32>:

}

uint32_t retrieve_frequency_uint32(char channel_in) {
    102a:	8f 92       	push	r8
    102c:	9f 92       	push	r9
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	00 d0       	rcall	.+0      	; 0x1044 <retrieve_frequency_uint32+0x1a>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <retrieve_frequency_uint32+0x1c>
    1046:	00 d0       	rcall	.+0      	; 0x1048 <retrieve_frequency_uint32+0x1e>
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	18 2f       	mov	r17, r24
	volatile uint8_t mark_ptr = 0;
    104e:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t end_of_freq_string = 0;
    1050:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint32_t return_number = 0;
    1052:	1b 82       	std	Y+3, r1	; 0x03
    1054:	1c 82       	std	Y+4, r1	; 0x04
    1056:	1d 82       	std	Y+5, r1	; 0x05
    1058:	1e 82       	std	Y+6, r1	; 0x06
	if (channel_in == PARAM_CH0) memset(UI.frequency_A, 0, 8);
    105a:	80 33       	cpi	r24, 0x30	; 48
    105c:	41 f4       	brne	.+16     	; 0x106e <retrieve_frequency_uint32+0x44>
    105e:	88 e0       	ldi	r24, 0x08	; 8
    1060:	e9 e1       	ldi	r30, 0x19	; 25
    1062:	f5 e0       	ldi	r31, 0x05	; 5
    1064:	df 01       	movw	r26, r30
    1066:	1d 92       	st	X+, r1
    1068:	8a 95       	dec	r24
    106a:	e9 f7       	brne	.-6      	; 0x1066 <retrieve_frequency_uint32+0x3c>
    106c:	07 c0       	rjmp	.+14     	; 0x107c <retrieve_frequency_uint32+0x52>
	else memset(UI.frequency_B, 0, 8);
    106e:	88 e0       	ldi	r24, 0x08	; 8
    1070:	e1 e2       	ldi	r30, 0x21	; 33
    1072:	f5 e0       	ldi	r31, 0x05	; 5
    1074:	df 01       	movw	r26, r30
    1076:	1d 92       	st	X+, r1
    1078:	8a 95       	dec	r24
    107a:	e9 f7       	brne	.-6      	; 0x1076 <retrieve_frequency_uint32+0x4c>
	for (mark_ptr = FG_DATA_START_NUM; mark_ptr < FG_DATA_LENGTH; mark_ptr++) if (UART.rx_buffer[mark_ptr + 1] == '\"') { end_of_freq_string = mark_ptr; break; }
    107c:	89 e0       	ldi	r24, 0x09	; 9
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	80 32       	cpi	r24, 0x20	; 32
    1084:	c0 f4       	brcc	.+48     	; 0x10b6 <retrieve_frequency_uint32+0x8c>
    1086:	e9 81       	ldd	r30, Y+1	; 0x01
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	ec 52       	subi	r30, 0x2C	; 44
    108c:	fa 4f       	sbci	r31, 0xFA	; 250
    108e:	81 81       	ldd	r24, Z+1	; 0x01
    1090:	82 32       	cpi	r24, 0x22	; 34
    1092:	59 f4       	brne	.+22     	; 0x10aa <retrieve_frequency_uint32+0x80>
    1094:	07 c0       	rjmp	.+14     	; 0x10a4 <retrieve_frequency_uint32+0x7a>
    1096:	e9 81       	ldd	r30, Y+1	; 0x01
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	ec 52       	subi	r30, 0x2C	; 44
    109c:	fa 4f       	sbci	r31, 0xFA	; 250
    109e:	81 81       	ldd	r24, Z+1	; 0x01
    10a0:	82 32       	cpi	r24, 0x22	; 34
    10a2:	19 f4       	brne	.+6      	; 0x10aa <retrieve_frequency_uint32+0x80>
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	8a 83       	std	Y+2, r24	; 0x02
    10a8:	06 c0       	rjmp	.+12     	; 0x10b6 <retrieve_frequency_uint32+0x8c>
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	8f 5f       	subi	r24, 0xFF	; 255
    10ae:	89 83       	std	Y+1, r24	; 0x01
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	80 32       	cpi	r24, 0x20	; 32
    10b4:	80 f3       	brcs	.-32     	; 0x1096 <retrieve_frequency_uint32+0x6c>
	for (mark_ptr = end_of_freq_string; mark_ptr >= FG_DATA_START_NUM; mark_ptr--) {
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	89 30       	cpi	r24, 0x09	; 9
    10be:	08 f4       	brcc	.+2      	; 0x10c2 <retrieve_frequency_uint32+0x98>
    10c0:	5c c0       	rjmp	.+184    	; 0x117a <retrieve_frequency_uint32+0x150>
		return_number += (UART.rx_buffer[mark_ptr] - 0x30) * pow(10, end_of_freq_string - mark_ptr);
    10c2:	09 81       	ldd	r16, Y+1	; 0x01
    10c4:	6a 81       	ldd	r22, Y+2	; 0x02
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	68 1b       	sub	r22, r24
    10cc:	71 09       	sbc	r23, r1
    10ce:	07 2e       	mov	r0, r23
    10d0:	00 0c       	add	r0, r0
    10d2:	88 0b       	sbc	r24, r24
    10d4:	99 0b       	sbc	r25, r25
    10d6:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__floatsisf>
    10da:	9b 01       	movw	r18, r22
    10dc:	ac 01       	movw	r20, r24
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	80 e2       	ldi	r24, 0x20	; 32
    10e4:	91 e4       	ldi	r25, 0x41	; 65
    10e6:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <pow>
    10ea:	6b 01       	movw	r12, r22
    10ec:	7c 01       	movw	r14, r24
    10ee:	8b 80       	ldd	r8, Y+3	; 0x03
    10f0:	9c 80       	ldd	r9, Y+4	; 0x04
    10f2:	ad 80       	ldd	r10, Y+5	; 0x05
    10f4:	be 80       	ldd	r11, Y+6	; 0x06
    10f6:	e0 2f       	mov	r30, r16
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	ec 52       	subi	r30, 0x2C	; 44
    10fc:	fa 4f       	sbci	r31, 0xFA	; 250
    10fe:	60 81       	ld	r22, Z
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	60 53       	subi	r22, 0x30	; 48
    1104:	71 09       	sbc	r23, r1
    1106:	07 2e       	mov	r0, r23
    1108:	00 0c       	add	r0, r0
    110a:	88 0b       	sbc	r24, r24
    110c:	99 0b       	sbc	r25, r25
    110e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__floatsisf>
    1112:	a7 01       	movw	r20, r14
    1114:	96 01       	movw	r18, r12
    1116:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__mulsf3>
    111a:	6b 01       	movw	r12, r22
    111c:	7c 01       	movw	r14, r24
    111e:	c5 01       	movw	r24, r10
    1120:	b4 01       	movw	r22, r8
    1122:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__floatunsisf>
    1126:	9b 01       	movw	r18, r22
    1128:	ac 01       	movw	r20, r24
    112a:	c7 01       	movw	r24, r14
    112c:	b6 01       	movw	r22, r12
    112e:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__addsf3>
    1132:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <__fixunssfsi>
    1136:	6b 83       	std	Y+3, r22	; 0x03
    1138:	7c 83       	std	Y+4, r23	; 0x04
    113a:	8d 83       	std	Y+5, r24	; 0x05
    113c:	9e 83       	std	Y+6, r25	; 0x06
		if (channel_in == PARAM_CH0) UI.frequency_A[mark_ptr - FG_DATA_START_NUM] = UART.rx_buffer[mark_ptr];
    113e:	10 33       	cpi	r17, 0x30	; 48
    1140:	59 f4       	brne	.+22     	; 0x1158 <retrieve_frequency_uint32+0x12e>
    1142:	e9 81       	ldd	r30, Y+1	; 0x01
    1144:	a9 81       	ldd	r26, Y+1	; 0x01
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	e0 5f       	subi	r30, 0xF0	; 240
    114a:	fa 4f       	sbci	r31, 0xFA	; 250
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	ac 52       	subi	r26, 0x2C	; 44
    1150:	ba 4f       	sbci	r27, 0xFA	; 250
    1152:	8c 91       	ld	r24, X
    1154:	80 83       	st	Z, r24
    1156:	0a c0       	rjmp	.+20     	; 0x116c <retrieve_frequency_uint32+0x142>
		else UI.frequency_B[mark_ptr - FG_DATA_START_NUM] = UART.rx_buffer[mark_ptr];
    1158:	e9 81       	ldd	r30, Y+1	; 0x01
    115a:	a9 81       	ldd	r26, Y+1	; 0x01
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	e8 5e       	subi	r30, 0xE8	; 232
    1160:	fa 4f       	sbci	r31, 0xFA	; 250
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	ac 52       	subi	r26, 0x2C	; 44
    1166:	ba 4f       	sbci	r27, 0xFA	; 250
    1168:	8c 91       	ld	r24, X
    116a:	80 83       	st	Z, r24
	volatile uint8_t end_of_freq_string = 0;
	volatile uint32_t return_number = 0;
	if (channel_in == PARAM_CH0) memset(UI.frequency_A, 0, 8);
	else memset(UI.frequency_B, 0, 8);
	for (mark_ptr = FG_DATA_START_NUM; mark_ptr < FG_DATA_LENGTH; mark_ptr++) if (UART.rx_buffer[mark_ptr + 1] == '\"') { end_of_freq_string = mark_ptr; break; }
	for (mark_ptr = end_of_freq_string; mark_ptr >= FG_DATA_START_NUM; mark_ptr--) {
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	81 50       	subi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	89 30       	cpi	r24, 0x09	; 9
    1176:	08 f0       	brcs	.+2      	; 0x117a <retrieve_frequency_uint32+0x150>
    1178:	a4 cf       	rjmp	.-184    	; 0x10c2 <retrieve_frequency_uint32+0x98>
		return_number += (UART.rx_buffer[mark_ptr] - 0x30) * pow(10, end_of_freq_string - mark_ptr);
		if (channel_in == PARAM_CH0) UI.frequency_A[mark_ptr - FG_DATA_START_NUM] = UART.rx_buffer[mark_ptr];
		else UI.frequency_B[mark_ptr - FG_DATA_START_NUM] = UART.rx_buffer[mark_ptr];
	}
	return return_number + 1;
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	9c 81       	ldd	r25, Y+4	; 0x04
    117e:	ad 81       	ldd	r26, Y+5	; 0x05
    1180:	be 81       	ldd	r27, Y+6	; 0x06
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	6f 5f       	subi	r22, 0xFF	; 255
    1188:	7f 4f       	sbci	r23, 0xFF	; 255
    118a:	8f 4f       	sbci	r24, 0xFF	; 255
    118c:	9f 4f       	sbci	r25, 0xFF	; 255
}
    118e:	26 96       	adiw	r28, 0x06	; 6
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	df 90       	pop	r13
    11a8:	cf 90       	pop	r12
    11aa:	bf 90       	pop	r11
    11ac:	af 90       	pop	r10
    11ae:	9f 90       	pop	r9
    11b0:	8f 90       	pop	r8
    11b2:	08 95       	ret

000011b4 <retrieve_amplitude_12_bit>:

uint16_t retrieve_amplitude_12_bit(char channel_in) { // MAX 700mV
    11b4:	ef 92       	push	r14
    11b6:	ff 92       	push	r15
    11b8:	0f 93       	push	r16
    11ba:	1f 93       	push	r17
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	27 97       	sbiw	r28, 0x07	; 7
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	e8 2e       	mov	r14, r24
	int sprintf_store = 0;
	volatile uint32_t num = 0;
    11d2:	19 82       	std	Y+1, r1	; 0x01
    11d4:	1a 82       	std	Y+2, r1	; 0x02
    11d6:	1b 82       	std	Y+3, r1	; 0x03
    11d8:	1c 82       	std	Y+4, r1	; 0x04
	char buffer[3];
	buffer[0] = UART.rx_buffer[9];
    11da:	e4 ed       	ldi	r30, 0xD4	; 212
    11dc:	f5 e0       	ldi	r31, 0x05	; 5
    11de:	11 85       	ldd	r17, Z+9	; 0x09
    11e0:	1d 83       	std	Y+5, r17	; 0x05
	buffer[1] = UART.rx_buffer[11];
    11e2:	03 85       	ldd	r16, Z+11	; 0x0b
    11e4:	0e 83       	std	Y+6, r16	; 0x06
	buffer[2] = UART.rx_buffer[12];
    11e6:	f4 84       	ldd	r15, Z+12	; 0x0c
    11e8:	ff 82       	std	Y+7, r15	; 0x07
	num = atoi(buffer);
    11ea:	ce 01       	movw	r24, r28
    11ec:	05 96       	adiw	r24, 0x05	; 5
    11ee:	0e 94 98 19 	call	0x3330	; 0x3330 <atoi>
    11f2:	09 2e       	mov	r0, r25
    11f4:	00 0c       	add	r0, r0
    11f6:	aa 0b       	sbc	r26, r26
    11f8:	bb 0b       	sbc	r27, r27
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	ab 83       	std	Y+3, r26	; 0x03
    1200:	bc 83       	std	Y+4, r27	; 0x04
	if (channel_in == PARAM_CH0) memset(UI.amplitude_A, 0, 8);
    1202:	80 e3       	ldi	r24, 0x30	; 48
    1204:	e8 12       	cpse	r14, r24
    1206:	1e c0       	rjmp	.+60     	; 0x1244 <retrieve_amplitude_12_bit+0x90>
    1208:	e9 e2       	ldi	r30, 0x29	; 41
    120a:	f5 e0       	ldi	r31, 0x05	; 5
    120c:	88 e0       	ldi	r24, 0x08	; 8
    120e:	df 01       	movw	r26, r30
    1210:	1d 92       	st	X+, r1
    1212:	8a 95       	dec	r24
    1214:	e9 f7       	brne	.-6      	; 0x1210 <retrieve_amplitude_12_bit+0x5c>
	else memset(UI.amplitude_B, 0, 8);
	if (channel_in == PARAM_CH0) { sprintf_store = snprintf(UI.amplitude_A, 5, "%c.%c%c",buffer[0],buffer[1],buffer[2]); }
    1216:	1f 92       	push	r1
    1218:	ff 92       	push	r15
    121a:	1f 92       	push	r1
    121c:	0f 93       	push	r16
    121e:	1f 92       	push	r1
    1220:	1f 93       	push	r17
    1222:	80 ed       	ldi	r24, 0xD0	; 208
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	9f 93       	push	r25
    1228:	8f 93       	push	r24
    122a:	1f 92       	push	r1
    122c:	85 e0       	ldi	r24, 0x05	; 5
    122e:	8f 93       	push	r24
    1230:	ff 93       	push	r31
    1232:	ef 93       	push	r30
    1234:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	1d c0       	rjmp	.+58     	; 0x127e <retrieve_amplitude_12_bit+0xca>
	buffer[0] = UART.rx_buffer[9];
	buffer[1] = UART.rx_buffer[11];
	buffer[2] = UART.rx_buffer[12];
	num = atoi(buffer);
	if (channel_in == PARAM_CH0) memset(UI.amplitude_A, 0, 8);
	else memset(UI.amplitude_B, 0, 8);
    1244:	ed e2       	ldi	r30, 0x2D	; 45
    1246:	f5 e0       	ldi	r31, 0x05	; 5
    1248:	88 e0       	ldi	r24, 0x08	; 8
    124a:	df 01       	movw	r26, r30
    124c:	1d 92       	st	X+, r1
    124e:	8a 95       	dec	r24
    1250:	e9 f7       	brne	.-6      	; 0x124c <retrieve_amplitude_12_bit+0x98>
	if (channel_in == PARAM_CH0) { sprintf_store = snprintf(UI.amplitude_A, 5, "%c.%c%c",buffer[0],buffer[1],buffer[2]); }
	else sprintf_store = snprintf(UI.amplitude_B, 5, "%c.%c%c",buffer[0],buffer[1],buffer[2]);
    1252:	1f 92       	push	r1
    1254:	ff 92       	push	r15
    1256:	1f 92       	push	r1
    1258:	0f 93       	push	r16
    125a:	1f 92       	push	r1
    125c:	1f 93       	push	r17
    125e:	80 ed       	ldi	r24, 0xD0	; 208
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	9f 93       	push	r25
    1264:	8f 93       	push	r24
    1266:	1f 92       	push	r1
    1268:	85 e0       	ldi	r24, 0x05	; 5
    126a:	8f 93       	push	r24
    126c:	ff 93       	push	r31
    126e:	ef 93       	push	r30
    1270:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
	return ((num * MAX_12BIT) / 70);
    127e:	29 81       	ldd	r18, Y+1	; 0x01
    1280:	3a 81       	ldd	r19, Y+2	; 0x02
    1282:	4b 81       	ldd	r20, Y+3	; 0x03
    1284:	5c 81       	ldd	r21, Y+4	; 0x04
    1286:	af ef       	ldi	r26, 0xFF	; 255
    1288:	bf e0       	ldi	r27, 0x0F	; 15
    128a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__muluhisi3>
    128e:	26 e4       	ldi	r18, 0x46	; 70
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	0e 94 42 19 	call	0x3284	; 0x3284 <__udivmodsi4>
}
    129a:	c9 01       	movw	r24, r18
    129c:	27 96       	adiw	r28, 0x07	; 7
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	f8 94       	cli
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	cd bf       	out	0x3d, r28	; 61
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	ff 90       	pop	r15
    12b2:	ef 90       	pop	r14
    12b4:	08 95       	ret

000012b6 <retrieve_bias_12_bit>:

uint16_t retrieve_bias_12_bit(char channel_in) {
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	27 97       	sbiw	r28, 0x07	; 7
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	e8 2e       	mov	r14, r24
	int sprintf_store = 0;
	volatile uint32_t num = 0;
    12d4:	19 82       	std	Y+1, r1	; 0x01
    12d6:	1a 82       	std	Y+2, r1	; 0x02
    12d8:	1b 82       	std	Y+3, r1	; 0x03
    12da:	1c 82       	std	Y+4, r1	; 0x04
	char buffer[3];
	buffer[0] = UART.rx_buffer[10];
    12dc:	e4 ed       	ldi	r30, 0xD4	; 212
    12de:	f5 e0       	ldi	r31, 0x05	; 5
    12e0:	12 85       	ldd	r17, Z+10	; 0x0a
    12e2:	1d 83       	std	Y+5, r17	; 0x05
	buffer[1] = UART.rx_buffer[12];
    12e4:	04 85       	ldd	r16, Z+12	; 0x0c
    12e6:	0e 83       	std	Y+6, r16	; 0x06
	buffer[2] = UART.rx_buffer[13];
    12e8:	f5 84       	ldd	r15, Z+13	; 0x0d
    12ea:	ff 82       	std	Y+7, r15	; 0x07
	num = atoi(buffer);
    12ec:	ce 01       	movw	r24, r28
    12ee:	05 96       	adiw	r24, 0x05	; 5
    12f0:	0e 94 98 19 	call	0x3330	; 0x3330 <atoi>
    12f4:	09 2e       	mov	r0, r25
    12f6:	00 0c       	add	r0, r0
    12f8:	aa 0b       	sbc	r26, r26
    12fa:	bb 0b       	sbc	r27, r27
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	ab 83       	std	Y+3, r26	; 0x03
    1302:	bc 83       	std	Y+4, r27	; 0x04
	if (channel_in == PARAM_CH0) memset(UI.bias_A, 0, 8);
    1304:	80 e3       	ldi	r24, 0x30	; 48
    1306:	e8 12       	cpse	r14, r24
    1308:	22 c0       	rjmp	.+68     	; 0x134e <retrieve_bias_12_bit+0x98>
    130a:	e1 e3       	ldi	r30, 0x31	; 49
    130c:	f5 e0       	ldi	r31, 0x05	; 5
    130e:	88 e0       	ldi	r24, 0x08	; 8
    1310:	df 01       	movw	r26, r30
    1312:	1d 92       	st	X+, r1
    1314:	8a 95       	dec	r24
    1316:	e9 f7       	brne	.-6      	; 0x1312 <retrieve_bias_12_bit+0x5c>
	else memset(UI.bias_B, 0, 8);
	if (channel_in == PARAM_CH0) sprintf_store = snprintf(UI.bias_A, 6, "%c%c.%c%c",UART.rx_buffer[9],buffer[0],buffer[1],buffer[2]);
    1318:	1f 92       	push	r1
    131a:	ff 92       	push	r15
    131c:	1f 92       	push	r1
    131e:	0f 93       	push	r16
    1320:	1f 92       	push	r1
    1322:	1f 93       	push	r17
    1324:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <UART+0x9>
    1328:	1f 92       	push	r1
    132a:	8f 93       	push	r24
    132c:	8e ec       	ldi	r24, 0xCE	; 206
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	9f 93       	push	r25
    1332:	8f 93       	push	r24
    1334:	1f 92       	push	r1
    1336:	86 e0       	ldi	r24, 0x06	; 6
    1338:	8f 93       	push	r24
    133a:	ff 93       	push	r31
    133c:	ef 93       	push	r30
    133e:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	21 c0       	rjmp	.+66     	; 0x1390 <retrieve_bias_12_bit+0xda>
	buffer[0] = UART.rx_buffer[10];
	buffer[1] = UART.rx_buffer[12];
	buffer[2] = UART.rx_buffer[13];
	num = atoi(buffer);
	if (channel_in == PARAM_CH0) memset(UI.bias_A, 0, 8);
	else memset(UI.bias_B, 0, 8);
    134e:	e6 e3       	ldi	r30, 0x36	; 54
    1350:	f5 e0       	ldi	r31, 0x05	; 5
    1352:	88 e0       	ldi	r24, 0x08	; 8
    1354:	df 01       	movw	r26, r30
    1356:	1d 92       	st	X+, r1
    1358:	8a 95       	dec	r24
    135a:	e9 f7       	brne	.-6      	; 0x1356 <retrieve_bias_12_bit+0xa0>
	if (channel_in == PARAM_CH0) sprintf_store = snprintf(UI.bias_A, 6, "%c%c.%c%c",UART.rx_buffer[9],buffer[0],buffer[1],buffer[2]);
	else sprintf_store = snprintf(UI.bias_B, 6, "%c%c.%c%c",UART.rx_buffer[9],buffer[0],buffer[1],buffer[2]);
    135c:	1f 92       	push	r1
    135e:	ff 92       	push	r15
    1360:	1f 92       	push	r1
    1362:	0f 93       	push	r16
    1364:	1f 92       	push	r1
    1366:	1f 93       	push	r17
    1368:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <UART+0x9>
    136c:	1f 92       	push	r1
    136e:	8f 93       	push	r24
    1370:	8e ec       	ldi	r24, 0xCE	; 206
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	9f 93       	push	r25
    1376:	8f 93       	push	r24
    1378:	1f 92       	push	r1
    137a:	86 e0       	ldi	r24, 0x06	; 6
    137c:	8f 93       	push	r24
    137e:	ff 93       	push	r31
    1380:	ef 93       	push	r30
    1382:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
	return ((num * MAX_12BIT) / 330);
    1390:	29 81       	ldd	r18, Y+1	; 0x01
    1392:	3a 81       	ldd	r19, Y+2	; 0x02
    1394:	4b 81       	ldd	r20, Y+3	; 0x03
    1396:	5c 81       	ldd	r21, Y+4	; 0x04
    1398:	af ef       	ldi	r26, 0xFF	; 255
    139a:	bf e0       	ldi	r27, 0x0F	; 15
    139c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__muluhisi3>
    13a0:	2a e4       	ldi	r18, 0x4A	; 74
    13a2:	31 e0       	ldi	r19, 0x01	; 1
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	0e 94 42 19 	call	0x3284	; 0x3284 <__udivmodsi4>
	}
    13ac:	c9 01       	movw	r24, r18
    13ae:	27 96       	adiw	r28, 0x07	; 7
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	08 95       	ret

000013c8 <retrieve_bias_sign>:

bool retrieve_bias_sign() {
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 91 dd 05 	lds	r25, 0x05DD	; 0x8005dd <UART+0x9>
    13ce:	9d 32       	cpi	r25, 0x2D	; 45
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <retrieve_bias_sign+0xc>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
	if (UART.rx_buffer[9] == '-') return NEGATIVE;
	else if (UART.rx_buffer[9] == '+') return POSITIVE;
	else return NULL;
}
    13d4:	08 95       	ret

000013d6 <set_parameter>:

void set_parameter() {
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
	if (UART.rx_buffer[4] == PARAM_CH0) {
    13da:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <UART+0x4>
    13de:	80 33       	cpi	r24, 0x30	; 48
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <set_parameter+0xe>
    13e2:	bb c0       	rjmp	.+374    	; 0x155a <set_parameter+0x184>
		switch(UART.rx_buffer[6]) {
    13e4:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <UART+0x6>
    13e8:	82 34       	cpi	r24, 0x42	; 66
    13ea:	09 f4       	brne	.+2      	; 0x13ee <set_parameter+0x18>
    13ec:	90 c0       	rjmp	.+288    	; 0x150e <set_parameter+0x138>
    13ee:	20 f4       	brcc	.+8      	; 0x13f8 <set_parameter+0x22>
    13f0:	81 34       	cpi	r24, 0x41	; 65
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <set_parameter+0x20>
    13f4:	7d c0       	rjmp	.+250    	; 0x14f0 <set_parameter+0x11a>
    13f6:	6e c1       	rjmp	.+732    	; 0x16d4 <set_parameter+0x2fe>
    13f8:	86 34       	cpi	r24, 0x46	; 70
    13fa:	19 f0       	breq	.+6      	; 0x1402 <set_parameter+0x2c>
    13fc:	84 35       	cpi	r24, 0x54	; 84
    13fe:	a9 f0       	breq	.+42     	; 0x142a <set_parameter+0x54>
    1400:	69 c1       	rjmp	.+722    	; 0x16d4 <set_parameter+0x2fe>
			case PARAM_FREQ: 
				FUNCGEN.frequency_A = retrieve_frequency_uint32(PARAM_CH0);
    1402:	80 e3       	ldi	r24, 0x30	; 48
    1404:	0e 94 15 08 	call	0x102a	; 0x102a <retrieve_frequency_uint32>
    1408:	ab 01       	movw	r20, r22
    140a:	bc 01       	movw	r22, r24
    140c:	e1 e4       	ldi	r30, 0x41	; 65
    140e:	f5 e0       	ldi	r31, 0x05	; 5
    1410:	40 83       	st	Z, r20
    1412:	51 83       	std	Z+1, r21	; 0x01
    1414:	62 83       	std	Z+2, r22	; 0x02
    1416:	73 83       	std	Z+3, r23	; 0x03
				set_functionality(FG0, FUNCGEN.frequency_A, FUNCGEN.output_type_A);
    1418:	20 89       	ldd	r18, Z+16	; 0x10
    141a:	85 e0       	ldi	r24, 0x05	; 5
    141c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <set_functionality>
				update_UI_activity(LCD_LINE_1, 1);
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
				break;
    1428:	55 c1       	rjmp	.+682    	; 0x16d4 <set_parameter+0x2fe>
				
			case PARAM_TYPE:
				switch(UART.rx_buffer[9]) {
    142a:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <UART+0x9>
    142e:	81 35       	cpi	r24, 0x51	; 81
    1430:	c9 f0       	breq	.+50     	; 0x1464 <set_parameter+0x8e>
    1432:	28 f4       	brcc	.+10     	; 0x143e <set_parameter+0x68>
    1434:	84 34       	cpi	r24, 0x44	; 68
    1436:	91 f1       	breq	.+100    	; 0x149c <set_parameter+0xc6>
    1438:	8f 34       	cpi	r24, 0x4F	; 79
    143a:	f1 f1       	breq	.+124    	; 0x14b8 <set_parameter+0xe2>
    143c:	4a c0       	rjmp	.+148    	; 0x14d2 <set_parameter+0xfc>
    143e:	83 35       	cpi	r24, 0x53	; 83
    1440:	19 f0       	breq	.+6      	; 0x1448 <set_parameter+0x72>
    1442:	84 35       	cpi	r24, 0x54	; 84
    1444:	e9 f0       	breq	.+58     	; 0x1480 <set_parameter+0xaa>
    1446:	45 c0       	rjmp	.+138    	; 0x14d2 <set_parameter+0xfc>
					case TYPE_SINE: FUNCGEN.output_type_A = SINE; snprintf(UI.type_A, 4, "%s","SIN"); break;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <FUNCGEN+0x10>
    144e:	eb e3       	ldi	r30, 0x3B	; 59
    1450:	f5 e0       	ldi	r31, 0x05	; 5
    1452:	83 e5       	ldi	r24, 0x53	; 83
    1454:	99 e4       	ldi	r25, 0x49	; 73
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	80 83       	st	Z, r24
    145a:	8e e4       	ldi	r24, 0x4E	; 78
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	93 83       	std	Z+3, r25	; 0x03
    1460:	82 83       	std	Z+2, r24	; 0x02
    1462:	37 c0       	rjmp	.+110    	; 0x14d2 <set_parameter+0xfc>
					case TYPE_SQUARE: FUNCGEN.output_type_A = SQUARE; snprintf(UI.type_A, 4, "%s","SQR"); break;
    1464:	83 e0       	ldi	r24, 0x03	; 3
    1466:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <FUNCGEN+0x10>
    146a:	eb e3       	ldi	r30, 0x3B	; 59
    146c:	f5 e0       	ldi	r31, 0x05	; 5
    146e:	83 e5       	ldi	r24, 0x53	; 83
    1470:	91 e5       	ldi	r25, 0x51	; 81
    1472:	91 83       	std	Z+1, r25	; 0x01
    1474:	80 83       	st	Z, r24
    1476:	82 e5       	ldi	r24, 0x52	; 82
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	93 83       	std	Z+3, r25	; 0x03
    147c:	82 83       	std	Z+2, r24	; 0x02
    147e:	29 c0       	rjmp	.+82     	; 0x14d2 <set_parameter+0xfc>
					case TYPE_TRIANGLE: FUNCGEN.output_type_A = TRIANGLE; snprintf(UI.type_A, 4, "%s","TRG"); break;
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <FUNCGEN+0x10>
    1486:	eb e3       	ldi	r30, 0x3B	; 59
    1488:	f5 e0       	ldi	r31, 0x05	; 5
    148a:	84 e5       	ldi	r24, 0x54	; 84
    148c:	92 e5       	ldi	r25, 0x52	; 82
    148e:	91 83       	std	Z+1, r25	; 0x01
    1490:	80 83       	st	Z, r24
    1492:	87 e4       	ldi	r24, 0x47	; 71
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	93 83       	std	Z+3, r25	; 0x03
    1498:	82 83       	std	Z+2, r24	; 0x02
    149a:	1b c0       	rjmp	.+54     	; 0x14d2 <set_parameter+0xfc>
					case TYPE_DC	  : FUNCGEN.output_type_A = DC; snprintf(UI.type_A, 4, "%s","DC "); break;
    149c:	84 e0       	ldi	r24, 0x04	; 4
    149e:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <FUNCGEN+0x10>
    14a2:	eb e3       	ldi	r30, 0x3B	; 59
    14a4:	f5 e0       	ldi	r31, 0x05	; 5
    14a6:	84 e4       	ldi	r24, 0x44	; 68
    14a8:	93 e4       	ldi	r25, 0x43	; 67
    14aa:	91 83       	std	Z+1, r25	; 0x01
    14ac:	80 83       	st	Z, r24
    14ae:	80 e2       	ldi	r24, 0x20	; 32
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	93 83       	std	Z+3, r25	; 0x03
    14b4:	82 83       	std	Z+2, r24	; 0x02
    14b6:	0d c0       	rjmp	.+26     	; 0x14d2 <set_parameter+0xfc>
					case TYPE_OFF	  : FUNCGEN.output_type_A = OFF; snprintf(UI.type_A, 4, "%s","OFF"); break;
    14b8:	85 e0       	ldi	r24, 0x05	; 5
    14ba:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <FUNCGEN+0x10>
    14be:	eb e3       	ldi	r30, 0x3B	; 59
    14c0:	f5 e0       	ldi	r31, 0x05	; 5
    14c2:	8f e4       	ldi	r24, 0x4F	; 79
    14c4:	96 e4       	ldi	r25, 0x46	; 70
    14c6:	91 83       	std	Z+1, r25	; 0x01
    14c8:	80 83       	st	Z, r24
    14ca:	86 e4       	ldi	r24, 0x46	; 70
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	93 83       	std	Z+3, r25	; 0x03
    14d0:	82 83       	std	Z+2, r24	; 0x02
					default: break;
				}
				set_functionality(FG0, FUNCGEN.frequency_A, FUNCGEN.output_type_A);
    14d2:	e1 e4       	ldi	r30, 0x41	; 65
    14d4:	f5 e0       	ldi	r31, 0x05	; 5
    14d6:	40 81       	ld	r20, Z
    14d8:	51 81       	ldd	r21, Z+1	; 0x01
    14da:	62 81       	ldd	r22, Z+2	; 0x02
    14dc:	73 81       	ldd	r23, Z+3	; 0x03
    14de:	20 89       	ldd	r18, Z+16	; 0x10
    14e0:	85 e0       	ldi	r24, 0x05	; 5
    14e2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <set_functionality>
				update_UI_activity(LCD_LINE_1, 0);
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
				break;
    14ee:	f2 c0       	rjmp	.+484    	; 0x16d4 <set_parameter+0x2fe>
				
			case PARAM_AMP:
				FUNCGEN.amplitude_A = retrieve_amplitude_12_bit(PARAM_CH0);
    14f0:	80 e3       	ldi	r24, 0x30	; 48
    14f2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <retrieve_amplitude_12_bit>
    14f6:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <FUNCGEN+0xd>
    14fa:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <FUNCGEN+0xc>
				set_amplitude(FUNCGEN.amplitude_A, FG0);
    14fe:	65 e0       	ldi	r22, 0x05	; 5
    1500:	0e 94 50 03 	call	0x6a0	; 0x6a0 <set_amplitude>
				update_UI_activity(LCD_LINE_2, 0);
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	80 e4       	ldi	r24, 0x40	; 64
    1508:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
				break;
    150c:	e3 c0       	rjmp	.+454    	; 0x16d4 <set_parameter+0x2fe>
				
			case PARAM_BIAS: 
				FUNCGEN.bias_A = retrieve_bias_12_bit(PARAM_CH0);
    150e:	80 e3       	ldi	r24, 0x30	; 48
    1510:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <retrieve_bias_12_bit>
    1514:	c1 e4       	ldi	r28, 0x41	; 65
    1516:	d5 e0       	ldi	r29, 0x05	; 5
    1518:	9b 8b       	std	Y+19, r25	; 0x13
    151a:	8a 8b       	std	Y+18, r24	; 0x12
				FUNCGEN.bias_A_sign = retrieve_bias_sign(); 
    151c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <retrieve_bias_sign>
    1520:	8e 8b       	std	Y+22, r24	; 0x16
				if (FUNCGEN.bias_A_sign == POSITIVE) set_dc_bias(FG0, 0, NEGATIVE);
    1522:	81 11       	cpse	r24, r1
    1524:	07 c0       	rjmp	.+14     	; 0x1534 <set_parameter+0x15e>
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	85 e0       	ldi	r24, 0x05	; 5
    152e:	0e 94 cb 03 	call	0x796	; 0x796 <set_dc_bias>
    1532:	06 c0       	rjmp	.+12     	; 0x1540 <set_parameter+0x16a>
				else set_dc_bias(FG0, 0, POSITIVE);
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	85 e0       	ldi	r24, 0x05	; 5
    153c:	0e 94 cb 03 	call	0x796	; 0x796 <set_dc_bias>
				set_dc_bias(FG0, FUNCGEN.bias_A, FUNCGEN.bias_A_sign);
    1540:	e1 e4       	ldi	r30, 0x41	; 65
    1542:	f5 e0       	ldi	r31, 0x05	; 5
    1544:	62 89       	ldd	r22, Z+18	; 0x12
    1546:	73 89       	ldd	r23, Z+19	; 0x13
    1548:	46 89       	ldd	r20, Z+22	; 0x16
    154a:	85 e0       	ldi	r24, 0x05	; 5
    154c:	0e 94 cb 03 	call	0x796	; 0x796 <set_dc_bias>
				update_UI_activity(LCD_LINE_2, 1);
    1550:	61 e0       	ldi	r22, 0x01	; 1
    1552:	80 e4       	ldi	r24, 0x40	; 64
    1554:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
				break;
    1558:	bd c0       	rjmp	.+378    	; 0x16d4 <set_parameter+0x2fe>
				
			default: break;
		}
		
	}
	else if (UART.rx_buffer[4] == PARAM_CH1) { 
    155a:	81 33       	cpi	r24, 0x31	; 49
    155c:	09 f0       	breq	.+2      	; 0x1560 <set_parameter+0x18a>
    155e:	ba c0       	rjmp	.+372    	; 0x16d4 <set_parameter+0x2fe>
		switch(UART.rx_buffer[6]) {
    1560:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <UART+0x6>
    1564:	82 34       	cpi	r24, 0x42	; 66
    1566:	09 f4       	brne	.+2      	; 0x156a <set_parameter+0x194>
    1568:	90 c0       	rjmp	.+288    	; 0x168a <set_parameter+0x2b4>
    156a:	20 f4       	brcc	.+8      	; 0x1574 <set_parameter+0x19e>
    156c:	81 34       	cpi	r24, 0x41	; 65
    156e:	09 f4       	brne	.+2      	; 0x1572 <set_parameter+0x19c>
    1570:	7d c0       	rjmp	.+250    	; 0x166c <set_parameter+0x296>
    1572:	b0 c0       	rjmp	.+352    	; 0x16d4 <set_parameter+0x2fe>
    1574:	86 34       	cpi	r24, 0x46	; 70
    1576:	19 f0       	breq	.+6      	; 0x157e <set_parameter+0x1a8>
    1578:	84 35       	cpi	r24, 0x54	; 84
    157a:	a9 f0       	breq	.+42     	; 0x15a6 <set_parameter+0x1d0>
    157c:	ab c0       	rjmp	.+342    	; 0x16d4 <set_parameter+0x2fe>
			case PARAM_FREQ: 
				FUNCGEN.frequency_B = retrieve_frequency_uint32(PARAM_CH1);
    157e:	81 e3       	ldi	r24, 0x31	; 49
    1580:	0e 94 15 08 	call	0x102a	; 0x102a <retrieve_frequency_uint32>
    1584:	ab 01       	movw	r20, r22
    1586:	bc 01       	movw	r22, r24
    1588:	e1 e4       	ldi	r30, 0x41	; 65
    158a:	f5 e0       	ldi	r31, 0x05	; 5
    158c:	44 83       	std	Z+4, r20	; 0x04
    158e:	55 83       	std	Z+5, r21	; 0x05
    1590:	66 83       	std	Z+6, r22	; 0x06
    1592:	77 83       	std	Z+7, r23	; 0x07
				set_functionality(FG1, FUNCGEN.frequency_B, FUNCGEN.output_type_B);
    1594:	21 89       	ldd	r18, Z+17	; 0x11
    1596:	86 e0       	ldi	r24, 0x06	; 6
    1598:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <set_functionality>
				update_UI_activity(LCD_LINE_3, 1);
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	84 e1       	ldi	r24, 0x14	; 20
    15a0:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
				break;
    15a4:	97 c0       	rjmp	.+302    	; 0x16d4 <set_parameter+0x2fe>
				
			case PARAM_TYPE:
				switch(UART.rx_buffer[9]) {
    15a6:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <UART+0x9>
    15aa:	81 35       	cpi	r24, 0x51	; 81
    15ac:	c9 f0       	breq	.+50     	; 0x15e0 <set_parameter+0x20a>
    15ae:	28 f4       	brcc	.+10     	; 0x15ba <set_parameter+0x1e4>
    15b0:	84 34       	cpi	r24, 0x44	; 68
    15b2:	91 f1       	breq	.+100    	; 0x1618 <set_parameter+0x242>
    15b4:	8f 34       	cpi	r24, 0x4F	; 79
    15b6:	f1 f1       	breq	.+124    	; 0x1634 <set_parameter+0x25e>
    15b8:	4a c0       	rjmp	.+148    	; 0x164e <set_parameter+0x278>
    15ba:	83 35       	cpi	r24, 0x53	; 83
    15bc:	19 f0       	breq	.+6      	; 0x15c4 <set_parameter+0x1ee>
    15be:	84 35       	cpi	r24, 0x54	; 84
    15c0:	e9 f0       	breq	.+58     	; 0x15fc <set_parameter+0x226>
    15c2:	45 c0       	rjmp	.+138    	; 0x164e <set_parameter+0x278>
					case TYPE_SINE: FUNCGEN.output_type_B = SINE; snprintf(UI.type_B, 4, "%s","SIN"); break;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <FUNCGEN+0x11>
    15ca:	ee e3       	ldi	r30, 0x3E	; 62
    15cc:	f5 e0       	ldi	r31, 0x05	; 5
    15ce:	83 e5       	ldi	r24, 0x53	; 83
    15d0:	99 e4       	ldi	r25, 0x49	; 73
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
    15d6:	8e e4       	ldi	r24, 0x4E	; 78
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	93 83       	std	Z+3, r25	; 0x03
    15dc:	82 83       	std	Z+2, r24	; 0x02
    15de:	37 c0       	rjmp	.+110    	; 0x164e <set_parameter+0x278>
					case TYPE_SQUARE: FUNCGEN.output_type_B = SQUARE;snprintf(UI.type_B, 4, "%s","SQR"); break;
    15e0:	83 e0       	ldi	r24, 0x03	; 3
    15e2:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <FUNCGEN+0x11>
    15e6:	ee e3       	ldi	r30, 0x3E	; 62
    15e8:	f5 e0       	ldi	r31, 0x05	; 5
    15ea:	83 e5       	ldi	r24, 0x53	; 83
    15ec:	91 e5       	ldi	r25, 0x51	; 81
    15ee:	91 83       	std	Z+1, r25	; 0x01
    15f0:	80 83       	st	Z, r24
    15f2:	82 e5       	ldi	r24, 0x52	; 82
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	93 83       	std	Z+3, r25	; 0x03
    15f8:	82 83       	std	Z+2, r24	; 0x02
    15fa:	29 c0       	rjmp	.+82     	; 0x164e <set_parameter+0x278>
					case TYPE_TRIANGLE: FUNCGEN.output_type_B = TRIANGLE; snprintf(UI.type_B, 4, "%s","TRG"); break;
    15fc:	82 e0       	ldi	r24, 0x02	; 2
    15fe:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <FUNCGEN+0x11>
    1602:	ee e3       	ldi	r30, 0x3E	; 62
    1604:	f5 e0       	ldi	r31, 0x05	; 5
    1606:	84 e5       	ldi	r24, 0x54	; 84
    1608:	92 e5       	ldi	r25, 0x52	; 82
    160a:	91 83       	std	Z+1, r25	; 0x01
    160c:	80 83       	st	Z, r24
    160e:	87 e4       	ldi	r24, 0x47	; 71
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	93 83       	std	Z+3, r25	; 0x03
    1614:	82 83       	std	Z+2, r24	; 0x02
    1616:	1b c0       	rjmp	.+54     	; 0x164e <set_parameter+0x278>
					case TYPE_DC	  : FUNCGEN.output_type_B = DC; snprintf(UI.type_B, 4, "%s","DC "); break;
    1618:	84 e0       	ldi	r24, 0x04	; 4
    161a:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <FUNCGEN+0x11>
    161e:	ee e3       	ldi	r30, 0x3E	; 62
    1620:	f5 e0       	ldi	r31, 0x05	; 5
    1622:	84 e4       	ldi	r24, 0x44	; 68
    1624:	93 e4       	ldi	r25, 0x43	; 67
    1626:	91 83       	std	Z+1, r25	; 0x01
    1628:	80 83       	st	Z, r24
    162a:	80 e2       	ldi	r24, 0x20	; 32
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	93 83       	std	Z+3, r25	; 0x03
    1630:	82 83       	std	Z+2, r24	; 0x02
    1632:	0d c0       	rjmp	.+26     	; 0x164e <set_parameter+0x278>
					case TYPE_OFF	  : FUNCGEN.output_type_B = OFF;snprintf(UI.type_B, 4, "%s","OFF"); break;
    1634:	85 e0       	ldi	r24, 0x05	; 5
    1636:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <FUNCGEN+0x11>
    163a:	ee e3       	ldi	r30, 0x3E	; 62
    163c:	f5 e0       	ldi	r31, 0x05	; 5
    163e:	8f e4       	ldi	r24, 0x4F	; 79
    1640:	96 e4       	ldi	r25, 0x46	; 70
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	80 83       	st	Z, r24
    1646:	86 e4       	ldi	r24, 0x46	; 70
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	93 83       	std	Z+3, r25	; 0x03
    164c:	82 83       	std	Z+2, r24	; 0x02
					default: break;
				}
				set_functionality(FG1, FUNCGEN.frequency_B, FUNCGEN.output_type_B);
    164e:	e1 e4       	ldi	r30, 0x41	; 65
    1650:	f5 e0       	ldi	r31, 0x05	; 5
    1652:	44 81       	ldd	r20, Z+4	; 0x04
    1654:	55 81       	ldd	r21, Z+5	; 0x05
    1656:	66 81       	ldd	r22, Z+6	; 0x06
    1658:	77 81       	ldd	r23, Z+7	; 0x07
    165a:	21 89       	ldd	r18, Z+17	; 0x11
    165c:	86 e0       	ldi	r24, 0x06	; 6
    165e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <set_functionality>
				update_UI_activity(LCD_LINE_3, 0);
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	84 e1       	ldi	r24, 0x14	; 20
    1666:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
				break;
    166a:	34 c0       	rjmp	.+104    	; 0x16d4 <set_parameter+0x2fe>
				
			case PARAM_AMP:
				FUNCGEN.amplitude_B = retrieve_amplitude_12_bit(PARAM_CH1);
    166c:	81 e3       	ldi	r24, 0x31	; 49
    166e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <retrieve_amplitude_12_bit>
    1672:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <FUNCGEN+0xf>
    1676:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <FUNCGEN+0xe>
				set_amplitude(FUNCGEN.amplitude_B, FG1);
    167a:	66 e0       	ldi	r22, 0x06	; 6
    167c:	0e 94 50 03 	call	0x6a0	; 0x6a0 <set_amplitude>
				update_UI_activity(LCD_LINE_4, 0);
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	84 e5       	ldi	r24, 0x54	; 84
    1684:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
				break;
    1688:	25 c0       	rjmp	.+74     	; 0x16d4 <set_parameter+0x2fe>
				
			case PARAM_BIAS: 
				FUNCGEN.bias_B = retrieve_bias_12_bit(PARAM_CH1);
    168a:	81 e3       	ldi	r24, 0x31	; 49
    168c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <retrieve_bias_12_bit>
    1690:	c1 e4       	ldi	r28, 0x41	; 65
    1692:	d5 e0       	ldi	r29, 0x05	; 5
    1694:	9d 8b       	std	Y+21, r25	; 0x15
    1696:	8c 8b       	std	Y+20, r24	; 0x14
				FUNCGEN.bias_B_sign = retrieve_bias_sign(); 
    1698:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <retrieve_bias_sign>
    169c:	8f 8b       	std	Y+23, r24	; 0x17
				if (FUNCGEN.bias_B_sign == POSITIVE) set_dc_bias(FG1, 0, NEGATIVE);
    169e:	81 11       	cpse	r24, r1
    16a0:	07 c0       	rjmp	.+14     	; 0x16b0 <set_parameter+0x2da>
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	86 e0       	ldi	r24, 0x06	; 6
    16aa:	0e 94 cb 03 	call	0x796	; 0x796 <set_dc_bias>
    16ae:	06 c0       	rjmp	.+12     	; 0x16bc <set_parameter+0x2e6>
				else set_dc_bias(FG1, 0, POSITIVE);
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	86 e0       	ldi	r24, 0x06	; 6
    16b8:	0e 94 cb 03 	call	0x796	; 0x796 <set_dc_bias>
				set_dc_bias(FG1, FUNCGEN.bias_B, FUNCGEN.bias_B_sign);
    16bc:	e1 e4       	ldi	r30, 0x41	; 65
    16be:	f5 e0       	ldi	r31, 0x05	; 5
    16c0:	64 89       	ldd	r22, Z+20	; 0x14
    16c2:	75 89       	ldd	r23, Z+21	; 0x15
    16c4:	47 89       	ldd	r20, Z+23	; 0x17
    16c6:	86 e0       	ldi	r24, 0x06	; 6
    16c8:	0e 94 cb 03 	call	0x796	; 0x796 <set_dc_bias>
				update_UI_activity(LCD_LINE_4, 1);
    16cc:	61 e0       	ldi	r22, 0x01	; 1
    16ce:	84 e5       	ldi	r24, 0x54	; 84
    16d0:	0e 94 00 07 	call	0xe00	; 0xe00 <update_UI_activity>
				break;
				
			default: break;
		}
	}
}
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	08 95       	ret

000016da <socket_message_handler>:
		}
	}
}


void socket_message_handler() {
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	1f 92       	push	r1
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
	volatile enum MESSAGE_HANDLER_STATES msg_state = MESSAGE_HANDLER_IDLE;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	89 83       	std	Y+1, r24	; 0x01
				break;
				
			case VOLUME_ADJUST:
				set_volume(update_sg_param_value(VOLUME));
				clear_uart_rx_message();
				msg_state = MESSAGE_HANDLER_IDLE;
    16e8:	ff 24       	eor	r15, r15
    16ea:	f3 94       	inc	r15
//				send_command_UART("OK\r\n");	
//				ENABLE_TIMER();			
				break;
				
			case LCD_PARAM_ADJUST:
				switch(UART.rx_buffer[6]) {
    16ec:	04 ed       	ldi	r16, 0xD4	; 212
    16ee:	15 e0       	ldi	r17, 0x05	; 5
	//Init_Timer();
	while(!output_confirm) {
		update_device_status();
		switch(msg_state) {
			case MESSAGE_HANDLER_IDLE:
				if (UART.message_received) {
    16f0:	0f 2e       	mov	r0, r31
    16f2:	f5 e5       	ldi	r31, 0x55	; 85
    16f4:	8f 2e       	mov	r8, r31
    16f6:	f6 e0       	ldi	r31, 0x06	; 6
    16f8:	9f 2e       	mov	r9, r31
    16fa:	f0 2d       	mov	r31, r0
					beep();
					if ((UART.rx_buffer[2]) == 'G' && (UART.rx_buffer[3] == 'I')) msg_state = PROVIDE_DETAILS;
					else if ((UART.rx_buffer[2]) == 'B' && (UART.rx_buffer[3] == 'O')) msg_state = BOOT_FROM_APP;
					else if (UART.rx_buffer[2] == 'C' && UART.rx_buffer[3] == '=') msg_state = FUNCTION_HANDLER;
					else if (UART.rx_buffer[2] == 'L' && UART.rx_buffer[3] == 'C') msg_state = LCD_PARAM_ADJUST;
					else if (UART.rx_buffer[2] == 'R' && UART.rx_buffer[3] == 'E') msg_state = RESET_HANDLER;
    16fc:	0f 2e       	mov	r0, r31
    16fe:	f7 e0       	ldi	r31, 0x07	; 7
    1700:	af 2e       	mov	r10, r31
    1702:	f0 2d       	mov	r31, r0
//					DISABLE_TIMER();
					beep();
					if ((UART.rx_buffer[2]) == 'G' && (UART.rx_buffer[3] == 'I')) msg_state = PROVIDE_DETAILS;
					else if ((UART.rx_buffer[2]) == 'B' && (UART.rx_buffer[3] == 'O')) msg_state = BOOT_FROM_APP;
					else if (UART.rx_buffer[2] == 'C' && UART.rx_buffer[3] == '=') msg_state = FUNCTION_HANDLER;
					else if (UART.rx_buffer[2] == 'L' && UART.rx_buffer[3] == 'C') msg_state = LCD_PARAM_ADJUST;
    1704:	0f 2e       	mov	r0, r31
    1706:	f5 e0       	ldi	r31, 0x05	; 5
    1708:	bf 2e       	mov	r11, r31
    170a:	f0 2d       	mov	r31, r0
				if (UART.message_received) {
//					DISABLE_TIMER();
					beep();
					if ((UART.rx_buffer[2]) == 'G' && (UART.rx_buffer[3] == 'I')) msg_state = PROVIDE_DETAILS;
					else if ((UART.rx_buffer[2]) == 'B' && (UART.rx_buffer[3] == 'O')) msg_state = BOOT_FROM_APP;
					else if (UART.rx_buffer[2] == 'C' && UART.rx_buffer[3] == '=') msg_state = FUNCTION_HANDLER;
    170c:	68 94       	set
    170e:	cc 24       	eor	r12, r12
    1710:	c2 f8       	bld	r12, 2
			case MESSAGE_HANDLER_IDLE:
				if (UART.message_received) {
//					DISABLE_TIMER();
					beep();
					if ((UART.rx_buffer[2]) == 'G' && (UART.rx_buffer[3] == 'I')) msg_state = PROVIDE_DETAILS;
					else if ((UART.rx_buffer[2]) == 'B' && (UART.rx_buffer[3] == 'O')) msg_state = BOOT_FROM_APP;
    1712:	0f 2e       	mov	r0, r31
    1714:	f3 e0       	ldi	r31, 0x03	; 3
    1716:	df 2e       	mov	r13, r31
    1718:	f0 2d       	mov	r31, r0

void socket_message_handler() {
	volatile enum MESSAGE_HANDLER_STATES msg_state = MESSAGE_HANDLER_IDLE;
	bool output_confirm = false;
	//Init_Timer();
	while(!output_confirm) {
    171a:	7d c1       	rjmp	.+762    	; 0x1a16 <socket_message_handler+0x33c>
		update_device_status();
		switch(msg_state) {
			case MESSAGE_HANDLER_IDLE:
				if (UART.message_received) {
    171c:	f4 01       	movw	r30, r8
    171e:	80 81       	ld	r24, Z
    1720:	88 23       	and	r24, r24
    1722:	09 f4       	brne	.+2      	; 0x1726 <socket_message_handler+0x4c>
    1724:	78 c1       	rjmp	.+752    	; 0x1a16 <socket_message_handler+0x33c>
//					DISABLE_TIMER();
					beep();
    1726:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
					if ((UART.rx_buffer[2]) == 'G' && (UART.rx_buffer[3] == 'I')) msg_state = PROVIDE_DETAILS;
    172a:	f8 01       	movw	r30, r16
    172c:	82 81       	ldd	r24, Z+2	; 0x02
    172e:	87 34       	cpi	r24, 0x47	; 71
    1730:	31 f4       	brne	.+12     	; 0x173e <socket_message_handler+0x64>
    1732:	83 81       	ldd	r24, Z+3	; 0x03
    1734:	89 34       	cpi	r24, 0x49	; 73
    1736:	19 f5       	brne	.+70     	; 0x177e <socket_message_handler+0xa4>
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	6c c1       	rjmp	.+728    	; 0x1a16 <socket_message_handler+0x33c>
					else if ((UART.rx_buffer[2]) == 'B' && (UART.rx_buffer[3] == 'O')) msg_state = BOOT_FROM_APP;
    173e:	82 34       	cpi	r24, 0x42	; 66
    1740:	31 f4       	brne	.+12     	; 0x174e <socket_message_handler+0x74>
    1742:	f8 01       	movw	r30, r16
    1744:	83 81       	ldd	r24, Z+3	; 0x03
    1746:	8f 34       	cpi	r24, 0x4F	; 79
    1748:	d1 f4       	brne	.+52     	; 0x177e <socket_message_handler+0xa4>
    174a:	d9 82       	std	Y+1, r13	; 0x01
    174c:	64 c1       	rjmp	.+712    	; 0x1a16 <socket_message_handler+0x33c>
					else if (UART.rx_buffer[2] == 'C' && UART.rx_buffer[3] == '=') msg_state = FUNCTION_HANDLER;
    174e:	83 34       	cpi	r24, 0x43	; 67
    1750:	31 f4       	brne	.+12     	; 0x175e <socket_message_handler+0x84>
    1752:	f8 01       	movw	r30, r16
    1754:	83 81       	ldd	r24, Z+3	; 0x03
    1756:	8d 33       	cpi	r24, 0x3D	; 61
    1758:	91 f4       	brne	.+36     	; 0x177e <socket_message_handler+0xa4>
    175a:	c9 82       	std	Y+1, r12	; 0x01
    175c:	5c c1       	rjmp	.+696    	; 0x1a16 <socket_message_handler+0x33c>
					else if (UART.rx_buffer[2] == 'L' && UART.rx_buffer[3] == 'C') msg_state = LCD_PARAM_ADJUST;
    175e:	8c 34       	cpi	r24, 0x4C	; 76
    1760:	31 f4       	brne	.+12     	; 0x176e <socket_message_handler+0x94>
    1762:	f8 01       	movw	r30, r16
    1764:	83 81       	ldd	r24, Z+3	; 0x03
    1766:	83 34       	cpi	r24, 0x43	; 67
    1768:	51 f4       	brne	.+20     	; 0x177e <socket_message_handler+0xa4>
    176a:	b9 82       	std	Y+1, r11	; 0x01
    176c:	54 c1       	rjmp	.+680    	; 0x1a16 <socket_message_handler+0x33c>
					else if (UART.rx_buffer[2] == 'R' && UART.rx_buffer[3] == 'E') msg_state = RESET_HANDLER;
    176e:	82 35       	cpi	r24, 0x52	; 82
    1770:	31 f4       	brne	.+12     	; 0x177e <socket_message_handler+0xa4>
    1772:	f8 01       	movw	r30, r16
    1774:	83 81       	ldd	r24, Z+3	; 0x03
    1776:	85 34       	cpi	r24, 0x45	; 69
    1778:	11 f4       	brne	.+4      	; 0x177e <socket_message_handler+0xa4>
    177a:	a9 82       	std	Y+1, r10	; 0x01
    177c:	4c c1       	rjmp	.+664    	; 0x1a16 <socket_message_handler+0x33c>
					else clear_uart_rx_message();
    177e:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
    1782:	49 c1       	rjmp	.+658    	; 0x1a16 <socket_message_handler+0x33c>
				}
				break;
				
			case PROVIDE_DETAILS:
				switch(UART.rx_buffer[7]) {
    1784:	f8 01       	movw	r30, r16
    1786:	87 81       	ldd	r24, Z+7	; 0x07
    1788:	81 34       	cpi	r24, 0x41	; 65
    178a:	39 f0       	breq	.+14     	; 0x179a <socket_message_handler+0xc0>
    178c:	82 34       	cpi	r24, 0x42	; 66
    178e:	49 f4       	brne	.+18     	; 0x17a2 <socket_message_handler+0xc8>
					case 'B': send_command_UART(get_battery_status());  break;
    1790:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <get_battery_status>
    1794:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <socket_message_handler+0xc8>
					case 'A':  send_command_UART(get_ac_power_status()); break;
    179a:	0e 94 03 06 	call	0xc06	; 0xc06 <get_ac_power_status>
    179e:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
					default: break;
				}
				clear_uart_rx_message();
    17a2:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
				msg_state = MESSAGE_HANDLER_IDLE;
    17a6:	f9 82       	std	Y+1, r15	; 0x01
//				ENABLE_TIMER();
				break;
    17a8:	36 c1       	rjmp	.+620    	; 0x1a16 <socket_message_handler+0x33c>

			case FUNCTION_HANDLER:
				set_parameter();
    17aa:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <set_parameter>
				clear_uart_rx_message();
    17ae:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
				msg_state = MESSAGE_HANDLER_IDLE;
    17b2:	f9 82       	std	Y+1, r15	; 0x01
				//send_command_UART("OK\r\n");
//				ENABLE_TIMER();
				break;
    17b4:	30 c1       	rjmp	.+608    	; 0x1a16 <socket_message_handler+0x33c>
				
			case RESET_HANDLER:
				clear_LCD();
    17b6:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
				print_LCD_line(SHUTDOWN_MSG, LCD_LINE_2);
    17ba:	60 e4       	ldi	r22, 0x40	; 64
    17bc:	88 ed       	ldi	r24, 0xD8	; 216
    17be:	91 e0       	ldi	r25, 0x01	; 1
    17c0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
    17c4:	64 e1       	ldi	r22, 0x14	; 20
    17c6:	8d ee       	ldi	r24, 0xED	; 237
    17c8:	91 e0       	ldi	r25, 0x01	; 1
    17ca:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    17ce:	15 e3       	ldi	r17, 0x35	; 53
				for (uint8_t ptr = 5; ptr > 0; ptr--) {
					print_LCD_char(ptr + '0',LCD_LINE_4, 9); // X position
    17d0:	49 e0       	ldi	r20, 0x09	; 9
    17d2:	64 e5       	ldi	r22, 0x54	; 84
    17d4:	81 2f       	mov	r24, r17
    17d6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17da:	ff ef       	ldi	r31, 0xFF	; 255
    17dc:	29 e6       	ldi	r18, 0x69	; 105
    17de:	88 e1       	ldi	r24, 0x18	; 24
    17e0:	f1 50       	subi	r31, 0x01	; 1
    17e2:	20 40       	sbci	r18, 0x00	; 0
    17e4:	80 40       	sbci	r24, 0x00	; 0
    17e6:	e1 f7       	brne	.-8      	; 0x17e0 <socket_message_handler+0x106>
    17e8:	00 c0       	rjmp	.+0      	; 0x17ea <socket_message_handler+0x110>
    17ea:	00 00       	nop
    17ec:	11 50       	subi	r17, 0x01	; 1
				
			case RESET_HANDLER:
				clear_LCD();
				print_LCD_line(SHUTDOWN_MSG, LCD_LINE_2);
				print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
				for (uint8_t ptr = 5; ptr > 0; ptr--) {
    17ee:	10 33       	cpi	r17, 0x30	; 48
    17f0:	79 f7       	brne	.-34     	; 0x17d0 <socket_message_handler+0xf6>
					print_LCD_char(ptr + '0',LCD_LINE_4, 9); // X position
					_delay_ms(DELAY_COMMAND_MS);
				}
				play_melody(false);
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	0e 94 39 02 	call	0x472	; 0x472 <play_melody>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    17f8:	98 e0       	ldi	r25, 0x08	; 8
    17fa:	88 e1       	ldi	r24, 0x18	; 24
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	a8 95       	wdr
    1802:	81 bd       	out	0x21, r24	; 33
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	91 bd       	out	0x21, r25	; 33
    1808:	ff cf       	rjmp	.-2      	; 0x1808 <socket_message_handler+0x12e>
				RESET_DEVICE();
				break;
					
			case BOOT_FROM_APP: 
				if (UART.rx_buffer[7] == 'D') { // Direct request.
    180a:	f8 01       	movw	r30, r16
    180c:	87 81       	ldd	r24, Z+7	; 0x07
    180e:	84 34       	cpi	r24, 0x44	; 68
    1810:	61 f5       	brne	.+88     	; 0x186a <socket_message_handler+0x190>
					eeprom_write_byte((uint8_t *)STORED_CONNECTION_STATE_ADDRESS, 'D');
    1812:	64 e4       	ldi	r22, 0x44	; 68
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	0e 94 cc 1c 	call	0x3998	; 0x3998 <eeprom_write_byte>
					clear_LCD();
    181c:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					print_LCD_line(REBOOT_MSG, LCD_LINE_2);
    1820:	60 e4       	ldi	r22, 0x40	; 64
    1822:	82 e0       	ldi	r24, 0x02	; 2
    1824:	92 e0       	ldi	r25, 0x02	; 2
    1826:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
    182a:	64 e1       	ldi	r22, 0x14	; 20
    182c:	8d ee       	ldi	r24, 0xED	; 237
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    1834:	15 e3       	ldi	r17, 0x35	; 53
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
    1836:	49 e0       	ldi	r20, 0x09	; 9
    1838:	64 e1       	ldi	r22, 0x14	; 20
    183a:	81 2f       	mov	r24, r17
    183c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
    1840:	ff ef       	ldi	r31, 0xFF	; 255
    1842:	29 e6       	ldi	r18, 0x69	; 105
    1844:	88 e1       	ldi	r24, 0x18	; 24
    1846:	f1 50       	subi	r31, 0x01	; 1
    1848:	20 40       	sbci	r18, 0x00	; 0
    184a:	80 40       	sbci	r24, 0x00	; 0
    184c:	e1 f7       	brne	.-8      	; 0x1846 <socket_message_handler+0x16c>
    184e:	00 c0       	rjmp	.+0      	; 0x1850 <socket_message_handler+0x176>
    1850:	00 00       	nop
    1852:	11 50       	subi	r17, 0x01	; 1
				if (UART.rx_buffer[7] == 'D') { // Direct request.
					eeprom_write_byte((uint8_t *)STORED_CONNECTION_STATE_ADDRESS, 'D');
					clear_LCD();
					print_LCD_line(REBOOT_MSG, LCD_LINE_2);
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
    1854:	10 33       	cpi	r17, 0x30	; 48
    1856:	79 f7       	brne	.-34     	; 0x1836 <socket_message_handler+0x15c>
    1858:	98 e0       	ldi	r25, 0x08	; 8
    185a:	88 e1       	ldi	r24, 0x18	; 24
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	a8 95       	wdr
    1862:	81 bd       	out	0x21, r24	; 33
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	91 bd       	out	0x21, r25	; 33
    1868:	ff cf       	rjmp	.-2      	; 0x1868 <socket_message_handler+0x18e>
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
						_delay_ms(DELAY_COMMAND_MS);
					}	
					RESET_DEVICE();
				}
				else if (UART.rx_buffer[7] == 'L') { // LAN request
    186a:	8c 34       	cpi	r24, 0x4C	; 76
    186c:	61 f5       	brne	.+88     	; 0x18c6 <socket_message_handler+0x1ec>
					eeprom_write_byte((uint8_t *)STORED_CONNECTION_STATE_ADDRESS, 'L');
    186e:	6c e4       	ldi	r22, 0x4C	; 76
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	0e 94 cc 1c 	call	0x3998	; 0x3998 <eeprom_write_byte>
					clear_LCD();
    1878:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					print_LCD_line(REBOOT_MSG, LCD_LINE_2);
    187c:	60 e4       	ldi	r22, 0x40	; 64
    187e:	82 e0       	ldi	r24, 0x02	; 2
    1880:	92 e0       	ldi	r25, 0x02	; 2
    1882:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
    1886:	64 e1       	ldi	r22, 0x14	; 20
    1888:	8d ee       	ldi	r24, 0xED	; 237
    188a:	91 e0       	ldi	r25, 0x01	; 1
    188c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    1890:	15 e3       	ldi	r17, 0x35	; 53
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
    1892:	49 e0       	ldi	r20, 0x09	; 9
    1894:	64 e1       	ldi	r22, 0x14	; 20
    1896:	81 2f       	mov	r24, r17
    1898:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
    189c:	9f ef       	ldi	r25, 0xFF	; 255
    189e:	e9 e6       	ldi	r30, 0x69	; 105
    18a0:	f8 e1       	ldi	r31, 0x18	; 24
    18a2:	91 50       	subi	r25, 0x01	; 1
    18a4:	e0 40       	sbci	r30, 0x00	; 0
    18a6:	f0 40       	sbci	r31, 0x00	; 0
    18a8:	e1 f7       	brne	.-8      	; 0x18a2 <socket_message_handler+0x1c8>
    18aa:	00 c0       	rjmp	.+0      	; 0x18ac <socket_message_handler+0x1d2>
    18ac:	00 00       	nop
    18ae:	11 50       	subi	r17, 0x01	; 1
				else if (UART.rx_buffer[7] == 'L') { // LAN request
					eeprom_write_byte((uint8_t *)STORED_CONNECTION_STATE_ADDRESS, 'L');
					clear_LCD();
					print_LCD_line(REBOOT_MSG, LCD_LINE_2);
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
    18b0:	10 33       	cpi	r17, 0x30	; 48
    18b2:	79 f7       	brne	.-34     	; 0x1892 <socket_message_handler+0x1b8>
    18b4:	98 e0       	ldi	r25, 0x08	; 8
    18b6:	88 e1       	ldi	r24, 0x18	; 24
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	a8 95       	wdr
    18be:	81 bd       	out	0x21, r24	; 33
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	91 bd       	out	0x21, r25	; 33
    18c4:	ff cf       	rjmp	.-2      	; 0x18c4 <socket_message_handler+0x1ea>
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
						_delay_ms(DELAY_COMMAND_MS);
					}
					RESET_DEVICE();
				}
				else if (UART.rx_buffer[7] == 'S')  { // Shutdown
    18c6:	83 35       	cpi	r24, 0x53	; 83
    18c8:	39 f5       	brne	.+78     	; 0x1918 <socket_message_handler+0x23e>
					clear_LCD();
    18ca:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					print_LCD_line(SHUTDOWN_MSG, LCD_LINE_2);
    18ce:	60 e4       	ldi	r22, 0x40	; 64
    18d0:	88 ed       	ldi	r24, 0xD8	; 216
    18d2:	91 e0       	ldi	r25, 0x01	; 1
    18d4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
    18d8:	64 e1       	ldi	r22, 0x14	; 20
    18da:	8d ee       	ldi	r24, 0xED	; 237
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    18e2:	0f 2e       	mov	r0, r31
    18e4:	f5 e3       	ldi	r31, 0x35	; 53
    18e6:	ef 2e       	mov	r14, r31
    18e8:	f0 2d       	mov	r31, r0
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
    18ea:	49 e0       	ldi	r20, 0x09	; 9
    18ec:	64 e1       	ldi	r22, 0x14	; 20
    18ee:	8e 2d       	mov	r24, r14
    18f0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
    18f4:	2f ef       	ldi	r18, 0xFF	; 255
    18f6:	89 e6       	ldi	r24, 0x69	; 105
    18f8:	98 e1       	ldi	r25, 0x18	; 24
    18fa:	21 50       	subi	r18, 0x01	; 1
    18fc:	80 40       	sbci	r24, 0x00	; 0
    18fe:	90 40       	sbci	r25, 0x00	; 0
    1900:	e1 f7       	brne	.-8      	; 0x18fa <socket_message_handler+0x220>
    1902:	00 c0       	rjmp	.+0      	; 0x1904 <socket_message_handler+0x22a>
    1904:	00 00       	nop
    1906:	ea 94       	dec	r14
				}
				else if (UART.rx_buffer[7] == 'S')  { // Shutdown
					clear_LCD();
					print_LCD_line(SHUTDOWN_MSG, LCD_LINE_2);
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
    1908:	e0 e3       	ldi	r30, 0x30	; 48
    190a:	ee 12       	cpse	r14, r30
    190c:	ee cf       	rjmp	.-36     	; 0x18ea <socket_message_handler+0x210>
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
						_delay_ms(DELAY_COMMAND_MS);
					}
					play_melody(false);
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	0e 94 39 02 	call	0x472	; 0x472 <play_melody>
					DISABLE_DEVICE();
    1914:	da 98       	cbi	0x1b, 2	; 27
    1916:	7f c0       	rjmp	.+254    	; 0x1a16 <socket_message_handler+0x33c>
				}
				else if ((UART.rx_buffer[7] == 'R') && (UART.rx_buffer[10] == 'T'))  { // Shutdown
    1918:	82 35       	cpi	r24, 0x52	; 82
    191a:	09 f0       	breq	.+2      	; 0x191e <socket_message_handler+0x244>
    191c:	5c c0       	rjmp	.+184    	; 0x19d6 <socket_message_handler+0x2fc>
    191e:	f8 01       	movw	r30, r16
    1920:	82 85       	ldd	r24, Z+10	; 0x0a
    1922:	84 35       	cpi	r24, 0x54	; 84
    1924:	61 f5       	brne	.+88     	; 0x197e <socket_message_handler+0x2a4>
					clear_LCD();
    1926:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					print_LCD_line("Reset to factory... ", LCD_LINE_2);
    192a:	60 e4       	ldi	r22, 0x40	; 64
    192c:	87 e1       	ldi	r24, 0x17	; 23
    192e:	92 e0       	ldi	r25, 0x02	; 2
    1930:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
    1934:	64 e1       	ldi	r22, 0x14	; 20
    1936:	8d ee       	ldi	r24, 0xED	; 237
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    193e:	15 e3       	ldi	r17, 0x35	; 53
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
    1940:	49 e0       	ldi	r20, 0x09	; 9
    1942:	64 e1       	ldi	r22, 0x14	; 20
    1944:	81 2f       	mov	r24, r17
    1946:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
    194a:	ff ef       	ldi	r31, 0xFF	; 255
    194c:	29 e6       	ldi	r18, 0x69	; 105
    194e:	88 e1       	ldi	r24, 0x18	; 24
    1950:	f1 50       	subi	r31, 0x01	; 1
    1952:	20 40       	sbci	r18, 0x00	; 0
    1954:	80 40       	sbci	r24, 0x00	; 0
    1956:	e1 f7       	brne	.-8      	; 0x1950 <socket_message_handler+0x276>
    1958:	00 c0       	rjmp	.+0      	; 0x195a <socket_message_handler+0x280>
    195a:	00 00       	nop
    195c:	11 50       	subi	r17, 0x01	; 1
				}
				else if ((UART.rx_buffer[7] == 'R') && (UART.rx_buffer[10] == 'T'))  { // Shutdown
					clear_LCD();
					print_LCD_line("Reset to factory... ", LCD_LINE_2);
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
    195e:	10 33       	cpi	r17, 0x30	; 48
    1960:	79 f7       	brne	.-34     	; 0x1940 <socket_message_handler+0x266>
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
						_delay_ms(DELAY_COMMAND_MS);
					}
					play_melody(false);
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	0e 94 39 02 	call	0x472	; 0x472 <play_melody>
					erase_EEPROM_1K();
    1968:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <erase_EEPROM_1K>
    196c:	98 e0       	ldi	r25, 0x08	; 8
    196e:	88 e1       	ldi	r24, 0x18	; 24
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	a8 95       	wdr
    1976:	81 bd       	out	0x21, r24	; 33
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	91 bd       	out	0x21, r25	; 33
    197c:	ff cf       	rjmp	.-2      	; 0x197c <socket_message_handler+0x2a2>
					RESET_DEVICE();
				}
				else if ((UART.rx_buffer[7] == 'R') && (UART.rx_buffer[10] == 'E'))  { // Shutdown
    197e:	85 34       	cpi	r24, 0x45	; 69
    1980:	51 f5       	brne	.+84     	; 0x19d6 <socket_message_handler+0x2fc>
					clear_LCD();
    1982:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					print_LCD_line(REBOOT_MSG, LCD_LINE_2);
    1986:	60 e4       	ldi	r22, 0x40	; 64
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	92 e0       	ldi	r25, 0x02	; 2
    198c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
    1990:	64 e1       	ldi	r22, 0x14	; 20
    1992:	8d ee       	ldi	r24, 0xED	; 237
    1994:	91 e0       	ldi	r25, 0x01	; 1
    1996:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    199a:	15 e3       	ldi	r17, 0x35	; 53
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
    199c:	49 e0       	ldi	r20, 0x09	; 9
    199e:	64 e1       	ldi	r22, 0x14	; 20
    19a0:	81 2f       	mov	r24, r17
    19a2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
    19a6:	9f ef       	ldi	r25, 0xFF	; 255
    19a8:	e9 e6       	ldi	r30, 0x69	; 105
    19aa:	f8 e1       	ldi	r31, 0x18	; 24
    19ac:	91 50       	subi	r25, 0x01	; 1
    19ae:	e0 40       	sbci	r30, 0x00	; 0
    19b0:	f0 40       	sbci	r31, 0x00	; 0
    19b2:	e1 f7       	brne	.-8      	; 0x19ac <socket_message_handler+0x2d2>
    19b4:	00 c0       	rjmp	.+0      	; 0x19b6 <socket_message_handler+0x2dc>
    19b6:	00 00       	nop
    19b8:	11 50       	subi	r17, 0x01	; 1
				}
				else if ((UART.rx_buffer[7] == 'R') && (UART.rx_buffer[10] == 'E'))  { // Shutdown
					clear_LCD();
					print_LCD_line(REBOOT_MSG, LCD_LINE_2);
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
    19ba:	10 33       	cpi	r17, 0x30	; 48
    19bc:	79 f7       	brne	.-34     	; 0x199c <socket_message_handler+0x2c2>
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
						_delay_ms(DELAY_COMMAND_MS);
					}
					play_melody(false);
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	0e 94 39 02 	call	0x472	; 0x472 <play_melody>
    19c4:	98 e0       	ldi	r25, 0x08	; 8
    19c6:	88 e1       	ldi	r24, 0x18	; 24
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	a8 95       	wdr
    19ce:	81 bd       	out	0x21, r24	; 33
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	91 bd       	out	0x21, r25	; 33
    19d4:	ff cf       	rjmp	.-2      	; 0x19d4 <socket_message_handler+0x2fa>
					RESET_DEVICE();
				}	
				else msg_state = MESSAGE_HANDLER_IDLE;			
    19d6:	f9 82       	std	Y+1, r15	; 0x01
    19d8:	1e c0       	rjmp	.+60     	; 0x1a16 <socket_message_handler+0x33c>
//				send_command_UART("OK\r\n");	
//				ENABLE_TIMER();			
				break;
				
			case LCD_PARAM_ADJUST:
				switch(UART.rx_buffer[6]) {
    19da:	f8 01       	movw	r30, r16
    19dc:	86 81       	ldd	r24, Z+6	; 0x06
    19de:	82 34       	cpi	r24, 0x42	; 66
    19e0:	19 f0       	breq	.+6      	; 0x19e8 <socket_message_handler+0x30e>
    19e2:	83 34       	cpi	r24, 0x43	; 67
    19e4:	39 f0       	breq	.+14     	; 0x19f4 <socket_message_handler+0x31a>
    19e6:	0b c0       	rjmp	.+22     	; 0x19fe <socket_message_handler+0x324>
					case 'B': set_LCD_brightness(update_sg_param_value(BRIGHTNESS));  break;
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	0e 94 73 05 	call	0xae6	; 0xae6 <update_sg_param_value>
    19ee:	0e 94 83 03 	call	0x706	; 0x706 <set_LCD_brightness>
    19f2:	05 c0       	rjmp	.+10     	; 0x19fe <socket_message_handler+0x324>
					case 'C': set_LCD_contrast(update_sg_param_value(CONTRAST));  break;
    19f4:	8f 2d       	mov	r24, r15
    19f6:	0e 94 73 05 	call	0xae6	; 0xae6 <update_sg_param_value>
    19fa:	0e 94 75 03 	call	0x6ea	; 0x6ea <set_LCD_contrast>
					default: break;
				}
				clear_uart_rx_message();
    19fe:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
				msg_state = MESSAGE_HANDLER_IDLE;
    1a02:	f9 82       	std	Y+1, r15	; 0x01
//				send_command_UART("OK\r\n");
//				ENABLE_TIMER();
				break;
    1a04:	08 c0       	rjmp	.+16     	; 0x1a16 <socket_message_handler+0x33c>
				
			case VOLUME_ADJUST:
				set_volume(update_sg_param_value(VOLUME));
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	0e 94 73 05 	call	0xae6	; 0xae6 <update_sg_param_value>
    1a0c:	0e 94 65 05 	call	0xaca	; 0xaca <set_volume>
				clear_uart_rx_message();
    1a10:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
				msg_state = MESSAGE_HANDLER_IDLE;
    1a14:	f9 82       	std	Y+1, r15	; 0x01
	volatile enum MESSAGE_HANDLER_STATES msg_state = MESSAGE_HANDLER_IDLE;
	bool output_confirm = false;
	//Init_Timer();
	while(!output_confirm) {
		update_device_status();
		switch(msg_state) {
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	31 97       	sbiw	r30, 0x01	; 1
    1a1e:	e7 30       	cpi	r30, 0x07	; 7
    1a20:	f1 05       	cpc	r31, r1
    1a22:	c8 f7       	brcc	.-14     	; 0x1a16 <socket_message_handler+0x33c>
    1a24:	e6 5d       	subi	r30, 0xD6	; 214
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	0c 94 64 19 	jmp	0x32c8	; 0x32c8 <__tablejump2__>

00001a2c <direct_pairing>:

void direct_pairing() {
	uint8_t retries = 0;
	bool break_from_pairing = false;
	enum DIRECT_PAIRING_STATES direct_pairing_state = SHOW_DIRECT_MESSAGE;
	beep();
    1a2c:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
}

void direct_pairing() {
	uint8_t retries = 0;
	bool break_from_pairing = false;
	enum DIRECT_PAIRING_STATES direct_pairing_state = SHOW_DIRECT_MESSAGE;
    1a30:	d1 e0       	ldi	r29, 0x01	; 1
		}
	}
}

void direct_pairing() {
	uint8_t retries = 0;
    1a32:	c0 e0       	ldi	r28, 0x00	; 0
					_delay_ms(DELAY_COMMAND_MS);
					break;
				
				
				case WAIT_FOR_DEVICE:
					if (UART.message_received) {
    1a34:	05 e5       	ldi	r16, 0x55	; 85
    1a36:	16 e0       	ldi	r17, 0x06	; 6
							direct_pairing_state = MESSAGE_HANDLING_STATE;
							UART.wait_for_message = WAIT_FOR_DATA;
    1a38:	0f 2e       	mov	r0, r31
    1a3a:	f7 e5       	ldi	r31, 0x57	; 87
    1a3c:	ef 2e       	mov	r14, r31
    1a3e:	f6 e0       	ldi	r31, 0x06	; 6
    1a40:	ff 2e       	mov	r15, r31
    1a42:	f0 2d       	mov	r31, r0
    1a44:	68 94       	set
    1a46:	bb 24       	eor	r11, r11
    1a48:	b3 f8       	bld	r11, 3
							direct_pairing_state = WAIT_FOR_DEVICE;
							clear_uart_rx_message();
							retries = 0;
							print_LCD_line(CREATING_SERVER_MSG_OK, LCD_LINE_3);
							print_LCD_line(WAIT_FOR_DEVICE_MSG, LCD_LINE_4);
							UART.wait_for_message = WAIT_FOR_CONNECT;
    1a4a:	68 94       	set
    1a4c:	cc 24       	eor	r12, r12
    1a4e:	c2 f8       	bld	r12, 2
					_delay_ms(DELAY_COMMAND_MS);
					break;	
					
				case OPEN_SOCKET_SERVER:
					if (UART.message_received) {
							direct_pairing_state = WAIT_FOR_DEVICE;
    1a50:	0f 2e       	mov	r0, r31
    1a52:	f7 e0       	ldi	r31, 0x07	; 7
    1a54:	7f 2e       	mov	r7, r31
    1a56:	f0 2d       	mov	r31, r0
					_delay_ms(DELAY_COMMAND_MS);
					break;
				
				case SET_MUX_COMMAND:
					if (UART.message_received) {
							direct_pairing_state = OPEN_SOCKET_SERVER;
    1a58:	0f 2e       	mov	r0, r31
    1a5a:	f6 e0       	ldi	r31, 0x06	; 6
    1a5c:	8f 2e       	mov	r8, r31
    1a5e:	f0 2d       	mov	r31, r0
					_delay_ms(DELAY_COMMAND_MS);
					break;
							
				case OPEN_DIRECT_AP:
					if (UART.message_received) {
						direct_pairing_state = SET_MUX_COMMAND;
    1a60:	0f 2e       	mov	r0, r31
    1a62:	f5 e0       	ldi	r31, 0x05	; 5
    1a64:	9f 2e       	mov	r9, r31
    1a66:	f0 2d       	mov	r31, r0
					UART.wait_for_message = WAIT_FOR_OK;
					break;
			
				case ECHO_OFF_COMMAND: // create wifi AP, create socket.
					if (UART.message_received) {
							direct_pairing_state = SET_AP_MODE;
    1a68:	0f 2e       	mov	r0, r31
    1a6a:	f3 e0       	ldi	r31, 0x03	; 3
    1a6c:	af 2e       	mov	r10, r31
    1a6e:	f0 2d       	mov	r31, r0
			switch(direct_pairing_state)
			{
				case SHOW_DIRECT_MESSAGE:
					clear_LCD();
					print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
					direct_pairing_state = ECHO_OFF_COMMAND;
    1a70:	68 94       	set
    1a72:	dd 24       	eor	r13, r13
    1a74:	d1 f8       	bld	r13, 1
void direct_pairing() {
	uint8_t retries = 0;
	bool break_from_pairing = false;
	enum DIRECT_PAIRING_STATES direct_pairing_state = SHOW_DIRECT_MESSAGE;
	beep();
	while(!break_from_pairing) {
    1a76:	00 c1       	rjmp	.+512    	; 0x1c78 <direct_pairing+0x24c>
		
		if (poll_switch()) shutdown_sequence(true);
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
		
		if (retries < MAXIMUM_COMMAND_RETRIES) {
    1a7e:	c4 31       	cpi	r28, 0x14	; 20
    1a80:	08 f0       	brcs	.+2      	; 0x1a84 <direct_pairing+0x58>
    1a82:	f8 c0       	rjmp	.+496    	; 0x1c74 <direct_pairing+0x248>
			switch(direct_pairing_state)
    1a84:	8d 2f       	mov	r24, r29
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	fc 01       	movw	r30, r24
    1a8a:	31 97       	sbiw	r30, 0x01	; 1
    1a8c:	e8 30       	cpi	r30, 0x08	; 8
    1a8e:	f1 05       	cpc	r31, r1
    1a90:	08 f0       	brcs	.+2      	; 0x1a94 <direct_pairing+0x68>
    1a92:	f2 c0       	rjmp	.+484    	; 0x1c78 <direct_pairing+0x24c>
    1a94:	ef 5c       	subi	r30, 0xCF	; 207
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	0c 94 64 19 	jmp	0x32c8	; 0x32c8 <__tablejump2__>
			{
				case SHOW_DIRECT_MESSAGE:
					clear_LCD();
    1a9c:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	8c e2       	ldi	r24, 0x2C	; 44
    1aa4:	92 e0       	ldi	r25, 0x02	; 2
    1aa6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					direct_pairing_state = ECHO_OFF_COMMAND;
					UART.wait_for_message = WAIT_FOR_OK;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	f7 01       	movw	r30, r14
    1aae:	80 83       	st	Z, r24
			switch(direct_pairing_state)
			{
				case SHOW_DIRECT_MESSAGE:
					clear_LCD();
					print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
					direct_pairing_state = ECHO_OFF_COMMAND;
    1ab0:	dd 2d       	mov	r29, r13
					UART.wait_for_message = WAIT_FOR_OK;
					break;
    1ab2:	e2 c0       	rjmp	.+452    	; 0x1c78 <direct_pairing+0x24c>
			
				case ECHO_OFF_COMMAND: // create wifi AP, create socket.
					if (UART.message_received) {
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	80 81       	ld	r24, Z
    1ab8:	88 23       	and	r24, r24
    1aba:	91 f0       	breq	.+36     	; 0x1ae0 <direct_pairing+0xb4>
							direct_pairing_state = SET_AP_MODE;
							clear_uart_rx_message();
    1abc:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
							retries = 0;
							UART.wait_for_message = WAIT_FOR_OK;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	f7 01       	movw	r30, r14
    1ac4:	80 83       	st	Z, r24
							print_LCD_line(ESP32_STATUS_MSG_OK, LCD_LINE_1);				
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	81 e4       	ldi	r24, 0x41	; 65
    1aca:	92 e0       	ldi	r25, 0x02	; 2
    1acc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
							print_LCD_line(REQUEST_NETWORK_MSG, LCD_LINE_2);
    1ad0:	60 e4       	ldi	r22, 0x40	; 64
    1ad2:	86 e5       	ldi	r24, 0x56	; 86
    1ad4:	92 e0       	ldi	r25, 0x02	; 2
    1ad6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					UART.wait_for_message = WAIT_FOR_OK;
					break;
			
				case ECHO_OFF_COMMAND: // create wifi AP, create socket.
					if (UART.message_received) {
							direct_pairing_state = SET_AP_MODE;
    1ada:	da 2d       	mov	r29, r10
							clear_uart_rx_message();
							retries = 0;
    1adc:	c0 e0       	ldi	r28, 0x00	; 0
    1ade:	cc c0       	rjmp	.+408    	; 0x1c78 <direct_pairing+0x24c>
							UART.wait_for_message = WAIT_FOR_OK;
							print_LCD_line(ESP32_STATUS_MSG_OK, LCD_LINE_1);				
							print_LCD_line(REQUEST_NETWORK_MSG, LCD_LINE_2);
						}
					else {
						retries++;
    1ae0:	cf 5f       	subi	r28, 0xFF	; 255
						send_command_UART("ATE0\r\n");
    1ae2:	8b e6       	ldi	r24, 0x6B	; 107
    1ae4:	92 e0       	ldi	r25, 0x02	; 2
    1ae6:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
    1aea:	ff ef       	ldi	r31, 0xFF	; 255
    1aec:	29 e6       	ldi	r18, 0x69	; 105
    1aee:	88 e1       	ldi	r24, 0x18	; 24
    1af0:	f1 50       	subi	r31, 0x01	; 1
    1af2:	20 40       	sbci	r18, 0x00	; 0
    1af4:	80 40       	sbci	r24, 0x00	; 0
    1af6:	e1 f7       	brne	.-8      	; 0x1af0 <direct_pairing+0xc4>
    1af8:	00 c0       	rjmp	.+0      	; 0x1afa <direct_pairing+0xce>
    1afa:	00 00       	nop
    1afc:	bd c0       	rjmp	.+378    	; 0x1c78 <direct_pairing+0x24c>
						_delay_ms(DELAY_COMMAND_MS);
					}
					break;
			
				case SET_AP_MODE: // create wifi AP, create socket.
					if (UART.message_received) {
    1afe:	f8 01       	movw	r30, r16
    1b00:	80 81       	ld	r24, Z
    1b02:	88 23       	and	r24, r24
    1b04:	41 f0       	breq	.+16     	; 0x1b16 <direct_pairing+0xea>
							direct_pairing_state = OPEN_DIRECT_AP;
							clear_uart_rx_message();
    1b06:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
							retries = 0;
							UART.wait_for_message = WAIT_FOR_OK;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	f7 01       	movw	r30, r14
    1b0e:	80 83       	st	Z, r24
					}
					break;
			
				case SET_AP_MODE: // create wifi AP, create socket.
					if (UART.message_received) {
							direct_pairing_state = OPEN_DIRECT_AP;
    1b10:	dc 2d       	mov	r29, r12
							clear_uart_rx_message();
							retries = 0;
    1b12:	c0 e0       	ldi	r28, 0x00	; 0
							UART.wait_for_message = WAIT_FOR_OK;
							break;
    1b14:	b1 c0       	rjmp	.+354    	; 0x1c78 <direct_pairing+0x24c>
						}
					//else clear_uart_rx_message();
					retries++;
    1b16:	cf 5f       	subi	r28, 0xFF	; 255
					send_command_UART("AT+CWMODE=3\r\n");
    1b18:	82 e7       	ldi	r24, 0x72	; 114
    1b1a:	92 e0       	ldi	r25, 0x02	; 2
    1b1c:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
    1b20:	ff ef       	ldi	r31, 0xFF	; 255
    1b22:	29 e6       	ldi	r18, 0x69	; 105
    1b24:	88 e1       	ldi	r24, 0x18	; 24
    1b26:	f1 50       	subi	r31, 0x01	; 1
    1b28:	20 40       	sbci	r18, 0x00	; 0
    1b2a:	80 40       	sbci	r24, 0x00	; 0
    1b2c:	e1 f7       	brne	.-8      	; 0x1b26 <direct_pairing+0xfa>
    1b2e:	00 c0       	rjmp	.+0      	; 0x1b30 <direct_pairing+0x104>
    1b30:	00 00       	nop
    1b32:	a2 c0       	rjmp	.+324    	; 0x1c78 <direct_pairing+0x24c>
					_delay_ms(DELAY_COMMAND_MS);
					break;
							
				case OPEN_DIRECT_AP:
					if (UART.message_received) {
    1b34:	f8 01       	movw	r30, r16
    1b36:	80 81       	ld	r24, Z
    1b38:	88 23       	and	r24, r24
    1b3a:	91 f0       	breq	.+36     	; 0x1b60 <direct_pairing+0x134>
						direct_pairing_state = SET_MUX_COMMAND;
						clear_uart_rx_message();
    1b3c:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
						retries = 0;
						UART.wait_for_message = WAIT_FOR_OK;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	f7 01       	movw	r30, r14
    1b44:	80 83       	st	Z, r24
						print_LCD_line(REQUEST_NETWORK_MSG_OK, LCD_LINE_2);
    1b46:	60 e4       	ldi	r22, 0x40	; 64
    1b48:	80 e8       	ldi	r24, 0x80	; 128
    1b4a:	92 e0       	ldi	r25, 0x02	; 2
    1b4c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(CREATING_SERVER_MSG, LCD_LINE_3);
    1b50:	64 e1       	ldi	r22, 0x14	; 20
    1b52:	85 e9       	ldi	r24, 0x95	; 149
    1b54:	92 e0       	ldi	r25, 0x02	; 2
    1b56:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					_delay_ms(DELAY_COMMAND_MS);
					break;
							
				case OPEN_DIRECT_AP:
					if (UART.message_received) {
						direct_pairing_state = SET_MUX_COMMAND;
    1b5a:	d9 2d       	mov	r29, r9
						clear_uart_rx_message();
						retries = 0;
    1b5c:	c0 e0       	ldi	r28, 0x00	; 0
						UART.wait_for_message = WAIT_FOR_OK;
						print_LCD_line(REQUEST_NETWORK_MSG_OK, LCD_LINE_2);
						print_LCD_line(CREATING_SERVER_MSG, LCD_LINE_3);
						break;
    1b5e:	8c c0       	rjmp	.+280    	; 0x1c78 <direct_pairing+0x24c>
						}
					
					retries++;
    1b60:	cf 5f       	subi	r28, 0xFF	; 255
					send_command_UART("AT+CWSAP=\"IOT_FUNCGEN\",\"0\",1,0\r\n");
    1b62:	8a ea       	ldi	r24, 0xAA	; 170
    1b64:	92 e0       	ldi	r25, 0x02	; 2
    1b66:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
    1b6a:	ff ef       	ldi	r31, 0xFF	; 255
    1b6c:	29 e6       	ldi	r18, 0x69	; 105
    1b6e:	88 e1       	ldi	r24, 0x18	; 24
    1b70:	f1 50       	subi	r31, 0x01	; 1
    1b72:	20 40       	sbci	r18, 0x00	; 0
    1b74:	80 40       	sbci	r24, 0x00	; 0
    1b76:	e1 f7       	brne	.-8      	; 0x1b70 <direct_pairing+0x144>
    1b78:	00 c0       	rjmp	.+0      	; 0x1b7a <direct_pairing+0x14e>
    1b7a:	00 00       	nop
    1b7c:	7d c0       	rjmp	.+250    	; 0x1c78 <direct_pairing+0x24c>
					_delay_ms(DELAY_COMMAND_MS);
					break;
				
				case SET_MUX_COMMAND:
					if (UART.message_received) {
    1b7e:	f8 01       	movw	r30, r16
    1b80:	80 81       	ld	r24, Z
    1b82:	88 23       	and	r24, r24
    1b84:	41 f0       	breq	.+16     	; 0x1b96 <direct_pairing+0x16a>
							direct_pairing_state = OPEN_SOCKET_SERVER;
							clear_uart_rx_message();
    1b86:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
							retries = 0;
							UART.wait_for_message = WAIT_FOR_OK;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	f7 01       	movw	r30, r14
    1b8e:	80 83       	st	Z, r24
					_delay_ms(DELAY_COMMAND_MS);
					break;
				
				case SET_MUX_COMMAND:
					if (UART.message_received) {
							direct_pairing_state = OPEN_SOCKET_SERVER;
    1b90:	d8 2d       	mov	r29, r8
							clear_uart_rx_message();
							retries = 0;
    1b92:	c0 e0       	ldi	r28, 0x00	; 0
							UART.wait_for_message = WAIT_FOR_OK;
							break;
    1b94:	71 c0       	rjmp	.+226    	; 0x1c78 <direct_pairing+0x24c>
					}
					retries++;
    1b96:	cf 5f       	subi	r28, 0xFF	; 255
					send_command_UART("AT+CIPMUX=1\r\n");
    1b98:	8b ec       	ldi	r24, 0xCB	; 203
    1b9a:	92 e0       	ldi	r25, 0x02	; 2
    1b9c:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
    1ba0:	ff ef       	ldi	r31, 0xFF	; 255
    1ba2:	29 e6       	ldi	r18, 0x69	; 105
    1ba4:	88 e1       	ldi	r24, 0x18	; 24
    1ba6:	f1 50       	subi	r31, 0x01	; 1
    1ba8:	20 40       	sbci	r18, 0x00	; 0
    1baa:	80 40       	sbci	r24, 0x00	; 0
    1bac:	e1 f7       	brne	.-8      	; 0x1ba6 <direct_pairing+0x17a>
    1bae:	00 c0       	rjmp	.+0      	; 0x1bb0 <direct_pairing+0x184>
    1bb0:	00 00       	nop
    1bb2:	62 c0       	rjmp	.+196    	; 0x1c78 <direct_pairing+0x24c>
					_delay_ms(DELAY_COMMAND_MS);
					break;	
					
				case OPEN_SOCKET_SERVER:
					if (UART.message_received) {
    1bb4:	f8 01       	movw	r30, r16
    1bb6:	80 81       	ld	r24, Z
    1bb8:	88 23       	and	r24, r24
    1bba:	89 f0       	breq	.+34     	; 0x1bde <direct_pairing+0x1b2>
							direct_pairing_state = WAIT_FOR_DEVICE;
							clear_uart_rx_message();
    1bbc:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
							retries = 0;
							print_LCD_line(CREATING_SERVER_MSG_OK, LCD_LINE_3);
    1bc0:	64 e1       	ldi	r22, 0x14	; 20
    1bc2:	89 ed       	ldi	r24, 0xD9	; 217
    1bc4:	92 e0       	ldi	r25, 0x02	; 2
    1bc6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
							print_LCD_line(WAIT_FOR_DEVICE_MSG, LCD_LINE_4);
    1bca:	64 e5       	ldi	r22, 0x54	; 84
    1bcc:	8e ee       	ldi	r24, 0xEE	; 238
    1bce:	92 e0       	ldi	r25, 0x02	; 2
    1bd0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
							UART.wait_for_message = WAIT_FOR_CONNECT;
    1bd4:	f7 01       	movw	r30, r14
    1bd6:	c0 82       	st	Z, r12
					_delay_ms(DELAY_COMMAND_MS);
					break;	
					
				case OPEN_SOCKET_SERVER:
					if (UART.message_received) {
							direct_pairing_state = WAIT_FOR_DEVICE;
    1bd8:	d7 2d       	mov	r29, r7
							clear_uart_rx_message();
							retries = 0;
    1bda:	c0 e0       	ldi	r28, 0x00	; 0
							print_LCD_line(CREATING_SERVER_MSG_OK, LCD_LINE_3);
							print_LCD_line(WAIT_FOR_DEVICE_MSG, LCD_LINE_4);
							UART.wait_for_message = WAIT_FOR_CONNECT;
							break;
    1bdc:	4d c0       	rjmp	.+154    	; 0x1c78 <direct_pairing+0x24c>
					}
					retries++;
    1bde:	cf 5f       	subi	r28, 0xFF	; 255
					send_command_UART("AT+CIPSERVER=1,1726\r\n");
    1be0:	83 e0       	ldi	r24, 0x03	; 3
    1be2:	93 e0       	ldi	r25, 0x03	; 3
    1be4:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
    1be8:	ff ef       	ldi	r31, 0xFF	; 255
    1bea:	29 e6       	ldi	r18, 0x69	; 105
    1bec:	88 e1       	ldi	r24, 0x18	; 24
    1bee:	f1 50       	subi	r31, 0x01	; 1
    1bf0:	20 40       	sbci	r18, 0x00	; 0
    1bf2:	80 40       	sbci	r24, 0x00	; 0
    1bf4:	e1 f7       	brne	.-8      	; 0x1bee <direct_pairing+0x1c2>
    1bf6:	00 c0       	rjmp	.+0      	; 0x1bf8 <direct_pairing+0x1cc>
    1bf8:	00 00       	nop
    1bfa:	3e c0       	rjmp	.+124    	; 0x1c78 <direct_pairing+0x24c>
					_delay_ms(DELAY_COMMAND_MS);
					break;
				
				
				case WAIT_FOR_DEVICE:
					if (UART.message_received) {
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	80 81       	ld	r24, Z
    1c00:	88 23       	and	r24, r24
    1c02:	d1 f1       	breq	.+116    	; 0x1c78 <direct_pairing+0x24c>
							direct_pairing_state = MESSAGE_HANDLING_STATE;
							UART.wait_for_message = WAIT_FOR_DATA;
    1c04:	f7 01       	movw	r30, r14
    1c06:	b0 82       	st	Z, r11
							beep(); _delay_ms(50); beep(); _delay_ms(50); beep();
    1c08:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
    1c0c:	ff e7       	ldi	r31, 0x7F	; 127
    1c0e:	28 e3       	ldi	r18, 0x38	; 56
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	f1 50       	subi	r31, 0x01	; 1
    1c14:	20 40       	sbci	r18, 0x00	; 0
    1c16:	80 40       	sbci	r24, 0x00	; 0
    1c18:	e1 f7       	brne	.-8      	; 0x1c12 <direct_pairing+0x1e6>
    1c1a:	00 c0       	rjmp	.+0      	; 0x1c1c <direct_pairing+0x1f0>
    1c1c:	00 00       	nop
    1c1e:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
    1c22:	9f e7       	ldi	r25, 0x7F	; 127
    1c24:	e8 e3       	ldi	r30, 0x38	; 56
    1c26:	f1 e0       	ldi	r31, 0x01	; 1
    1c28:	91 50       	subi	r25, 0x01	; 1
    1c2a:	e0 40       	sbci	r30, 0x00	; 0
    1c2c:	f0 40       	sbci	r31, 0x00	; 0
    1c2e:	e1 f7       	brne	.-8      	; 0x1c28 <direct_pairing+0x1fc>
    1c30:	00 c0       	rjmp	.+0      	; 0x1c32 <direct_pairing+0x206>
    1c32:	00 00       	nop
    1c34:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
							clear_uart_rx_message();
    1c38:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
							clear_LCD();
    1c3c:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
							retries = 0;
							print_LCD_line(DEVICE_CONNECTED_MSG, LCD_LINE_2);
    1c40:	60 e4       	ldi	r22, 0x40	; 64
    1c42:	89 e1       	ldi	r24, 0x19	; 25
    1c44:	93 e0       	ldi	r25, 0x03	; 3
    1c46:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    1c4a:	2f ef       	ldi	r18, 0xFF	; 255
    1c4c:	83 ed       	ldi	r24, 0xD3	; 211
    1c4e:	90 e3       	ldi	r25, 0x30	; 48
    1c50:	21 50       	subi	r18, 0x01	; 1
    1c52:	80 40       	sbci	r24, 0x00	; 0
    1c54:	90 40       	sbci	r25, 0x00	; 0
    1c56:	e1 f7       	brne	.-8      	; 0x1c50 <direct_pairing+0x224>
    1c58:	00 c0       	rjmp	.+0      	; 0x1c5a <direct_pairing+0x22e>
    1c5a:	00 00       	nop
					break;
				
				
				case WAIT_FOR_DEVICE:
					if (UART.message_received) {
							direct_pairing_state = MESSAGE_HANDLING_STATE;
    1c5c:	db 2d       	mov	r29, r11
							UART.wait_for_message = WAIT_FOR_DATA;
							beep(); _delay_ms(50); beep(); _delay_ms(50); beep();
							clear_uart_rx_message();
							clear_LCD();
							retries = 0;
    1c5e:	c0 e0       	ldi	r28, 0x00	; 0
    1c60:	0b c0       	rjmp	.+22     	; 0x1c78 <direct_pairing+0x24c>
							break;
					}
					break;				
				
				case MESSAGE_HANDLING_STATE:
					eeprom_write_byte((uint8_t *)STORED_CONNECTION_STATE_ADDRESS, WIFI_DIRECT_CONNECTION);
    1c62:	64 e4       	ldi	r22, 0x44	; 68
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	0e 94 cc 1c 	call	0x3998	; 0x3998 <eeprom_write_byte>
					update_complete_UI();
    1c6c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <update_complete_UI>
					socket_message_handler();	
    1c70:	0e 94 6d 0b 	call	0x16da	; 0x16da <socket_message_handler>
					break;		
			}	
		}
		else {
			halt_system();
    1c74:	0e 94 35 05 	call	0xa6a	; 0xa6a <halt_system>
	bool break_from_pairing = false;
	enum DIRECT_PAIRING_STATES direct_pairing_state = SHOW_DIRECT_MESSAGE;
	beep();
	while(!break_from_pairing) {
		
		if (poll_switch()) shutdown_sequence(true);
    1c78:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    1c7c:	88 23       	and	r24, r24
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <direct_pairing+0x256>
    1c80:	fe ce       	rjmp	.-516    	; 0x1a7e <direct_pairing+0x52>
    1c82:	fa ce       	rjmp	.-524    	; 0x1a78 <direct_pairing+0x4c>

00001c84 <clear_funcgen_values>:
	update_ac_power_status();
	update_battery_status();
}

void clear_funcgen_values() {
	FUNCGEN.frequency_A = 0; 
    1c84:	e1 e4       	ldi	r30, 0x41	; 65
    1c86:	f5 e0       	ldi	r31, 0x05	; 5
    1c88:	10 82       	st	Z, r1
    1c8a:	11 82       	std	Z+1, r1	; 0x01
    1c8c:	12 82       	std	Z+2, r1	; 0x02
    1c8e:	13 82       	std	Z+3, r1	; 0x03
	FUNCGEN.frequency_B = 0;
    1c90:	14 82       	std	Z+4, r1	; 0x04
    1c92:	15 82       	std	Z+5, r1	; 0x05
    1c94:	16 82       	std	Z+6, r1	; 0x06
    1c96:	17 82       	std	Z+7, r1	; 0x07
	FUNCGEN.phase_A = 0; 
    1c98:	11 86       	std	Z+9, r1	; 0x09
    1c9a:	10 86       	std	Z+8, r1	; 0x08
	FUNCGEN.phase_B = 0;
    1c9c:	13 86       	std	Z+11, r1	; 0x0b
    1c9e:	12 86       	std	Z+10, r1	; 0x0a
	FUNCGEN.amplitude_A = 0; 
    1ca0:	15 86       	std	Z+13, r1	; 0x0d
    1ca2:	14 86       	std	Z+12, r1	; 0x0c
	FUNCGEN.amplitude_B = 0;
    1ca4:	17 86       	std	Z+15, r1	; 0x0f
    1ca6:	16 86       	std	Z+14, r1	; 0x0e
	FUNCGEN.output_type_A = OFF; 
    1ca8:	85 e0       	ldi	r24, 0x05	; 5
    1caa:	80 8b       	std	Z+16, r24	; 0x10
	FUNCGEN.output_type_B = OFF;
    1cac:	81 8b       	std	Z+17, r24	; 0x11
	FUNCGEN.bias_A = 0; 
    1cae:	13 8a       	std	Z+19, r1	; 0x13
    1cb0:	12 8a       	std	Z+18, r1	; 0x12
	FUNCGEN.bias_B = 0;
    1cb2:	15 8a       	std	Z+21, r1	; 0x15
    1cb4:	14 8a       	std	Z+20, r1	; 0x14
    1cb6:	08 95       	ret

00001cb8 <init_UI_array>:
}

void init_UI_array() {
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
	snprintf(UI.amplitude_A, 4, ZERO_AMPLITUDE);
    1cbe:	cf e2       	ldi	r28, 0x2F	; 47
    1cc0:	d3 e0       	ldi	r29, 0x03	; 3
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	1f 92       	push	r1
    1cc8:	14 e0       	ldi	r17, 0x04	; 4
    1cca:	1f 93       	push	r17
    1ccc:	89 e2       	ldi	r24, 0x29	; 41
    1cce:	95 e0       	ldi	r25, 0x05	; 5
    1cd0:	9f 93       	push	r25
    1cd2:	8f 93       	push	r24
    1cd4:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
	snprintf(UI.amplitude_B, 4, ZERO_AMPLITUDE);
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	1f 92       	push	r1
    1cde:	1f 93       	push	r17
    1ce0:	8d e2       	ldi	r24, 0x2D	; 45
    1ce2:	95 e0       	ldi	r25, 0x05	; 5
    1ce4:	9f 93       	push	r25
    1ce6:	8f 93       	push	r24
    1ce8:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
	snprintf(UI.bias_A, 5, ZERO_BIAS);
    1cec:	ce e2       	ldi	r28, 0x2E	; 46
    1cee:	d3 e0       	ldi	r29, 0x03	; 3
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	1f 92       	push	r1
    1cf6:	15 e0       	ldi	r17, 0x05	; 5
    1cf8:	1f 93       	push	r17
    1cfa:	81 e3       	ldi	r24, 0x31	; 49
    1cfc:	95 e0       	ldi	r25, 0x05	; 5
    1cfe:	9f 93       	push	r25
    1d00:	8f 93       	push	r24
    1d02:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
	snprintf(UI.bias_B, 5, ZERO_BIAS);
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	1f 92       	push	r1
    1d0c:	1f 93       	push	r17
    1d0e:	86 e3       	ldi	r24, 0x36	; 54
    1d10:	95 e0       	ldi	r25, 0x05	; 5
    1d12:	9f 93       	push	r25
    1d14:	8f 93       	push	r24
    1d16:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
	snprintf(UI.frequency_A, 8,"0");
    1d1a:	80 e3       	ldi	r24, 0x30	; 48
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	90 93 1a 05 	sts	0x051A, r25	; 0x80051a <UI+0x1>
    1d22:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <UI>
	snprintf(UI.frequency_B, 8,"0");
    1d26:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <UI+0x9>
    1d2a:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <UI+0x8>
    1d2e:	8f e1       	ldi	r24, 0x1F	; 31
    1d30:	9e e4       	ldi	r25, 0x4E	; 78
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <init_UI_array+0x7a>
    1d36:	00 c0       	rjmp	.+0      	; 0x1d38 <init_UI_array+0x80>
    1d38:	00 00       	nop
	_delay_ms(10);
}
    1d3a:	8d b7       	in	r24, 0x3d	; 61
    1d3c:	9e b7       	in	r25, 0x3e	; 62
    1d3e:	48 96       	adiw	r24, 0x18	; 24
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	9e bf       	out	0x3e, r25	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	8d bf       	out	0x3d, r24	; 61
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	1f 91       	pop	r17
    1d50:	08 95       	ret

00001d52 <start_wlan_communication>:

void start_wlan_communication() {
	uint8_t retries = 0;
	bool break_from_pairing = false;
	enum WLAN_COMMUNICATION_STATES communication_state = INIT_MESSAGE;
	beep();
    1d52:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
}

void start_wlan_communication() {
	uint8_t retries = 0;
	bool break_from_pairing = false;
	enum WLAN_COMMUNICATION_STATES communication_state = INIT_MESSAGE;
    1d56:	c1 e0       	ldi	r28, 0x01	; 1
		}
	}
}

void start_wlan_communication() {
	uint8_t retries = 0;
    1d58:	d0 e0       	ldi	r29, 0x00	; 0
					_delay_ms(DELAY_COMMAND_MS);
					if (poll_switch()) shutdown_sequence(true);
					break;

				case REQUEST_WIFI: // create wifi AP, create socket.
					if (UART.message_received) {
    1d5a:	05 e5       	ldi	r16, 0x55	; 85
    1d5c:	16 e0       	ldi	r17, 0x06	; 6
						communication_state = CREATE_SOCKET_SERVER_WLAN;
						UART.wait_for_message = WAIT_FOR_OK;
    1d5e:	0f 2e       	mov	r0, r31
    1d60:	f7 e5       	ldi	r31, 0x57	; 87
    1d62:	ef 2e       	mov	r14, r31
    1d64:	f6 e0       	ldi	r31, 0x06	; 6
    1d66:	ff 2e       	mov	r15, r31
    1d68:	f0 2d       	mov	r31, r0
					if (poll_switch()) shutdown_sequence(true);
					break;

				case REQUEST_WIFI: // create wifi AP, create socket.
					if (UART.message_received) {
						communication_state = CREATE_SOCKET_SERVER_WLAN;
    1d6a:	68 94       	set
    1d6c:	cc 24       	eor	r12, r12
    1d6e:	c2 f8       	bld	r12, 2
					break;
				
				case WAIT_FOR_WLAN_DEVICE:
					if (UART.message_received) {
						communication_state = DEVICE_CONNECTED;
						UART.wait_for_message = WAIT_FOR_DATA;
    1d70:	68 94       	set
    1d72:	66 24       	eor	r6, r6
    1d74:	63 f8       	bld	r6, 3
						clear_uart_rx_message();
						retries = 0;
						clear_LCD();
						print_LCD_line(DEVICE_CONNECTED_MSG, LCD_LINE_2);
						STATUS.socket_active = true;
    1d76:	0f 2e       	mov	r0, r31
    1d78:	f6 e1       	ldi	r31, 0x16	; 22
    1d7a:	af 2e       	mov	r10, r31
    1d7c:	f5 e0       	ldi	r31, 0x05	; 5
    1d7e:	bf 2e       	mov	r11, r31
    1d80:	f0 2d       	mov	r31, r0
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case WAIT_FOR_WLAN_DEVICE:
					if (UART.message_received) {
						communication_state = DEVICE_CONNECTED;
    1d82:	0f 2e       	mov	r0, r31
    1d84:	f6 e0       	ldi	r31, 0x06	; 6
    1d86:	7f 2e       	mov	r7, r31
    1d88:	f0 2d       	mov	r31, r0
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case CREATE_SOCKET_SERVER_WLAN: // create wifi AP, create socket.
					if (UART.message_received) {
						communication_state = WAIT_FOR_WLAN_DEVICE;
    1d8a:	0f 2e       	mov	r0, r31
    1d8c:	f5 e0       	ldi	r31, 0x05	; 5
    1d8e:	8f 2e       	mov	r8, r31
    1d90:	f0 2d       	mov	r31, r0
				print_LCD_line(START_COMM_MSG, LCD_LINE_3);
				retries = 0;
				_delay_ms(2 * DELAY_COMMAND_MS);
				clear_LCD();
				print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
				communication_state = ECHO_OFF;
    1d92:	68 94       	set
    1d94:	dd 24       	eor	r13, r13
    1d96:	d1 f8       	bld	r13, 1
				UART.wait_for_message = WAIT_FOR_OK;
				break;
				
				case ECHO_OFF: // create wifi AP, create socket.
					if (UART.message_received) {
						communication_state = REQUEST_WIFI;
    1d98:	0f 2e       	mov	r0, r31
    1d9a:	f3 e0       	ldi	r31, 0x03	; 3
    1d9c:	9f 2e       	mov	r9, r31
    1d9e:	f0 2d       	mov	r31, r0
	bool break_from_pairing = false;
	enum WLAN_COMMUNICATION_STATES communication_state = INIT_MESSAGE;
	beep();
	while(!break_from_pairing) {
		if (retries < MAXIMUM_COMMAND_RETRIES) {
			switch(communication_state) {	
    1da0:	c3 30       	cpi	r28, 0x03	; 3
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <start_wlan_communication+0x54>
    1da4:	5b c0       	rjmp	.+182    	; 0x1e5c <start_wlan_communication+0x10a>
    1da6:	28 f4       	brcc	.+10     	; 0x1db2 <start_wlan_communication+0x60>
    1da8:	c1 30       	cpi	r28, 0x01	; 1
    1daa:	61 f0       	breq	.+24     	; 0x1dc4 <start_wlan_communication+0x72>
    1dac:	c2 30       	cpi	r28, 0x02	; 2
    1dae:	59 f1       	breq	.+86     	; 0x1e06 <start_wlan_communication+0xb4>
    1db0:	f1 c0       	rjmp	.+482    	; 0x1f94 <start_wlan_communication+0x242>
    1db2:	c5 30       	cpi	r28, 0x05	; 5
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <start_wlan_communication+0x66>
    1db6:	ab c0       	rjmp	.+342    	; 0x1f0e <start_wlan_communication+0x1bc>
    1db8:	08 f4       	brcc	.+2      	; 0x1dbc <start_wlan_communication+0x6a>
    1dba:	7c c0       	rjmp	.+248    	; 0x1eb4 <start_wlan_communication+0x162>
    1dbc:	c6 30       	cpi	r28, 0x06	; 6
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <start_wlan_communication+0x70>
    1dc0:	d8 c0       	rjmp	.+432    	; 0x1f72 <start_wlan_communication+0x220>
    1dc2:	e8 c0       	rjmp	.+464    	; 0x1f94 <start_wlan_communication+0x242>
				case INIT_MESSAGE:
				clear_LCD();
    1dc4:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
				print_LCD_line(START_WLAN_MSG, LCD_LINE_2);
    1dc8:	60 e4       	ldi	r22, 0x40	; 64
    1dca:	84 e3       	ldi	r24, 0x34	; 52
    1dcc:	93 e0       	ldi	r25, 0x03	; 3
    1dce:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				print_LCD_line(START_COMM_MSG, LCD_LINE_3);
    1dd2:	64 e1       	ldi	r22, 0x14	; 20
    1dd4:	89 e4       	ldi	r24, 0x49	; 73
    1dd6:	93 e0       	ldi	r25, 0x03	; 3
    1dd8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    1ddc:	2f ef       	ldi	r18, 0xFF	; 255
    1dde:	83 ed       	ldi	r24, 0xD3	; 211
    1de0:	90 e3       	ldi	r25, 0x30	; 48
    1de2:	21 50       	subi	r18, 0x01	; 1
    1de4:	80 40       	sbci	r24, 0x00	; 0
    1de6:	90 40       	sbci	r25, 0x00	; 0
    1de8:	e1 f7       	brne	.-8      	; 0x1de2 <start_wlan_communication+0x90>
    1dea:	00 c0       	rjmp	.+0      	; 0x1dec <start_wlan_communication+0x9a>
    1dec:	00 00       	nop
				retries = 0;
				_delay_ms(2 * DELAY_COMMAND_MS);
				clear_LCD();
    1dee:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
				print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	8c e2       	ldi	r24, 0x2C	; 44
    1df6:	92 e0       	ldi	r25, 0x02	; 2
    1df8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				communication_state = ECHO_OFF;
				UART.wait_for_message = WAIT_FOR_OK;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	f7 01       	movw	r30, r14
    1e00:	80 83       	st	Z, r24
				print_LCD_line(START_COMM_MSG, LCD_LINE_3);
				retries = 0;
				_delay_ms(2 * DELAY_COMMAND_MS);
				clear_LCD();
				print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
				communication_state = ECHO_OFF;
    1e02:	cd 2d       	mov	r28, r13
				UART.wait_for_message = WAIT_FOR_OK;
				break;
    1e04:	cb c0       	rjmp	.+406    	; 0x1f9c <start_wlan_communication+0x24a>
				
				case ECHO_OFF: // create wifi AP, create socket.
					if (UART.message_received) {
    1e06:	f8 01       	movw	r30, r16
    1e08:	80 81       	ld	r24, Z
    1e0a:	88 23       	and	r24, r24
    1e0c:	81 f0       	breq	.+32     	; 0x1e2e <start_wlan_communication+0xdc>
						communication_state = REQUEST_WIFI;
						clear_uart_rx_message();
    1e0e:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
						retries = 0;
						UART.wait_for_message = WAIT_FOR_GOT_IP;
    1e12:	f7 01       	movw	r30, r14
    1e14:	d0 82       	st	Z, r13
						print_LCD_line(ESP32_STATUS_MSG_OK, LCD_LINE_1);
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	81 e4       	ldi	r24, 0x41	; 65
    1e1a:	92 e0       	ldi	r25, 0x02	; 2
    1e1c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(REQUEST_NETWORK_MSG, LCD_LINE_2);
    1e20:	60 e4       	ldi	r22, 0x40	; 64
    1e22:	86 e5       	ldi	r24, 0x56	; 86
    1e24:	92 e0       	ldi	r25, 0x02	; 2
    1e26:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				UART.wait_for_message = WAIT_FOR_OK;
				break;
				
				case ECHO_OFF: // create wifi AP, create socket.
					if (UART.message_received) {
						communication_state = REQUEST_WIFI;
    1e2a:	c9 2d       	mov	r28, r9
						clear_uart_rx_message();
						retries = 0;
						UART.wait_for_message = WAIT_FOR_GOT_IP;
						print_LCD_line(ESP32_STATUS_MSG_OK, LCD_LINE_1);
						print_LCD_line(REQUEST_NETWORK_MSG, LCD_LINE_2);
						break;
    1e2c:	b7 c0       	rjmp	.+366    	; 0x1f9c <start_wlan_communication+0x24a>
					}
					send_command_UART("ATE0\r\n");
    1e2e:	8b e6       	ldi	r24, 0x6B	; 107
    1e30:	92 e0       	ldi	r25, 0x02	; 2
    1e32:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
					retries++;
    1e36:	df 5f       	subi	r29, 0xFF	; 255
    1e38:	ff ef       	ldi	r31, 0xFF	; 255
    1e3a:	29 e6       	ldi	r18, 0x69	; 105
    1e3c:	88 e1       	ldi	r24, 0x18	; 24
    1e3e:	f1 50       	subi	r31, 0x01	; 1
    1e40:	20 40       	sbci	r18, 0x00	; 0
    1e42:	80 40       	sbci	r24, 0x00	; 0
    1e44:	e1 f7       	brne	.-8      	; 0x1e3e <start_wlan_communication+0xec>
    1e46:	00 c0       	rjmp	.+0      	; 0x1e48 <start_wlan_communication+0xf6>
    1e48:	00 00       	nop
					_delay_ms(DELAY_COMMAND_MS);
					if (poll_switch()) shutdown_sequence(true);
    1e4a:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    1e4e:	88 23       	and	r24, r24
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <start_wlan_communication+0x102>
    1e52:	9c c0       	rjmp	.+312    	; 0x1f8c <start_wlan_communication+0x23a>
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    1e5a:	98 c0       	rjmp	.+304    	; 0x1f8c <start_wlan_communication+0x23a>
					break;

				case REQUEST_WIFI: // create wifi AP, create socket.
					if (UART.message_received) {
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	80 81       	ld	r24, Z
    1e60:	88 23       	and	r24, r24
    1e62:	89 f0       	breq	.+34     	; 0x1e86 <start_wlan_communication+0x134>
						communication_state = CREATE_SOCKET_SERVER_WLAN;
						UART.wait_for_message = WAIT_FOR_OK;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	f7 01       	movw	r30, r14
    1e68:	80 83       	st	Z, r24
						clear_uart_rx_message();
    1e6a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
						print_LCD_line(REQUEST_NETWORK_MSG_OK, LCD_LINE_2);
    1e6e:	60 e4       	ldi	r22, 0x40	; 64
    1e70:	80 e8       	ldi	r24, 0x80	; 128
    1e72:	92 e0       	ldi	r25, 0x02	; 2
    1e74:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(CREATING_SERVER_MSG, LCD_LINE_3);
    1e78:	64 e1       	ldi	r22, 0x14	; 20
    1e7a:	85 e9       	ldi	r24, 0x95	; 149
    1e7c:	92 e0       	ldi	r25, 0x02	; 2
    1e7e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					if (poll_switch()) shutdown_sequence(true);
					break;

				case REQUEST_WIFI: // create wifi AP, create socket.
					if (UART.message_received) {
						communication_state = CREATE_SOCKET_SERVER_WLAN;
    1e82:	cc 2d       	mov	r28, r12
						UART.wait_for_message = WAIT_FOR_OK;
						clear_uart_rx_message();
						print_LCD_line(REQUEST_NETWORK_MSG_OK, LCD_LINE_2);
						print_LCD_line(CREATING_SERVER_MSG, LCD_LINE_3);
						retries = 0;
						break;
    1e84:	8b c0       	rjmp	.+278    	; 0x1f9c <start_wlan_communication+0x24a>
					}
					send_command_UART(create_wifi_command());
    1e86:	0e 94 39 04 	call	0x872	; 0x872 <create_wifi_command>
    1e8a:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
					retries++;
    1e8e:	df 5f       	subi	r29, 0xFF	; 255
    1e90:	ff ef       	ldi	r31, 0xFF	; 255
    1e92:	29 e6       	ldi	r18, 0x69	; 105
    1e94:	88 e1       	ldi	r24, 0x18	; 24
    1e96:	f1 50       	subi	r31, 0x01	; 1
    1e98:	20 40       	sbci	r18, 0x00	; 0
    1e9a:	80 40       	sbci	r24, 0x00	; 0
    1e9c:	e1 f7       	brne	.-8      	; 0x1e96 <start_wlan_communication+0x144>
    1e9e:	00 c0       	rjmp	.+0      	; 0x1ea0 <start_wlan_communication+0x14e>
    1ea0:	00 00       	nop
					_delay_ms(DELAY_COMMAND_MS);
					if (poll_switch()) shutdown_sequence(true);
    1ea2:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    1ea6:	88 23       	and	r24, r24
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <start_wlan_communication+0x15a>
    1eaa:	70 c0       	rjmp	.+224    	; 0x1f8c <start_wlan_communication+0x23a>
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    1eb2:	6c c0       	rjmp	.+216    	; 0x1f8c <start_wlan_communication+0x23a>
					break;
				
				case CREATE_SOCKET_SERVER_WLAN: // create wifi AP, create socket.
					if (UART.message_received) {
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	80 81       	ld	r24, Z
    1eb8:	88 23       	and	r24, r24
    1eba:	91 f0       	breq	.+36     	; 0x1ee0 <start_wlan_communication+0x18e>
						communication_state = WAIT_FOR_WLAN_DEVICE;
						UART.wait_for_message = WAIT_FOR_CONNECT;
    1ebc:	f7 01       	movw	r30, r14
    1ebe:	c0 82       	st	Z, r12
						clear_uart_rx_message();
    1ec0:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
						print_LCD_line(CREATING_SERVER_MSG_OK, LCD_LINE_3);
    1ec4:	64 e1       	ldi	r22, 0x14	; 20
    1ec6:	89 ed       	ldi	r24, 0xD9	; 217
    1ec8:	92 e0       	ldi	r25, 0x02	; 2
    1eca:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(WAIT_FOR_DEVICE_MSG, LCD_LINE_4);
    1ece:	64 e5       	ldi	r22, 0x54	; 84
    1ed0:	8e ee       	ldi	r24, 0xEE	; 238
    1ed2:	92 e0       	ldi	r25, 0x02	; 2
    1ed4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						retries = 0;
						clear_LCD();
    1ed8:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case CREATE_SOCKET_SERVER_WLAN: // create wifi AP, create socket.
					if (UART.message_received) {
						communication_state = WAIT_FOR_WLAN_DEVICE;
    1edc:	c8 2d       	mov	r28, r8
						clear_uart_rx_message();
						print_LCD_line(CREATING_SERVER_MSG_OK, LCD_LINE_3);
						print_LCD_line(WAIT_FOR_DEVICE_MSG, LCD_LINE_4);
						retries = 0;
						clear_LCD();
						break;
    1ede:	5e c0       	rjmp	.+188    	; 0x1f9c <start_wlan_communication+0x24a>
					}
					send_command_UART("AT+CIPSERVER=1,1726\r\n");
    1ee0:	83 e0       	ldi	r24, 0x03	; 3
    1ee2:	93 e0       	ldi	r25, 0x03	; 3
    1ee4:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
					retries++;
    1ee8:	df 5f       	subi	r29, 0xFF	; 255
    1eea:	ff ef       	ldi	r31, 0xFF	; 255
    1eec:	29 e6       	ldi	r18, 0x69	; 105
    1eee:	88 e1       	ldi	r24, 0x18	; 24
    1ef0:	f1 50       	subi	r31, 0x01	; 1
    1ef2:	20 40       	sbci	r18, 0x00	; 0
    1ef4:	80 40       	sbci	r24, 0x00	; 0
    1ef6:	e1 f7       	brne	.-8      	; 0x1ef0 <start_wlan_communication+0x19e>
    1ef8:	00 c0       	rjmp	.+0      	; 0x1efa <start_wlan_communication+0x1a8>
    1efa:	00 00       	nop
					_delay_ms(DELAY_COMMAND_MS);
					if (poll_switch()) shutdown_sequence(true);
    1efc:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    1f00:	88 23       	and	r24, r24
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <start_wlan_communication+0x1b4>
    1f04:	43 c0       	rjmp	.+134    	; 0x1f8c <start_wlan_communication+0x23a>
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    1f0c:	3f c0       	rjmp	.+126    	; 0x1f8c <start_wlan_communication+0x23a>
					break;
				
				case WAIT_FOR_WLAN_DEVICE:
					if (UART.message_received) {
    1f0e:	f8 01       	movw	r30, r16
    1f10:	80 81       	ld	r24, Z
    1f12:	88 23       	and	r24, r24
    1f14:	31 f1       	breq	.+76     	; 0x1f62 <start_wlan_communication+0x210>
						communication_state = DEVICE_CONNECTED;
						UART.wait_for_message = WAIT_FOR_DATA;
    1f16:	f7 01       	movw	r30, r14
    1f18:	60 82       	st	Z, r6
						clear_uart_rx_message();
    1f1a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
						retries = 0;
						clear_LCD();
    1f1e:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
						print_LCD_line(DEVICE_CONNECTED_MSG, LCD_LINE_2);
    1f22:	60 e4       	ldi	r22, 0x40	; 64
    1f24:	89 e1       	ldi	r24, 0x19	; 25
    1f26:	93 e0       	ldi	r25, 0x03	; 3
    1f28:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						STATUS.socket_active = true;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	f5 01       	movw	r30, r10
    1f30:	82 83       	std	Z+2, r24	; 0x02
						beep(); _delay_ms(50); beep();
    1f32:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
    1f36:	ff e7       	ldi	r31, 0x7F	; 127
    1f38:	28 e3       	ldi	r18, 0x38	; 56
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	f1 50       	subi	r31, 0x01	; 1
    1f3e:	20 40       	sbci	r18, 0x00	; 0
    1f40:	80 40       	sbci	r24, 0x00	; 0
    1f42:	e1 f7       	brne	.-8      	; 0x1f3c <start_wlan_communication+0x1ea>
    1f44:	00 c0       	rjmp	.+0      	; 0x1f46 <start_wlan_communication+0x1f4>
    1f46:	00 00       	nop
    1f48:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
    1f4c:	9f ef       	ldi	r25, 0xFF	; 255
    1f4e:	e3 ed       	ldi	r30, 0xD3	; 211
    1f50:	f0 e3       	ldi	r31, 0x30	; 48
    1f52:	91 50       	subi	r25, 0x01	; 1
    1f54:	e0 40       	sbci	r30, 0x00	; 0
    1f56:	f0 40       	sbci	r31, 0x00	; 0
    1f58:	e1 f7       	brne	.-8      	; 0x1f52 <start_wlan_communication+0x200>
    1f5a:	00 c0       	rjmp	.+0      	; 0x1f5c <start_wlan_communication+0x20a>
    1f5c:	00 00       	nop
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case WAIT_FOR_WLAN_DEVICE:
					if (UART.message_received) {
						communication_state = DEVICE_CONNECTED;
    1f5e:	c7 2d       	mov	r28, r7
    1f60:	1d c0       	rjmp	.+58     	; 0x1f9c <start_wlan_communication+0x24a>
						STATUS.socket_active = true;
						beep(); _delay_ms(50); beep();
						_delay_ms(2 * DELAY_COMMAND_MS);
						break;
					}
					if (poll_switch()) shutdown_sequence(true);
    1f62:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    1f66:	88 23       	and	r24, r24
    1f68:	89 f0       	breq	.+34     	; 0x1f8c <start_wlan_communication+0x23a>
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    1f70:	0d c0       	rjmp	.+26     	; 0x1f8c <start_wlan_communication+0x23a>
					break;

				case DEVICE_CONNECTED:
					eeprom_write_byte((uint8_t *)STORED_CONNECTION_STATE_ADDRESS, WIFI_LAN_CONNECTON);
    1f72:	6c e4       	ldi	r22, 0x4C	; 76
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0e 94 cc 1c 	call	0x3998	; 0x3998 <eeprom_write_byte>
					init_UI_array();
    1f7c:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <init_UI_array>
					update_complete_UI();
    1f80:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <update_complete_UI>
					socket_message_handler();
    1f84:	0e 94 6d 0b 	call	0x16da	; 0x16da <socket_message_handler>
					break;
				
			}
		}
		else {
			halt_system();
    1f88:	0e 94 35 05 	call	0xa6a	; 0xa6a <halt_system>
	uint8_t retries = 0;
	bool break_from_pairing = false;
	enum WLAN_COMMUNICATION_STATES communication_state = INIT_MESSAGE;
	beep();
	while(!break_from_pairing) {
		if (retries < MAXIMUM_COMMAND_RETRIES) {
    1f8c:	d4 31       	cpi	r29, 0x14	; 20
    1f8e:	08 f4       	brcc	.+2      	; 0x1f92 <start_wlan_communication+0x240>
    1f90:	07 cf       	rjmp	.-498    	; 0x1da0 <start_wlan_communication+0x4e>
    1f92:	fa cf       	rjmp	.-12     	; 0x1f88 <start_wlan_communication+0x236>
    1f94:	d4 31       	cpi	r29, 0x14	; 20
    1f96:	08 f4       	brcc	.+2      	; 0x1f9a <start_wlan_communication+0x248>
    1f98:	03 cf       	rjmp	.-506    	; 0x1da0 <start_wlan_communication+0x4e>
    1f9a:	f6 cf       	rjmp	.-20     	; 0x1f88 <start_wlan_communication+0x236>
    1f9c:	d0 e0       	ldi	r29, 0x00	; 0
    1f9e:	00 cf       	rjmp	.-512    	; 0x1da0 <start_wlan_communication+0x4e>

00001fa0 <wifi_lan_pairing>:
			_delay_ms(DELAY_COMMAND_MS);
		}
	}
}

void wifi_lan_pairing() {
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	a8 97       	sbiw	r28, 0x28	; 40
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
	uint8_t retries = 0;
	bool break_from_pairing = false;
	enum LAN_PAIRING_STATES pairing_state = SHOW_LAN_MESSAGE;
    1fb4:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
}

void wifi_lan_pairing() {
	uint8_t retries = 0;
    1fb6:	10 e0       	ldi	r17, 0x00	; 0
					break;
				
				case SEND_MAC:
					while(true) {
						if (poll_switch()) shutdown_sequence(true);
						if (UART.message_received) {
    1fb8:	0f 2e       	mov	r0, r31
    1fba:	f5 e5       	ldi	r31, 0x55	; 85
    1fbc:	ef 2e       	mov	r14, r31
    1fbe:	f6 e0       	ldi	r31, 0x06	; 6
    1fc0:	ff 2e       	mov	r15, r31
    1fc2:	f0 2d       	mov	r31, r0
							clear_uart_rx_message();
							retries = 0;
							UART.wait_for_message = WAIT_FOR_CREDENTIALS;
    1fc4:	0f 2e       	mov	r0, r31
    1fc6:	f7 e5       	ldi	r31, 0x57	; 87
    1fc8:	cf 2e       	mov	r12, r31
    1fca:	f6 e0       	ldi	r31, 0x06	; 6
    1fcc:	df 2e       	mov	r13, r31
    1fce:	f0 2d       	mov	r31, r0
    1fd0:	0f 2e       	mov	r0, r31
    1fd2:	f9 e0       	ldi	r31, 0x09	; 9
    1fd4:	7f 2e       	mov	r7, r31
    1fd6:	f0 2d       	mov	r31, r0
					}
					send_command_UART(WIFI.device_MAC); // MAC String transmission
					while(true) {
						if (poll_switch()) shutdown_sequence(true);
						if (UART.message_received) {
							pairing_state = RETRIEVE_CREDENTIALS;
    1fd8:	0f 2e       	mov	r0, r31
    1fda:	fa e0       	ldi	r31, 0x0A	; 10
    1fdc:	bf 2e       	mov	r11, r31
    1fde:	f0 2d       	mov	r31, r0
					if (UART.message_received) {
						pack_mac_string();
						print_LCD_line(WIFI.device_MAC, LCD_LINE_3);
						_delay_ms(1000);
						pairing_state = SEND_MAC;
						UART.wait_for_message = WAIT_FOR_READY_TO_SEND;
    1fe0:	0f 2e       	mov	r0, r31
    1fe2:	f3 e0       	ldi	r31, 0x03	; 3
    1fe4:	2f 2e       	mov	r2, r31
    1fe6:	f0 2d       	mov	r31, r0
						clear_uart_rx_message();
						clear_LCD();
						print_LCD_line("Android device found", LCD_LINE_1);
						print_LCD_line("FuncGen MAC Address:", LCD_LINE_2);
						print_LCD_line("<   Retrieving...  >", LCD_LINE_3);
						STATUS.socket_active = true;
    1fe8:	0f 2e       	mov	r0, r31
    1fea:	f6 e1       	ldi	r31, 0x16	; 22
    1fec:	8f 2e       	mov	r8, r31
    1fee:	f5 e0       	ldi	r31, 0x05	; 5
    1ff0:	9f 2e       	mov	r9, r31
    1ff2:	f0 2d       	mov	r31, r0
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case WAIT_FOR_DEVICE_CONNECT:
					if (UART.message_received) {
						pairing_state = RETRIEVE_MAC;
    1ff4:	68 94       	set
    1ff6:	33 24       	eor	r3, r3
    1ff8:	33 f8       	bld	r3, 3
					break;
								
				case OPEN_LOCAL_SOCKET:
					if (UART.message_received) {
						pairing_state = WAIT_FOR_DEVICE_CONNECT;
						UART.wait_for_message = WAIT_FOR_CONNECT;
    1ffa:	68 94       	set
    1ffc:	aa 24       	eor	r10, r10
    1ffe:	a2 f8       	bld	r10, 2
					if (poll_switch()) shutdown_sequence(true);
					break;
								
				case OPEN_LOCAL_SOCKET:
					if (UART.message_received) {
						pairing_state = WAIT_FOR_DEVICE_CONNECT;
    2000:	0f 2e       	mov	r0, r31
    2002:	f7 e0       	ldi	r31, 0x07	; 7
    2004:	4f 2e       	mov	r4, r31
    2006:	f0 2d       	mov	r31, r0
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case SET_MUX_COMMAND:
					if (UART.message_received) {
						pairing_state = OPEN_LOCAL_SOCKET;
    2008:	0f 2e       	mov	r0, r31
    200a:	f6 e0       	ldi	r31, 0x06	; 6
    200c:	5f 2e       	mov	r5, r31
    200e:	f0 2d       	mov	r31, r0
			switch(pairing_state)
			{
				case SHOW_LAN_MESSAGE:
					clear_LCD();
					print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
					pairing_state = ECHO_OFF_COMMAND;
    2010:	68 94       	set
    2012:	66 24       	eor	r6, r6
    2014:	61 f8       	bld	r6, 1
	enum LAN_PAIRING_STATES pairing_state = SHOW_LAN_MESSAGE;
	char buffer_LCD1[LCD_LINE_LENGTH];
	char buffer_LCD2[LCD_LINE_LENGTH];
	while(!break_from_pairing) {
		if (retries < MAXIMUM_COMMAND_RETRIES) {
			switch(pairing_state)
    2016:	80 2f       	mov	r24, r16
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	fc 01       	movw	r30, r24
    201c:	31 97       	sbiw	r30, 0x01	; 1
    201e:	ea 30       	cpi	r30, 0x0A	; 10
    2020:	f1 05       	cpc	r31, r1
    2022:	08 f0       	brcs	.+2      	; 0x2026 <wifi_lan_pairing+0x86>
    2024:	0b c2       	rjmp	.+1046   	; 0x243c <wifi_lan_pairing+0x49c>
    2026:	e7 5c       	subi	r30, 0xC7	; 199
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	0c 94 64 19 	jmp	0x32c8	; 0x32c8 <__tablejump2__>
			{
				case SHOW_LAN_MESSAGE:
					clear_LCD();
    202e:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	8c e2       	ldi	r24, 0x2C	; 44
    2036:	92 e0       	ldi	r25, 0x02	; 2
    2038:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					pairing_state = ECHO_OFF_COMMAND;
					UART.wait_for_message = WAIT_FOR_OK;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	f6 01       	movw	r30, r12
    2040:	80 83       	st	Z, r24
			switch(pairing_state)
			{
				case SHOW_LAN_MESSAGE:
					clear_LCD();
					print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
					pairing_state = ECHO_OFF_COMMAND;
    2042:	06 2d       	mov	r16, r6
					UART.wait_for_message = WAIT_FOR_OK;
					break;
    2044:	f7 c1       	rjmp	.+1006   	; 0x2434 <wifi_lan_pairing+0x494>
				
				case ECHO_OFF: // create wifi AP, create socket.
				if (UART.message_received) {
    2046:	f7 01       	movw	r30, r14
    2048:	80 81       	ld	r24, Z
    204a:	88 23       	and	r24, r24
    204c:	89 f0       	breq	.+34     	; 0x2070 <wifi_lan_pairing+0xd0>
						pairing_state = OPEN_DIRECT_AP;
						clear_uart_rx_message();
    204e:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
						retries = 0;
						print_LCD_line(ESP32_STATUS_MSG_OK, LCD_LINE_1);
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	81 e4       	ldi	r24, 0x41	; 65
    2056:	92 e0       	ldi	r25, 0x02	; 2
    2058:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(REQUEST_NETWORK_MSG, LCD_LINE_2);
    205c:	60 e4       	ldi	r22, 0x40	; 64
    205e:	86 e5       	ldi	r24, 0x56	; 86
    2060:	92 e0       	ldi	r25, 0x02	; 2
    2062:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						UART.wait_for_message = WAIT_FOR_OK;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	f6 01       	movw	r30, r12
    206a:	80 83       	st	Z, r24
					UART.wait_for_message = WAIT_FOR_OK;
					break;
				
				case ECHO_OFF: // create wifi AP, create socket.
				if (UART.message_received) {
						pairing_state = OPEN_DIRECT_AP;
    206c:	0a 2d       	mov	r16, r10
						clear_uart_rx_message();
						retries = 0;
						print_LCD_line(ESP32_STATUS_MSG_OK, LCD_LINE_1);
						print_LCD_line(REQUEST_NETWORK_MSG, LCD_LINE_2);
						UART.wait_for_message = WAIT_FOR_OK;
						break;
    206e:	eb c1       	rjmp	.+982    	; 0x2446 <wifi_lan_pairing+0x4a6>
				}
				send_command_UART("ATE0\r\n");
    2070:	8b e6       	ldi	r24, 0x6B	; 107
    2072:	92 e0       	ldi	r25, 0x02	; 2
    2074:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
				retries++;
    2078:	1f 5f       	subi	r17, 0xFF	; 255
    207a:	ff ef       	ldi	r31, 0xFF	; 255
    207c:	29 e6       	ldi	r18, 0x69	; 105
    207e:	88 e1       	ldi	r24, 0x18	; 24
    2080:	f1 50       	subi	r31, 0x01	; 1
    2082:	20 40       	sbci	r18, 0x00	; 0
    2084:	80 40       	sbci	r24, 0x00	; 0
    2086:	e1 f7       	brne	.-8      	; 0x2080 <wifi_lan_pairing+0xe0>
    2088:	00 c0       	rjmp	.+0      	; 0x208a <wifi_lan_pairing+0xea>
    208a:	00 00       	nop
				_delay_ms(DELAY_COMMAND_MS);
				if (poll_switch()) shutdown_sequence(true);
    208c:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    2090:	88 23       	and	r24, r24
    2092:	09 f4       	brne	.+2      	; 0x2096 <wifi_lan_pairing+0xf6>
    2094:	cf c1       	rjmp	.+926    	; 0x2434 <wifi_lan_pairing+0x494>
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    209c:	cb c1       	rjmp	.+918    	; 0x2434 <wifi_lan_pairing+0x494>
				break;
			
				case SET_AP_MODE: // create wifi AP, create socket.
					if (UART.message_received) {
    209e:	f7 01       	movw	r30, r14
    20a0:	80 81       	ld	r24, Z
    20a2:	88 23       	and	r24, r24
    20a4:	39 f0       	breq	.+14     	; 0x20b4 <wifi_lan_pairing+0x114>
							pairing_state = OPEN_LOCAL_AP;
							clear_uart_rx_message();
    20a6:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
							retries = 0;
							UART.wait_for_message = WAIT_FOR_OK;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	f6 01       	movw	r30, r12
    20ae:	80 83       	st	Z, r24
				if (poll_switch()) shutdown_sequence(true);
				break;
			
				case SET_AP_MODE: // create wifi AP, create socket.
					if (UART.message_received) {
							pairing_state = OPEN_LOCAL_AP;
    20b0:	0a 2d       	mov	r16, r10
							clear_uart_rx_message();
							retries = 0;
							UART.wait_for_message = WAIT_FOR_OK;
							break;
    20b2:	c9 c1       	rjmp	.+914    	; 0x2446 <wifi_lan_pairing+0x4a6>
					}
					retries++;
    20b4:	1f 5f       	subi	r17, 0xFF	; 255
					send_command_UART("AT+CWMODE=1\r\n");
    20b6:	8e e5       	ldi	r24, 0x5E	; 94
    20b8:	93 e0       	ldi	r25, 0x03	; 3
    20ba:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
    20be:	ff ef       	ldi	r31, 0xFF	; 255
    20c0:	29 e6       	ldi	r18, 0x69	; 105
    20c2:	88 e1       	ldi	r24, 0x18	; 24
    20c4:	f1 50       	subi	r31, 0x01	; 1
    20c6:	20 40       	sbci	r18, 0x00	; 0
    20c8:	80 40       	sbci	r24, 0x00	; 0
    20ca:	e1 f7       	brne	.-8      	; 0x20c4 <wifi_lan_pairing+0x124>
    20cc:	00 c0       	rjmp	.+0      	; 0x20ce <wifi_lan_pairing+0x12e>
    20ce:	00 00       	nop
					_delay_ms(DELAY_COMMAND_MS);
					if (poll_switch()) shutdown_sequence(true);
    20d0:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    20d4:	88 23       	and	r24, r24
    20d6:	09 f4       	brne	.+2      	; 0x20da <wifi_lan_pairing+0x13a>
    20d8:	ad c1       	rjmp	.+858    	; 0x2434 <wifi_lan_pairing+0x494>
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    20e0:	a9 c1       	rjmp	.+850    	; 0x2434 <wifi_lan_pairing+0x494>
					break;
							
				case OPEN_LOCAL_AP:
					if (UART.message_received) {
    20e2:	f7 01       	movw	r30, r14
    20e4:	80 81       	ld	r24, Z
    20e6:	88 23       	and	r24, r24
    20e8:	89 f0       	breq	.+34     	; 0x210c <wifi_lan_pairing+0x16c>
						pairing_state = SET_MUX_COMMAND;
						clear_uart_rx_message();
    20ea:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
						retries = 0;
						print_LCD_line(REQUEST_NETWORK_MSG_OK, LCD_LINE_2);
    20ee:	60 e4       	ldi	r22, 0x40	; 64
    20f0:	80 e8       	ldi	r24, 0x80	; 128
    20f2:	92 e0       	ldi	r25, 0x02	; 2
    20f4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(CREATING_SERVER_MSG, LCD_LINE_3);
    20f8:	64 e1       	ldi	r22, 0x14	; 20
    20fa:	85 e9       	ldi	r24, 0x95	; 149
    20fc:	92 e0       	ldi	r25, 0x02	; 2
    20fe:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						UART.wait_for_message = WAIT_FOR_OK;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	f6 01       	movw	r30, r12
    2106:	80 83       	st	Z, r24
					if (poll_switch()) shutdown_sequence(true);
					break;
							
				case OPEN_LOCAL_AP:
					if (UART.message_received) {
						pairing_state = SET_MUX_COMMAND;
    2108:	05 e0       	ldi	r16, 0x05	; 5
						clear_uart_rx_message();
						retries = 0;
						print_LCD_line(REQUEST_NETWORK_MSG_OK, LCD_LINE_2);
						print_LCD_line(CREATING_SERVER_MSG, LCD_LINE_3);
						UART.wait_for_message = WAIT_FOR_OK;
						break;
    210a:	9d c1       	rjmp	.+826    	; 0x2446 <wifi_lan_pairing+0x4a6>
					}
					send_command_UART("AT+CWSAP=\"IOT_FUNCGEN\",\"0\",1,0\r\n");
    210c:	8a ea       	ldi	r24, 0xAA	; 170
    210e:	92 e0       	ldi	r25, 0x02	; 2
    2110:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
					retries++;
    2114:	1f 5f       	subi	r17, 0xFF	; 255
    2116:	ff ef       	ldi	r31, 0xFF	; 255
    2118:	29 e6       	ldi	r18, 0x69	; 105
    211a:	88 e1       	ldi	r24, 0x18	; 24
    211c:	f1 50       	subi	r31, 0x01	; 1
    211e:	20 40       	sbci	r18, 0x00	; 0
    2120:	80 40       	sbci	r24, 0x00	; 0
    2122:	e1 f7       	brne	.-8      	; 0x211c <wifi_lan_pairing+0x17c>
    2124:	00 c0       	rjmp	.+0      	; 0x2126 <wifi_lan_pairing+0x186>
    2126:	00 00       	nop
					_delay_ms(DELAY_COMMAND_MS);
					if (poll_switch()) shutdown_sequence(true);
    2128:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    212c:	88 23       	and	r24, r24
    212e:	09 f4       	brne	.+2      	; 0x2132 <wifi_lan_pairing+0x192>
    2130:	81 c1       	rjmp	.+770    	; 0x2434 <wifi_lan_pairing+0x494>
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    2138:	7d c1       	rjmp	.+762    	; 0x2434 <wifi_lan_pairing+0x494>
					break;
				
				case SET_MUX_COMMAND:
					if (UART.message_received) {
    213a:	f7 01       	movw	r30, r14
    213c:	80 81       	ld	r24, Z
    213e:	88 23       	and	r24, r24
    2140:	39 f0       	breq	.+14     	; 0x2150 <wifi_lan_pairing+0x1b0>
						pairing_state = OPEN_LOCAL_SOCKET;
						UART.wait_for_message = WAIT_FOR_OK;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	f6 01       	movw	r30, r12
    2146:	80 83       	st	Z, r24
						clear_uart_rx_message();
    2148:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case SET_MUX_COMMAND:
					if (UART.message_received) {
						pairing_state = OPEN_LOCAL_SOCKET;
    214c:	05 2d       	mov	r16, r5
						UART.wait_for_message = WAIT_FOR_OK;
						clear_uart_rx_message();
						retries = 0;
						break;
    214e:	7b c1       	rjmp	.+758    	; 0x2446 <wifi_lan_pairing+0x4a6>
					}
					retries++;
    2150:	1f 5f       	subi	r17, 0xFF	; 255
					send_command_UART("AT+CIPMUX=1\r\n");
    2152:	8b ec       	ldi	r24, 0xCB	; 203
    2154:	92 e0       	ldi	r25, 0x02	; 2
    2156:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
    215a:	ff ef       	ldi	r31, 0xFF	; 255
    215c:	29 e6       	ldi	r18, 0x69	; 105
    215e:	88 e1       	ldi	r24, 0x18	; 24
    2160:	f1 50       	subi	r31, 0x01	; 1
    2162:	20 40       	sbci	r18, 0x00	; 0
    2164:	80 40       	sbci	r24, 0x00	; 0
    2166:	e1 f7       	brne	.-8      	; 0x2160 <wifi_lan_pairing+0x1c0>
    2168:	00 c0       	rjmp	.+0      	; 0x216a <wifi_lan_pairing+0x1ca>
    216a:	00 00       	nop
					_delay_ms(DELAY_COMMAND_MS);
					if (poll_switch()) shutdown_sequence(true);
    216c:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    2170:	88 23       	and	r24, r24
    2172:	09 f4       	brne	.+2      	; 0x2176 <wifi_lan_pairing+0x1d6>
    2174:	5f c1       	rjmp	.+702    	; 0x2434 <wifi_lan_pairing+0x494>
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    217c:	5b c1       	rjmp	.+694    	; 0x2434 <wifi_lan_pairing+0x494>
					break;
								
				case OPEN_LOCAL_SOCKET:
					if (UART.message_received) {
    217e:	f7 01       	movw	r30, r14
    2180:	80 81       	ld	r24, Z
    2182:	88 23       	and	r24, r24
    2184:	81 f0       	breq	.+32     	; 0x21a6 <wifi_lan_pairing+0x206>
						pairing_state = WAIT_FOR_DEVICE_CONNECT;
						UART.wait_for_message = WAIT_FOR_CONNECT;
    2186:	f6 01       	movw	r30, r12
    2188:	a0 82       	st	Z, r10
						clear_uart_rx_message();
    218a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
						retries = 0;
						print_LCD_line(CREATING_SERVER_MSG_OK, LCD_LINE_3);
    218e:	64 e1       	ldi	r22, 0x14	; 20
    2190:	89 ed       	ldi	r24, 0xD9	; 217
    2192:	92 e0       	ldi	r25, 0x02	; 2
    2194:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(WAIT_FOR_DEVICE_MSG, LCD_LINE_4);
    2198:	64 e5       	ldi	r22, 0x54	; 84
    219a:	8e ee       	ldi	r24, 0xEE	; 238
    219c:	92 e0       	ldi	r25, 0x02	; 2
    219e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					if (poll_switch()) shutdown_sequence(true);
					break;
								
				case OPEN_LOCAL_SOCKET:
					if (UART.message_received) {
						pairing_state = WAIT_FOR_DEVICE_CONNECT;
    21a2:	04 2d       	mov	r16, r4
						UART.wait_for_message = WAIT_FOR_CONNECT;
						clear_uart_rx_message();
						retries = 0;
						print_LCD_line(CREATING_SERVER_MSG_OK, LCD_LINE_3);
						print_LCD_line(WAIT_FOR_DEVICE_MSG, LCD_LINE_4);
						break;
    21a4:	50 c1       	rjmp	.+672    	; 0x2446 <wifi_lan_pairing+0x4a6>
					}
					send_command_UART("AT+CIPSERVER=1,1726\r\n");
    21a6:	83 e0       	ldi	r24, 0x03	; 3
    21a8:	93 e0       	ldi	r25, 0x03	; 3
    21aa:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
					retries++;
    21ae:	1f 5f       	subi	r17, 0xFF	; 255
    21b0:	ff ef       	ldi	r31, 0xFF	; 255
    21b2:	29 e6       	ldi	r18, 0x69	; 105
    21b4:	88 e1       	ldi	r24, 0x18	; 24
    21b6:	f1 50       	subi	r31, 0x01	; 1
    21b8:	20 40       	sbci	r18, 0x00	; 0
    21ba:	80 40       	sbci	r24, 0x00	; 0
    21bc:	e1 f7       	brne	.-8      	; 0x21b6 <wifi_lan_pairing+0x216>
    21be:	00 c0       	rjmp	.+0      	; 0x21c0 <wifi_lan_pairing+0x220>
    21c0:	00 00       	nop
					_delay_ms(DELAY_COMMAND_MS);
					if (poll_switch()) shutdown_sequence(true);
    21c2:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    21c6:	88 23       	and	r24, r24
    21c8:	09 f4       	brne	.+2      	; 0x21cc <wifi_lan_pairing+0x22c>
    21ca:	34 c1       	rjmp	.+616    	; 0x2434 <wifi_lan_pairing+0x494>
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    21d2:	30 c1       	rjmp	.+608    	; 0x2434 <wifi_lan_pairing+0x494>
					break;
				
				case WAIT_FOR_DEVICE_CONNECT:
					if (UART.message_received) {
    21d4:	f7 01       	movw	r30, r14
    21d6:	80 81       	ld	r24, Z
    21d8:	88 23       	and	r24, r24
    21da:	19 f1       	breq	.+70     	; 0x2222 <wifi_lan_pairing+0x282>
						pairing_state = RETRIEVE_MAC;
						UART.wait_for_message = WAIT_FOR_MAC;
    21dc:	f6 01       	movw	r30, r12
    21de:	b0 82       	st	Z, r11
						clear_uart_rx_message();
    21e0:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
						clear_LCD();
    21e4:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
						print_LCD_line("Android device found", LCD_LINE_1);
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	8c e6       	ldi	r24, 0x6C	; 108
    21ec:	93 e0       	ldi	r25, 0x03	; 3
    21ee:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line("FuncGen MAC Address:", LCD_LINE_2);
    21f2:	60 e4       	ldi	r22, 0x40	; 64
    21f4:	81 e8       	ldi	r24, 0x81	; 129
    21f6:	93 e0       	ldi	r25, 0x03	; 3
    21f8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line("<   Retrieving...  >", LCD_LINE_3);
    21fc:	64 e1       	ldi	r22, 0x14	; 20
    21fe:	86 e9       	ldi	r24, 0x96	; 150
    2200:	93 e0       	ldi	r25, 0x03	; 3
    2202:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						STATUS.socket_active = true;
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	f4 01       	movw	r30, r8
    220a:	82 83       	std	Z+2, r24	; 0x02
    220c:	ff ef       	ldi	r31, 0xFF	; 255
    220e:	29 e6       	ldi	r18, 0x69	; 105
    2210:	88 e1       	ldi	r24, 0x18	; 24
    2212:	f1 50       	subi	r31, 0x01	; 1
    2214:	20 40       	sbci	r18, 0x00	; 0
    2216:	80 40       	sbci	r24, 0x00	; 0
    2218:	e1 f7       	brne	.-8      	; 0x2212 <wifi_lan_pairing+0x272>
    221a:	00 c0       	rjmp	.+0      	; 0x221c <wifi_lan_pairing+0x27c>
    221c:	00 00       	nop
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case WAIT_FOR_DEVICE_CONNECT:
					if (UART.message_received) {
						pairing_state = RETRIEVE_MAC;
    221e:	03 2d       	mov	r16, r3
    2220:	12 c1       	rjmp	.+548    	; 0x2446 <wifi_lan_pairing+0x4a6>
						STATUS.socket_active = true;
						retries = 0;
						_delay_ms(DELAY_COMMAND_MS);
						break;
					}
					if (poll_switch()) shutdown_sequence(true);
    2222:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    2226:	88 23       	and	r24, r24
    2228:	09 f4       	brne	.+2      	; 0x222c <wifi_lan_pairing+0x28c>
    222a:	04 c1       	rjmp	.+520    	; 0x2434 <wifi_lan_pairing+0x494>
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    2232:	00 c1       	rjmp	.+512    	; 0x2434 <wifi_lan_pairing+0x494>
					break;
				
				case RETRIEVE_MAC:
					if (UART.message_received) {
    2234:	f7 01       	movw	r30, r14
    2236:	80 81       	ld	r24, Z
    2238:	88 23       	and	r24, r24
    223a:	49 f1       	breq	.+82     	; 0x228e <wifi_lan_pairing+0x2ee>
						pack_mac_string();
    223c:	0e 94 1b 05 	call	0xa36	; 0xa36 <pack_mac_string>
						print_LCD_line(WIFI.device_MAC, LCD_LINE_3);
    2240:	64 e1       	ldi	r22, 0x14	; 20
    2242:	89 eb       	ldi	r24, 0xB9	; 185
    2244:	95 e0       	ldi	r25, 0x05	; 5
    2246:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    224a:	ff ef       	ldi	r31, 0xFF	; 255
    224c:	29 e6       	ldi	r18, 0x69	; 105
    224e:	88 e1       	ldi	r24, 0x18	; 24
    2250:	f1 50       	subi	r31, 0x01	; 1
    2252:	20 40       	sbci	r18, 0x00	; 0
    2254:	80 40       	sbci	r24, 0x00	; 0
    2256:	e1 f7       	brne	.-8      	; 0x2250 <wifi_lan_pairing+0x2b0>
    2258:	00 c0       	rjmp	.+0      	; 0x225a <wifi_lan_pairing+0x2ba>
    225a:	00 00       	nop
						_delay_ms(1000);
						pairing_state = SEND_MAC;
						UART.wait_for_message = WAIT_FOR_READY_TO_SEND;
    225c:	f6 01       	movw	r30, r12
    225e:	20 82       	st	Z, r2
						clear_uart_rx_message();
    2260:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
						retries = 0;
					}
					send_command_UART("AT+CIPSTAMAC?\r\n");
    2264:	8b ea       	ldi	r24, 0xAB	; 171
    2266:	93 e0       	ldi	r25, 0x03	; 3
    2268:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
    226c:	ff ef       	ldi	r31, 0xFF	; 255
    226e:	29 e6       	ldi	r18, 0x69	; 105
    2270:	88 e1       	ldi	r24, 0x18	; 24
    2272:	f1 50       	subi	r31, 0x01	; 1
    2274:	20 40       	sbci	r18, 0x00	; 0
    2276:	80 40       	sbci	r24, 0x00	; 0
    2278:	e1 f7       	brne	.-8      	; 0x2272 <wifi_lan_pairing+0x2d2>
    227a:	00 c0       	rjmp	.+0      	; 0x227c <wifi_lan_pairing+0x2dc>
    227c:	00 00       	nop
					retries++;
					_delay_ms(DELAY_COMMAND_MS);					
					if (poll_switch()) shutdown_sequence(true);
    227e:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
						UART.wait_for_message = WAIT_FOR_READY_TO_SEND;
						clear_uart_rx_message();
						retries = 0;
					}
					send_command_UART("AT+CIPSTAMAC?\r\n");
					retries++;
    2282:	11 e0       	ldi	r17, 0x01	; 1
				case RETRIEVE_MAC:
					if (UART.message_received) {
						pack_mac_string();
						print_LCD_line(WIFI.device_MAC, LCD_LINE_3);
						_delay_ms(1000);
						pairing_state = SEND_MAC;
    2284:	07 2d       	mov	r16, r7
						retries = 0;
					}
					send_command_UART("AT+CIPSTAMAC?\r\n");
					retries++;
					_delay_ms(DELAY_COMMAND_MS);					
					if (poll_switch()) shutdown_sequence(true);
    2286:	88 23       	and	r24, r24
    2288:	09 f4       	brne	.+2      	; 0x228c <wifi_lan_pairing+0x2ec>
    228a:	c5 ce       	rjmp	.-630    	; 0x2016 <wifi_lan_pairing+0x76>
    228c:	14 c0       	rjmp	.+40     	; 0x22b6 <wifi_lan_pairing+0x316>
						pairing_state = SEND_MAC;
						UART.wait_for_message = WAIT_FOR_READY_TO_SEND;
						clear_uart_rx_message();
						retries = 0;
					}
					send_command_UART("AT+CIPSTAMAC?\r\n");
    228e:	8b ea       	ldi	r24, 0xAB	; 171
    2290:	93 e0       	ldi	r25, 0x03	; 3
    2292:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
					retries++;
    2296:	1f 5f       	subi	r17, 0xFF	; 255
    2298:	9f ef       	ldi	r25, 0xFF	; 255
    229a:	e9 e6       	ldi	r30, 0x69	; 105
    229c:	f8 e1       	ldi	r31, 0x18	; 24
    229e:	91 50       	subi	r25, 0x01	; 1
    22a0:	e0 40       	sbci	r30, 0x00	; 0
    22a2:	f0 40       	sbci	r31, 0x00	; 0
    22a4:	e1 f7       	brne	.-8      	; 0x229e <wifi_lan_pairing+0x2fe>
    22a6:	00 c0       	rjmp	.+0      	; 0x22a8 <wifi_lan_pairing+0x308>
    22a8:	00 00       	nop
					_delay_ms(DELAY_COMMAND_MS);					
					if (poll_switch()) shutdown_sequence(true);
    22aa:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    22ae:	88 23       	and	r24, r24
    22b0:	09 f4       	brne	.+2      	; 0x22b4 <wifi_lan_pairing+0x314>
    22b2:	c0 c0       	rjmp	.+384    	; 0x2434 <wifi_lan_pairing+0x494>
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <wifi_lan_pairing+0x31a>
						UART.wait_for_message = WAIT_FOR_READY_TO_SEND;
						clear_uart_rx_message();
						retries = 0;
					}
					send_command_UART("AT+CIPSTAMAC?\r\n");
					retries++;
    22b6:	11 e0       	ldi	r17, 0x01	; 1
				case RETRIEVE_MAC:
					if (UART.message_received) {
						pack_mac_string();
						print_LCD_line(WIFI.device_MAC, LCD_LINE_3);
						_delay_ms(1000);
						pairing_state = SEND_MAC;
    22b8:	07 2d       	mov	r16, r7
						retries = 0;
					}
					send_command_UART("AT+CIPSTAMAC?\r\n");
					retries++;
					_delay_ms(DELAY_COMMAND_MS);					
					if (poll_switch()) shutdown_sequence(true);
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    22c0:	b9 c0       	rjmp	.+370    	; 0x2434 <wifi_lan_pairing+0x494>
					break;
				
				case SEND_MAC:
					while(true) {
						if (poll_switch()) shutdown_sequence(true);
    22c2:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    22c6:	88 23       	and	r24, r24
    22c8:	19 f0       	breq	.+6      	; 0x22d0 <wifi_lan_pairing+0x330>
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
						if (UART.message_received) {
    22d0:	f7 01       	movw	r30, r14
    22d2:	80 81       	ld	r24, Z
    22d4:	88 23       	and	r24, r24
    22d6:	51 f0       	breq	.+20     	; 0x22ec <wifi_lan_pairing+0x34c>
							clear_uart_rx_message();
    22d8:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
							retries = 0;
							UART.wait_for_message = WAIT_FOR_CREDENTIALS;
    22dc:	f6 01       	movw	r30, r12
    22de:	70 82       	st	Z, r7
								retries++;
								_delay_ms(DELAY_COMMAND_MS);
							}
						}
					}
					send_command_UART(WIFI.device_MAC); // MAC String transmission
    22e0:	89 eb       	ldi	r24, 0xB9	; 185
    22e2:	95 e0       	ldi	r25, 0x05	; 5
    22e4:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
				case SEND_MAC:
					while(true) {
						if (poll_switch()) shutdown_sequence(true);
						if (UART.message_received) {
							clear_uart_rx_message();
							retries = 0;
    22e8:	10 e0       	ldi	r17, 0x00	; 0
    22ea:	15 c0       	rjmp	.+42     	; 0x2316 <wifi_lan_pairing+0x376>
							UART.wait_for_message = WAIT_FOR_CREDENTIALS;
							break;
						}
						else {
							if (retries >= MAXIMUM_COMMAND_RETRIES) {
    22ec:	14 31       	cpi	r17, 0x14	; 20
    22ee:	20 f0       	brcs	.+8      	; 0x22f8 <wifi_lan_pairing+0x358>
								shutdown_sequence(true);
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    22f6:	e5 cf       	rjmp	.-54     	; 0x22c2 <wifi_lan_pairing+0x322>
							}
							else {
								send_command_UART("AT+CIPSEND=0,23\r\n");
    22f8:	8b eb       	ldi	r24, 0xBB	; 187
    22fa:	93 e0       	ldi	r25, 0x03	; 3
    22fc:	0e 94 77 15 	call	0x2aee	; 0x2aee <send_command_UART>
								retries++;
    2300:	1f 5f       	subi	r17, 0xFF	; 255
    2302:	ff ef       	ldi	r31, 0xFF	; 255
    2304:	29 e6       	ldi	r18, 0x69	; 105
    2306:	88 e1       	ldi	r24, 0x18	; 24
    2308:	f1 50       	subi	r31, 0x01	; 1
    230a:	20 40       	sbci	r18, 0x00	; 0
    230c:	80 40       	sbci	r24, 0x00	; 0
    230e:	e1 f7       	brne	.-8      	; 0x2308 <wifi_lan_pairing+0x368>
    2310:	00 c0       	rjmp	.+0      	; 0x2312 <wifi_lan_pairing+0x372>
    2312:	00 00       	nop
    2314:	d6 cf       	rjmp	.-84     	; 0x22c2 <wifi_lan_pairing+0x322>
							}
						}
					}
					send_command_UART(WIFI.device_MAC); // MAC String transmission
					while(true) {
						if (poll_switch()) shutdown_sequence(true);
    2316:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    231a:	88 23       	and	r24, r24
    231c:	19 f0       	breq	.+6      	; 0x2324 <wifi_lan_pairing+0x384>
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
						if (UART.message_received) {
    2324:	f7 01       	movw	r30, r14
    2326:	80 81       	ld	r24, Z
    2328:	81 11       	cpse	r24, r1
    232a:	8c c0       	rjmp	.+280    	; 0x2444 <wifi_lan_pairing+0x4a4>
							pairing_state = RETRIEVE_CREDENTIALS;
							retries = 0;
							break;
						}
						else {
							if (retries >= MAXIMUM_COMMAND_RETRIES) {
    232c:	14 31       	cpi	r17, 0x14	; 20
    232e:	20 f0       	brcs	.+8      	; 0x2338 <wifi_lan_pairing+0x398>
								shutdown_sequence(true);
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    2336:	ef cf       	rjmp	.-34     	; 0x2316 <wifi_lan_pairing+0x376>
							}
							else {
								retries++;
    2338:	1f 5f       	subi	r17, 0xFF	; 255
    233a:	ff ef       	ldi	r31, 0xFF	; 255
    233c:	29 e6       	ldi	r18, 0x69	; 105
    233e:	88 e1       	ldi	r24, 0x18	; 24
    2340:	f1 50       	subi	r31, 0x01	; 1
    2342:	20 40       	sbci	r18, 0x00	; 0
    2344:	80 40       	sbci	r24, 0x00	; 0
    2346:	e1 f7       	brne	.-8      	; 0x2340 <wifi_lan_pairing+0x3a0>
    2348:	00 c0       	rjmp	.+0      	; 0x234a <wifi_lan_pairing+0x3aa>
    234a:	00 00       	nop
    234c:	e4 cf       	rjmp	.-56     	; 0x2316 <wifi_lan_pairing+0x376>
						}
					}
					break;

				case RETRIEVE_CREDENTIALS: //\r\nWN=SVaica1,Pvaica666,E2\r\n
					if (UART.message_received) {
    234e:	f7 01       	movw	r30, r14
    2350:	80 81       	ld	r24, Z
    2352:	88 23       	and	r24, r24
    2354:	09 f4       	brne	.+2      	; 0x2358 <wifi_lan_pairing+0x3b8>
    2356:	64 c0       	rjmp	.+200    	; 0x2420 <wifi_lan_pairing+0x480>
						clear_LCD();
    2358:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
						retrieve_wifi_credentials();
    235c:	0e 94 ab 04 	call	0x956	; 0x956 <retrieve_wifi_credentials>
						save_wifi_credentials();
    2360:	0e 94 94 04 	call	0x928	; 0x928 <save_wifi_credentials>
						memset(buffer_LCD1, 0, LCD_LINE_LENGTH);
    2364:	0f 2e       	mov	r0, r31
    2366:	f4 e1       	ldi	r31, 0x14	; 20
    2368:	ff 2e       	mov	r15, r31
    236a:	f0 2d       	mov	r31, r0
    236c:	ce 01       	movw	r24, r28
    236e:	01 96       	adiw	r24, 0x01	; 1
    2370:	6c 01       	movw	r12, r24
    2372:	fc 01       	movw	r30, r24
    2374:	2f 2d       	mov	r18, r15
    2376:	11 92       	st	Z+, r1
    2378:	2a 95       	dec	r18
    237a:	e9 f7       	brne	.-6      	; 0x2376 <wifi_lan_pairing+0x3d6>
						memset(buffer_LCD2, 0, LCD_LINE_LENGTH);
    237c:	8e 01       	movw	r16, r28
    237e:	0b 5e       	subi	r16, 0xEB	; 235
    2380:	1f 4f       	sbci	r17, 0xFF	; 255
    2382:	f8 01       	movw	r30, r16
    2384:	2f 2d       	mov	r18, r15
    2386:	11 92       	st	Z+, r1
    2388:	2a 95       	dec	r18
    238a:	e9 f7       	brne	.-6      	; 0x2386 <wifi_lan_pairing+0x3e6>
						snprintf(buffer_LCD1, MAX_STRING_BUFFER, "SSID:%s", WIFI.SSID);
    238c:	89 e5       	ldi	r24, 0x59	; 89
    238e:	95 e0       	ldi	r25, 0x05	; 5
    2390:	9f 93       	push	r25
    2392:	8f 93       	push	r24
    2394:	8d ec       	ldi	r24, 0xCD	; 205
    2396:	93 e0       	ldi	r25, 0x03	; 3
    2398:	9f 93       	push	r25
    239a:	8f 93       	push	r24
    239c:	1f 92       	push	r1
    239e:	ff 92       	push	r15
    23a0:	df 92       	push	r13
    23a2:	cf 92       	push	r12
    23a4:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
						snprintf(buffer_LCD2, MAX_STRING_BUFFER, "PASS:%s", WIFI.PASS);
    23a8:	89 e7       	ldi	r24, 0x79	; 121
    23aa:	95 e0       	ldi	r25, 0x05	; 5
    23ac:	9f 93       	push	r25
    23ae:	8f 93       	push	r24
    23b0:	85 ed       	ldi	r24, 0xD5	; 213
    23b2:	93 e0       	ldi	r25, 0x03	; 3
    23b4:	9f 93       	push	r25
    23b6:	8f 93       	push	r24
    23b8:	1f 92       	push	r1
    23ba:	ff 92       	push	r15
    23bc:	1f 93       	push	r17
    23be:	0f 93       	push	r16
    23c0:	0e 94 c7 19 	call	0x338e	; 0x338e <snprintf>
						print_LCD_line("Wi-Fi data received:", LCD_LINE_1);
    23c4:	60 e0       	ldi	r22, 0x00	; 0
    23c6:	8d ed       	ldi	r24, 0xDD	; 221
    23c8:	93 e0       	ldi	r25, 0x03	; 3
    23ca:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						retries = 0;
						print_LCD_line(buffer_LCD1, LCD_LINE_2);
    23ce:	60 e4       	ldi	r22, 0x40	; 64
    23d0:	c6 01       	movw	r24, r12
    23d2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(buffer_LCD2, LCD_LINE_3);
    23d6:	64 e1       	ldi	r22, 0x14	; 20
    23d8:	c8 01       	movw	r24, r16
    23da:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						if (WIFI.encryption != '4') print_LCD_line("Connection: Secured", LCD_LINE_4);
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <WIFI+0x77>
    23ec:	84 33       	cpi	r24, 0x34	; 52
    23ee:	31 f0       	breq	.+12     	; 0x23fc <wifi_lan_pairing+0x45c>
    23f0:	64 e5       	ldi	r22, 0x54	; 84
    23f2:	82 ef       	ldi	r24, 0xF2	; 242
    23f4:	93 e0       	ldi	r25, 0x03	; 3
    23f6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    23fa:	05 c0       	rjmp	.+10     	; 0x2406 <wifi_lan_pairing+0x466>
						else  print_LCD_line("Connection: Open    ", LCD_LINE_4);
    23fc:	64 e5       	ldi	r22, 0x54	; 84
    23fe:	86 e0       	ldi	r24, 0x06	; 6
    2400:	94 e0       	ldi	r25, 0x04	; 4
    2402:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    2406:	9f ef       	ldi	r25, 0xFF	; 255
    2408:	e7 ea       	ldi	r30, 0xA7	; 167
    240a:	f1 e6       	ldi	r31, 0x61	; 97
    240c:	91 50       	subi	r25, 0x01	; 1
    240e:	e0 40       	sbci	r30, 0x00	; 0
    2410:	f0 40       	sbci	r31, 0x00	; 0
    2412:	e1 f7       	brne	.-8      	; 0x240c <wifi_lan_pairing+0x46c>
    2414:	00 c0       	rjmp	.+0      	; 0x2416 <wifi_lan_pairing+0x476>
    2416:	00 00       	nop
						_delay_ms(4 * DELAY_COMMAND_MS);
						clear_uart_rx_message();
    2418:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
						start_wlan_communication();
    241c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <start_wlan_communication>
						break;
					}
					if (poll_switch()) shutdown_sequence(true);
    2420:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    2424:	88 23       	and	r24, r24
    2426:	31 f0       	breq	.+12     	; 0x2434 <wifi_lan_pairing+0x494>
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <wifi_lan_pairing+0x494>
			}
		}
		else {
			halt_system();
    2430:	0e 94 35 05 	call	0xa6a	; 0xa6a <halt_system>
	bool break_from_pairing = false;
	enum LAN_PAIRING_STATES pairing_state = SHOW_LAN_MESSAGE;
	char buffer_LCD1[LCD_LINE_LENGTH];
	char buffer_LCD2[LCD_LINE_LENGTH];
	while(!break_from_pairing) {
		if (retries < MAXIMUM_COMMAND_RETRIES) {
    2434:	14 31       	cpi	r17, 0x14	; 20
    2436:	08 f4       	brcc	.+2      	; 0x243a <wifi_lan_pairing+0x49a>
    2438:	ee cd       	rjmp	.-1060   	; 0x2016 <wifi_lan_pairing+0x76>
    243a:	fa cf       	rjmp	.-12     	; 0x2430 <wifi_lan_pairing+0x490>
    243c:	14 31       	cpi	r17, 0x14	; 20
    243e:	08 f4       	brcc	.+2      	; 0x2442 <wifi_lan_pairing+0x4a2>
    2440:	ec cd       	rjmp	.-1064   	; 0x201a <wifi_lan_pairing+0x7a>
    2442:	f6 cf       	rjmp	.-20     	; 0x2430 <wifi_lan_pairing+0x490>
					}
					send_command_UART(WIFI.device_MAC); // MAC String transmission
					while(true) {
						if (poll_switch()) shutdown_sequence(true);
						if (UART.message_received) {
							pairing_state = RETRIEVE_CREDENTIALS;
    2444:	0b 2d       	mov	r16, r11
    2446:	10 e0       	ldi	r17, 0x00	; 0
    2448:	e6 cd       	rjmp	.-1076   	; 0x2016 <wifi_lan_pairing+0x76>

0000244a <clear_wifi_values>:
	snprintf(UI.frequency_B, 8,"0");
	_delay_ms(10);
}

void clear_wifi_values() {
	memset(WIFI.SSID, 0, MAX_WIFI_SSID_LENGTH);
    244a:	80 e2       	ldi	r24, 0x20	; 32
    244c:	e9 e5       	ldi	r30, 0x59	; 89
    244e:	f5 e0       	ldi	r31, 0x05	; 5
    2450:	df 01       	movw	r26, r30
    2452:	1d 92       	st	X+, r1
    2454:	8a 95       	dec	r24
    2456:	e9 f7       	brne	.-6      	; 0x2452 <clear_wifi_values+0x8>
	memset(WIFI.PASS, 0, MAX_WIFI_PASS_LENGTH);
    2458:	80 e4       	ldi	r24, 0x40	; 64
    245a:	e9 e7       	ldi	r30, 0x79	; 121
    245c:	f5 e0       	ldi	r31, 0x05	; 5
    245e:	df 01       	movw	r26, r30
    2460:	1d 92       	st	X+, r1
    2462:	8a 95       	dec	r24
    2464:	e9 f7       	brne	.-6      	; 0x2460 <clear_wifi_values+0x16>
	memset(WIFI.device_MAC, 0, MAC_STRING_LENGTH);
    2466:	87 e1       	ldi	r24, 0x17	; 23
    2468:	e9 eb       	ldi	r30, 0xB9	; 185
    246a:	f5 e0       	ldi	r31, 0x05	; 5
    246c:	df 01       	movw	r26, r30
    246e:	1d 92       	st	X+, r1
    2470:	8a 95       	dec	r24
    2472:	e9 f7       	brne	.-6      	; 0x246e <clear_wifi_values+0x24>
	WIFI.encryption = 0;
    2474:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <WIFI+0x77>
    2478:	08 95       	ret

0000247a <clear_all_values>:
		}
	}
}
	
void clear_all_values() {
	clear_funcgen_values();
    247a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <clear_funcgen_values>
	clear_wifi_values();
    247e:	0e 94 25 12 	call	0x244a	; 0x244a <clear_wifi_values>
	clear_uart_rx_message();
    2482:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
	update_ac_power_status();
    2486:	0e 94 b6 05 	call	0xb6c	; 0xb6c <update_ac_power_status>
	update_battery_status();
    248a:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <update_battery_status>
    248e:	08 95       	ret

00002490 <Init_Device>:
	PB_DDR &= ~S_INT;
	MISC_DDR |= PS_HOLD | BUZZER;
}

void Init_Device() {
	Init_Ports();
    2490:	0e 94 a7 02 	call	0x54e	; 0x54e <Init_Ports>
	ENABLE_DEVICE();
    2494:	da 9a       	sbi	0x1b, 2	; 27
	Init_SPI_All();
    2496:	0e 94 51 13 	call	0x26a2	; 0x26a2 <Init_SPI_All>
	Init_LCD();
    249a:	0e 94 bb 00 	call	0x176	; 0x176 <Init_LCD>
    249e:	2f ef       	ldi	r18, 0xFF	; 255
    24a0:	89 e6       	ldi	r24, 0x69	; 105
    24a2:	98 e1       	ldi	r25, 0x18	; 24
    24a4:	21 50       	subi	r18, 0x01	; 1
    24a6:	80 40       	sbci	r24, 0x00	; 0
    24a8:	90 40       	sbci	r25, 0x00	; 0
    24aa:	e1 f7       	brne	.-8      	; 0x24a4 <Init_Device+0x14>
    24ac:	00 c0       	rjmp	.+0      	; 0x24ae <Init_Device+0x1e>
    24ae:	00 00       	nop
	_delay_ms(DELAY_COMMAND_MS);
	Init_LCD_4bit();
    24b0:	0e 94 25 01 	call	0x24a	; 0x24a <Init_LCD_4bit>
	Init_UART();
    24b4:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Init_UART>
	Init_ADC();
    24b8:	0e 94 c5 02 	call	0x58a	; 0x58a <Init_ADC>
	clear_all_values();
    24bc:	0e 94 3d 12 	call	0x247a	; 0x247a <clear_all_values>
	STATUS.socket_active = false;
    24c0:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <STATUS+0x2>
    24c4:	08 95       	ret

000024c6 <main>:
	/* Testing definitions */
	#ifdef PRE_PROG
		ENABLE_DEVICE();
	#else
		enum MENU_STATES_MAIN main_menu_state = INIT_STATE;
		Init_Device();
    24c6:	0e 94 48 12 	call	0x2490	; 0x2490 <Init_Device>
		Init_UI();
    24ca:	0e 94 b7 03 	call	0x76e	; 0x76e <Init_UI>
		sei();
    24ce:	78 94       	sei
int main() {
	/* Testing definitions */
	#ifdef PRE_PROG
		ENABLE_DEVICE();
	#else
		enum MENU_STATES_MAIN main_menu_state = INIT_STATE;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
						clear_LCD();
						print_LCD_line(START_DIRECT_MSG, LCD_LINE_1);
						print_LCD_line(START_COMM_MSG, LCD_LINE_2);
						print_LCD_line(PB_MSG, LCD_LINE_4);
						while(!poll_switch());
						main_menu_state = DIRECT_PAIRING_INIT;
    24d2:	d5 e0       	ldi	r29, 0x05	; 5
					case NO_STORED_CONNECTION: default:
						clear_LCD();
						print_LCD_line("  No Defined Wi-Fi  ", LCD_LINE_2);
						print_LCD_line("Connection Available", LCD_LINE_3);
						_delay_ms(3000);
						main_menu_state = PROCEED_BUTTON_PERFORM;
    24d4:	02 e0       	ldi	r16, 0x02	; 2
				break;
			case PROCEED_BUTTON_PERFORM:
				clear_LCD();
				print_LCD_line(PB_MSG, LCD_LINE_2);
				while(!poll_switch());
				main_menu_state = BUTTON_STATE_SELECTION;
    24d6:	13 e0       	ldi	r17, 0x03	; 3
    24d8:	68 94       	set
    24da:	ff 24       	eor	r15, r15
    24dc:	f2 f8       	bld	r15, 2
    24de:	03 c0       	rjmp	.+6      	; 0x24e6 <main+0x20>
    24e0:	81 2f       	mov	r24, r17
    24e2:	01 c0       	rjmp	.+2      	; 0x24e6 <main+0x20>
    24e4:	8f 2d       	mov	r24, r15
				
		}
		#endif
		
	while(1) {
		switch(main_menu_state) {
    24e6:	83 30       	cpi	r24, 0x03	; 3
    24e8:	09 f4       	brne	.+2      	; 0x24ec <main+0x26>
    24ea:	53 c0       	rjmp	.+166    	; 0x2592 <main+0xcc>
    24ec:	30 f4       	brcc	.+12     	; 0x24fa <main+0x34>
    24ee:	81 30       	cpi	r24, 0x01	; 1
    24f0:	59 f0       	breq	.+22     	; 0x2508 <main+0x42>
    24f2:	82 30       	cpi	r24, 0x02	; 2
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <main+0x32>
    24f6:	41 c0       	rjmp	.+130    	; 0x257a <main+0xb4>
    24f8:	f6 cf       	rjmp	.-20     	; 0x24e6 <main+0x20>
    24fa:	84 30       	cpi	r24, 0x04	; 4
    24fc:	09 f4       	brne	.+2      	; 0x2500 <main+0x3a>
    24fe:	79 c0       	rjmp	.+242    	; 0x25f2 <main+0x12c>
    2500:	85 30       	cpi	r24, 0x05	; 5
    2502:	09 f4       	brne	.+2      	; 0x2506 <main+0x40>
    2504:	73 c0       	rjmp	.+230    	; 0x25ec <main+0x126>
    2506:	ef cf       	rjmp	.-34     	; 0x24e6 <main+0x20>
			
			case INIT_STATE: // Check EEPROM saved state
				switch (eeprom_read_byte(STORED_CONNECTION_STATE_ADDRESS)) {
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	0e 94 ba 1c 	call	0x3974	; 0x3974 <eeprom_read_byte>
    2510:	84 34       	cpi	r24, 0x44	; 68
    2512:	21 f0       	breq	.+8      	; 0x251c <main+0x56>
    2514:	8c 34       	cpi	r24, 0x4C	; 76
    2516:	d1 f4       	brne	.+52     	; 0x254c <main+0x86>
					
					case WIFI_LAN_CONNECTON: 
						start_wlan_communication(); 
    2518:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <start_wlan_communication>
						break;
					case WIFI_DIRECT_CONNECTION:
						clear_LCD();
    251c:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
						print_LCD_line(START_DIRECT_MSG, LCD_LINE_1);
    2520:	60 e0       	ldi	r22, 0x00	; 0
    2522:	8b e1       	ldi	r24, 0x1B	; 27
    2524:	94 e0       	ldi	r25, 0x04	; 4
    2526:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(START_COMM_MSG, LCD_LINE_2);
    252a:	60 e4       	ldi	r22, 0x40	; 64
    252c:	89 e4       	ldi	r24, 0x49	; 73
    252e:	93 e0       	ldi	r25, 0x03	; 3
    2530:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(PB_MSG, LCD_LINE_4);
    2534:	64 e5       	ldi	r22, 0x54	; 84
    2536:	80 e3       	ldi	r24, 0x30	; 48
    2538:	94 e0       	ldi	r25, 0x04	; 4
    253a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						while(!poll_switch());
    253e:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    2542:	88 23       	and	r24, r24
    2544:	e1 f3       	breq	.-8      	; 0x253e <main+0x78>
						main_menu_state = DIRECT_PAIRING_INIT;
						sei();
    2546:	78 94       	sei
						clear_LCD();
						print_LCD_line(START_DIRECT_MSG, LCD_LINE_1);
						print_LCD_line(START_COMM_MSG, LCD_LINE_2);
						print_LCD_line(PB_MSG, LCD_LINE_4);
						while(!poll_switch());
						main_menu_state = DIRECT_PAIRING_INIT;
    2548:	8d 2f       	mov	r24, r29
						sei();
						break;
    254a:	cd cf       	rjmp	.-102    	; 0x24e6 <main+0x20>
					
					case NO_STORED_CONNECTION: default:
						clear_LCD();
    254c:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
						print_LCD_line("  No Defined Wi-Fi  ", LCD_LINE_2);
    2550:	60 e4       	ldi	r22, 0x40	; 64
    2552:	85 e4       	ldi	r24, 0x45	; 69
    2554:	94 e0       	ldi	r25, 0x04	; 4
    2556:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line("Connection Available", LCD_LINE_3);
    255a:	64 e1       	ldi	r22, 0x14	; 20
    255c:	8a e5       	ldi	r24, 0x5A	; 90
    255e:	94 e0       	ldi	r25, 0x04	; 4
    2560:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    2564:	2f ef       	ldi	r18, 0xFF	; 255
    2566:	8d e3       	ldi	r24, 0x3D	; 61
    2568:	99 e4       	ldi	r25, 0x49	; 73
    256a:	21 50       	subi	r18, 0x01	; 1
    256c:	80 40       	sbci	r24, 0x00	; 0
    256e:	90 40       	sbci	r25, 0x00	; 0
    2570:	e1 f7       	brne	.-8      	; 0x256a <main+0xa4>
    2572:	00 c0       	rjmp	.+0      	; 0x2574 <main+0xae>
    2574:	00 00       	nop
						_delay_ms(3000);
						main_menu_state = PROCEED_BUTTON_PERFORM;
    2576:	80 2f       	mov	r24, r16
						break;
    2578:	b6 cf       	rjmp	.-148    	; 0x24e6 <main+0x20>
				}
				break;
			case PROCEED_BUTTON_PERFORM:
				clear_LCD();
    257a:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
				print_LCD_line(PB_MSG, LCD_LINE_2);
    257e:	60 e4       	ldi	r22, 0x40	; 64
    2580:	80 e3       	ldi	r24, 0x30	; 48
    2582:	94 e0       	ldi	r25, 0x04	; 4
    2584:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				while(!poll_switch());
    2588:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    258c:	88 23       	and	r24, r24
    258e:	e1 f3       	breq	.-8      	; 0x2588 <main+0xc2>
    2590:	a7 cf       	rjmp	.-178    	; 0x24e0 <main+0x1a>
				main_menu_state = BUTTON_STATE_SELECTION;
				break;
			
			case BUTTON_STATE_SELECTION:
				clear_LCD();
    2592:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
				print_LCD_line(START_DIRECT_MSG, LCD_LINE_1);
    2596:	60 e0       	ldi	r22, 0x00	; 0
    2598:	8b e1       	ldi	r24, 0x1B	; 27
    259a:	94 e0       	ldi	r25, 0x04	; 4
    259c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				print_LCD_line(START_COMM_MSG, LCD_LINE_2);
    25a0:	60 e4       	ldi	r22, 0x40	; 64
    25a2:	89 e4       	ldi	r24, 0x49	; 73
    25a4:	93 e0       	ldi	r25, 0x03	; 3
    25a6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				print_LCD_line(PB_MSG, LCD_LINE_3);
    25aa:	64 e1       	ldi	r22, 0x14	; 20
    25ac:	80 e3       	ldi	r24, 0x30	; 48
    25ae:	94 e0       	ldi	r25, 0x04	; 4
    25b0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				print_LCD_line("WLAN Pairing.. X sec", LCD_LINE_4);
    25b4:	64 e5       	ldi	r22, 0x54	; 84
    25b6:	8f e6       	ldi	r24, 0x6F	; 111
    25b8:	94 e0       	ldi	r25, 0x04	; 4
    25ba:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    25be:	c5 e3       	ldi	r28, 0x35	; 53
				//sei();
				for (uint8_t ptr = 5; ptr > 0; ptr--) {
					print_LCD_char(ptr + '0',LCD_LINE_4, 15); // X position
    25c0:	4f e0       	ldi	r20, 0x0F	; 15
    25c2:	64 e5       	ldi	r22, 0x54	; 84
    25c4:	8c 2f       	mov	r24, r28
    25c6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
    25ca:	2f ef       	ldi	r18, 0xFF	; 255
    25cc:	89 e6       	ldi	r24, 0x69	; 105
    25ce:	98 e1       	ldi	r25, 0x18	; 24
    25d0:	21 50       	subi	r18, 0x01	; 1
    25d2:	80 40       	sbci	r24, 0x00	; 0
    25d4:	90 40       	sbci	r25, 0x00	; 0
    25d6:	e1 f7       	brne	.-8      	; 0x25d0 <main+0x10a>
    25d8:	00 c0       	rjmp	.+0      	; 0x25da <main+0x114>
    25da:	00 00       	nop
					_delay_ms(1000);
					if (poll_switch()) {
    25dc:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    25e0:	81 11       	cpse	r24, r1
    25e2:	80 cf       	rjmp	.-256    	; 0x24e4 <main+0x1e>
    25e4:	c1 50       	subi	r28, 0x01	; 1
				print_LCD_line(START_DIRECT_MSG, LCD_LINE_1);
				print_LCD_line(START_COMM_MSG, LCD_LINE_2);
				print_LCD_line(PB_MSG, LCD_LINE_3);
				print_LCD_line("WLAN Pairing.. X sec", LCD_LINE_4);
				//sei();
				for (uint8_t ptr = 5; ptr > 0; ptr--) {
    25e6:	c0 33       	cpi	r28, 0x30	; 48
    25e8:	59 f7       	brne	.-42     	; 0x25c0 <main+0xfa>
    25ea:	06 c0       	rjmp	.+12     	; 0x25f8 <main+0x132>
				}
				break;
				
			case DIRECT_PAIRING_INIT:
				main_menu_state = IDLE;
				sei();
    25ec:	78 94       	sei
				direct_pairing();
    25ee:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <direct_pairing>
				break;
			
			case WIFI_LAN_PAIRING_INIT:
				main_menu_state = IDLE;
				sei();
    25f2:	78 94       	sei
				wifi_lan_pairing();
    25f4:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <wifi_lan_pairing>
						main_menu_state = WIFI_LAN_PAIRING_INIT;
						break;
					}
				}
				if (main_menu_state != WIFI_LAN_PAIRING_INIT) {
					sei();
    25f8:	78 94       	sei
					main_menu_state = DIRECT_PAIRING_INIT;
    25fa:	8d 2f       	mov	r24, r29
    25fc:	74 cf       	rjmp	.-280    	; 0x24e6 <main+0x20>

000025fe <SPI_write_16bit>:
#include "Headers\main.h"
#include "Headers\SPIMaster.h"

void SPI_write_16bit(uint8_t address_in, uint8_t data_in, enum DEVICES device) {
    25fe:	0f 93       	push	r16
    2600:	1f 93       	push	r17
	switch(device) {
    2602:	04 2f       	mov	r16, r20
    2604:	10 e0       	ldi	r17, 0x00	; 0
    2606:	f8 01       	movw	r30, r16
    2608:	31 97       	sbiw	r30, 0x01	; 1
    260a:	e7 30       	cpi	r30, 0x07	; 7
    260c:	f1 05       	cpc	r31, r1
    260e:	88 f4       	brcc	.+34     	; 0x2632 <SPI_write_16bit+0x34>
    2610:	ed 5b       	subi	r30, 0xBD	; 189
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	0c 94 64 19 	jmp	0x32c8	; 0x32c8 <__tablejump2__>
		case DACA: SPI_CE_PORT &= ~DACA_NCE; break;
    2618:	aa 98       	cbi	0x15, 2	; 21
    261a:	0b c0       	rjmp	.+22     	; 0x2632 <SPI_write_16bit+0x34>
		case DACB: SPI_CE_PORT &= ~DACB_NCE; break;
    261c:	ab 98       	cbi	0x15, 3	; 21
    261e:	09 c0       	rjmp	.+18     	; 0x2632 <SPI_write_16bit+0x34>
		case DACA_BIAS: SPI_CE_PORT &= ~DACA_BIAS_NCE; break;
    2620:	ac 98       	cbi	0x15, 4	; 21
    2622:	07 c0       	rjmp	.+14     	; 0x2632 <SPI_write_16bit+0x34>
		case DACB_BIAS: SPI_CE_PORT &= ~DACB_BIAS_NCE; break;
    2624:	ad 98       	cbi	0x15, 5	; 21
    2626:	05 c0       	rjmp	.+10     	; 0x2632 <SPI_write_16bit+0x34>
		case FG0: SPI_CE_PORT &= ~FG0_NCE; break;
    2628:	ae 98       	cbi	0x15, 6	; 21
    262a:	03 c0       	rjmp	.+6      	; 0x2632 <SPI_write_16bit+0x34>
		case FG1: SPI_CE_PORT &= ~FG1_NCE; break;
    262c:	af 98       	cbi	0x15, 7	; 21
    262e:	01 c0       	rjmp	.+2      	; 0x2632 <SPI_write_16bit+0x34>
		case LCD_POT: LCD_POT_PORT &= ~POT_LCD_NCE; break;
    2630:	dc 98       	cbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2632:	98 e2       	ldi	r25, 0x28	; 40
    2634:	9a 95       	dec	r25
    2636:	f1 f7       	brne	.-4      	; 0x2634 <SPI_write_16bit+0x36>
		default: break;
	}
	_delay_us(15);
	SPDR = address_in;
    2638:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
    263a:	77 9b       	sbis	0x0e, 7	; 14
    263c:	fe cf       	rjmp	.-4      	; 0x263a <SPI_write_16bit+0x3c>
    263e:	88 e2       	ldi	r24, 0x28	; 40
    2640:	8a 95       	dec	r24
    2642:	f1 f7       	brne	.-4      	; 0x2640 <SPI_write_16bit+0x42>
	_delay_us(15);
	SPDR = data_in;
    2644:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)));
    2646:	77 9b       	sbis	0x0e, 7	; 14
    2648:	fe cf       	rjmp	.-4      	; 0x2646 <SPI_write_16bit+0x48>
    264a:	98 e2       	ldi	r25, 0x28	; 40
    264c:	9a 95       	dec	r25
    264e:	f1 f7       	brne	.-4      	; 0x264c <SPI_write_16bit+0x4e>
	_delay_us(15);
	switch(device) {
    2650:	50 e0       	ldi	r21, 0x00	; 0
    2652:	fa 01       	movw	r30, r20
    2654:	31 97       	sbiw	r30, 0x01	; 1
    2656:	e7 30       	cpi	r30, 0x07	; 7
    2658:	f1 05       	cpc	r31, r1
    265a:	88 f4       	brcc	.+34     	; 0x267e <SPI_write_16bit+0x80>
    265c:	e6 5b       	subi	r30, 0xB6	; 182
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	0c 94 64 19 	jmp	0x32c8	; 0x32c8 <__tablejump2__>
		case DACA: SPI_CE_PORT |= DACA_NCE; break;
    2664:	aa 9a       	sbi	0x15, 2	; 21
    2666:	0b c0       	rjmp	.+22     	; 0x267e <SPI_write_16bit+0x80>
		case DACB: SPI_CE_PORT |= DACB_NCE; break;
    2668:	ab 9a       	sbi	0x15, 3	; 21
    266a:	09 c0       	rjmp	.+18     	; 0x267e <SPI_write_16bit+0x80>
		case DACA_BIAS: SPI_CE_PORT |= DACA_BIAS_NCE; break;
    266c:	ac 9a       	sbi	0x15, 4	; 21
    266e:	07 c0       	rjmp	.+14     	; 0x267e <SPI_write_16bit+0x80>
		case DACB_BIAS: SPI_CE_PORT |= DACB_BIAS_NCE; break;
    2670:	ad 9a       	sbi	0x15, 5	; 21
    2672:	05 c0       	rjmp	.+10     	; 0x267e <SPI_write_16bit+0x80>
		case FG0: SPI_CE_PORT |= FG0_NCE; break;
    2674:	ae 9a       	sbi	0x15, 6	; 21
    2676:	03 c0       	rjmp	.+6      	; 0x267e <SPI_write_16bit+0x80>
		case FG1: SPI_CE_PORT |= FG1_NCE; break;
    2678:	af 9a       	sbi	0x15, 7	; 21
    267a:	01 c0       	rjmp	.+2      	; 0x267e <SPI_write_16bit+0x80>
		case LCD_POT: LCD_POT_PORT |= POT_LCD_NCE; break;
    267c:	dc 9a       	sbi	0x1b, 4	; 27
		default: break;
	}
}
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <Init_SPI_AD9834>:


void Init_SPI_AD9834(void) {
	SPI_CE_PORT |= DACA_NCE | DACB_NCE | DACA_BIAS_NCE | DACB_BIAS_NCE | FG0_NCE | FG1_NCE;
    2684:	85 b3       	in	r24, 0x15	; 21
    2686:	8c 6f       	ori	r24, 0xFC	; 252
    2688:	85 bb       	out	0x15, r24	; 21
	LCD_POT_PORT |= POT_LCD_NCE;
    268a:	dc 9a       	sbi	0x1b, 4	; 27
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPOL);
    268c:	89 e5       	ldi	r24, 0x59	; 89
    268e:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2694:	8f e1       	ldi	r24, 0x1F	; 31
    2696:	9e e4       	ldi	r25, 0x4E	; 78
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <Init_SPI_AD9834+0x14>
    269c:	00 c0       	rjmp	.+0      	; 0x269e <Init_SPI_AD9834+0x1a>
    269e:	00 00       	nop
    26a0:	08 95       	ret

000026a2 <Init_SPI_All>:
	_delay_ms(10);
}

void Init_SPI_All(void) {
	SPI_CE_PORT |= DACA_NCE | DACB_NCE | DACA_BIAS_NCE | DACB_BIAS_NCE | FG0_NCE | FG1_NCE;
    26a2:	85 b3       	in	r24, 0x15	; 21
    26a4:	8c 6f       	ori	r24, 0xFC	; 252
    26a6:	85 bb       	out	0x15, r24	; 21
	LCD_POT_PORT |= POT_LCD_NCE;
    26a8:	dc 9a       	sbi	0x1b, 4	; 27
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    26aa:	81 e5       	ldi	r24, 0x51	; 81
    26ac:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	8e b9       	out	0x0e, r24	; 14
    26b2:	8f e1       	ldi	r24, 0x1F	; 31
    26b4:	9e e4       	ldi	r25, 0x4E	; 78
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <Init_SPI_All+0x14>
    26ba:	00 c0       	rjmp	.+0      	; 0x26bc <Init_SPI_All+0x1a>
    26bc:	00 00       	nop
    26be:	08 95       	ret

000026c0 <__vector_13>:
}

char UART_read_char() {
	while(!(UCSRA & (1<<RXC)));
	return UDR;
}
    26c0:	1f 92       	push	r1
    26c2:	0f 92       	push	r0
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	0f 92       	push	r0
    26c8:	11 24       	eor	r1, r1
    26ca:	8f 93       	push	r24
    26cc:	9f 93       	push	r25
    26ce:	af 93       	push	r26
    26d0:	bf 93       	push	r27
    26d2:	ef 93       	push	r30
    26d4:	ff 93       	push	r31
    26d6:	e0 91 57 06 	lds	r30, 0x0657	; 0x800657 <UART+0x83>
    26da:	8e 2f       	mov	r24, r30
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	fc 01       	movw	r30, r24
    26e0:	31 97       	sbiw	r30, 0x01	; 1
    26e2:	ea 30       	cpi	r30, 0x0A	; 10
    26e4:	f1 05       	cpc	r31, r1
    26e6:	08 f0       	brcs	.+2      	; 0x26ea <__vector_13+0x2a>
    26e8:	ef c1       	rjmp	.+990    	; 0x2ac8 <__vector_13+0x408>
    26ea:	ef 5a       	subi	r30, 0xAF	; 175
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	0c 94 64 19 	jmp	0x32c8	; 0x32c8 <__tablejump2__>
    26f2:	a4 e5       	ldi	r26, 0x54	; 84
    26f4:	b6 e0       	ldi	r27, 0x06	; 6
    26f6:	ec 91       	ld	r30, X
    26f8:	8c b1       	in	r24, 0x0c	; 12
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	ec 52       	subi	r30, 0x2C	; 44
    26fe:	fa 4f       	sbci	r31, 0xFA	; 250
    2700:	80 83       	st	Z, r24
    2702:	ec 91       	ld	r30, X
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	ec 52       	subi	r30, 0x2C	; 44
    2708:	fa 4f       	sbci	r31, 0xFA	; 250
    270a:	80 81       	ld	r24, Z
    270c:	8a 30       	cpi	r24, 0x0A	; 10
    270e:	b1 f4       	brne	.+44     	; 0x273c <__vector_13+0x7c>
    2710:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	ee 52       	subi	r30, 0x2E	; 46
    2718:	fa 4f       	sbci	r31, 0xFA	; 250
    271a:	80 81       	ld	r24, Z
    271c:	8b 34       	cpi	r24, 0x4B	; 75
    271e:	71 f4       	brne	.+28     	; 0x273c <__vector_13+0x7c>
    2720:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	ef 52       	subi	r30, 0x2F	; 47
    2728:	fa 4f       	sbci	r31, 0xFA	; 250
    272a:	80 81       	ld	r24, Z
    272c:	8f 34       	cpi	r24, 0x4F	; 79
    272e:	31 f4       	brne	.+12     	; 0x273c <__vector_13+0x7c>
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <UART+0x81>
    2736:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x80>
    273a:	ca c1       	rjmp	.+916    	; 0x2ad0 <__vector_13+0x410>
    273c:	e4 e5       	ldi	r30, 0x54	; 84
    273e:	f6 e0       	ldi	r31, 0x06	; 6
    2740:	80 81       	ld	r24, Z
    2742:	8f 5f       	subi	r24, 0xFF	; 255
    2744:	80 83       	st	Z, r24
    2746:	c4 c1       	rjmp	.+904    	; 0x2ad0 <__vector_13+0x410>
    2748:	a4 e5       	ldi	r26, 0x54	; 84
    274a:	b6 e0       	ldi	r27, 0x06	; 6
    274c:	ec 91       	ld	r30, X
    274e:	8c b1       	in	r24, 0x0c	; 12
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	ec 52       	subi	r30, 0x2C	; 44
    2754:	fa 4f       	sbci	r31, 0xFA	; 250
    2756:	80 83       	st	Z, r24
    2758:	ec 91       	ld	r30, X
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	ec 52       	subi	r30, 0x2C	; 44
    275e:	fa 4f       	sbci	r31, 0xFA	; 250
    2760:	80 81       	ld	r24, Z
    2762:	8a 30       	cpi	r24, 0x0A	; 10
    2764:	b1 f4       	brne	.+44     	; 0x2792 <__vector_13+0xd2>
    2766:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	ee 52       	subi	r30, 0x2E	; 46
    276e:	fa 4f       	sbci	r31, 0xFA	; 250
    2770:	80 81       	ld	r24, Z
    2772:	80 35       	cpi	r24, 0x50	; 80
    2774:	71 f4       	brne	.+28     	; 0x2792 <__vector_13+0xd2>
    2776:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	ef 52       	subi	r30, 0x2F	; 47
    277e:	fa 4f       	sbci	r31, 0xFA	; 250
    2780:	80 81       	ld	r24, Z
    2782:	89 34       	cpi	r24, 0x49	; 73
    2784:	31 f4       	brne	.+12     	; 0x2792 <__vector_13+0xd2>
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <UART+0x81>
    278c:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x80>
    2790:	9f c1       	rjmp	.+830    	; 0x2ad0 <__vector_13+0x410>
    2792:	e4 e5       	ldi	r30, 0x54	; 84
    2794:	f6 e0       	ldi	r31, 0x06	; 6
    2796:	80 81       	ld	r24, Z
    2798:	8f 5f       	subi	r24, 0xFF	; 255
    279a:	80 83       	st	Z, r24
    279c:	99 c1       	rjmp	.+818    	; 0x2ad0 <__vector_13+0x410>
    279e:	a4 e5       	ldi	r26, 0x54	; 84
    27a0:	b6 e0       	ldi	r27, 0x06	; 6
    27a2:	ec 91       	ld	r30, X
    27a4:	8c b1       	in	r24, 0x0c	; 12
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	ec 52       	subi	r30, 0x2C	; 44
    27aa:	fa 4f       	sbci	r31, 0xFA	; 250
    27ac:	80 83       	st	Z, r24
    27ae:	ec 91       	ld	r30, X
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	ec 52       	subi	r30, 0x2C	; 44
    27b4:	fa 4f       	sbci	r31, 0xFA	; 250
    27b6:	80 81       	ld	r24, Z
    27b8:	8e 33       	cpi	r24, 0x3E	; 62
    27ba:	b1 f4       	brne	.+44     	; 0x27e8 <__vector_13+0x128>
    27bc:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	ed 52       	subi	r30, 0x2D	; 45
    27c4:	fa 4f       	sbci	r31, 0xFA	; 250
    27c6:	80 81       	ld	r24, Z
    27c8:	8a 30       	cpi	r24, 0x0A	; 10
    27ca:	71 f4       	brne	.+28     	; 0x27e8 <__vector_13+0x128>
    27cc:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	ee 52       	subi	r30, 0x2E	; 46
    27d4:	fa 4f       	sbci	r31, 0xFA	; 250
    27d6:	80 81       	ld	r24, Z
    27d8:	8d 30       	cpi	r24, 0x0D	; 13
    27da:	31 f4       	brne	.+12     	; 0x27e8 <__vector_13+0x128>
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <UART+0x81>
    27e2:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x80>
    27e6:	74 c1       	rjmp	.+744    	; 0x2ad0 <__vector_13+0x410>
    27e8:	e4 e5       	ldi	r30, 0x54	; 84
    27ea:	f6 e0       	ldi	r31, 0x06	; 6
    27ec:	80 81       	ld	r24, Z
    27ee:	8f 5f       	subi	r24, 0xFF	; 255
    27f0:	80 83       	st	Z, r24
    27f2:	6e c1       	rjmp	.+732    	; 0x2ad0 <__vector_13+0x410>
    27f4:	a4 e5       	ldi	r26, 0x54	; 84
    27f6:	b6 e0       	ldi	r27, 0x06	; 6
    27f8:	ec 91       	ld	r30, X
    27fa:	8c b1       	in	r24, 0x0c	; 12
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	ec 52       	subi	r30, 0x2C	; 44
    2800:	fa 4f       	sbci	r31, 0xFA	; 250
    2802:	80 83       	st	Z, r24
    2804:	ec 91       	ld	r30, X
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	ec 52       	subi	r30, 0x2C	; 44
    280a:	fa 4f       	sbci	r31, 0xFA	; 250
    280c:	80 81       	ld	r24, Z
    280e:	8a 30       	cpi	r24, 0x0A	; 10
    2810:	f1 f4       	brne	.+60     	; 0x284e <__vector_13+0x18e>
    2812:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	ee 52       	subi	r30, 0x2E	; 46
    281a:	fa 4f       	sbci	r31, 0xFA	; 250
    281c:	80 81       	ld	r24, Z
    281e:	84 35       	cpi	r24, 0x54	; 84
    2820:	b1 f4       	brne	.+44     	; 0x284e <__vector_13+0x18e>
    2822:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	ef 52       	subi	r30, 0x2F	; 47
    282a:	fa 4f       	sbci	r31, 0xFA	; 250
    282c:	80 81       	ld	r24, Z
    282e:	83 34       	cpi	r24, 0x43	; 67
    2830:	71 f4       	brne	.+28     	; 0x284e <__vector_13+0x18e>
    2832:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	e0 53       	subi	r30, 0x30	; 48
    283a:	fa 4f       	sbci	r31, 0xFA	; 250
    283c:	80 81       	ld	r24, Z
    283e:	85 34       	cpi	r24, 0x45	; 69
    2840:	31 f4       	brne	.+12     	; 0x284e <__vector_13+0x18e>
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <UART+0x81>
    2848:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x80>
    284c:	41 c1       	rjmp	.+642    	; 0x2ad0 <__vector_13+0x410>
    284e:	e4 e5       	ldi	r30, 0x54	; 84
    2850:	f6 e0       	ldi	r31, 0x06	; 6
    2852:	80 81       	ld	r24, Z
    2854:	8f 5f       	subi	r24, 0xFF	; 255
    2856:	80 83       	st	Z, r24
    2858:	3b c1       	rjmp	.+630    	; 0x2ad0 <__vector_13+0x410>
    285a:	a4 e5       	ldi	r26, 0x54	; 84
    285c:	b6 e0       	ldi	r27, 0x06	; 6
    285e:	ec 91       	ld	r30, X
    2860:	8c b1       	in	r24, 0x0c	; 12
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	ec 52       	subi	r30, 0x2C	; 44
    2866:	fa 4f       	sbci	r31, 0xFA	; 250
    2868:	80 83       	st	Z, r24
    286a:	ec 91       	ld	r30, X
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	ec 52       	subi	r30, 0x2C	; 44
    2870:	fa 4f       	sbci	r31, 0xFA	; 250
    2872:	80 81       	ld	r24, Z
    2874:	8a 30       	cpi	r24, 0x0A	; 10
    2876:	f1 f4       	brne	.+60     	; 0x28b4 <__vector_13+0x1f4>
    2878:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	ee 52       	subi	r30, 0x2E	; 46
    2880:	fa 4f       	sbci	r31, 0xFA	; 250
    2882:	80 81       	ld	r24, Z
    2884:	84 34       	cpi	r24, 0x44	; 68
    2886:	b1 f4       	brne	.+44     	; 0x28b4 <__vector_13+0x1f4>
    2888:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	ef 52       	subi	r30, 0x2F	; 47
    2890:	fa 4f       	sbci	r31, 0xFA	; 250
    2892:	80 81       	ld	r24, Z
    2894:	85 34       	cpi	r24, 0x45	; 69
    2896:	71 f4       	brne	.+28     	; 0x28b4 <__vector_13+0x1f4>
    2898:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	e0 53       	subi	r30, 0x30	; 48
    28a0:	fa 4f       	sbci	r31, 0xFA	; 250
    28a2:	80 81       	ld	r24, Z
    28a4:	83 35       	cpi	r24, 0x53	; 83
    28a6:	31 f4       	brne	.+12     	; 0x28b4 <__vector_13+0x1f4>
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <UART+0x81>
    28ae:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x80>
    28b2:	0e c1       	rjmp	.+540    	; 0x2ad0 <__vector_13+0x410>
    28b4:	e4 e5       	ldi	r30, 0x54	; 84
    28b6:	f6 e0       	ldi	r31, 0x06	; 6
    28b8:	80 81       	ld	r24, Z
    28ba:	8f 5f       	subi	r24, 0xFF	; 255
    28bc:	80 83       	st	Z, r24
    28be:	08 c1       	rjmp	.+528    	; 0x2ad0 <__vector_13+0x410>
    28c0:	a4 e5       	ldi	r26, 0x54	; 84
    28c2:	b6 e0       	ldi	r27, 0x06	; 6
    28c4:	ec 91       	ld	r30, X
    28c6:	8c b1       	in	r24, 0x0c	; 12
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	ec 52       	subi	r30, 0x2C	; 44
    28cc:	fa 4f       	sbci	r31, 0xFA	; 250
    28ce:	80 83       	st	Z, r24
    28d0:	ec 91       	ld	r30, X
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	ec 52       	subi	r30, 0x2C	; 44
    28d6:	fa 4f       	sbci	r31, 0xFA	; 250
    28d8:	80 81       	ld	r24, Z
    28da:	8a 30       	cpi	r24, 0x0A	; 10
    28dc:	f1 f4       	brne	.+60     	; 0x291a <__vector_13+0x25a>
    28de:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	ee 52       	subi	r30, 0x2E	; 46
    28e6:	fa 4f       	sbci	r31, 0xFA	; 250
    28e8:	80 81       	ld	r24, Z
    28ea:	8b 34       	cpi	r24, 0x4B	; 75
    28ec:	b1 f4       	brne	.+44     	; 0x291a <__vector_13+0x25a>
    28ee:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	ef 52       	subi	r30, 0x2F	; 47
    28f6:	fa 4f       	sbci	r31, 0xFA	; 250
    28f8:	80 81       	ld	r24, Z
    28fa:	8f 34       	cpi	r24, 0x4F	; 79
    28fc:	71 f4       	brne	.+28     	; 0x291a <__vector_13+0x25a>
    28fe:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	e1 53       	subi	r30, 0x31	; 49
    2906:	fa 4f       	sbci	r31, 0xFA	; 250
    2908:	80 81       	ld	r24, Z
    290a:	84 34       	cpi	r24, 0x44	; 68
    290c:	31 f4       	brne	.+12     	; 0x291a <__vector_13+0x25a>
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <UART+0x81>
    2914:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x80>
    2918:	db c0       	rjmp	.+438    	; 0x2ad0 <__vector_13+0x410>
    291a:	e4 e5       	ldi	r30, 0x54	; 84
    291c:	f6 e0       	ldi	r31, 0x06	; 6
    291e:	80 81       	ld	r24, Z
    2920:	8f 5f       	subi	r24, 0xFF	; 255
    2922:	80 83       	st	Z, r24
    2924:	d5 c0       	rjmp	.+426    	; 0x2ad0 <__vector_13+0x410>
    2926:	a4 e5       	ldi	r26, 0x54	; 84
    2928:	b6 e0       	ldi	r27, 0x06	; 6
    292a:	ec 91       	ld	r30, X
    292c:	8c b1       	in	r24, 0x0c	; 12
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	ec 52       	subi	r30, 0x2C	; 44
    2932:	fa 4f       	sbci	r31, 0xFA	; 250
    2934:	80 83       	st	Z, r24
    2936:	ec 91       	ld	r30, X
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	ec 52       	subi	r30, 0x2C	; 44
    293c:	fa 4f       	sbci	r31, 0xFA	; 250
    293e:	80 81       	ld	r24, Z
    2940:	8a 30       	cpi	r24, 0x0A	; 10
    2942:	f1 f4       	brne	.+60     	; 0x2980 <__vector_13+0x2c0>
    2944:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	ee 52       	subi	r30, 0x2E	; 46
    294c:	fa 4f       	sbci	r31, 0xFA	; 250
    294e:	80 81       	ld	r24, Z
    2950:	89 37       	cpi	r24, 0x79	; 121
    2952:	b1 f4       	brne	.+44     	; 0x2980 <__vector_13+0x2c0>
    2954:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	ef 52       	subi	r30, 0x2F	; 47
    295c:	fa 4f       	sbci	r31, 0xFA	; 250
    295e:	80 81       	ld	r24, Z
    2960:	84 36       	cpi	r24, 0x64	; 100
    2962:	71 f4       	brne	.+28     	; 0x2980 <__vector_13+0x2c0>
    2964:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	e0 53       	subi	r30, 0x30	; 48
    296c:	fa 4f       	sbci	r31, 0xFA	; 250
    296e:	80 81       	ld	r24, Z
    2970:	81 36       	cpi	r24, 0x61	; 97
    2972:	31 f4       	brne	.+12     	; 0x2980 <__vector_13+0x2c0>
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <UART+0x81>
    297a:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x80>
    297e:	a8 c0       	rjmp	.+336    	; 0x2ad0 <__vector_13+0x410>
    2980:	e4 e5       	ldi	r30, 0x54	; 84
    2982:	f6 e0       	ldi	r31, 0x06	; 6
    2984:	80 81       	ld	r24, Z
    2986:	8f 5f       	subi	r24, 0xFF	; 255
    2988:	80 83       	st	Z, r24
    298a:	a2 c0       	rjmp	.+324    	; 0x2ad0 <__vector_13+0x410>
    298c:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2990:	8c b1       	in	r24, 0x0c	; 12
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	ec 52       	subi	r30, 0x2C	; 44
    2996:	fa 4f       	sbci	r31, 0xFA	; 250
    2998:	80 83       	st	Z, r24
    299a:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <UART+0x82>
    299e:	81 11       	cpse	r24, r1
    29a0:	1e c0       	rjmp	.+60     	; 0x29de <__vector_13+0x31e>
    29a2:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	ed 52       	subi	r30, 0x2D	; 45
    29aa:	fa 4f       	sbci	r31, 0xFA	; 250
    29ac:	80 81       	ld	r24, Z
    29ae:	8d 30       	cpi	r24, 0x0D	; 13
    29b0:	81 f4       	brne	.+32     	; 0x29d2 <__vector_13+0x312>
    29b2:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	ec 52       	subi	r30, 0x2C	; 44
    29ba:	fa 4f       	sbci	r31, 0xFA	; 250
    29bc:	80 81       	ld	r24, Z
    29be:	8a 30       	cpi	r24, 0x0A	; 10
    29c0:	41 f4       	brne	.+16     	; 0x29d2 <__vector_13+0x312>
    29c2:	e6 e5       	ldi	r30, 0x56	; 86
    29c4:	f6 e0       	ldi	r31, 0x06	; 6
    29c6:	80 81       	ld	r24, Z
    29c8:	8f 5f       	subi	r24, 0xFF	; 255
    29ca:	80 83       	st	Z, r24
    29cc:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x80>
    29d0:	7f c0       	rjmp	.+254    	; 0x2ad0 <__vector_13+0x410>
    29d2:	e4 e5       	ldi	r30, 0x54	; 84
    29d4:	f6 e0       	ldi	r31, 0x06	; 6
    29d6:	80 81       	ld	r24, Z
    29d8:	8f 5f       	subi	r24, 0xFF	; 255
    29da:	80 83       	st	Z, r24
    29dc:	79 c0       	rjmp	.+242    	; 0x2ad0 <__vector_13+0x410>
    29de:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <UART+0x82>
    29e2:	81 30       	cpi	r24, 0x01	; 1
    29e4:	21 f5       	brne	.+72     	; 0x2a2e <__vector_13+0x36e>
    29e6:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	ec 52       	subi	r30, 0x2C	; 44
    29ee:	fa 4f       	sbci	r31, 0xFA	; 250
    29f0:	80 81       	ld	r24, Z
    29f2:	8a 30       	cpi	r24, 0x0A	; 10
    29f4:	b1 f4       	brne	.+44     	; 0x2a22 <__vector_13+0x362>
    29f6:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	ed 52       	subi	r30, 0x2D	; 45
    29fe:	fa 4f       	sbci	r31, 0xFA	; 250
    2a00:	80 81       	ld	r24, Z
    2a02:	8d 30       	cpi	r24, 0x0D	; 13
    2a04:	71 f4       	brne	.+28     	; 0x2a22 <__vector_13+0x362>
    2a06:	e4 ed       	ldi	r30, 0xD4	; 212
    2a08:	f5 e0       	ldi	r31, 0x05	; 5
    2a0a:	80 83       	st	Z, r24
    2a0c:	8a e0       	ldi	r24, 0x0A	; 10
    2a0e:	81 83       	std	Z+1, r24	; 0x01
    2a10:	e6 e5       	ldi	r30, 0x56	; 86
    2a12:	f6 e0       	ldi	r31, 0x06	; 6
    2a14:	80 81       	ld	r24, Z
    2a16:	8f 5f       	subi	r24, 0xFF	; 255
    2a18:	80 83       	st	Z, r24
    2a1a:	82 e0       	ldi	r24, 0x02	; 2
    2a1c:	80 93 54 06 	sts	0x0654, r24	; 0x800654 <UART+0x80>
    2a20:	57 c0       	rjmp	.+174    	; 0x2ad0 <__vector_13+0x410>
    2a22:	e4 e5       	ldi	r30, 0x54	; 84
    2a24:	f6 e0       	ldi	r31, 0x06	; 6
    2a26:	80 81       	ld	r24, Z
    2a28:	8f 5f       	subi	r24, 0xFF	; 255
    2a2a:	80 83       	st	Z, r24
    2a2c:	51 c0       	rjmp	.+162    	; 0x2ad0 <__vector_13+0x410>
    2a2e:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <UART+0x82>
    2a32:	82 30       	cpi	r24, 0x02	; 2
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <__vector_13+0x378>
    2a36:	4c c0       	rjmp	.+152    	; 0x2ad0 <__vector_13+0x410>
    2a38:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	ec 52       	subi	r30, 0x2C	; 44
    2a40:	fa 4f       	sbci	r31, 0xFA	; 250
    2a42:	80 81       	ld	r24, Z
    2a44:	8a 30       	cpi	r24, 0x0A	; 10
    2a46:	81 f4       	brne	.+32     	; 0x2a68 <__vector_13+0x3a8>
    2a48:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	ed 52       	subi	r30, 0x2D	; 45
    2a50:	fa 4f       	sbci	r31, 0xFA	; 250
    2a52:	80 81       	ld	r24, Z
    2a54:	8d 30       	cpi	r24, 0x0D	; 13
    2a56:	41 f4       	brne	.+16     	; 0x2a68 <__vector_13+0x3a8>
    2a58:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <UART+0x82>
    2a5c:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x80>
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <UART+0x81>
    2a66:	34 c0       	rjmp	.+104    	; 0x2ad0 <__vector_13+0x410>
    2a68:	e4 e5       	ldi	r30, 0x54	; 84
    2a6a:	f6 e0       	ldi	r31, 0x06	; 6
    2a6c:	80 81       	ld	r24, Z
    2a6e:	8f 5f       	subi	r24, 0xFF	; 255
    2a70:	80 83       	st	Z, r24
    2a72:	2e c0       	rjmp	.+92     	; 0x2ad0 <__vector_13+0x410>
    2a74:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2a78:	8c b1       	in	r24, 0x0c	; 12
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	ec 52       	subi	r30, 0x2C	; 44
    2a7e:	fa 4f       	sbci	r31, 0xFA	; 250
    2a80:	80 83       	st	Z, r24
    2a82:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <UART>
    2a86:	8b 32       	cpi	r24, 0x2B	; 43
    2a88:	19 f0       	breq	.+6      	; 0x2a90 <__vector_13+0x3d0>
    2a8a:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x80>
    2a8e:	20 c0       	rjmp	.+64     	; 0x2ad0 <__vector_13+0x410>
    2a90:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	ed 52       	subi	r30, 0x2D	; 45
    2a98:	fa 4f       	sbci	r31, 0xFA	; 250
    2a9a:	80 81       	ld	r24, Z
    2a9c:	8d 30       	cpi	r24, 0x0D	; 13
    2a9e:	71 f4       	brne	.+28     	; 0x2abc <__vector_13+0x3fc>
    2aa0:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <UART+0x80>
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	ec 52       	subi	r30, 0x2C	; 44
    2aa8:	fa 4f       	sbci	r31, 0xFA	; 250
    2aaa:	80 81       	ld	r24, Z
    2aac:	8a 30       	cpi	r24, 0x0A	; 10
    2aae:	31 f4       	brne	.+12     	; 0x2abc <__vector_13+0x3fc>
    2ab0:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x80>
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <UART+0x81>
    2aba:	0a c0       	rjmp	.+20     	; 0x2ad0 <__vector_13+0x410>
    2abc:	e4 e5       	ldi	r30, 0x54	; 84
    2abe:	f6 e0       	ldi	r31, 0x06	; 6
    2ac0:	80 81       	ld	r24, Z
    2ac2:	8f 5f       	subi	r24, 0xFF	; 255
    2ac4:	80 83       	st	Z, r24
    2ac6:	04 c0       	rjmp	.+8      	; 0x2ad0 <__vector_13+0x410>
    2ac8:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x80>
    2acc:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <UART+0x81>
    2ad0:	ff 91       	pop	r31
    2ad2:	ef 91       	pop	r30
    2ad4:	bf 91       	pop	r27
    2ad6:	af 91       	pop	r26
    2ad8:	9f 91       	pop	r25
    2ada:	8f 91       	pop	r24
    2adc:	0f 90       	pop	r0
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	0f 90       	pop	r0
    2ae2:	1f 90       	pop	r1
    2ae4:	18 95       	reti

00002ae6 <write_char_UART>:

void write_char_UART(char data) {
	while(!(UCSRA & (1<<UDRE)));
    2ae6:	5d 9b       	sbis	0x0b, 5	; 11
    2ae8:	fe cf       	rjmp	.-4      	; 0x2ae6 <write_char_UART>
	UDR=data;
    2aea:	8c b9       	out	0x0c, r24	; 12
    2aec:	08 95       	ret

00002aee <send_command_UART>:
}

void send_command_UART(char *str) {
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
    2af2:	ec 01       	movw	r28, r24
	while (*str != '\0') {
    2af4:	88 81       	ld	r24, Y
    2af6:	88 23       	and	r24, r24
    2af8:	31 f0       	breq	.+12     	; 0x2b06 <send_command_UART+0x18>
    2afa:	21 96       	adiw	r28, 0x01	; 1
		write_char_UART(*str);
    2afc:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <write_char_UART>
	while(!(UCSRA & (1<<UDRE)));
	UDR=data;
}

void send_command_UART(char *str) {
	while (*str != '\0') {
    2b00:	89 91       	ld	r24, Y+
    2b02:	81 11       	cpse	r24, r1
    2b04:	fb cf       	rjmp	.-10     	; 0x2afc <send_command_UART+0xe>
		write_char_UART(*str);
		++str;
	}
}
    2b06:	df 91       	pop	r29
    2b08:	cf 91       	pop	r28
    2b0a:	08 95       	ret

00002b0c <clear_uart_rx_message>:

void clear_uart_rx_message() {
	UART.message_received = false;
    2b0c:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <UART+0x81>
	memset(UART.rx_buffer,0,RX_BUFFER_LENGTH);
    2b10:	80 e8       	ldi	r24, 0x80	; 128
    2b12:	e4 ed       	ldi	r30, 0xD4	; 212
    2b14:	f5 e0       	ldi	r31, 0x05	; 5
    2b16:	df 01       	movw	r26, r30
    2b18:	1d 92       	st	X+, r1
    2b1a:	8a 95       	dec	r24
    2b1c:	e9 f7       	brne	.-6      	; 0x2b18 <clear_uart_rx_message+0xc>
    2b1e:	08 95       	ret

00002b20 <Init_UART>:
				break;
	}
}

void Init_UART() {
	UBRRH = (unsigned char) (3 >> 8);
    2b20:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) 3;
    2b22:	83 e0       	ldi	r24, 0x03	; 3
    2b24:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    2b26:	88 e9       	ldi	r24, 0x98	; 152
    2b28:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
    2b2a:	8e e8       	ldi	r24, 0x8E	; 142
    2b2c:	80 bd       	out	0x20, r24	; 32
	clear_uart_rx_message();
    2b2e:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <clear_uart_rx_message>
	UART.cr_lf_counter = 0;
    2b32:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <UART+0x82>
	UART.rx_ptr = 0;
    2b36:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x80>
	UART.wait_for_message = 0;
    2b3a:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <UART+0x83>
    2b3e:	08 95       	ret

00002b40 <__subsf3>:
    2b40:	50 58       	subi	r21, 0x80	; 128

00002b42 <__addsf3>:
    2b42:	bb 27       	eor	r27, r27
    2b44:	aa 27       	eor	r26, r26
    2b46:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__addsf3x>
    2b4a:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__fp_round>
    2b4e:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__fp_pscA>
    2b52:	38 f0       	brcs	.+14     	; 0x2b62 <__addsf3+0x20>
    2b54:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__fp_pscB>
    2b58:	20 f0       	brcs	.+8      	; 0x2b62 <__addsf3+0x20>
    2b5a:	39 f4       	brne	.+14     	; 0x2b6a <__addsf3+0x28>
    2b5c:	9f 3f       	cpi	r25, 0xFF	; 255
    2b5e:	19 f4       	brne	.+6      	; 0x2b66 <__addsf3+0x24>
    2b60:	26 f4       	brtc	.+8      	; 0x2b6a <__addsf3+0x28>
    2b62:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__fp_nan>
    2b66:	0e f4       	brtc	.+2      	; 0x2b6a <__addsf3+0x28>
    2b68:	e0 95       	com	r30
    2b6a:	e7 fb       	bst	r30, 7
    2b6c:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__fp_inf>

00002b70 <__addsf3x>:
    2b70:	e9 2f       	mov	r30, r25
    2b72:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__fp_split3>
    2b76:	58 f3       	brcs	.-42     	; 0x2b4e <__addsf3+0xc>
    2b78:	ba 17       	cp	r27, r26
    2b7a:	62 07       	cpc	r22, r18
    2b7c:	73 07       	cpc	r23, r19
    2b7e:	84 07       	cpc	r24, r20
    2b80:	95 07       	cpc	r25, r21
    2b82:	20 f0       	brcs	.+8      	; 0x2b8c <__addsf3x+0x1c>
    2b84:	79 f4       	brne	.+30     	; 0x2ba4 <__addsf3x+0x34>
    2b86:	a6 f5       	brtc	.+104    	; 0x2bf0 <__addsf3x+0x80>
    2b88:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__fp_zero>
    2b8c:	0e f4       	brtc	.+2      	; 0x2b90 <__addsf3x+0x20>
    2b8e:	e0 95       	com	r30
    2b90:	0b 2e       	mov	r0, r27
    2b92:	ba 2f       	mov	r27, r26
    2b94:	a0 2d       	mov	r26, r0
    2b96:	0b 01       	movw	r0, r22
    2b98:	b9 01       	movw	r22, r18
    2b9a:	90 01       	movw	r18, r0
    2b9c:	0c 01       	movw	r0, r24
    2b9e:	ca 01       	movw	r24, r20
    2ba0:	a0 01       	movw	r20, r0
    2ba2:	11 24       	eor	r1, r1
    2ba4:	ff 27       	eor	r31, r31
    2ba6:	59 1b       	sub	r21, r25
    2ba8:	99 f0       	breq	.+38     	; 0x2bd0 <__addsf3x+0x60>
    2baa:	59 3f       	cpi	r21, 0xF9	; 249
    2bac:	50 f4       	brcc	.+20     	; 0x2bc2 <__addsf3x+0x52>
    2bae:	50 3e       	cpi	r21, 0xE0	; 224
    2bb0:	68 f1       	brcs	.+90     	; 0x2c0c <__addsf3x+0x9c>
    2bb2:	1a 16       	cp	r1, r26
    2bb4:	f0 40       	sbci	r31, 0x00	; 0
    2bb6:	a2 2f       	mov	r26, r18
    2bb8:	23 2f       	mov	r18, r19
    2bba:	34 2f       	mov	r19, r20
    2bbc:	44 27       	eor	r20, r20
    2bbe:	58 5f       	subi	r21, 0xF8	; 248
    2bc0:	f3 cf       	rjmp	.-26     	; 0x2ba8 <__addsf3x+0x38>
    2bc2:	46 95       	lsr	r20
    2bc4:	37 95       	ror	r19
    2bc6:	27 95       	ror	r18
    2bc8:	a7 95       	ror	r26
    2bca:	f0 40       	sbci	r31, 0x00	; 0
    2bcc:	53 95       	inc	r21
    2bce:	c9 f7       	brne	.-14     	; 0x2bc2 <__addsf3x+0x52>
    2bd0:	7e f4       	brtc	.+30     	; 0x2bf0 <__addsf3x+0x80>
    2bd2:	1f 16       	cp	r1, r31
    2bd4:	ba 0b       	sbc	r27, r26
    2bd6:	62 0b       	sbc	r22, r18
    2bd8:	73 0b       	sbc	r23, r19
    2bda:	84 0b       	sbc	r24, r20
    2bdc:	ba f0       	brmi	.+46     	; 0x2c0c <__addsf3x+0x9c>
    2bde:	91 50       	subi	r25, 0x01	; 1
    2be0:	a1 f0       	breq	.+40     	; 0x2c0a <__addsf3x+0x9a>
    2be2:	ff 0f       	add	r31, r31
    2be4:	bb 1f       	adc	r27, r27
    2be6:	66 1f       	adc	r22, r22
    2be8:	77 1f       	adc	r23, r23
    2bea:	88 1f       	adc	r24, r24
    2bec:	c2 f7       	brpl	.-16     	; 0x2bde <__addsf3x+0x6e>
    2bee:	0e c0       	rjmp	.+28     	; 0x2c0c <__addsf3x+0x9c>
    2bf0:	ba 0f       	add	r27, r26
    2bf2:	62 1f       	adc	r22, r18
    2bf4:	73 1f       	adc	r23, r19
    2bf6:	84 1f       	adc	r24, r20
    2bf8:	48 f4       	brcc	.+18     	; 0x2c0c <__addsf3x+0x9c>
    2bfa:	87 95       	ror	r24
    2bfc:	77 95       	ror	r23
    2bfe:	67 95       	ror	r22
    2c00:	b7 95       	ror	r27
    2c02:	f7 95       	ror	r31
    2c04:	9e 3f       	cpi	r25, 0xFE	; 254
    2c06:	08 f0       	brcs	.+2      	; 0x2c0a <__addsf3x+0x9a>
    2c08:	b0 cf       	rjmp	.-160    	; 0x2b6a <__addsf3+0x28>
    2c0a:	93 95       	inc	r25
    2c0c:	88 0f       	add	r24, r24
    2c0e:	08 f0       	brcs	.+2      	; 0x2c12 <__addsf3x+0xa2>
    2c10:	99 27       	eor	r25, r25
    2c12:	ee 0f       	add	r30, r30
    2c14:	97 95       	ror	r25
    2c16:	87 95       	ror	r24
    2c18:	08 95       	ret

00002c1a <__fixunssfsi>:
    2c1a:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__fp_splitA>
    2c1e:	88 f0       	brcs	.+34     	; 0x2c42 <__fixunssfsi+0x28>
    2c20:	9f 57       	subi	r25, 0x7F	; 127
    2c22:	98 f0       	brcs	.+38     	; 0x2c4a <__fixunssfsi+0x30>
    2c24:	b9 2f       	mov	r27, r25
    2c26:	99 27       	eor	r25, r25
    2c28:	b7 51       	subi	r27, 0x17	; 23
    2c2a:	b0 f0       	brcs	.+44     	; 0x2c58 <__fixunssfsi+0x3e>
    2c2c:	e1 f0       	breq	.+56     	; 0x2c66 <__fixunssfsi+0x4c>
    2c2e:	66 0f       	add	r22, r22
    2c30:	77 1f       	adc	r23, r23
    2c32:	88 1f       	adc	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	1a f0       	brmi	.+6      	; 0x2c3e <__fixunssfsi+0x24>
    2c38:	ba 95       	dec	r27
    2c3a:	c9 f7       	brne	.-14     	; 0x2c2e <__fixunssfsi+0x14>
    2c3c:	14 c0       	rjmp	.+40     	; 0x2c66 <__fixunssfsi+0x4c>
    2c3e:	b1 30       	cpi	r27, 0x01	; 1
    2c40:	91 f0       	breq	.+36     	; 0x2c66 <__fixunssfsi+0x4c>
    2c42:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <__fp_zero>
    2c46:	b1 e0       	ldi	r27, 0x01	; 1
    2c48:	08 95       	ret
    2c4a:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__fp_zero>
    2c4e:	67 2f       	mov	r22, r23
    2c50:	78 2f       	mov	r23, r24
    2c52:	88 27       	eor	r24, r24
    2c54:	b8 5f       	subi	r27, 0xF8	; 248
    2c56:	39 f0       	breq	.+14     	; 0x2c66 <__fixunssfsi+0x4c>
    2c58:	b9 3f       	cpi	r27, 0xF9	; 249
    2c5a:	cc f3       	brlt	.-14     	; 0x2c4e <__fixunssfsi+0x34>
    2c5c:	86 95       	lsr	r24
    2c5e:	77 95       	ror	r23
    2c60:	67 95       	ror	r22
    2c62:	b3 95       	inc	r27
    2c64:	d9 f7       	brne	.-10     	; 0x2c5c <__fixunssfsi+0x42>
    2c66:	3e f4       	brtc	.+14     	; 0x2c76 <__fixunssfsi+0x5c>
    2c68:	90 95       	com	r25
    2c6a:	80 95       	com	r24
    2c6c:	70 95       	com	r23
    2c6e:	61 95       	neg	r22
    2c70:	7f 4f       	sbci	r23, 0xFF	; 255
    2c72:	8f 4f       	sbci	r24, 0xFF	; 255
    2c74:	9f 4f       	sbci	r25, 0xFF	; 255
    2c76:	08 95       	ret

00002c78 <__floatunsisf>:
    2c78:	e8 94       	clt
    2c7a:	09 c0       	rjmp	.+18     	; 0x2c8e <__floatsisf+0x12>

00002c7c <__floatsisf>:
    2c7c:	97 fb       	bst	r25, 7
    2c7e:	3e f4       	brtc	.+14     	; 0x2c8e <__floatsisf+0x12>
    2c80:	90 95       	com	r25
    2c82:	80 95       	com	r24
    2c84:	70 95       	com	r23
    2c86:	61 95       	neg	r22
    2c88:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8e:	99 23       	and	r25, r25
    2c90:	a9 f0       	breq	.+42     	; 0x2cbc <__floatsisf+0x40>
    2c92:	f9 2f       	mov	r31, r25
    2c94:	96 e9       	ldi	r25, 0x96	; 150
    2c96:	bb 27       	eor	r27, r27
    2c98:	93 95       	inc	r25
    2c9a:	f6 95       	lsr	r31
    2c9c:	87 95       	ror	r24
    2c9e:	77 95       	ror	r23
    2ca0:	67 95       	ror	r22
    2ca2:	b7 95       	ror	r27
    2ca4:	f1 11       	cpse	r31, r1
    2ca6:	f8 cf       	rjmp	.-16     	; 0x2c98 <__floatsisf+0x1c>
    2ca8:	fa f4       	brpl	.+62     	; 0x2ce8 <__floatsisf+0x6c>
    2caa:	bb 0f       	add	r27, r27
    2cac:	11 f4       	brne	.+4      	; 0x2cb2 <__floatsisf+0x36>
    2cae:	60 ff       	sbrs	r22, 0
    2cb0:	1b c0       	rjmp	.+54     	; 0x2ce8 <__floatsisf+0x6c>
    2cb2:	6f 5f       	subi	r22, 0xFF	; 255
    2cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    2cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cba:	16 c0       	rjmp	.+44     	; 0x2ce8 <__floatsisf+0x6c>
    2cbc:	88 23       	and	r24, r24
    2cbe:	11 f0       	breq	.+4      	; 0x2cc4 <__floatsisf+0x48>
    2cc0:	96 e9       	ldi	r25, 0x96	; 150
    2cc2:	11 c0       	rjmp	.+34     	; 0x2ce6 <__floatsisf+0x6a>
    2cc4:	77 23       	and	r23, r23
    2cc6:	21 f0       	breq	.+8      	; 0x2cd0 <__floatsisf+0x54>
    2cc8:	9e e8       	ldi	r25, 0x8E	; 142
    2cca:	87 2f       	mov	r24, r23
    2ccc:	76 2f       	mov	r23, r22
    2cce:	05 c0       	rjmp	.+10     	; 0x2cda <__floatsisf+0x5e>
    2cd0:	66 23       	and	r22, r22
    2cd2:	71 f0       	breq	.+28     	; 0x2cf0 <__floatsisf+0x74>
    2cd4:	96 e8       	ldi	r25, 0x86	; 134
    2cd6:	86 2f       	mov	r24, r22
    2cd8:	70 e0       	ldi	r23, 0x00	; 0
    2cda:	60 e0       	ldi	r22, 0x00	; 0
    2cdc:	2a f0       	brmi	.+10     	; 0x2ce8 <__floatsisf+0x6c>
    2cde:	9a 95       	dec	r25
    2ce0:	66 0f       	add	r22, r22
    2ce2:	77 1f       	adc	r23, r23
    2ce4:	88 1f       	adc	r24, r24
    2ce6:	da f7       	brpl	.-10     	; 0x2cde <__floatsisf+0x62>
    2ce8:	88 0f       	add	r24, r24
    2cea:	96 95       	lsr	r25
    2cec:	87 95       	ror	r24
    2cee:	97 f9       	bld	r25, 7
    2cf0:	08 95       	ret

00002cf2 <__fp_inf>:
    2cf2:	97 f9       	bld	r25, 7
    2cf4:	9f 67       	ori	r25, 0x7F	; 127
    2cf6:	80 e8       	ldi	r24, 0x80	; 128
    2cf8:	70 e0       	ldi	r23, 0x00	; 0
    2cfa:	60 e0       	ldi	r22, 0x00	; 0
    2cfc:	08 95       	ret

00002cfe <__fp_nan>:
    2cfe:	9f ef       	ldi	r25, 0xFF	; 255
    2d00:	80 ec       	ldi	r24, 0xC0	; 192
    2d02:	08 95       	ret

00002d04 <__fp_pscA>:
    2d04:	00 24       	eor	r0, r0
    2d06:	0a 94       	dec	r0
    2d08:	16 16       	cp	r1, r22
    2d0a:	17 06       	cpc	r1, r23
    2d0c:	18 06       	cpc	r1, r24
    2d0e:	09 06       	cpc	r0, r25
    2d10:	08 95       	ret

00002d12 <__fp_pscB>:
    2d12:	00 24       	eor	r0, r0
    2d14:	0a 94       	dec	r0
    2d16:	12 16       	cp	r1, r18
    2d18:	13 06       	cpc	r1, r19
    2d1a:	14 06       	cpc	r1, r20
    2d1c:	05 06       	cpc	r0, r21
    2d1e:	08 95       	ret

00002d20 <__fp_round>:
    2d20:	09 2e       	mov	r0, r25
    2d22:	03 94       	inc	r0
    2d24:	00 0c       	add	r0, r0
    2d26:	11 f4       	brne	.+4      	; 0x2d2c <__fp_round+0xc>
    2d28:	88 23       	and	r24, r24
    2d2a:	52 f0       	brmi	.+20     	; 0x2d40 <__fp_round+0x20>
    2d2c:	bb 0f       	add	r27, r27
    2d2e:	40 f4       	brcc	.+16     	; 0x2d40 <__fp_round+0x20>
    2d30:	bf 2b       	or	r27, r31
    2d32:	11 f4       	brne	.+4      	; 0x2d38 <__fp_round+0x18>
    2d34:	60 ff       	sbrs	r22, 0
    2d36:	04 c0       	rjmp	.+8      	; 0x2d40 <__fp_round+0x20>
    2d38:	6f 5f       	subi	r22, 0xFF	; 255
    2d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d40:	08 95       	ret

00002d42 <__fp_split3>:
    2d42:	57 fd       	sbrc	r21, 7
    2d44:	90 58       	subi	r25, 0x80	; 128
    2d46:	44 0f       	add	r20, r20
    2d48:	55 1f       	adc	r21, r21
    2d4a:	59 f0       	breq	.+22     	; 0x2d62 <__fp_splitA+0x10>
    2d4c:	5f 3f       	cpi	r21, 0xFF	; 255
    2d4e:	71 f0       	breq	.+28     	; 0x2d6c <__fp_splitA+0x1a>
    2d50:	47 95       	ror	r20

00002d52 <__fp_splitA>:
    2d52:	88 0f       	add	r24, r24
    2d54:	97 fb       	bst	r25, 7
    2d56:	99 1f       	adc	r25, r25
    2d58:	61 f0       	breq	.+24     	; 0x2d72 <__fp_splitA+0x20>
    2d5a:	9f 3f       	cpi	r25, 0xFF	; 255
    2d5c:	79 f0       	breq	.+30     	; 0x2d7c <__fp_splitA+0x2a>
    2d5e:	87 95       	ror	r24
    2d60:	08 95       	ret
    2d62:	12 16       	cp	r1, r18
    2d64:	13 06       	cpc	r1, r19
    2d66:	14 06       	cpc	r1, r20
    2d68:	55 1f       	adc	r21, r21
    2d6a:	f2 cf       	rjmp	.-28     	; 0x2d50 <__fp_split3+0xe>
    2d6c:	46 95       	lsr	r20
    2d6e:	f1 df       	rcall	.-30     	; 0x2d52 <__fp_splitA>
    2d70:	08 c0       	rjmp	.+16     	; 0x2d82 <__fp_splitA+0x30>
    2d72:	16 16       	cp	r1, r22
    2d74:	17 06       	cpc	r1, r23
    2d76:	18 06       	cpc	r1, r24
    2d78:	99 1f       	adc	r25, r25
    2d7a:	f1 cf       	rjmp	.-30     	; 0x2d5e <__fp_splitA+0xc>
    2d7c:	86 95       	lsr	r24
    2d7e:	71 05       	cpc	r23, r1
    2d80:	61 05       	cpc	r22, r1
    2d82:	08 94       	sec
    2d84:	08 95       	ret

00002d86 <__fp_zero>:
    2d86:	e8 94       	clt

00002d88 <__fp_szero>:
    2d88:	bb 27       	eor	r27, r27
    2d8a:	66 27       	eor	r22, r22
    2d8c:	77 27       	eor	r23, r23
    2d8e:	cb 01       	movw	r24, r22
    2d90:	97 f9       	bld	r25, 7
    2d92:	08 95       	ret

00002d94 <__mulsf3>:
    2d94:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__mulsf3x>
    2d98:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__fp_round>
    2d9c:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__fp_pscA>
    2da0:	38 f0       	brcs	.+14     	; 0x2db0 <__mulsf3+0x1c>
    2da2:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__fp_pscB>
    2da6:	20 f0       	brcs	.+8      	; 0x2db0 <__mulsf3+0x1c>
    2da8:	95 23       	and	r25, r21
    2daa:	11 f0       	breq	.+4      	; 0x2db0 <__mulsf3+0x1c>
    2dac:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__fp_inf>
    2db0:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__fp_nan>
    2db4:	11 24       	eor	r1, r1
    2db6:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__fp_szero>

00002dba <__mulsf3x>:
    2dba:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__fp_split3>
    2dbe:	70 f3       	brcs	.-36     	; 0x2d9c <__mulsf3+0x8>

00002dc0 <__mulsf3_pse>:
    2dc0:	95 9f       	mul	r25, r21
    2dc2:	c1 f3       	breq	.-16     	; 0x2db4 <__mulsf3+0x20>
    2dc4:	95 0f       	add	r25, r21
    2dc6:	50 e0       	ldi	r21, 0x00	; 0
    2dc8:	55 1f       	adc	r21, r21
    2dca:	62 9f       	mul	r22, r18
    2dcc:	f0 01       	movw	r30, r0
    2dce:	72 9f       	mul	r23, r18
    2dd0:	bb 27       	eor	r27, r27
    2dd2:	f0 0d       	add	r31, r0
    2dd4:	b1 1d       	adc	r27, r1
    2dd6:	63 9f       	mul	r22, r19
    2dd8:	aa 27       	eor	r26, r26
    2dda:	f0 0d       	add	r31, r0
    2ddc:	b1 1d       	adc	r27, r1
    2dde:	aa 1f       	adc	r26, r26
    2de0:	64 9f       	mul	r22, r20
    2de2:	66 27       	eor	r22, r22
    2de4:	b0 0d       	add	r27, r0
    2de6:	a1 1d       	adc	r26, r1
    2de8:	66 1f       	adc	r22, r22
    2dea:	82 9f       	mul	r24, r18
    2dec:	22 27       	eor	r18, r18
    2dee:	b0 0d       	add	r27, r0
    2df0:	a1 1d       	adc	r26, r1
    2df2:	62 1f       	adc	r22, r18
    2df4:	73 9f       	mul	r23, r19
    2df6:	b0 0d       	add	r27, r0
    2df8:	a1 1d       	adc	r26, r1
    2dfa:	62 1f       	adc	r22, r18
    2dfc:	83 9f       	mul	r24, r19
    2dfe:	a0 0d       	add	r26, r0
    2e00:	61 1d       	adc	r22, r1
    2e02:	22 1f       	adc	r18, r18
    2e04:	74 9f       	mul	r23, r20
    2e06:	33 27       	eor	r19, r19
    2e08:	a0 0d       	add	r26, r0
    2e0a:	61 1d       	adc	r22, r1
    2e0c:	23 1f       	adc	r18, r19
    2e0e:	84 9f       	mul	r24, r20
    2e10:	60 0d       	add	r22, r0
    2e12:	21 1d       	adc	r18, r1
    2e14:	82 2f       	mov	r24, r18
    2e16:	76 2f       	mov	r23, r22
    2e18:	6a 2f       	mov	r22, r26
    2e1a:	11 24       	eor	r1, r1
    2e1c:	9f 57       	subi	r25, 0x7F	; 127
    2e1e:	50 40       	sbci	r21, 0x00	; 0
    2e20:	9a f0       	brmi	.+38     	; 0x2e48 <__mulsf3_pse+0x88>
    2e22:	f1 f0       	breq	.+60     	; 0x2e60 <__mulsf3_pse+0xa0>
    2e24:	88 23       	and	r24, r24
    2e26:	4a f0       	brmi	.+18     	; 0x2e3a <__mulsf3_pse+0x7a>
    2e28:	ee 0f       	add	r30, r30
    2e2a:	ff 1f       	adc	r31, r31
    2e2c:	bb 1f       	adc	r27, r27
    2e2e:	66 1f       	adc	r22, r22
    2e30:	77 1f       	adc	r23, r23
    2e32:	88 1f       	adc	r24, r24
    2e34:	91 50       	subi	r25, 0x01	; 1
    2e36:	50 40       	sbci	r21, 0x00	; 0
    2e38:	a9 f7       	brne	.-22     	; 0x2e24 <__mulsf3_pse+0x64>
    2e3a:	9e 3f       	cpi	r25, 0xFE	; 254
    2e3c:	51 05       	cpc	r21, r1
    2e3e:	80 f0       	brcs	.+32     	; 0x2e60 <__mulsf3_pse+0xa0>
    2e40:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__fp_inf>
    2e44:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__fp_szero>
    2e48:	5f 3f       	cpi	r21, 0xFF	; 255
    2e4a:	e4 f3       	brlt	.-8      	; 0x2e44 <__mulsf3_pse+0x84>
    2e4c:	98 3e       	cpi	r25, 0xE8	; 232
    2e4e:	d4 f3       	brlt	.-12     	; 0x2e44 <__mulsf3_pse+0x84>
    2e50:	86 95       	lsr	r24
    2e52:	77 95       	ror	r23
    2e54:	67 95       	ror	r22
    2e56:	b7 95       	ror	r27
    2e58:	f7 95       	ror	r31
    2e5a:	e7 95       	ror	r30
    2e5c:	9f 5f       	subi	r25, 0xFF	; 255
    2e5e:	c1 f7       	brne	.-16     	; 0x2e50 <__mulsf3_pse+0x90>
    2e60:	fe 2b       	or	r31, r30
    2e62:	88 0f       	add	r24, r24
    2e64:	91 1d       	adc	r25, r1
    2e66:	96 95       	lsr	r25
    2e68:	87 95       	ror	r24
    2e6a:	97 f9       	bld	r25, 7
    2e6c:	08 95       	ret

00002e6e <pow>:
    2e6e:	fa 01       	movw	r30, r20
    2e70:	ee 0f       	add	r30, r30
    2e72:	ff 1f       	adc	r31, r31
    2e74:	30 96       	adiw	r30, 0x00	; 0
    2e76:	21 05       	cpc	r18, r1
    2e78:	31 05       	cpc	r19, r1
    2e7a:	a1 f1       	breq	.+104    	; 0x2ee4 <pow+0x76>
    2e7c:	61 15       	cp	r22, r1
    2e7e:	71 05       	cpc	r23, r1
    2e80:	61 f4       	brne	.+24     	; 0x2e9a <pow+0x2c>
    2e82:	80 38       	cpi	r24, 0x80	; 128
    2e84:	bf e3       	ldi	r27, 0x3F	; 63
    2e86:	9b 07       	cpc	r25, r27
    2e88:	49 f1       	breq	.+82     	; 0x2edc <pow+0x6e>
    2e8a:	68 94       	set
    2e8c:	90 38       	cpi	r25, 0x80	; 128
    2e8e:	81 05       	cpc	r24, r1
    2e90:	61 f0       	breq	.+24     	; 0x2eaa <pow+0x3c>
    2e92:	80 38       	cpi	r24, 0x80	; 128
    2e94:	bf ef       	ldi	r27, 0xFF	; 255
    2e96:	9b 07       	cpc	r25, r27
    2e98:	41 f0       	breq	.+16     	; 0x2eaa <pow+0x3c>
    2e9a:	99 23       	and	r25, r25
    2e9c:	4a f5       	brpl	.+82     	; 0x2ef0 <pow+0x82>
    2e9e:	ff 3f       	cpi	r31, 0xFF	; 255
    2ea0:	e1 05       	cpc	r30, r1
    2ea2:	31 05       	cpc	r19, r1
    2ea4:	21 05       	cpc	r18, r1
    2ea6:	19 f1       	breq	.+70     	; 0x2eee <pow+0x80>
    2ea8:	e8 94       	clt
    2eaa:	08 94       	sec
    2eac:	e7 95       	ror	r30
    2eae:	d9 01       	movw	r26, r18
    2eb0:	aa 23       	and	r26, r26
    2eb2:	29 f4       	brne	.+10     	; 0x2ebe <pow+0x50>
    2eb4:	ab 2f       	mov	r26, r27
    2eb6:	be 2f       	mov	r27, r30
    2eb8:	f8 5f       	subi	r31, 0xF8	; 248
    2eba:	d0 f3       	brcs	.-12     	; 0x2eb0 <pow+0x42>
    2ebc:	10 c0       	rjmp	.+32     	; 0x2ede <pow+0x70>
    2ebe:	ff 5f       	subi	r31, 0xFF	; 255
    2ec0:	70 f4       	brcc	.+28     	; 0x2ede <pow+0x70>
    2ec2:	a6 95       	lsr	r26
    2ec4:	e0 f7       	brcc	.-8      	; 0x2ebe <pow+0x50>
    2ec6:	f7 39       	cpi	r31, 0x97	; 151
    2ec8:	50 f0       	brcs	.+20     	; 0x2ede <pow+0x70>
    2eca:	19 f0       	breq	.+6      	; 0x2ed2 <pow+0x64>
    2ecc:	ff 3a       	cpi	r31, 0xAF	; 175
    2ece:	38 f4       	brcc	.+14     	; 0x2ede <pow+0x70>
    2ed0:	9f 77       	andi	r25, 0x7F	; 127
    2ed2:	9f 93       	push	r25
    2ed4:	0d d0       	rcall	.+26     	; 0x2ef0 <pow+0x82>
    2ed6:	0f 90       	pop	r0
    2ed8:	07 fc       	sbrc	r0, 7
    2eda:	90 58       	subi	r25, 0x80	; 128
    2edc:	08 95       	ret
    2ede:	46 f0       	brts	.+16     	; 0x2ef0 <pow+0x82>
    2ee0:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__fp_nan>
    2ee4:	60 e0       	ldi	r22, 0x00	; 0
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	80 e8       	ldi	r24, 0x80	; 128
    2eea:	9f e3       	ldi	r25, 0x3F	; 63
    2eec:	08 95       	ret
    2eee:	4f e7       	ldi	r20, 0x7F	; 127
    2ef0:	9f 77       	andi	r25, 0x7F	; 127
    2ef2:	5f 93       	push	r21
    2ef4:	4f 93       	push	r20
    2ef6:	3f 93       	push	r19
    2ef8:	2f 93       	push	r18
    2efa:	0e 94 32 18 	call	0x3064	; 0x3064 <log>
    2efe:	2f 91       	pop	r18
    2f00:	3f 91       	pop	r19
    2f02:	4f 91       	pop	r20
    2f04:	5f 91       	pop	r21
    2f06:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__mulsf3>
    2f0a:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <exp>
    2f0e:	29 f4       	brne	.+10     	; 0x2f1a <pow+0xac>
    2f10:	16 f0       	brts	.+4      	; 0x2f16 <pow+0xa8>
    2f12:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__fp_inf>
    2f16:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__fp_zero>
    2f1a:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__fp_nan>

00002f1e <exp>:
    2f1e:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__fp_splitA>
    2f22:	a8 f3       	brcs	.-22     	; 0x2f0e <pow+0xa0>
    2f24:	96 38       	cpi	r25, 0x86	; 134
    2f26:	a0 f7       	brcc	.-24     	; 0x2f10 <pow+0xa2>
    2f28:	07 f8       	bld	r0, 7
    2f2a:	0f 92       	push	r0
    2f2c:	e8 94       	clt
    2f2e:	2b e3       	ldi	r18, 0x3B	; 59
    2f30:	3a ea       	ldi	r19, 0xAA	; 170
    2f32:	48 eb       	ldi	r20, 0xB8	; 184
    2f34:	5f e7       	ldi	r21, 0x7F	; 127
    2f36:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3_pse>
    2f3a:	0f 92       	push	r0
    2f3c:	0f 92       	push	r0
    2f3e:	0f 92       	push	r0
    2f40:	4d b7       	in	r20, 0x3d	; 61
    2f42:	5e b7       	in	r21, 0x3e	; 62
    2f44:	0f 92       	push	r0
    2f46:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <modf>
    2f4a:	e6 eb       	ldi	r30, 0xB6	; 182
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__fp_powser>
    2f52:	4f 91       	pop	r20
    2f54:	5f 91       	pop	r21
    2f56:	ef 91       	pop	r30
    2f58:	ff 91       	pop	r31
    2f5a:	e5 95       	asr	r30
    2f5c:	ee 1f       	adc	r30, r30
    2f5e:	ff 1f       	adc	r31, r31
    2f60:	49 f0       	breq	.+18     	; 0x2f74 <exp+0x56>
    2f62:	fe 57       	subi	r31, 0x7E	; 126
    2f64:	e0 68       	ori	r30, 0x80	; 128
    2f66:	44 27       	eor	r20, r20
    2f68:	ee 0f       	add	r30, r30
    2f6a:	44 1f       	adc	r20, r20
    2f6c:	fa 95       	dec	r31
    2f6e:	e1 f7       	brne	.-8      	; 0x2f68 <exp+0x4a>
    2f70:	41 95       	neg	r20
    2f72:	55 0b       	sbc	r21, r21
    2f74:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <ldexp>
    2f78:	0f 90       	pop	r0
    2f7a:	07 fe       	sbrs	r0, 7
    2f7c:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <inverse>
    2f80:	08 95       	ret

00002f82 <__fp_powser>:
    2f82:	df 93       	push	r29
    2f84:	cf 93       	push	r28
    2f86:	1f 93       	push	r17
    2f88:	0f 93       	push	r16
    2f8a:	ff 92       	push	r15
    2f8c:	ef 92       	push	r14
    2f8e:	df 92       	push	r13
    2f90:	7b 01       	movw	r14, r22
    2f92:	8c 01       	movw	r16, r24
    2f94:	68 94       	set
    2f96:	06 c0       	rjmp	.+12     	; 0x2fa4 <__fp_powser+0x22>
    2f98:	da 2e       	mov	r13, r26
    2f9a:	ef 01       	movw	r28, r30
    2f9c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__mulsf3x>
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	e8 94       	clt
    2fa4:	a5 91       	lpm	r26, Z+
    2fa6:	25 91       	lpm	r18, Z+
    2fa8:	35 91       	lpm	r19, Z+
    2faa:	45 91       	lpm	r20, Z+
    2fac:	55 91       	lpm	r21, Z+
    2fae:	a6 f3       	brts	.-24     	; 0x2f98 <__fp_powser+0x16>
    2fb0:	ef 01       	movw	r28, r30
    2fb2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__addsf3x>
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	97 01       	movw	r18, r14
    2fba:	a8 01       	movw	r20, r16
    2fbc:	da 94       	dec	r13
    2fbe:	69 f7       	brne	.-38     	; 0x2f9a <__fp_powser+0x18>
    2fc0:	df 90       	pop	r13
    2fc2:	ef 90       	pop	r14
    2fc4:	ff 90       	pop	r15
    2fc6:	0f 91       	pop	r16
    2fc8:	1f 91       	pop	r17
    2fca:	cf 91       	pop	r28
    2fcc:	df 91       	pop	r29
    2fce:	08 95       	ret

00002fd0 <inverse>:
    2fd0:	9b 01       	movw	r18, r22
    2fd2:	ac 01       	movw	r20, r24
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	70 e0       	ldi	r23, 0x00	; 0
    2fd8:	80 e8       	ldi	r24, 0x80	; 128
    2fda:	9f e3       	ldi	r25, 0x3F	; 63
    2fdc:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__divsf3>
    2fe0:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__fp_inf>
    2fe4:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__fp_mpack>

00002fe8 <ldexp>:
    2fe8:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__fp_splitA>
    2fec:	d8 f3       	brcs	.-10     	; 0x2fe4 <inverse+0x14>
    2fee:	99 23       	and	r25, r25
    2ff0:	c9 f3       	breq	.-14     	; 0x2fe4 <inverse+0x14>
    2ff2:	94 0f       	add	r25, r20
    2ff4:	51 1d       	adc	r21, r1
    2ff6:	a3 f3       	brvs	.-24     	; 0x2fe0 <inverse+0x10>
    2ff8:	91 50       	subi	r25, 0x01	; 1
    2ffa:	50 40       	sbci	r21, 0x00	; 0
    2ffc:	94 f0       	brlt	.+36     	; 0x3022 <ldexp+0x3a>
    2ffe:	59 f0       	breq	.+22     	; 0x3016 <ldexp+0x2e>
    3000:	88 23       	and	r24, r24
    3002:	32 f0       	brmi	.+12     	; 0x3010 <ldexp+0x28>
    3004:	66 0f       	add	r22, r22
    3006:	77 1f       	adc	r23, r23
    3008:	88 1f       	adc	r24, r24
    300a:	91 50       	subi	r25, 0x01	; 1
    300c:	50 40       	sbci	r21, 0x00	; 0
    300e:	c1 f7       	brne	.-16     	; 0x3000 <ldexp+0x18>
    3010:	9e 3f       	cpi	r25, 0xFE	; 254
    3012:	51 05       	cpc	r21, r1
    3014:	2c f7       	brge	.-54     	; 0x2fe0 <inverse+0x10>
    3016:	88 0f       	add	r24, r24
    3018:	91 1d       	adc	r25, r1
    301a:	96 95       	lsr	r25
    301c:	87 95       	ror	r24
    301e:	97 f9       	bld	r25, 7
    3020:	08 95       	ret
    3022:	5f 3f       	cpi	r21, 0xFF	; 255
    3024:	ac f0       	brlt	.+42     	; 0x3050 <ldexp+0x68>
    3026:	98 3e       	cpi	r25, 0xE8	; 232
    3028:	9c f0       	brlt	.+38     	; 0x3050 <ldexp+0x68>
    302a:	bb 27       	eor	r27, r27
    302c:	86 95       	lsr	r24
    302e:	77 95       	ror	r23
    3030:	67 95       	ror	r22
    3032:	b7 95       	ror	r27
    3034:	08 f4       	brcc	.+2      	; 0x3038 <ldexp+0x50>
    3036:	b1 60       	ori	r27, 0x01	; 1
    3038:	93 95       	inc	r25
    303a:	c1 f7       	brne	.-16     	; 0x302c <ldexp+0x44>
    303c:	bb 0f       	add	r27, r27
    303e:	58 f7       	brcc	.-42     	; 0x3016 <ldexp+0x2e>
    3040:	11 f4       	brne	.+4      	; 0x3046 <ldexp+0x5e>
    3042:	60 ff       	sbrs	r22, 0
    3044:	e8 cf       	rjmp	.-48     	; 0x3016 <ldexp+0x2e>
    3046:	6f 5f       	subi	r22, 0xFF	; 255
    3048:	7f 4f       	sbci	r23, 0xFF	; 255
    304a:	8f 4f       	sbci	r24, 0xFF	; 255
    304c:	9f 4f       	sbci	r25, 0xFF	; 255
    304e:	e3 cf       	rjmp	.-58     	; 0x3016 <ldexp+0x2e>
    3050:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__fp_szero>
    3054:	16 f0       	brts	.+4      	; 0x305a <ldexp+0x72>
    3056:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__fp_mpack>
    305a:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__fp_nan>
    305e:	68 94       	set
    3060:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__fp_inf>

00003064 <log>:
    3064:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__fp_splitA>
    3068:	a8 f3       	brcs	.-22     	; 0x3054 <ldexp+0x6c>
    306a:	99 23       	and	r25, r25
    306c:	c1 f3       	breq	.-16     	; 0x305e <ldexp+0x76>
    306e:	ae f3       	brts	.-22     	; 0x305a <ldexp+0x72>
    3070:	df 93       	push	r29
    3072:	cf 93       	push	r28
    3074:	1f 93       	push	r17
    3076:	0f 93       	push	r16
    3078:	ff 92       	push	r15
    307a:	c9 2f       	mov	r28, r25
    307c:	dd 27       	eor	r29, r29
    307e:	88 23       	and	r24, r24
    3080:	2a f0       	brmi	.+10     	; 0x308c <log+0x28>
    3082:	21 97       	sbiw	r28, 0x01	; 1
    3084:	66 0f       	add	r22, r22
    3086:	77 1f       	adc	r23, r23
    3088:	88 1f       	adc	r24, r24
    308a:	da f7       	brpl	.-10     	; 0x3082 <log+0x1e>
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	40 e8       	ldi	r20, 0x80	; 128
    3092:	5f eb       	ldi	r21, 0xBF	; 191
    3094:	9f e3       	ldi	r25, 0x3F	; 63
    3096:	88 39       	cpi	r24, 0x98	; 152
    3098:	20 f0       	brcs	.+8      	; 0x30a2 <log+0x3e>
    309a:	80 3e       	cpi	r24, 0xE0	; 224
    309c:	38 f0       	brcs	.+14     	; 0x30ac <log+0x48>
    309e:	21 96       	adiw	r28, 0x01	; 1
    30a0:	8f 77       	andi	r24, 0x7F	; 127
    30a2:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__addsf3>
    30a6:	ee ed       	ldi	r30, 0xDE	; 222
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	04 c0       	rjmp	.+8      	; 0x30b4 <log+0x50>
    30ac:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <__addsf3>
    30b0:	eb e0       	ldi	r30, 0x0B	; 11
    30b2:	f1 e0       	ldi	r31, 0x01	; 1
    30b4:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <__fp_powser>
    30b8:	8b 01       	movw	r16, r22
    30ba:	be 01       	movw	r22, r28
    30bc:	ec 01       	movw	r28, r24
    30be:	fb 2e       	mov	r15, r27
    30c0:	6f 57       	subi	r22, 0x7F	; 127
    30c2:	71 09       	sbc	r23, r1
    30c4:	75 95       	asr	r23
    30c6:	77 1f       	adc	r23, r23
    30c8:	88 0b       	sbc	r24, r24
    30ca:	99 0b       	sbc	r25, r25
    30cc:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <__floatsisf>
    30d0:	28 e1       	ldi	r18, 0x18	; 24
    30d2:	32 e7       	ldi	r19, 0x72	; 114
    30d4:	41 e3       	ldi	r20, 0x31	; 49
    30d6:	5f e3       	ldi	r21, 0x3F	; 63
    30d8:	0e 94 dd 16 	call	0x2dba	; 0x2dba <__mulsf3x>
    30dc:	af 2d       	mov	r26, r15
    30de:	98 01       	movw	r18, r16
    30e0:	ae 01       	movw	r20, r28
    30e2:	ff 90       	pop	r15
    30e4:	0f 91       	pop	r16
    30e6:	1f 91       	pop	r17
    30e8:	cf 91       	pop	r28
    30ea:	df 91       	pop	r29
    30ec:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__addsf3x>
    30f0:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__fp_round>

000030f4 <modf>:
    30f4:	fa 01       	movw	r30, r20
    30f6:	dc 01       	movw	r26, r24
    30f8:	aa 0f       	add	r26, r26
    30fa:	bb 1f       	adc	r27, r27
    30fc:	9b 01       	movw	r18, r22
    30fe:	ac 01       	movw	r20, r24
    3100:	bf 57       	subi	r27, 0x7F	; 127
    3102:	28 f4       	brcc	.+10     	; 0x310e <modf+0x1a>
    3104:	22 27       	eor	r18, r18
    3106:	33 27       	eor	r19, r19
    3108:	44 27       	eor	r20, r20
    310a:	50 78       	andi	r21, 0x80	; 128
    310c:	20 c0       	rjmp	.+64     	; 0x314e <modf+0x5a>
    310e:	b7 51       	subi	r27, 0x17	; 23
    3110:	90 f4       	brcc	.+36     	; 0x3136 <modf+0x42>
    3112:	ab 2f       	mov	r26, r27
    3114:	00 24       	eor	r0, r0
    3116:	46 95       	lsr	r20
    3118:	37 95       	ror	r19
    311a:	27 95       	ror	r18
    311c:	01 1c       	adc	r0, r1
    311e:	a3 95       	inc	r26
    3120:	d2 f3       	brmi	.-12     	; 0x3116 <modf+0x22>
    3122:	00 20       	and	r0, r0
    3124:	71 f0       	breq	.+28     	; 0x3142 <modf+0x4e>
    3126:	22 0f       	add	r18, r18
    3128:	33 1f       	adc	r19, r19
    312a:	44 1f       	adc	r20, r20
    312c:	b3 95       	inc	r27
    312e:	da f3       	brmi	.-10     	; 0x3126 <modf+0x32>
    3130:	0e d0       	rcall	.+28     	; 0x314e <modf+0x5a>
    3132:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__subsf3>
    3136:	61 30       	cpi	r22, 0x01	; 1
    3138:	71 05       	cpc	r23, r1
    313a:	a0 e8       	ldi	r26, 0x80	; 128
    313c:	8a 07       	cpc	r24, r26
    313e:	b9 46       	sbci	r27, 0x69	; 105
    3140:	30 f4       	brcc	.+12     	; 0x314e <modf+0x5a>
    3142:	9b 01       	movw	r18, r22
    3144:	ac 01       	movw	r20, r24
    3146:	66 27       	eor	r22, r22
    3148:	77 27       	eor	r23, r23
    314a:	88 27       	eor	r24, r24
    314c:	90 78       	andi	r25, 0x80	; 128
    314e:	30 96       	adiw	r30, 0x00	; 0
    3150:	21 f0       	breq	.+8      	; 0x315a <modf+0x66>
    3152:	20 83       	st	Z, r18
    3154:	31 83       	std	Z+1, r19	; 0x01
    3156:	42 83       	std	Z+2, r20	; 0x02
    3158:	53 83       	std	Z+3, r21	; 0x03
    315a:	08 95       	ret

0000315c <__divsf3>:
    315c:	0e 94 c2 18 	call	0x3184	; 0x3184 <__divsf3x>
    3160:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <__fp_round>
    3164:	0e 94 89 16 	call	0x2d12	; 0x2d12 <__fp_pscB>
    3168:	58 f0       	brcs	.+22     	; 0x3180 <__divsf3+0x24>
    316a:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__fp_pscA>
    316e:	40 f0       	brcs	.+16     	; 0x3180 <__divsf3+0x24>
    3170:	29 f4       	brne	.+10     	; 0x317c <__divsf3+0x20>
    3172:	5f 3f       	cpi	r21, 0xFF	; 255
    3174:	29 f0       	breq	.+10     	; 0x3180 <__divsf3+0x24>
    3176:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__fp_inf>
    317a:	51 11       	cpse	r21, r1
    317c:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__fp_szero>
    3180:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__fp_nan>

00003184 <__divsf3x>:
    3184:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__fp_split3>
    3188:	68 f3       	brcs	.-38     	; 0x3164 <__divsf3+0x8>

0000318a <__divsf3_pse>:
    318a:	99 23       	and	r25, r25
    318c:	b1 f3       	breq	.-20     	; 0x317a <__divsf3+0x1e>
    318e:	55 23       	and	r21, r21
    3190:	91 f3       	breq	.-28     	; 0x3176 <__divsf3+0x1a>
    3192:	95 1b       	sub	r25, r21
    3194:	55 0b       	sbc	r21, r21
    3196:	bb 27       	eor	r27, r27
    3198:	aa 27       	eor	r26, r26
    319a:	62 17       	cp	r22, r18
    319c:	73 07       	cpc	r23, r19
    319e:	84 07       	cpc	r24, r20
    31a0:	38 f0       	brcs	.+14     	; 0x31b0 <__divsf3_pse+0x26>
    31a2:	9f 5f       	subi	r25, 0xFF	; 255
    31a4:	5f 4f       	sbci	r21, 0xFF	; 255
    31a6:	22 0f       	add	r18, r18
    31a8:	33 1f       	adc	r19, r19
    31aa:	44 1f       	adc	r20, r20
    31ac:	aa 1f       	adc	r26, r26
    31ae:	a9 f3       	breq	.-22     	; 0x319a <__divsf3_pse+0x10>
    31b0:	35 d0       	rcall	.+106    	; 0x321c <__divsf3_pse+0x92>
    31b2:	0e 2e       	mov	r0, r30
    31b4:	3a f0       	brmi	.+14     	; 0x31c4 <__divsf3_pse+0x3a>
    31b6:	e0 e8       	ldi	r30, 0x80	; 128
    31b8:	32 d0       	rcall	.+100    	; 0x321e <__divsf3_pse+0x94>
    31ba:	91 50       	subi	r25, 0x01	; 1
    31bc:	50 40       	sbci	r21, 0x00	; 0
    31be:	e6 95       	lsr	r30
    31c0:	00 1c       	adc	r0, r0
    31c2:	ca f7       	brpl	.-14     	; 0x31b6 <__divsf3_pse+0x2c>
    31c4:	2b d0       	rcall	.+86     	; 0x321c <__divsf3_pse+0x92>
    31c6:	fe 2f       	mov	r31, r30
    31c8:	29 d0       	rcall	.+82     	; 0x321c <__divsf3_pse+0x92>
    31ca:	66 0f       	add	r22, r22
    31cc:	77 1f       	adc	r23, r23
    31ce:	88 1f       	adc	r24, r24
    31d0:	bb 1f       	adc	r27, r27
    31d2:	26 17       	cp	r18, r22
    31d4:	37 07       	cpc	r19, r23
    31d6:	48 07       	cpc	r20, r24
    31d8:	ab 07       	cpc	r26, r27
    31da:	b0 e8       	ldi	r27, 0x80	; 128
    31dc:	09 f0       	breq	.+2      	; 0x31e0 <__divsf3_pse+0x56>
    31de:	bb 0b       	sbc	r27, r27
    31e0:	80 2d       	mov	r24, r0
    31e2:	bf 01       	movw	r22, r30
    31e4:	ff 27       	eor	r31, r31
    31e6:	93 58       	subi	r25, 0x83	; 131
    31e8:	5f 4f       	sbci	r21, 0xFF	; 255
    31ea:	3a f0       	brmi	.+14     	; 0x31fa <__divsf3_pse+0x70>
    31ec:	9e 3f       	cpi	r25, 0xFE	; 254
    31ee:	51 05       	cpc	r21, r1
    31f0:	78 f0       	brcs	.+30     	; 0x3210 <__divsf3_pse+0x86>
    31f2:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__fp_inf>
    31f6:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__fp_szero>
    31fa:	5f 3f       	cpi	r21, 0xFF	; 255
    31fc:	e4 f3       	brlt	.-8      	; 0x31f6 <__divsf3_pse+0x6c>
    31fe:	98 3e       	cpi	r25, 0xE8	; 232
    3200:	d4 f3       	brlt	.-12     	; 0x31f6 <__divsf3_pse+0x6c>
    3202:	86 95       	lsr	r24
    3204:	77 95       	ror	r23
    3206:	67 95       	ror	r22
    3208:	b7 95       	ror	r27
    320a:	f7 95       	ror	r31
    320c:	9f 5f       	subi	r25, 0xFF	; 255
    320e:	c9 f7       	brne	.-14     	; 0x3202 <__divsf3_pse+0x78>
    3210:	88 0f       	add	r24, r24
    3212:	91 1d       	adc	r25, r1
    3214:	96 95       	lsr	r25
    3216:	87 95       	ror	r24
    3218:	97 f9       	bld	r25, 7
    321a:	08 95       	ret
    321c:	e1 e0       	ldi	r30, 0x01	; 1
    321e:	66 0f       	add	r22, r22
    3220:	77 1f       	adc	r23, r23
    3222:	88 1f       	adc	r24, r24
    3224:	bb 1f       	adc	r27, r27
    3226:	62 17       	cp	r22, r18
    3228:	73 07       	cpc	r23, r19
    322a:	84 07       	cpc	r24, r20
    322c:	ba 07       	cpc	r27, r26
    322e:	20 f0       	brcs	.+8      	; 0x3238 <__divsf3_pse+0xae>
    3230:	62 1b       	sub	r22, r18
    3232:	73 0b       	sbc	r23, r19
    3234:	84 0b       	sbc	r24, r20
    3236:	ba 0b       	sbc	r27, r26
    3238:	ee 1f       	adc	r30, r30
    323a:	88 f7       	brcc	.-30     	; 0x321e <__divsf3_pse+0x94>
    323c:	e0 95       	com	r30
    323e:	08 95       	ret

00003240 <__fp_mpack>:
    3240:	9f 3f       	cpi	r25, 0xFF	; 255
    3242:	31 f0       	breq	.+12     	; 0x3250 <__fp_mpack_finite+0xc>

00003244 <__fp_mpack_finite>:
    3244:	91 50       	subi	r25, 0x01	; 1
    3246:	20 f4       	brcc	.+8      	; 0x3250 <__fp_mpack_finite+0xc>
    3248:	87 95       	ror	r24
    324a:	77 95       	ror	r23
    324c:	67 95       	ror	r22
    324e:	b7 95       	ror	r27
    3250:	88 0f       	add	r24, r24
    3252:	91 1d       	adc	r25, r1
    3254:	96 95       	lsr	r25
    3256:	87 95       	ror	r24
    3258:	97 f9       	bld	r25, 7
    325a:	08 95       	ret

0000325c <__divmodhi4>:
    325c:	97 fb       	bst	r25, 7
    325e:	07 2e       	mov	r0, r23
    3260:	16 f4       	brtc	.+4      	; 0x3266 <__divmodhi4+0xa>
    3262:	00 94       	com	r0
    3264:	07 d0       	rcall	.+14     	; 0x3274 <__divmodhi4_neg1>
    3266:	77 fd       	sbrc	r23, 7
    3268:	09 d0       	rcall	.+18     	; 0x327c <__divmodhi4_neg2>
    326a:	0e 94 75 19 	call	0x32ea	; 0x32ea <__udivmodhi4>
    326e:	07 fc       	sbrc	r0, 7
    3270:	05 d0       	rcall	.+10     	; 0x327c <__divmodhi4_neg2>
    3272:	3e f4       	brtc	.+14     	; 0x3282 <__divmodhi4_exit>

00003274 <__divmodhi4_neg1>:
    3274:	90 95       	com	r25
    3276:	81 95       	neg	r24
    3278:	9f 4f       	sbci	r25, 0xFF	; 255
    327a:	08 95       	ret

0000327c <__divmodhi4_neg2>:
    327c:	70 95       	com	r23
    327e:	61 95       	neg	r22
    3280:	7f 4f       	sbci	r23, 0xFF	; 255

00003282 <__divmodhi4_exit>:
    3282:	08 95       	ret

00003284 <__udivmodsi4>:
    3284:	a1 e2       	ldi	r26, 0x21	; 33
    3286:	1a 2e       	mov	r1, r26
    3288:	aa 1b       	sub	r26, r26
    328a:	bb 1b       	sub	r27, r27
    328c:	fd 01       	movw	r30, r26
    328e:	0d c0       	rjmp	.+26     	; 0x32aa <__udivmodsi4_ep>

00003290 <__udivmodsi4_loop>:
    3290:	aa 1f       	adc	r26, r26
    3292:	bb 1f       	adc	r27, r27
    3294:	ee 1f       	adc	r30, r30
    3296:	ff 1f       	adc	r31, r31
    3298:	a2 17       	cp	r26, r18
    329a:	b3 07       	cpc	r27, r19
    329c:	e4 07       	cpc	r30, r20
    329e:	f5 07       	cpc	r31, r21
    32a0:	20 f0       	brcs	.+8      	; 0x32aa <__udivmodsi4_ep>
    32a2:	a2 1b       	sub	r26, r18
    32a4:	b3 0b       	sbc	r27, r19
    32a6:	e4 0b       	sbc	r30, r20
    32a8:	f5 0b       	sbc	r31, r21

000032aa <__udivmodsi4_ep>:
    32aa:	66 1f       	adc	r22, r22
    32ac:	77 1f       	adc	r23, r23
    32ae:	88 1f       	adc	r24, r24
    32b0:	99 1f       	adc	r25, r25
    32b2:	1a 94       	dec	r1
    32b4:	69 f7       	brne	.-38     	; 0x3290 <__udivmodsi4_loop>
    32b6:	60 95       	com	r22
    32b8:	70 95       	com	r23
    32ba:	80 95       	com	r24
    32bc:	90 95       	com	r25
    32be:	9b 01       	movw	r18, r22
    32c0:	ac 01       	movw	r20, r24
    32c2:	bd 01       	movw	r22, r26
    32c4:	cf 01       	movw	r24, r30
    32c6:	08 95       	ret

000032c8 <__tablejump2__>:
    32c8:	ee 0f       	add	r30, r30
    32ca:	ff 1f       	adc	r31, r31
    32cc:	05 90       	lpm	r0, Z+
    32ce:	f4 91       	lpm	r31, Z
    32d0:	e0 2d       	mov	r30, r0
    32d2:	09 94       	ijmp

000032d4 <__muluhisi3>:
    32d4:	0e 94 89 19 	call	0x3312	; 0x3312 <__umulhisi3>
    32d8:	a5 9f       	mul	r26, r21
    32da:	90 0d       	add	r25, r0
    32dc:	b4 9f       	mul	r27, r20
    32de:	90 0d       	add	r25, r0
    32e0:	a4 9f       	mul	r26, r20
    32e2:	80 0d       	add	r24, r0
    32e4:	91 1d       	adc	r25, r1
    32e6:	11 24       	eor	r1, r1
    32e8:	08 95       	ret

000032ea <__udivmodhi4>:
    32ea:	aa 1b       	sub	r26, r26
    32ec:	bb 1b       	sub	r27, r27
    32ee:	51 e1       	ldi	r21, 0x11	; 17
    32f0:	07 c0       	rjmp	.+14     	; 0x3300 <__udivmodhi4_ep>

000032f2 <__udivmodhi4_loop>:
    32f2:	aa 1f       	adc	r26, r26
    32f4:	bb 1f       	adc	r27, r27
    32f6:	a6 17       	cp	r26, r22
    32f8:	b7 07       	cpc	r27, r23
    32fa:	10 f0       	brcs	.+4      	; 0x3300 <__udivmodhi4_ep>
    32fc:	a6 1b       	sub	r26, r22
    32fe:	b7 0b       	sbc	r27, r23

00003300 <__udivmodhi4_ep>:
    3300:	88 1f       	adc	r24, r24
    3302:	99 1f       	adc	r25, r25
    3304:	5a 95       	dec	r21
    3306:	a9 f7       	brne	.-22     	; 0x32f2 <__udivmodhi4_loop>
    3308:	80 95       	com	r24
    330a:	90 95       	com	r25
    330c:	bc 01       	movw	r22, r24
    330e:	cd 01       	movw	r24, r26
    3310:	08 95       	ret

00003312 <__umulhisi3>:
    3312:	a2 9f       	mul	r26, r18
    3314:	b0 01       	movw	r22, r0
    3316:	b3 9f       	mul	r27, r19
    3318:	c0 01       	movw	r24, r0
    331a:	a3 9f       	mul	r26, r19
    331c:	70 0d       	add	r23, r0
    331e:	81 1d       	adc	r24, r1
    3320:	11 24       	eor	r1, r1
    3322:	91 1d       	adc	r25, r1
    3324:	b2 9f       	mul	r27, r18
    3326:	70 0d       	add	r23, r0
    3328:	81 1d       	adc	r24, r1
    332a:	11 24       	eor	r1, r1
    332c:	91 1d       	adc	r25, r1
    332e:	08 95       	ret

00003330 <atoi>:
    3330:	fc 01       	movw	r30, r24
    3332:	88 27       	eor	r24, r24
    3334:	99 27       	eor	r25, r25
    3336:	e8 94       	clt
    3338:	21 91       	ld	r18, Z+
    333a:	20 32       	cpi	r18, 0x20	; 32
    333c:	e9 f3       	breq	.-6      	; 0x3338 <atoi+0x8>
    333e:	29 30       	cpi	r18, 0x09	; 9
    3340:	10 f0       	brcs	.+4      	; 0x3346 <atoi+0x16>
    3342:	2e 30       	cpi	r18, 0x0E	; 14
    3344:	c8 f3       	brcs	.-14     	; 0x3338 <atoi+0x8>
    3346:	2b 32       	cpi	r18, 0x2B	; 43
    3348:	41 f0       	breq	.+16     	; 0x335a <atoi+0x2a>
    334a:	2d 32       	cpi	r18, 0x2D	; 45
    334c:	39 f4       	brne	.+14     	; 0x335c <atoi+0x2c>
    334e:	68 94       	set
    3350:	04 c0       	rjmp	.+8      	; 0x335a <atoi+0x2a>
    3352:	0e 94 bf 19 	call	0x337e	; 0x337e <__mulhi_const_10>
    3356:	82 0f       	add	r24, r18
    3358:	91 1d       	adc	r25, r1
    335a:	21 91       	ld	r18, Z+
    335c:	20 53       	subi	r18, 0x30	; 48
    335e:	2a 30       	cpi	r18, 0x0A	; 10
    3360:	c0 f3       	brcs	.-16     	; 0x3352 <atoi+0x22>
    3362:	1e f4       	brtc	.+6      	; 0x336a <atoi+0x3a>
    3364:	90 95       	com	r25
    3366:	81 95       	neg	r24
    3368:	9f 4f       	sbci	r25, 0xFF	; 255
    336a:	08 95       	ret

0000336c <memcpy>:
    336c:	fb 01       	movw	r30, r22
    336e:	dc 01       	movw	r26, r24
    3370:	02 c0       	rjmp	.+4      	; 0x3376 <memcpy+0xa>
    3372:	01 90       	ld	r0, Z+
    3374:	0d 92       	st	X+, r0
    3376:	41 50       	subi	r20, 0x01	; 1
    3378:	50 40       	sbci	r21, 0x00	; 0
    337a:	d8 f7       	brcc	.-10     	; 0x3372 <memcpy+0x6>
    337c:	08 95       	ret

0000337e <__mulhi_const_10>:
    337e:	7a e0       	ldi	r23, 0x0A	; 10
    3380:	97 9f       	mul	r25, r23
    3382:	90 2d       	mov	r25, r0
    3384:	87 9f       	mul	r24, r23
    3386:	80 2d       	mov	r24, r0
    3388:	91 0d       	add	r25, r1
    338a:	11 24       	eor	r1, r1
    338c:	08 95       	ret

0000338e <snprintf>:
    338e:	ae e0       	ldi	r26, 0x0E	; 14
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	ed ec       	ldi	r30, 0xCD	; 205
    3394:	f9 e1       	ldi	r31, 0x19	; 25
    3396:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__prologue_saves__+0x1c>
    339a:	0d 89       	ldd	r16, Y+21	; 0x15
    339c:	1e 89       	ldd	r17, Y+22	; 0x16
    339e:	8f 89       	ldd	r24, Y+23	; 0x17
    33a0:	98 8d       	ldd	r25, Y+24	; 0x18
    33a2:	26 e0       	ldi	r18, 0x06	; 6
    33a4:	2c 83       	std	Y+4, r18	; 0x04
    33a6:	1a 83       	std	Y+2, r17	; 0x02
    33a8:	09 83       	std	Y+1, r16	; 0x01
    33aa:	97 ff       	sbrs	r25, 7
    33ac:	02 c0       	rjmp	.+4      	; 0x33b2 <snprintf+0x24>
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	90 e8       	ldi	r25, 0x80	; 128
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	9e 83       	std	Y+6, r25	; 0x06
    33b6:	8d 83       	std	Y+5, r24	; 0x05
    33b8:	ae 01       	movw	r20, r28
    33ba:	45 5e       	subi	r20, 0xE5	; 229
    33bc:	5f 4f       	sbci	r21, 0xFF	; 255
    33be:	69 8d       	ldd	r22, Y+25	; 0x19
    33c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33c2:	ce 01       	movw	r24, r28
    33c4:	01 96       	adiw	r24, 0x01	; 1
    33c6:	0e 94 19 1a 	call	0x3432	; 0x3432 <vfprintf>
    33ca:	4d 81       	ldd	r20, Y+5	; 0x05
    33cc:	5e 81       	ldd	r21, Y+6	; 0x06
    33ce:	57 fd       	sbrc	r21, 7
    33d0:	0a c0       	rjmp	.+20     	; 0x33e6 <snprintf+0x58>
    33d2:	2f 81       	ldd	r18, Y+7	; 0x07
    33d4:	38 85       	ldd	r19, Y+8	; 0x08
    33d6:	42 17       	cp	r20, r18
    33d8:	53 07       	cpc	r21, r19
    33da:	0c f4       	brge	.+2      	; 0x33de <snprintf+0x50>
    33dc:	9a 01       	movw	r18, r20
    33de:	f8 01       	movw	r30, r16
    33e0:	e2 0f       	add	r30, r18
    33e2:	f3 1f       	adc	r31, r19
    33e4:	10 82       	st	Z, r1
    33e6:	2e 96       	adiw	r28, 0x0e	; 14
    33e8:	e4 e0       	ldi	r30, 0x04	; 4
    33ea:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__epilogue_restores__+0x1c>

000033ee <sprintf>:
    33ee:	ae e0       	ldi	r26, 0x0E	; 14
    33f0:	b0 e0       	ldi	r27, 0x00	; 0
    33f2:	ed ef       	ldi	r30, 0xFD	; 253
    33f4:	f9 e1       	ldi	r31, 0x19	; 25
    33f6:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__prologue_saves__+0x1c>
    33fa:	0d 89       	ldd	r16, Y+21	; 0x15
    33fc:	1e 89       	ldd	r17, Y+22	; 0x16
    33fe:	86 e0       	ldi	r24, 0x06	; 6
    3400:	8c 83       	std	Y+4, r24	; 0x04
    3402:	1a 83       	std	Y+2, r17	; 0x02
    3404:	09 83       	std	Y+1, r16	; 0x01
    3406:	8f ef       	ldi	r24, 0xFF	; 255
    3408:	9f e7       	ldi	r25, 0x7F	; 127
    340a:	9e 83       	std	Y+6, r25	; 0x06
    340c:	8d 83       	std	Y+5, r24	; 0x05
    340e:	ae 01       	movw	r20, r28
    3410:	47 5e       	subi	r20, 0xE7	; 231
    3412:	5f 4f       	sbci	r21, 0xFF	; 255
    3414:	6f 89       	ldd	r22, Y+23	; 0x17
    3416:	78 8d       	ldd	r23, Y+24	; 0x18
    3418:	ce 01       	movw	r24, r28
    341a:	01 96       	adiw	r24, 0x01	; 1
    341c:	0e 94 19 1a 	call	0x3432	; 0x3432 <vfprintf>
    3420:	ef 81       	ldd	r30, Y+7	; 0x07
    3422:	f8 85       	ldd	r31, Y+8	; 0x08
    3424:	e0 0f       	add	r30, r16
    3426:	f1 1f       	adc	r31, r17
    3428:	10 82       	st	Z, r1
    342a:	2e 96       	adiw	r28, 0x0e	; 14
    342c:	e4 e0       	ldi	r30, 0x04	; 4
    342e:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__epilogue_restores__+0x1c>

00003432 <vfprintf>:
    3432:	ab e0       	ldi	r26, 0x0B	; 11
    3434:	b0 e0       	ldi	r27, 0x00	; 0
    3436:	ef e1       	ldi	r30, 0x1F	; 31
    3438:	fa e1       	ldi	r31, 0x1A	; 26
    343a:	0c 94 d9 1c 	jmp	0x39b2	; 0x39b2 <__prologue_saves__>
    343e:	6c 01       	movw	r12, r24
    3440:	7b 01       	movw	r14, r22
    3442:	8a 01       	movw	r16, r20
    3444:	fc 01       	movw	r30, r24
    3446:	17 82       	std	Z+7, r1	; 0x07
    3448:	16 82       	std	Z+6, r1	; 0x06
    344a:	83 81       	ldd	r24, Z+3	; 0x03
    344c:	81 ff       	sbrs	r24, 1
    344e:	cc c1       	rjmp	.+920    	; 0x37e8 <vfprintf+0x3b6>
    3450:	ce 01       	movw	r24, r28
    3452:	01 96       	adiw	r24, 0x01	; 1
    3454:	3c 01       	movw	r6, r24
    3456:	f6 01       	movw	r30, r12
    3458:	93 81       	ldd	r25, Z+3	; 0x03
    345a:	f7 01       	movw	r30, r14
    345c:	93 fd       	sbrc	r25, 3
    345e:	85 91       	lpm	r24, Z+
    3460:	93 ff       	sbrs	r25, 3
    3462:	81 91       	ld	r24, Z+
    3464:	7f 01       	movw	r14, r30
    3466:	88 23       	and	r24, r24
    3468:	09 f4       	brne	.+2      	; 0x346c <vfprintf+0x3a>
    346a:	ba c1       	rjmp	.+884    	; 0x37e0 <vfprintf+0x3ae>
    346c:	85 32       	cpi	r24, 0x25	; 37
    346e:	39 f4       	brne	.+14     	; 0x347e <vfprintf+0x4c>
    3470:	93 fd       	sbrc	r25, 3
    3472:	85 91       	lpm	r24, Z+
    3474:	93 ff       	sbrs	r25, 3
    3476:	81 91       	ld	r24, Z+
    3478:	7f 01       	movw	r14, r30
    347a:	85 32       	cpi	r24, 0x25	; 37
    347c:	29 f4       	brne	.+10     	; 0x3488 <vfprintf+0x56>
    347e:	b6 01       	movw	r22, r12
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	0e 94 10 1c 	call	0x3820	; 0x3820 <fputc>
    3486:	e7 cf       	rjmp	.-50     	; 0x3456 <vfprintf+0x24>
    3488:	91 2c       	mov	r9, r1
    348a:	21 2c       	mov	r2, r1
    348c:	31 2c       	mov	r3, r1
    348e:	ff e1       	ldi	r31, 0x1F	; 31
    3490:	f3 15       	cp	r31, r3
    3492:	d8 f0       	brcs	.+54     	; 0x34ca <vfprintf+0x98>
    3494:	8b 32       	cpi	r24, 0x2B	; 43
    3496:	79 f0       	breq	.+30     	; 0x34b6 <vfprintf+0x84>
    3498:	38 f4       	brcc	.+14     	; 0x34a8 <vfprintf+0x76>
    349a:	80 32       	cpi	r24, 0x20	; 32
    349c:	79 f0       	breq	.+30     	; 0x34bc <vfprintf+0x8a>
    349e:	83 32       	cpi	r24, 0x23	; 35
    34a0:	a1 f4       	brne	.+40     	; 0x34ca <vfprintf+0x98>
    34a2:	23 2d       	mov	r18, r3
    34a4:	20 61       	ori	r18, 0x10	; 16
    34a6:	1d c0       	rjmp	.+58     	; 0x34e2 <vfprintf+0xb0>
    34a8:	8d 32       	cpi	r24, 0x2D	; 45
    34aa:	61 f0       	breq	.+24     	; 0x34c4 <vfprintf+0x92>
    34ac:	80 33       	cpi	r24, 0x30	; 48
    34ae:	69 f4       	brne	.+26     	; 0x34ca <vfprintf+0x98>
    34b0:	23 2d       	mov	r18, r3
    34b2:	21 60       	ori	r18, 0x01	; 1
    34b4:	16 c0       	rjmp	.+44     	; 0x34e2 <vfprintf+0xb0>
    34b6:	83 2d       	mov	r24, r3
    34b8:	82 60       	ori	r24, 0x02	; 2
    34ba:	38 2e       	mov	r3, r24
    34bc:	e3 2d       	mov	r30, r3
    34be:	e4 60       	ori	r30, 0x04	; 4
    34c0:	3e 2e       	mov	r3, r30
    34c2:	2a c0       	rjmp	.+84     	; 0x3518 <vfprintf+0xe6>
    34c4:	f3 2d       	mov	r31, r3
    34c6:	f8 60       	ori	r31, 0x08	; 8
    34c8:	1d c0       	rjmp	.+58     	; 0x3504 <vfprintf+0xd2>
    34ca:	37 fc       	sbrc	r3, 7
    34cc:	2d c0       	rjmp	.+90     	; 0x3528 <vfprintf+0xf6>
    34ce:	20 ed       	ldi	r18, 0xD0	; 208
    34d0:	28 0f       	add	r18, r24
    34d2:	2a 30       	cpi	r18, 0x0A	; 10
    34d4:	40 f0       	brcs	.+16     	; 0x34e6 <vfprintf+0xb4>
    34d6:	8e 32       	cpi	r24, 0x2E	; 46
    34d8:	b9 f4       	brne	.+46     	; 0x3508 <vfprintf+0xd6>
    34da:	36 fc       	sbrc	r3, 6
    34dc:	81 c1       	rjmp	.+770    	; 0x37e0 <vfprintf+0x3ae>
    34de:	23 2d       	mov	r18, r3
    34e0:	20 64       	ori	r18, 0x40	; 64
    34e2:	32 2e       	mov	r3, r18
    34e4:	19 c0       	rjmp	.+50     	; 0x3518 <vfprintf+0xe6>
    34e6:	36 fe       	sbrs	r3, 6
    34e8:	06 c0       	rjmp	.+12     	; 0x34f6 <vfprintf+0xc4>
    34ea:	8a e0       	ldi	r24, 0x0A	; 10
    34ec:	98 9e       	mul	r9, r24
    34ee:	20 0d       	add	r18, r0
    34f0:	11 24       	eor	r1, r1
    34f2:	92 2e       	mov	r9, r18
    34f4:	11 c0       	rjmp	.+34     	; 0x3518 <vfprintf+0xe6>
    34f6:	ea e0       	ldi	r30, 0x0A	; 10
    34f8:	2e 9e       	mul	r2, r30
    34fa:	20 0d       	add	r18, r0
    34fc:	11 24       	eor	r1, r1
    34fe:	22 2e       	mov	r2, r18
    3500:	f3 2d       	mov	r31, r3
    3502:	f0 62       	ori	r31, 0x20	; 32
    3504:	3f 2e       	mov	r3, r31
    3506:	08 c0       	rjmp	.+16     	; 0x3518 <vfprintf+0xe6>
    3508:	8c 36       	cpi	r24, 0x6C	; 108
    350a:	21 f4       	brne	.+8      	; 0x3514 <vfprintf+0xe2>
    350c:	83 2d       	mov	r24, r3
    350e:	80 68       	ori	r24, 0x80	; 128
    3510:	38 2e       	mov	r3, r24
    3512:	02 c0       	rjmp	.+4      	; 0x3518 <vfprintf+0xe6>
    3514:	88 36       	cpi	r24, 0x68	; 104
    3516:	41 f4       	brne	.+16     	; 0x3528 <vfprintf+0xf6>
    3518:	f7 01       	movw	r30, r14
    351a:	93 fd       	sbrc	r25, 3
    351c:	85 91       	lpm	r24, Z+
    351e:	93 ff       	sbrs	r25, 3
    3520:	81 91       	ld	r24, Z+
    3522:	7f 01       	movw	r14, r30
    3524:	81 11       	cpse	r24, r1
    3526:	b3 cf       	rjmp	.-154    	; 0x348e <vfprintf+0x5c>
    3528:	98 2f       	mov	r25, r24
    352a:	9f 7d       	andi	r25, 0xDF	; 223
    352c:	95 54       	subi	r25, 0x45	; 69
    352e:	93 30       	cpi	r25, 0x03	; 3
    3530:	28 f4       	brcc	.+10     	; 0x353c <vfprintf+0x10a>
    3532:	0c 5f       	subi	r16, 0xFC	; 252
    3534:	1f 4f       	sbci	r17, 0xFF	; 255
    3536:	9f e3       	ldi	r25, 0x3F	; 63
    3538:	99 83       	std	Y+1, r25	; 0x01
    353a:	0d c0       	rjmp	.+26     	; 0x3556 <vfprintf+0x124>
    353c:	83 36       	cpi	r24, 0x63	; 99
    353e:	31 f0       	breq	.+12     	; 0x354c <vfprintf+0x11a>
    3540:	83 37       	cpi	r24, 0x73	; 115
    3542:	71 f0       	breq	.+28     	; 0x3560 <vfprintf+0x12e>
    3544:	83 35       	cpi	r24, 0x53	; 83
    3546:	09 f0       	breq	.+2      	; 0x354a <vfprintf+0x118>
    3548:	59 c0       	rjmp	.+178    	; 0x35fc <vfprintf+0x1ca>
    354a:	21 c0       	rjmp	.+66     	; 0x358e <vfprintf+0x15c>
    354c:	f8 01       	movw	r30, r16
    354e:	80 81       	ld	r24, Z
    3550:	89 83       	std	Y+1, r24	; 0x01
    3552:	0e 5f       	subi	r16, 0xFE	; 254
    3554:	1f 4f       	sbci	r17, 0xFF	; 255
    3556:	88 24       	eor	r8, r8
    3558:	83 94       	inc	r8
    355a:	91 2c       	mov	r9, r1
    355c:	53 01       	movw	r10, r6
    355e:	13 c0       	rjmp	.+38     	; 0x3586 <vfprintf+0x154>
    3560:	28 01       	movw	r4, r16
    3562:	f2 e0       	ldi	r31, 0x02	; 2
    3564:	4f 0e       	add	r4, r31
    3566:	51 1c       	adc	r5, r1
    3568:	f8 01       	movw	r30, r16
    356a:	a0 80       	ld	r10, Z
    356c:	b1 80       	ldd	r11, Z+1	; 0x01
    356e:	36 fe       	sbrs	r3, 6
    3570:	03 c0       	rjmp	.+6      	; 0x3578 <vfprintf+0x146>
    3572:	69 2d       	mov	r22, r9
    3574:	70 e0       	ldi	r23, 0x00	; 0
    3576:	02 c0       	rjmp	.+4      	; 0x357c <vfprintf+0x14a>
    3578:	6f ef       	ldi	r22, 0xFF	; 255
    357a:	7f ef       	ldi	r23, 0xFF	; 255
    357c:	c5 01       	movw	r24, r10
    357e:	0e 94 05 1c 	call	0x380a	; 0x380a <strnlen>
    3582:	4c 01       	movw	r8, r24
    3584:	82 01       	movw	r16, r4
    3586:	f3 2d       	mov	r31, r3
    3588:	ff 77       	andi	r31, 0x7F	; 127
    358a:	3f 2e       	mov	r3, r31
    358c:	16 c0       	rjmp	.+44     	; 0x35ba <vfprintf+0x188>
    358e:	28 01       	movw	r4, r16
    3590:	22 e0       	ldi	r18, 0x02	; 2
    3592:	42 0e       	add	r4, r18
    3594:	51 1c       	adc	r5, r1
    3596:	f8 01       	movw	r30, r16
    3598:	a0 80       	ld	r10, Z
    359a:	b1 80       	ldd	r11, Z+1	; 0x01
    359c:	36 fe       	sbrs	r3, 6
    359e:	03 c0       	rjmp	.+6      	; 0x35a6 <vfprintf+0x174>
    35a0:	69 2d       	mov	r22, r9
    35a2:	70 e0       	ldi	r23, 0x00	; 0
    35a4:	02 c0       	rjmp	.+4      	; 0x35aa <vfprintf+0x178>
    35a6:	6f ef       	ldi	r22, 0xFF	; 255
    35a8:	7f ef       	ldi	r23, 0xFF	; 255
    35aa:	c5 01       	movw	r24, r10
    35ac:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <strnlen_P>
    35b0:	4c 01       	movw	r8, r24
    35b2:	f3 2d       	mov	r31, r3
    35b4:	f0 68       	ori	r31, 0x80	; 128
    35b6:	3f 2e       	mov	r3, r31
    35b8:	82 01       	movw	r16, r4
    35ba:	33 fc       	sbrc	r3, 3
    35bc:	1b c0       	rjmp	.+54     	; 0x35f4 <vfprintf+0x1c2>
    35be:	82 2d       	mov	r24, r2
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	88 16       	cp	r8, r24
    35c4:	99 06       	cpc	r9, r25
    35c6:	b0 f4       	brcc	.+44     	; 0x35f4 <vfprintf+0x1c2>
    35c8:	b6 01       	movw	r22, r12
    35ca:	80 e2       	ldi	r24, 0x20	; 32
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	0e 94 10 1c 	call	0x3820	; 0x3820 <fputc>
    35d2:	2a 94       	dec	r2
    35d4:	f4 cf       	rjmp	.-24     	; 0x35be <vfprintf+0x18c>
    35d6:	f5 01       	movw	r30, r10
    35d8:	37 fc       	sbrc	r3, 7
    35da:	85 91       	lpm	r24, Z+
    35dc:	37 fe       	sbrs	r3, 7
    35de:	81 91       	ld	r24, Z+
    35e0:	5f 01       	movw	r10, r30
    35e2:	b6 01       	movw	r22, r12
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	0e 94 10 1c 	call	0x3820	; 0x3820 <fputc>
    35ea:	21 10       	cpse	r2, r1
    35ec:	2a 94       	dec	r2
    35ee:	21 e0       	ldi	r18, 0x01	; 1
    35f0:	82 1a       	sub	r8, r18
    35f2:	91 08       	sbc	r9, r1
    35f4:	81 14       	cp	r8, r1
    35f6:	91 04       	cpc	r9, r1
    35f8:	71 f7       	brne	.-36     	; 0x35d6 <vfprintf+0x1a4>
    35fa:	e8 c0       	rjmp	.+464    	; 0x37cc <vfprintf+0x39a>
    35fc:	84 36       	cpi	r24, 0x64	; 100
    35fe:	11 f0       	breq	.+4      	; 0x3604 <vfprintf+0x1d2>
    3600:	89 36       	cpi	r24, 0x69	; 105
    3602:	41 f5       	brne	.+80     	; 0x3654 <vfprintf+0x222>
    3604:	f8 01       	movw	r30, r16
    3606:	37 fe       	sbrs	r3, 7
    3608:	07 c0       	rjmp	.+14     	; 0x3618 <vfprintf+0x1e6>
    360a:	60 81       	ld	r22, Z
    360c:	71 81       	ldd	r23, Z+1	; 0x01
    360e:	82 81       	ldd	r24, Z+2	; 0x02
    3610:	93 81       	ldd	r25, Z+3	; 0x03
    3612:	0c 5f       	subi	r16, 0xFC	; 252
    3614:	1f 4f       	sbci	r17, 0xFF	; 255
    3616:	08 c0       	rjmp	.+16     	; 0x3628 <vfprintf+0x1f6>
    3618:	60 81       	ld	r22, Z
    361a:	71 81       	ldd	r23, Z+1	; 0x01
    361c:	07 2e       	mov	r0, r23
    361e:	00 0c       	add	r0, r0
    3620:	88 0b       	sbc	r24, r24
    3622:	99 0b       	sbc	r25, r25
    3624:	0e 5f       	subi	r16, 0xFE	; 254
    3626:	1f 4f       	sbci	r17, 0xFF	; 255
    3628:	f3 2d       	mov	r31, r3
    362a:	ff 76       	andi	r31, 0x6F	; 111
    362c:	3f 2e       	mov	r3, r31
    362e:	97 ff       	sbrs	r25, 7
    3630:	09 c0       	rjmp	.+18     	; 0x3644 <vfprintf+0x212>
    3632:	90 95       	com	r25
    3634:	80 95       	com	r24
    3636:	70 95       	com	r23
    3638:	61 95       	neg	r22
    363a:	7f 4f       	sbci	r23, 0xFF	; 255
    363c:	8f 4f       	sbci	r24, 0xFF	; 255
    363e:	9f 4f       	sbci	r25, 0xFF	; 255
    3640:	f0 68       	ori	r31, 0x80	; 128
    3642:	3f 2e       	mov	r3, r31
    3644:	2a e0       	ldi	r18, 0x0A	; 10
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	a3 01       	movw	r20, r6
    364a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__ultoa_invert>
    364e:	88 2e       	mov	r8, r24
    3650:	86 18       	sub	r8, r6
    3652:	45 c0       	rjmp	.+138    	; 0x36de <vfprintf+0x2ac>
    3654:	85 37       	cpi	r24, 0x75	; 117
    3656:	31 f4       	brne	.+12     	; 0x3664 <vfprintf+0x232>
    3658:	23 2d       	mov	r18, r3
    365a:	2f 7e       	andi	r18, 0xEF	; 239
    365c:	b2 2e       	mov	r11, r18
    365e:	2a e0       	ldi	r18, 0x0A	; 10
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	25 c0       	rjmp	.+74     	; 0x36ae <vfprintf+0x27c>
    3664:	93 2d       	mov	r25, r3
    3666:	99 7f       	andi	r25, 0xF9	; 249
    3668:	b9 2e       	mov	r11, r25
    366a:	8f 36       	cpi	r24, 0x6F	; 111
    366c:	c1 f0       	breq	.+48     	; 0x369e <vfprintf+0x26c>
    366e:	18 f4       	brcc	.+6      	; 0x3676 <vfprintf+0x244>
    3670:	88 35       	cpi	r24, 0x58	; 88
    3672:	79 f0       	breq	.+30     	; 0x3692 <vfprintf+0x260>
    3674:	b5 c0       	rjmp	.+362    	; 0x37e0 <vfprintf+0x3ae>
    3676:	80 37       	cpi	r24, 0x70	; 112
    3678:	19 f0       	breq	.+6      	; 0x3680 <vfprintf+0x24e>
    367a:	88 37       	cpi	r24, 0x78	; 120
    367c:	21 f0       	breq	.+8      	; 0x3686 <vfprintf+0x254>
    367e:	b0 c0       	rjmp	.+352    	; 0x37e0 <vfprintf+0x3ae>
    3680:	e9 2f       	mov	r30, r25
    3682:	e0 61       	ori	r30, 0x10	; 16
    3684:	be 2e       	mov	r11, r30
    3686:	b4 fe       	sbrs	r11, 4
    3688:	0d c0       	rjmp	.+26     	; 0x36a4 <vfprintf+0x272>
    368a:	fb 2d       	mov	r31, r11
    368c:	f4 60       	ori	r31, 0x04	; 4
    368e:	bf 2e       	mov	r11, r31
    3690:	09 c0       	rjmp	.+18     	; 0x36a4 <vfprintf+0x272>
    3692:	34 fe       	sbrs	r3, 4
    3694:	0a c0       	rjmp	.+20     	; 0x36aa <vfprintf+0x278>
    3696:	29 2f       	mov	r18, r25
    3698:	26 60       	ori	r18, 0x06	; 6
    369a:	b2 2e       	mov	r11, r18
    369c:	06 c0       	rjmp	.+12     	; 0x36aa <vfprintf+0x278>
    369e:	28 e0       	ldi	r18, 0x08	; 8
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	05 c0       	rjmp	.+10     	; 0x36ae <vfprintf+0x27c>
    36a4:	20 e1       	ldi	r18, 0x10	; 16
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	02 c0       	rjmp	.+4      	; 0x36ae <vfprintf+0x27c>
    36aa:	20 e1       	ldi	r18, 0x10	; 16
    36ac:	32 e0       	ldi	r19, 0x02	; 2
    36ae:	f8 01       	movw	r30, r16
    36b0:	b7 fe       	sbrs	r11, 7
    36b2:	07 c0       	rjmp	.+14     	; 0x36c2 <vfprintf+0x290>
    36b4:	60 81       	ld	r22, Z
    36b6:	71 81       	ldd	r23, Z+1	; 0x01
    36b8:	82 81       	ldd	r24, Z+2	; 0x02
    36ba:	93 81       	ldd	r25, Z+3	; 0x03
    36bc:	0c 5f       	subi	r16, 0xFC	; 252
    36be:	1f 4f       	sbci	r17, 0xFF	; 255
    36c0:	06 c0       	rjmp	.+12     	; 0x36ce <vfprintf+0x29c>
    36c2:	60 81       	ld	r22, Z
    36c4:	71 81       	ldd	r23, Z+1	; 0x01
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	0e 5f       	subi	r16, 0xFE	; 254
    36cc:	1f 4f       	sbci	r17, 0xFF	; 255
    36ce:	a3 01       	movw	r20, r6
    36d0:	0e 94 4c 1c 	call	0x3898	; 0x3898 <__ultoa_invert>
    36d4:	88 2e       	mov	r8, r24
    36d6:	86 18       	sub	r8, r6
    36d8:	fb 2d       	mov	r31, r11
    36da:	ff 77       	andi	r31, 0x7F	; 127
    36dc:	3f 2e       	mov	r3, r31
    36de:	36 fe       	sbrs	r3, 6
    36e0:	0d c0       	rjmp	.+26     	; 0x36fc <vfprintf+0x2ca>
    36e2:	23 2d       	mov	r18, r3
    36e4:	2e 7f       	andi	r18, 0xFE	; 254
    36e6:	a2 2e       	mov	r10, r18
    36e8:	89 14       	cp	r8, r9
    36ea:	58 f4       	brcc	.+22     	; 0x3702 <vfprintf+0x2d0>
    36ec:	34 fe       	sbrs	r3, 4
    36ee:	0b c0       	rjmp	.+22     	; 0x3706 <vfprintf+0x2d4>
    36f0:	32 fc       	sbrc	r3, 2
    36f2:	09 c0       	rjmp	.+18     	; 0x3706 <vfprintf+0x2d4>
    36f4:	83 2d       	mov	r24, r3
    36f6:	8e 7e       	andi	r24, 0xEE	; 238
    36f8:	a8 2e       	mov	r10, r24
    36fa:	05 c0       	rjmp	.+10     	; 0x3706 <vfprintf+0x2d4>
    36fc:	b8 2c       	mov	r11, r8
    36fe:	a3 2c       	mov	r10, r3
    3700:	03 c0       	rjmp	.+6      	; 0x3708 <vfprintf+0x2d6>
    3702:	b8 2c       	mov	r11, r8
    3704:	01 c0       	rjmp	.+2      	; 0x3708 <vfprintf+0x2d6>
    3706:	b9 2c       	mov	r11, r9
    3708:	a4 fe       	sbrs	r10, 4
    370a:	0f c0       	rjmp	.+30     	; 0x372a <vfprintf+0x2f8>
    370c:	fe 01       	movw	r30, r28
    370e:	e8 0d       	add	r30, r8
    3710:	f1 1d       	adc	r31, r1
    3712:	80 81       	ld	r24, Z
    3714:	80 33       	cpi	r24, 0x30	; 48
    3716:	21 f4       	brne	.+8      	; 0x3720 <vfprintf+0x2ee>
    3718:	9a 2d       	mov	r25, r10
    371a:	99 7e       	andi	r25, 0xE9	; 233
    371c:	a9 2e       	mov	r10, r25
    371e:	09 c0       	rjmp	.+18     	; 0x3732 <vfprintf+0x300>
    3720:	a2 fe       	sbrs	r10, 2
    3722:	06 c0       	rjmp	.+12     	; 0x3730 <vfprintf+0x2fe>
    3724:	b3 94       	inc	r11
    3726:	b3 94       	inc	r11
    3728:	04 c0       	rjmp	.+8      	; 0x3732 <vfprintf+0x300>
    372a:	8a 2d       	mov	r24, r10
    372c:	86 78       	andi	r24, 0x86	; 134
    372e:	09 f0       	breq	.+2      	; 0x3732 <vfprintf+0x300>
    3730:	b3 94       	inc	r11
    3732:	a3 fc       	sbrc	r10, 3
    3734:	11 c0       	rjmp	.+34     	; 0x3758 <vfprintf+0x326>
    3736:	a0 fe       	sbrs	r10, 0
    3738:	06 c0       	rjmp	.+12     	; 0x3746 <vfprintf+0x314>
    373a:	b2 14       	cp	r11, r2
    373c:	88 f4       	brcc	.+34     	; 0x3760 <vfprintf+0x32e>
    373e:	28 0c       	add	r2, r8
    3740:	92 2c       	mov	r9, r2
    3742:	9b 18       	sub	r9, r11
    3744:	0e c0       	rjmp	.+28     	; 0x3762 <vfprintf+0x330>
    3746:	b2 14       	cp	r11, r2
    3748:	60 f4       	brcc	.+24     	; 0x3762 <vfprintf+0x330>
    374a:	b6 01       	movw	r22, r12
    374c:	80 e2       	ldi	r24, 0x20	; 32
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	0e 94 10 1c 	call	0x3820	; 0x3820 <fputc>
    3754:	b3 94       	inc	r11
    3756:	f7 cf       	rjmp	.-18     	; 0x3746 <vfprintf+0x314>
    3758:	b2 14       	cp	r11, r2
    375a:	18 f4       	brcc	.+6      	; 0x3762 <vfprintf+0x330>
    375c:	2b 18       	sub	r2, r11
    375e:	02 c0       	rjmp	.+4      	; 0x3764 <vfprintf+0x332>
    3760:	98 2c       	mov	r9, r8
    3762:	21 2c       	mov	r2, r1
    3764:	a4 fe       	sbrs	r10, 4
    3766:	10 c0       	rjmp	.+32     	; 0x3788 <vfprintf+0x356>
    3768:	b6 01       	movw	r22, r12
    376a:	80 e3       	ldi	r24, 0x30	; 48
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	0e 94 10 1c 	call	0x3820	; 0x3820 <fputc>
    3772:	a2 fe       	sbrs	r10, 2
    3774:	17 c0       	rjmp	.+46     	; 0x37a4 <vfprintf+0x372>
    3776:	a1 fc       	sbrc	r10, 1
    3778:	03 c0       	rjmp	.+6      	; 0x3780 <vfprintf+0x34e>
    377a:	88 e7       	ldi	r24, 0x78	; 120
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	02 c0       	rjmp	.+4      	; 0x3784 <vfprintf+0x352>
    3780:	88 e5       	ldi	r24, 0x58	; 88
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	b6 01       	movw	r22, r12
    3786:	0c c0       	rjmp	.+24     	; 0x37a0 <vfprintf+0x36e>
    3788:	8a 2d       	mov	r24, r10
    378a:	86 78       	andi	r24, 0x86	; 134
    378c:	59 f0       	breq	.+22     	; 0x37a4 <vfprintf+0x372>
    378e:	a1 fe       	sbrs	r10, 1
    3790:	02 c0       	rjmp	.+4      	; 0x3796 <vfprintf+0x364>
    3792:	8b e2       	ldi	r24, 0x2B	; 43
    3794:	01 c0       	rjmp	.+2      	; 0x3798 <vfprintf+0x366>
    3796:	80 e2       	ldi	r24, 0x20	; 32
    3798:	a7 fc       	sbrc	r10, 7
    379a:	8d e2       	ldi	r24, 0x2D	; 45
    379c:	b6 01       	movw	r22, r12
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	0e 94 10 1c 	call	0x3820	; 0x3820 <fputc>
    37a4:	89 14       	cp	r8, r9
    37a6:	38 f4       	brcc	.+14     	; 0x37b6 <vfprintf+0x384>
    37a8:	b6 01       	movw	r22, r12
    37aa:	80 e3       	ldi	r24, 0x30	; 48
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	0e 94 10 1c 	call	0x3820	; 0x3820 <fputc>
    37b2:	9a 94       	dec	r9
    37b4:	f7 cf       	rjmp	.-18     	; 0x37a4 <vfprintf+0x372>
    37b6:	8a 94       	dec	r8
    37b8:	f3 01       	movw	r30, r6
    37ba:	e8 0d       	add	r30, r8
    37bc:	f1 1d       	adc	r31, r1
    37be:	80 81       	ld	r24, Z
    37c0:	b6 01       	movw	r22, r12
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	0e 94 10 1c 	call	0x3820	; 0x3820 <fputc>
    37c8:	81 10       	cpse	r8, r1
    37ca:	f5 cf       	rjmp	.-22     	; 0x37b6 <vfprintf+0x384>
    37cc:	22 20       	and	r2, r2
    37ce:	09 f4       	brne	.+2      	; 0x37d2 <vfprintf+0x3a0>
    37d0:	42 ce       	rjmp	.-892    	; 0x3456 <vfprintf+0x24>
    37d2:	b6 01       	movw	r22, r12
    37d4:	80 e2       	ldi	r24, 0x20	; 32
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	0e 94 10 1c 	call	0x3820	; 0x3820 <fputc>
    37dc:	2a 94       	dec	r2
    37de:	f6 cf       	rjmp	.-20     	; 0x37cc <vfprintf+0x39a>
    37e0:	f6 01       	movw	r30, r12
    37e2:	86 81       	ldd	r24, Z+6	; 0x06
    37e4:	97 81       	ldd	r25, Z+7	; 0x07
    37e6:	02 c0       	rjmp	.+4      	; 0x37ec <vfprintf+0x3ba>
    37e8:	8f ef       	ldi	r24, 0xFF	; 255
    37ea:	9f ef       	ldi	r25, 0xFF	; 255
    37ec:	2b 96       	adiw	r28, 0x0b	; 11
    37ee:	e2 e1       	ldi	r30, 0x12	; 18
    37f0:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <__epilogue_restores__>

000037f4 <strnlen_P>:
    37f4:	fc 01       	movw	r30, r24
    37f6:	05 90       	lpm	r0, Z+
    37f8:	61 50       	subi	r22, 0x01	; 1
    37fa:	70 40       	sbci	r23, 0x00	; 0
    37fc:	01 10       	cpse	r0, r1
    37fe:	d8 f7       	brcc	.-10     	; 0x37f6 <strnlen_P+0x2>
    3800:	80 95       	com	r24
    3802:	90 95       	com	r25
    3804:	8e 0f       	add	r24, r30
    3806:	9f 1f       	adc	r25, r31
    3808:	08 95       	ret

0000380a <strnlen>:
    380a:	fc 01       	movw	r30, r24
    380c:	61 50       	subi	r22, 0x01	; 1
    380e:	70 40       	sbci	r23, 0x00	; 0
    3810:	01 90       	ld	r0, Z+
    3812:	01 10       	cpse	r0, r1
    3814:	d8 f7       	brcc	.-10     	; 0x380c <strnlen+0x2>
    3816:	80 95       	com	r24
    3818:	90 95       	com	r25
    381a:	8e 0f       	add	r24, r30
    381c:	9f 1f       	adc	r25, r31
    381e:	08 95       	ret

00003820 <fputc>:
    3820:	0f 93       	push	r16
    3822:	1f 93       	push	r17
    3824:	cf 93       	push	r28
    3826:	df 93       	push	r29
    3828:	fb 01       	movw	r30, r22
    382a:	23 81       	ldd	r18, Z+3	; 0x03
    382c:	21 fd       	sbrc	r18, 1
    382e:	03 c0       	rjmp	.+6      	; 0x3836 <fputc+0x16>
    3830:	8f ef       	ldi	r24, 0xFF	; 255
    3832:	9f ef       	ldi	r25, 0xFF	; 255
    3834:	2c c0       	rjmp	.+88     	; 0x388e <fputc+0x6e>
    3836:	22 ff       	sbrs	r18, 2
    3838:	16 c0       	rjmp	.+44     	; 0x3866 <fputc+0x46>
    383a:	46 81       	ldd	r20, Z+6	; 0x06
    383c:	57 81       	ldd	r21, Z+7	; 0x07
    383e:	24 81       	ldd	r18, Z+4	; 0x04
    3840:	35 81       	ldd	r19, Z+5	; 0x05
    3842:	42 17       	cp	r20, r18
    3844:	53 07       	cpc	r21, r19
    3846:	44 f4       	brge	.+16     	; 0x3858 <fputc+0x38>
    3848:	a0 81       	ld	r26, Z
    384a:	b1 81       	ldd	r27, Z+1	; 0x01
    384c:	9d 01       	movw	r18, r26
    384e:	2f 5f       	subi	r18, 0xFF	; 255
    3850:	3f 4f       	sbci	r19, 0xFF	; 255
    3852:	31 83       	std	Z+1, r19	; 0x01
    3854:	20 83       	st	Z, r18
    3856:	8c 93       	st	X, r24
    3858:	26 81       	ldd	r18, Z+6	; 0x06
    385a:	37 81       	ldd	r19, Z+7	; 0x07
    385c:	2f 5f       	subi	r18, 0xFF	; 255
    385e:	3f 4f       	sbci	r19, 0xFF	; 255
    3860:	37 83       	std	Z+7, r19	; 0x07
    3862:	26 83       	std	Z+6, r18	; 0x06
    3864:	14 c0       	rjmp	.+40     	; 0x388e <fputc+0x6e>
    3866:	8b 01       	movw	r16, r22
    3868:	ec 01       	movw	r28, r24
    386a:	fb 01       	movw	r30, r22
    386c:	00 84       	ldd	r0, Z+8	; 0x08
    386e:	f1 85       	ldd	r31, Z+9	; 0x09
    3870:	e0 2d       	mov	r30, r0
    3872:	09 95       	icall
    3874:	89 2b       	or	r24, r25
    3876:	e1 f6       	brne	.-72     	; 0x3830 <fputc+0x10>
    3878:	d8 01       	movw	r26, r16
    387a:	16 96       	adiw	r26, 0x06	; 6
    387c:	8d 91       	ld	r24, X+
    387e:	9c 91       	ld	r25, X
    3880:	17 97       	sbiw	r26, 0x07	; 7
    3882:	01 96       	adiw	r24, 0x01	; 1
    3884:	17 96       	adiw	r26, 0x07	; 7
    3886:	9c 93       	st	X, r25
    3888:	8e 93       	st	-X, r24
    388a:	16 97       	sbiw	r26, 0x06	; 6
    388c:	ce 01       	movw	r24, r28
    388e:	df 91       	pop	r29
    3890:	cf 91       	pop	r28
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
    3896:	08 95       	ret

00003898 <__ultoa_invert>:
    3898:	fa 01       	movw	r30, r20
    389a:	aa 27       	eor	r26, r26
    389c:	28 30       	cpi	r18, 0x08	; 8
    389e:	51 f1       	breq	.+84     	; 0x38f4 <__ultoa_invert+0x5c>
    38a0:	20 31       	cpi	r18, 0x10	; 16
    38a2:	81 f1       	breq	.+96     	; 0x3904 <__ultoa_invert+0x6c>
    38a4:	e8 94       	clt
    38a6:	6f 93       	push	r22
    38a8:	6e 7f       	andi	r22, 0xFE	; 254
    38aa:	6e 5f       	subi	r22, 0xFE	; 254
    38ac:	7f 4f       	sbci	r23, 0xFF	; 255
    38ae:	8f 4f       	sbci	r24, 0xFF	; 255
    38b0:	9f 4f       	sbci	r25, 0xFF	; 255
    38b2:	af 4f       	sbci	r26, 0xFF	; 255
    38b4:	b1 e0       	ldi	r27, 0x01	; 1
    38b6:	3e d0       	rcall	.+124    	; 0x3934 <__ultoa_invert+0x9c>
    38b8:	b4 e0       	ldi	r27, 0x04	; 4
    38ba:	3c d0       	rcall	.+120    	; 0x3934 <__ultoa_invert+0x9c>
    38bc:	67 0f       	add	r22, r23
    38be:	78 1f       	adc	r23, r24
    38c0:	89 1f       	adc	r24, r25
    38c2:	9a 1f       	adc	r25, r26
    38c4:	a1 1d       	adc	r26, r1
    38c6:	68 0f       	add	r22, r24
    38c8:	79 1f       	adc	r23, r25
    38ca:	8a 1f       	adc	r24, r26
    38cc:	91 1d       	adc	r25, r1
    38ce:	a1 1d       	adc	r26, r1
    38d0:	6a 0f       	add	r22, r26
    38d2:	71 1d       	adc	r23, r1
    38d4:	81 1d       	adc	r24, r1
    38d6:	91 1d       	adc	r25, r1
    38d8:	a1 1d       	adc	r26, r1
    38da:	20 d0       	rcall	.+64     	; 0x391c <__ultoa_invert+0x84>
    38dc:	09 f4       	brne	.+2      	; 0x38e0 <__ultoa_invert+0x48>
    38de:	68 94       	set
    38e0:	3f 91       	pop	r19
    38e2:	2a e0       	ldi	r18, 0x0A	; 10
    38e4:	26 9f       	mul	r18, r22
    38e6:	11 24       	eor	r1, r1
    38e8:	30 19       	sub	r19, r0
    38ea:	30 5d       	subi	r19, 0xD0	; 208
    38ec:	31 93       	st	Z+, r19
    38ee:	de f6       	brtc	.-74     	; 0x38a6 <__ultoa_invert+0xe>
    38f0:	cf 01       	movw	r24, r30
    38f2:	08 95       	ret
    38f4:	46 2f       	mov	r20, r22
    38f6:	47 70       	andi	r20, 0x07	; 7
    38f8:	40 5d       	subi	r20, 0xD0	; 208
    38fa:	41 93       	st	Z+, r20
    38fc:	b3 e0       	ldi	r27, 0x03	; 3
    38fe:	0f d0       	rcall	.+30     	; 0x391e <__ultoa_invert+0x86>
    3900:	c9 f7       	brne	.-14     	; 0x38f4 <__ultoa_invert+0x5c>
    3902:	f6 cf       	rjmp	.-20     	; 0x38f0 <__ultoa_invert+0x58>
    3904:	46 2f       	mov	r20, r22
    3906:	4f 70       	andi	r20, 0x0F	; 15
    3908:	40 5d       	subi	r20, 0xD0	; 208
    390a:	4a 33       	cpi	r20, 0x3A	; 58
    390c:	18 f0       	brcs	.+6      	; 0x3914 <__ultoa_invert+0x7c>
    390e:	49 5d       	subi	r20, 0xD9	; 217
    3910:	31 fd       	sbrc	r19, 1
    3912:	40 52       	subi	r20, 0x20	; 32
    3914:	41 93       	st	Z+, r20
    3916:	02 d0       	rcall	.+4      	; 0x391c <__ultoa_invert+0x84>
    3918:	a9 f7       	brne	.-22     	; 0x3904 <__ultoa_invert+0x6c>
    391a:	ea cf       	rjmp	.-44     	; 0x38f0 <__ultoa_invert+0x58>
    391c:	b4 e0       	ldi	r27, 0x04	; 4
    391e:	a6 95       	lsr	r26
    3920:	97 95       	ror	r25
    3922:	87 95       	ror	r24
    3924:	77 95       	ror	r23
    3926:	67 95       	ror	r22
    3928:	ba 95       	dec	r27
    392a:	c9 f7       	brne	.-14     	; 0x391e <__ultoa_invert+0x86>
    392c:	00 97       	sbiw	r24, 0x00	; 0
    392e:	61 05       	cpc	r22, r1
    3930:	71 05       	cpc	r23, r1
    3932:	08 95       	ret
    3934:	9b 01       	movw	r18, r22
    3936:	ac 01       	movw	r20, r24
    3938:	0a 2e       	mov	r0, r26
    393a:	06 94       	lsr	r0
    393c:	57 95       	ror	r21
    393e:	47 95       	ror	r20
    3940:	37 95       	ror	r19
    3942:	27 95       	ror	r18
    3944:	ba 95       	dec	r27
    3946:	c9 f7       	brne	.-14     	; 0x393a <__ultoa_invert+0xa2>
    3948:	62 0f       	add	r22, r18
    394a:	73 1f       	adc	r23, r19
    394c:	84 1f       	adc	r24, r20
    394e:	95 1f       	adc	r25, r21
    3950:	a0 1d       	adc	r26, r0
    3952:	08 95       	ret

00003954 <eeprom_read_block>:
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22

00003958 <eeprom_read_blraw>:
    3958:	fc 01       	movw	r30, r24
    395a:	e1 99       	sbic	0x1c, 1	; 28
    395c:	fe cf       	rjmp	.-4      	; 0x395a <eeprom_read_blraw+0x2>
    395e:	06 c0       	rjmp	.+12     	; 0x396c <eeprom_read_blraw+0x14>
    3960:	ff bb       	out	0x1f, r31	; 31
    3962:	ee bb       	out	0x1e, r30	; 30
    3964:	e0 9a       	sbi	0x1c, 0	; 28
    3966:	31 96       	adiw	r30, 0x01	; 1
    3968:	0d b2       	in	r0, 0x1d	; 29
    396a:	0d 92       	st	X+, r0
    396c:	41 50       	subi	r20, 0x01	; 1
    396e:	50 40       	sbci	r21, 0x00	; 0
    3970:	b8 f7       	brcc	.-18     	; 0x3960 <eeprom_read_blraw+0x8>
    3972:	08 95       	ret

00003974 <eeprom_read_byte>:
    3974:	e1 99       	sbic	0x1c, 1	; 28
    3976:	fe cf       	rjmp	.-4      	; 0x3974 <eeprom_read_byte>
    3978:	9f bb       	out	0x1f, r25	; 31
    397a:	8e bb       	out	0x1e, r24	; 30
    397c:	e0 9a       	sbi	0x1c, 0	; 28
    397e:	99 27       	eor	r25, r25
    3980:	8d b3       	in	r24, 0x1d	; 29
    3982:	08 95       	ret

00003984 <eeprom_write_block>:
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	03 c0       	rjmp	.+6      	; 0x3990 <eeprom_write_block+0xc>
    398a:	2d 91       	ld	r18, X+
    398c:	0e 94 cd 1c 	call	0x399a	; 0x399a <eeprom_write_r18>
    3990:	41 50       	subi	r20, 0x01	; 1
    3992:	50 40       	sbci	r21, 0x00	; 0
    3994:	d0 f7       	brcc	.-12     	; 0x398a <eeprom_write_block+0x6>
    3996:	08 95       	ret

00003998 <eeprom_write_byte>:
    3998:	26 2f       	mov	r18, r22

0000399a <eeprom_write_r18>:
    399a:	e1 99       	sbic	0x1c, 1	; 28
    399c:	fe cf       	rjmp	.-4      	; 0x399a <eeprom_write_r18>
    399e:	9f bb       	out	0x1f, r25	; 31
    39a0:	8e bb       	out	0x1e, r24	; 30
    39a2:	2d bb       	out	0x1d, r18	; 29
    39a4:	0f b6       	in	r0, 0x3f	; 63
    39a6:	f8 94       	cli
    39a8:	e2 9a       	sbi	0x1c, 2	; 28
    39aa:	e1 9a       	sbi	0x1c, 1	; 28
    39ac:	0f be       	out	0x3f, r0	; 63
    39ae:	01 96       	adiw	r24, 0x01	; 1
    39b0:	08 95       	ret

000039b2 <__prologue_saves__>:
    39b2:	2f 92       	push	r2
    39b4:	3f 92       	push	r3
    39b6:	4f 92       	push	r4
    39b8:	5f 92       	push	r5
    39ba:	6f 92       	push	r6
    39bc:	7f 92       	push	r7
    39be:	8f 92       	push	r8
    39c0:	9f 92       	push	r9
    39c2:	af 92       	push	r10
    39c4:	bf 92       	push	r11
    39c6:	cf 92       	push	r12
    39c8:	df 92       	push	r13
    39ca:	ef 92       	push	r14
    39cc:	ff 92       	push	r15
    39ce:	0f 93       	push	r16
    39d0:	1f 93       	push	r17
    39d2:	cf 93       	push	r28
    39d4:	df 93       	push	r29
    39d6:	cd b7       	in	r28, 0x3d	; 61
    39d8:	de b7       	in	r29, 0x3e	; 62
    39da:	ca 1b       	sub	r28, r26
    39dc:	db 0b       	sbc	r29, r27
    39de:	0f b6       	in	r0, 0x3f	; 63
    39e0:	f8 94       	cli
    39e2:	de bf       	out	0x3e, r29	; 62
    39e4:	0f be       	out	0x3f, r0	; 63
    39e6:	cd bf       	out	0x3d, r28	; 61
    39e8:	09 94       	ijmp

000039ea <__epilogue_restores__>:
    39ea:	2a 88       	ldd	r2, Y+18	; 0x12
    39ec:	39 88       	ldd	r3, Y+17	; 0x11
    39ee:	48 88       	ldd	r4, Y+16	; 0x10
    39f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    39f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    39f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    39f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    39f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    39fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    39fc:	b9 84       	ldd	r11, Y+9	; 0x09
    39fe:	c8 84       	ldd	r12, Y+8	; 0x08
    3a00:	df 80       	ldd	r13, Y+7	; 0x07
    3a02:	ee 80       	ldd	r14, Y+6	; 0x06
    3a04:	fd 80       	ldd	r15, Y+5	; 0x05
    3a06:	0c 81       	ldd	r16, Y+4	; 0x04
    3a08:	1b 81       	ldd	r17, Y+3	; 0x03
    3a0a:	aa 81       	ldd	r26, Y+2	; 0x02
    3a0c:	b9 81       	ldd	r27, Y+1	; 0x01
    3a0e:	ce 0f       	add	r28, r30
    3a10:	d1 1d       	adc	r29, r1
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	de bf       	out	0x3e, r29	; 62
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	ed 01       	movw	r28, r26
    3a1e:	08 95       	ret

00003a20 <_exit>:
    3a20:	f8 94       	cli

00003a22 <__stop_program>:
    3a22:	ff cf       	rjmp	.-2      	; 0x3a22 <__stop_program>
