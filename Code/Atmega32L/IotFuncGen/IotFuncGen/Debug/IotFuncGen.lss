
IotFuncGen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000422  00800060  00003a3a  00003ace  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001d4  00800482  00800482  00003ef0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003ef0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003f4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00003f88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000059ea  00000000  00000000  00004298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f3c  00000000  00000000  00009c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c4b  00000000  00000000  0000abbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000774  00000000  00000000  0000d80c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001016  00000000  00000000  0000df80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037fa  00000000  00000000  0000ef96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00012790  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9c 00 	jmp	0x138	; 0x138 <__ctors_end>
       4:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
       8:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
       c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      10:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      14:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      18:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      1c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      20:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      24:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      28:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      2c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      30:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      34:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__vector_13>
      38:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      3c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      40:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      44:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      48:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      4c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      50:	0c 94 b9 00 	jmp	0x172	; 0x172 <__bad_interrupt>
      54:	9f 0b       	sbc	r25, r31
      56:	d3 0b       	sbc	r29, r19
      58:	16 0c       	add	r1, r6
      5a:	e6 0b       	sbc	r30, r22
      5c:	fe 0c       	add	r15, r14
      5e:	14 0d       	add	r17, r4
      60:	ec 0b       	sbc	r30, r28
      62:	5f 0d       	add	r21, r15
      64:	6b 0d       	add	r22, r11
      66:	90 0d       	add	r25, r0
      68:	ab 0d       	add	r26, r11
      6a:	d0 0d       	add	r29, r0
      6c:	eb 0d       	add	r30, r11
      6e:	0f 0e       	add	r0, r31
      70:	42 0e       	add	r4, r18
      72:	28 10       	cpse	r2, r8
      74:	34 10       	cpse	r3, r4
      76:	60 10       	cpse	r6, r0
      78:	82 10       	cpse	r8, r2
      7a:	ae 10       	cpse	r10, r14
      7c:	d0 10       	cpse	r13, r0
      7e:	fb 10       	cpse	r15, r11
      80:	2b 11       	cpse	r18, r11
      82:	72 11       	cpse	r23, r2
      84:	b8 11       	cpse	r27, r8
      86:	1c 13       	cpse	r17, r28
      88:	1e 13       	cpse	r17, r30
      8a:	20 13       	cpse	r18, r16
      8c:	22 13       	cpse	r18, r18
      8e:	24 13       	cpse	r18, r20
      90:	26 13       	cpse	r18, r22
      92:	28 13       	cpse	r18, r24
      94:	42 13       	cpse	r20, r18
      96:	44 13       	cpse	r20, r20
      98:	46 13       	cpse	r20, r22
      9a:	48 13       	cpse	r20, r24
      9c:	4a 13       	cpse	r20, r26
      9e:	4c 13       	cpse	r20, r28
      a0:	4e 13       	cpse	r20, r30
      a2:	89 13       	cpse	r24, r25
      a4:	b4 13       	cpse	r27, r20
      a6:	df 13       	cpse	r29, r31
      a8:	0a 14       	cp	r0, r10
      aa:	3d 14       	cp	r3, r13
      ac:	70 14       	cp	r7, r0
      ae:	a3 14       	cp	r10, r3
      b0:	d6 14       	cp	r13, r6
      b2:	d6 14       	cp	r13, r6
      b4:	4a 15       	cp	r20, r10
      b6:	07 63       	ori	r16, 0x37	; 55
      b8:	42 36       	cpi	r20, 0x62	; 98
      ba:	b7 9b       	sbis	0x16, 7	; 22
      bc:	d8 a7       	std	Y+40, r29	; 0x28
      be:	1a 39       	cpi	r17, 0x9A	; 154
      c0:	68 56       	subi	r22, 0x68	; 104
      c2:	18 ae       	std	Y+56, r1	; 0x38
      c4:	ba ab       	std	Y+50, r27	; 0x32
      c6:	55 8c       	ldd	r5, Z+29	; 0x1d
      c8:	1d 3c       	cpi	r17, 0xCD	; 205
      ca:	b7 cc       	rjmp	.-1682   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      cc:	57 63       	ori	r21, 0x37	; 55
      ce:	bd 6d       	ori	r27, 0xDD	; 221
      d0:	ed fd       	.word	0xfded	; ????
      d2:	75 3e       	cpi	r23, 0xE5	; 229
      d4:	f6 17       	cp	r31, r22
      d6:	72 31       	cpi	r23, 0x12	; 18
      d8:	bf 00       	.word	0x00bf	; ????
      da:	00 00       	nop
      dc:	80 3f       	cpi	r24, 0xF0	; 240
      de:	08 00       	.word	0x0008	; ????
      e0:	00 00       	nop
      e2:	be 92       	st	-X, r11
      e4:	24 49       	sbci	r18, 0x94	; 148
      e6:	12 3e       	cpi	r17, 0xE2	; 226
      e8:	ab aa       	std	Y+51, r10	; 0x33
      ea:	aa 2a       	or	r10, r26
      ec:	be cd       	rjmp	.-1156   	; 0xfffffc6a <__eeprom_end+0xff7efc6a>
      ee:	cc cc       	rjmp	.-1640   	; 0xfffffa88 <__eeprom_end+0xff7efa88>
      f0:	4c 3e       	cpi	r20, 0xEC	; 236
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	be ab       	std	Y+54, r27	; 0x36
      f8:	aa aa       	std	Y+50, r10	; 0x32
      fa:	aa 3e       	cpi	r26, 0xEA	; 234
      fc:	00 00       	nop
      fe:	00 00       	nop
     100:	bf 00       	.word	0x00bf	; ????
     102:	00 00       	nop
     104:	80 3f       	cpi	r24, 0xF0	; 240
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	00 08       	sbc	r0, r0
     10c:	41 78       	andi	r20, 0x81	; 129
     10e:	d3 bb       	out	0x13, r29	; 19
     110:	43 87       	std	Z+11, r20	; 0x0b
     112:	d1 13       	cpse	r29, r17
     114:	3d 19       	sub	r19, r13
     116:	0e 3c       	cpi	r16, 0xCE	; 206
     118:	c3 bd       	out	0x23, r28	; 35
     11a:	42 82       	std	Z+2, r4	; 0x02
     11c:	ad 2b       	or	r26, r29
     11e:	3e 68       	ori	r19, 0x8E	; 142
     120:	ec 82       	std	Y+4, r14	; 0x04
     122:	76 be       	out	0x36, r7	; 54
     124:	d9 8f       	std	Y+25, r29	; 0x19
     126:	e1 a9       	ldd	r30, Z+49	; 0x31
     128:	3e 4c       	sbci	r19, 0xCE	; 206
     12a:	80 ef       	ldi	r24, 0xF0	; 240
     12c:	ff be       	out	0x3f, r15	; 63
     12e:	01 c4       	rjmp	.+2050   	; 0x932 <save_wifi_credentials+0xa>
     130:	ff 7f       	andi	r31, 0xFF	; 255
     132:	3f 00       	.word	0x003f	; ????
     134:	00 00       	nop
	...

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf e5       	ldi	r28, 0x5F	; 95
     13e:	d8 e0       	ldi	r29, 0x08	; 8
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	14 e0       	ldi	r17, 0x04	; 4
     146:	a0 e6       	ldi	r26, 0x60	; 96
     148:	b0 e0       	ldi	r27, 0x00	; 0
     14a:	ea e3       	ldi	r30, 0x3A	; 58
     14c:	fa e3       	ldi	r31, 0x3A	; 58
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	a2 38       	cpi	r26, 0x82	; 130
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	26 e0       	ldi	r18, 0x06	; 6
     15c:	a2 e8       	ldi	r26, 0x82	; 130
     15e:	b4 e0       	ldi	r27, 0x04	; 4
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	a6 35       	cpi	r26, 0x56	; 86
     166:	b2 07       	cpc	r27, r18
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	0e 94 74 12 	call	0x24e8	; 0x24e8 <main>
     16e:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <_exit>

00000172 <__bad_interrupt>:
     172:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000176 <Init_LCD>:
#include "Headers/SPIMaster.h"
#include "Headers/LCD.h"

void Init_LCD(void)
{
	lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
     176:	8f 9a       	sbi	0x11, 7	; 17
	lcd_D6_ddr |= (1<<lcd_D6_bit);
     178:	8e 9a       	sbi	0x11, 6	; 17
	lcd_D5_ddr |= (1<<lcd_D5_bit);
     17a:	8d 9a       	sbi	0x11, 5	; 17
	lcd_D4_ddr |= (1<<lcd_D4_bit);
     17c:	8c 9a       	sbi	0x11, 4	; 17
	lcd_E_ddr  |= (1<<lcd_E_bit);                    // E line - output
     17e:	b9 9a       	sbi	0x17, 1	; 23
	lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
     180:	b8 9a       	sbi	0x17, 0	; 23
     182:	08 95       	ret

00000184 <lcd_write_4>:
	lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
	lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
}

void lcd_write_4(uint8_t theByte) {
	lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
     184:	97 98       	cbi	0x12, 7	; 18
	if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
     186:	88 23       	and	r24, r24
     188:	0c f4       	brge	.+2      	; 0x18c <lcd_write_4+0x8>
     18a:	97 9a       	sbi	0x12, 7	; 18
	lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
     18c:	96 98       	cbi	0x12, 6	; 18
	if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
     18e:	86 fd       	sbrc	r24, 6
     190:	96 9a       	sbi	0x12, 6	; 18
	lcd_D5_port &= ~(1<<lcd_D5_bit);
     192:	95 98       	cbi	0x12, 5	; 18
	if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
     194:	85 fd       	sbrc	r24, 5
     196:	95 9a       	sbi	0x12, 5	; 18
	lcd_D4_port &= ~(1<<lcd_D4_bit);
     198:	94 98       	cbi	0x12, 4	; 18
	if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
     19a:	84 fd       	sbrc	r24, 4
     19c:	94 9a       	sbi	0x12, 4	; 18
	// write the data
	// 'Address set-up time' (40 nS)
	lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
     19e:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a0:	8a eb       	ldi	r24, 0xBA	; 186
     1a2:	8a 95       	dec	r24
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_write_4+0x1e>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_write_4+0x24>
	_delay_us(70);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
	lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
     1a8:	c1 98       	cbi	0x18, 1	; 24
     1aa:	8a eb       	ldi	r24, 0xBA	; 186
     1ac:	8a 95       	dec	r24
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <lcd_write_4+0x28>
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_write_4+0x2e>
     1b2:	08 95       	ret

000001b4 <lcd_write_character_4d>:
	i++;
	_delay_us(160);                              // 40 uS delay (min)
	}
	}

void lcd_write_character_4d(uint8_t theData) {
     1b4:	cf 93       	push	r28
     1b6:	c8 2f       	mov	r28, r24
	lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
     1b8:	c0 9a       	sbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     1ba:	c1 98       	cbi	0x18, 1	; 24
	lcd_write_4(theData);                           // write the upper 4-bits of the data
     1bc:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
	lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     1c0:	8c 2f       	mov	r24, r28
     1c2:	82 95       	swap	r24
     1c4:	80 7f       	andi	r24, 0xF0	; 240
     1c6:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
}
     1ca:	cf 91       	pop	r28
     1cc:	08 95       	ret

000001ce <lcd_write_string_4d>:
	lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
	_delay_us(90);                                  // 40uS delay (min)
}


void lcd_write_string_4d(char theString[]) {
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	00 d0       	rcall	.+0      	; 0x1d8 <lcd_write_string_4d+0xa>
     1d8:	cd b7       	in	r28, 0x3d	; 61
     1da:	de b7       	in	r29, 0x3e	; 62
     1dc:	8c 01       	movw	r16, r24
	volatile int i = 0;                             // character counter*/
     1de:	1a 82       	std	Y+2, r1	; 0x02
     1e0:	19 82       	std	Y+1, r1	; 0x01
	while (theString[i] != 0)
     1e2:	e9 81       	ldd	r30, Y+1	; 0x01
     1e4:	fa 81       	ldd	r31, Y+2	; 0x02
     1e6:	e8 0f       	add	r30, r24
     1e8:	f9 1f       	adc	r31, r25
     1ea:	80 81       	ld	r24, Z
     1ec:	88 23       	and	r24, r24
     1ee:	c9 f0       	breq	.+50     	; 0x222 <lcd_write_string_4d+0x54>
	{
	lcd_write_character_4d(theString[i]);
     1f0:	e9 81       	ldd	r30, Y+1	; 0x01
     1f2:	fa 81       	ldd	r31, Y+2	; 0x02
     1f4:	e0 0f       	add	r30, r16
     1f6:	f1 1f       	adc	r31, r17
     1f8:	80 81       	ld	r24, Z
     1fa:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_character_4d>
	i++;
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	9a 81       	ldd	r25, Y+2	; 0x02
     202:	01 96       	adiw	r24, 0x01	; 1
     204:	9a 83       	std	Y+2, r25	; 0x02
     206:	89 83       	std	Y+1, r24	; 0x01
     208:	8f e3       	ldi	r24, 0x3F	; 63
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	01 97       	sbiw	r24, 0x01	; 1
     20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_write_string_4d+0x3e>
     210:	00 c0       	rjmp	.+0      	; 0x212 <lcd_write_string_4d+0x44>
     212:	00 00       	nop
}


void lcd_write_string_4d(char theString[]) {
	volatile int i = 0;                             // character counter*/
	while (theString[i] != 0)
     214:	e9 81       	ldd	r30, Y+1	; 0x01
     216:	fa 81       	ldd	r31, Y+2	; 0x02
     218:	e0 0f       	add	r30, r16
     21a:	f1 1f       	adc	r31, r17
     21c:	80 81       	ld	r24, Z
     21e:	81 11       	cpse	r24, r1
     220:	e7 cf       	rjmp	.-50     	; 0x1f0 <lcd_write_string_4d+0x22>
	{
	lcd_write_character_4d(theString[i]);
	i++;
	_delay_us(160);                              // 40 uS delay (min)
	}
	}
     222:	0f 90       	pop	r0
     224:	0f 90       	pop	r0
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	1f 91       	pop	r17
     22c:	0f 91       	pop	r16
     22e:	08 95       	ret

00000230 <lcd_write_instruction_4d>:
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
	lcd_write_4(theData);                           // write the upper 4-bits of the data
	lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
}

void lcd_write_instruction_4d(uint8_t theInstruction) {
     230:	cf 93       	push	r28
     232:	c8 2f       	mov	r28, r24
	lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     234:	c0 98       	cbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     236:	c1 98       	cbi	0x18, 1	; 24
	lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     238:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
	lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     23c:	8c 2f       	mov	r24, r28
     23e:	82 95       	swap	r24
     240:	80 7f       	andi	r24, 0xF0	; 240
     242:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
}
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <Init_LCD_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     24a:	2f ef       	ldi	r18, 0xFF	; 255
     24c:	80 e7       	ldi	r24, 0x70	; 112
     24e:	92 e0       	ldi	r25, 0x02	; 2
     250:	21 50       	subi	r18, 0x01	; 1
     252:	80 40       	sbci	r24, 0x00	; 0
     254:	90 40       	sbci	r25, 0x00	; 0
     256:	e1 f7       	brne	.-8      	; 0x250 <Init_LCD_4bit+0x6>
     258:	00 c0       	rjmp	.+0      	; 0x25a <Init_LCD_4bit+0x10>
     25a:	00 00       	nop
{
	// Power-up delay
	_delay_ms(100);                                 // initial 40 mSec delay

	// Set up the RS and E lines for the 'lcd_write_4' subroutine.
	lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     25c:	c0 98       	cbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     25e:	c1 98       	cbi	0x18, 1	; 24

	// Reset the LCD controller
	lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     260:	80 e3       	ldi	r24, 0x30	; 48
     262:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
     266:	8f e3       	ldi	r24, 0x3F	; 63
     268:	9c e9       	ldi	r25, 0x9C	; 156
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <Init_LCD_4bit+0x20>
     26e:	00 c0       	rjmp	.+0      	; 0x270 <Init_LCD_4bit+0x26>
     270:	00 00       	nop
	_delay_ms(20);                                  // 4.1 mS delay (min)

	lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     272:	80 e3       	ldi	r24, 0x30	; 48
     274:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     278:	87 e5       	ldi	r24, 0x57	; 87
     27a:	92 e0       	ldi	r25, 0x02	; 2
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <Init_LCD_4bit+0x32>
     280:	00 c0       	rjmp	.+0      	; 0x282 <Init_LCD_4bit+0x38>
     282:	00 00       	nop
	_delay_us(300);                                 // 100uS delay (min)

	lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     284:	80 e3       	ldi	r24, 0x30	; 48
     286:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
     28a:	87 e5       	ldi	r24, 0x57	; 87
     28c:	92 e0       	ldi	r25, 0x02	; 2
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	f1 f7       	brne	.-4      	; 0x28e <Init_LCD_4bit+0x44>
     292:	00 c0       	rjmp	.+0      	; 0x294 <Init_LCD_4bit+0x4a>
     294:	00 00       	nop
	_delay_us(300);                                 // this delay is omitted in the data sheet
	
	lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     296:	88 e2       	ldi	r24, 0x28	; 40
     298:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_4>
     29c:	90 ef       	ldi	r25, 0xF0	; 240
     29e:	9a 95       	dec	r25
     2a0:	f1 f7       	brne	.-4      	; 0x29e <Init_LCD_4bit+0x54>
	_delay_us(90);                                  // 40uS delay (min)

	// Function Set instruction
	lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     2a2:	88 e2       	ldi	r24, 0x28	; 40
     2a4:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
     2a8:	20 ef       	ldi	r18, 0xF0	; 240
     2aa:	2a 95       	dec	r18
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <Init_LCD_4bit+0x60>
	_delay_us(90);                                  // 40uS delay (min)

	// Display On/Off Control instruction
	lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     2ae:	88 e0       	ldi	r24, 0x08	; 8
     2b0:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
     2b4:	80 ef       	ldi	r24, 0xF0	; 240
     2b6:	8a 95       	dec	r24
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <Init_LCD_4bit+0x6c>
	_delay_us(90);                                  // 40uS delay (min)

	// Clear Display instruction
	lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2c0:	8f e7       	ldi	r24, 0x7F	; 127
     2c2:	9e e3       	ldi	r25, 0x3E	; 62
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <Init_LCD_4bit+0x7a>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <Init_LCD_4bit+0x80>
     2ca:	00 00       	nop
	_delay_ms(8);                                   // 1.64 mS delay (min)

	// ; Entry Mode Set instruction
	lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     2cc:	86 e0       	ldi	r24, 0x06	; 6
     2ce:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d2:	90 ef       	ldi	r25, 0xF0	; 240
     2d4:	9a 95       	dec	r25
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <Init_LCD_4bit+0x8a>
	_delay_us(90);                                  // 40uS delay (min)

	// Display On/Off Control instruction
	lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     2d8:	8c e0       	ldi	r24, 0x0C	; 12
     2da:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
     2de:	20 ef       	ldi	r18, 0xF0	; 240
     2e0:	2a 95       	dec	r18
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <Init_LCD_4bit+0x96>
     2e4:	08 95       	ret

000002e6 <print_LCD_line>:
	snprintf(lbuff, 20, "  Firmware Rev:%c.%c  ", FIRMWARE_VERSION_A, FIRMWARE_VERSION_B);
	print_LCD_line(lbuff, LCD_LINE_3);
	print_LCD_line("  KhomLabs Design   ", LCD_LINE_4);
}

void print_LCD_line(char *input_string, uint8_t line_number) {
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	ec 01       	movw	r28, r24
	lcd_write_instruction_4d(LCD_SET_CURSOR | line_number);
     2ec:	86 2f       	mov	r24, r22
     2ee:	80 68       	ori	r24, 0x80	; 128
     2f0:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
	lcd_write_string_4d(input_string);
     2f4:	ce 01       	movw	r24, r28
     2f6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_write_string_4d>
}
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <LCD_logo_display>:
	_delay_us(70);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
	lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
	_delay_us(70);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
	}
	
void LCD_logo_display() {
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	64 97       	sbiw	r28, 0x14	; 20
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
	char lbuff[20];
	print_LCD_line("  IoT Dual-Channel  ", LCD_LINE_1);
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	80 e6       	ldi	r24, 0x60	; 96
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
	print_LCD_line(" Function Generator ", LCD_LINE_2);
     322:	60 e4       	ldi	r22, 0x40	; 64
     324:	85 e7       	ldi	r24, 0x75	; 117
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
	snprintf(lbuff, 20, "  Firmware Rev:%c.%c  ", FIRMWARE_VERSION_A, FIRMWARE_VERSION_B);
     32c:	1f 92       	push	r1
     32e:	80 e3       	ldi	r24, 0x30	; 48
     330:	8f 93       	push	r24
     332:	1f 92       	push	r1
     334:	82 e3       	ldi	r24, 0x32	; 50
     336:	8f 93       	push	r24
     338:	8a e8       	ldi	r24, 0x8A	; 138
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	9f 93       	push	r25
     33e:	8f 93       	push	r24
     340:	1f 92       	push	r1
     342:	84 e1       	ldi	r24, 0x14	; 20
     344:	8f 93       	push	r24
     346:	8e 01       	movw	r16, r28
     348:	0f 5f       	subi	r16, 0xFF	; 255
     34a:	1f 4f       	sbci	r17, 0xFF	; 255
     34c:	1f 93       	push	r17
     34e:	0f 93       	push	r16
     350:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
	print_LCD_line(lbuff, LCD_LINE_3);
     354:	64 e1       	ldi	r22, 0x14	; 20
     356:	c8 01       	movw	r24, r16
     358:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
	print_LCD_line("  KhomLabs Design   ", LCD_LINE_4);
     35c:	64 e5       	ldi	r22, 0x54	; 84
     35e:	81 ea       	ldi	r24, 0xA1	; 161
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
}
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	64 96       	adiw	r28, 0x14	; 20
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	de bf       	out	0x3e, r29	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	08 95       	ret

00000386 <clear_LCD_line>:
	lcd_write_instruction_4d(LCD_SET_CURSOR | line_number);
	lcd_write_string_4d(input_string);
}

void clear_LCD_line(unsigned char line) {
	print_LCD_line("                    ", line);
     386:	68 2f       	mov	r22, r24
     388:	86 eb       	ldi	r24, 0xB6	; 182
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     390:	08 95       	ret

00000392 <clear_LCD>:
}

void clear_LCD() {
	clear_LCD_line(LCD_LINE_1);
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	0e 94 c3 01 	call	0x386	; 0x386 <clear_LCD_line>
	clear_LCD_line(LCD_LINE_2);
     398:	80 e4       	ldi	r24, 0x40	; 64
     39a:	0e 94 c3 01 	call	0x386	; 0x386 <clear_LCD_line>
	clear_LCD_line(LCD_LINE_3);
     39e:	84 e1       	ldi	r24, 0x14	; 20
     3a0:	0e 94 c3 01 	call	0x386	; 0x386 <clear_LCD_line>
	clear_LCD_line(LCD_LINE_4);
     3a4:	84 e5       	ldi	r24, 0x54	; 84
     3a6:	0e 94 c3 01 	call	0x386	; 0x386 <clear_LCD_line>
     3aa:	08 95       	ret

000003ac <print_LCD_char>:
}

void print_LCD_char(uint8_t ch_in, uint8_t line, uint8_t position) {
     3ac:	cf 93       	push	r28
     3ae:	c8 2f       	mov	r28, r24
	lcd_write_instruction_4d((LCD_SET_CURSOR | line) + position);
     3b0:	86 2f       	mov	r24, r22
     3b2:	80 68       	ori	r24, 0x80	; 128
     3b4:	84 0f       	add	r24, r20
     3b6:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
	lcd_write_character_4d(ch_in);
     3ba:	8c 2f       	mov	r24, r28
     3bc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_character_4d>
}
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <print_LCD_segment>:

void print_LCD_segment(char *input_string, uint8_t line, uint8_t segment) {
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	ec 01       	movw	r28, r24
	if (segment == 0) lcd_write_instruction_4d(LCD_SET_CURSOR | line);
     3ca:	41 11       	cpse	r20, r1
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <print_LCD_segment+0x14>
     3ce:	86 2f       	mov	r24, r22
     3d0:	80 68       	ori	r24, 0x80	; 128
     3d2:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
     3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <print_LCD_segment+0x32>
	else {
		if (((line == LCD_LINE_1) || (line == LCD_LINE_3))) lcd_write_instruction_4d(LCD_SET_CURSOR | (line + 0x06));
     3d8:	66 23       	and	r22, r22
     3da:	11 f0       	breq	.+4      	; 0x3e0 <print_LCD_segment+0x1c>
     3dc:	64 31       	cpi	r22, 0x14	; 20
     3de:	31 f4       	brne	.+12     	; 0x3ec <print_LCD_segment+0x28>
     3e0:	86 e0       	ldi	r24, 0x06	; 6
     3e2:	86 0f       	add	r24, r22
     3e4:	80 68       	ori	r24, 0x80	; 128
     3e6:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
     3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <print_LCD_segment+0x32>
		else lcd_write_instruction_4d(LCD_SET_CURSOR | (line + 0x0A));
     3ec:	8a e0       	ldi	r24, 0x0A	; 10
     3ee:	86 0f       	add	r24, r22
     3f0:	80 68       	ori	r24, 0x80	; 128
     3f2:	0e 94 18 01 	call	0x230	; 0x230 <lcd_write_instruction_4d>
	}
	lcd_write_string_4d(input_string);
     3f6:	ce 01       	movw	r24, r28
     3f8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_write_string_4d>
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <clear_LCD_segment>:

void clear_LCD_segment(uint8_t line, uint8_t segment) {
	if (segment == 0) {
     402:	61 11       	cpse	r22, r1
     404:	12 c0       	rjmp	.+36     	; 0x42a <clear_LCD_segment+0x28>
		if (((line == LCD_LINE_1) || (line == LCD_LINE_3))) print_LCD_segment("       ", line, segment);
     406:	88 23       	and	r24, r24
     408:	11 f0       	breq	.+4      	; 0x40e <clear_LCD_segment+0xc>
     40a:	84 31       	cpi	r24, 0x14	; 20
     40c:	39 f4       	brne	.+14     	; 0x41c <clear_LCD_segment+0x1a>
     40e:	40 e0       	ldi	r20, 0x00	; 0
     410:	68 2f       	mov	r22, r24
     412:	83 ec       	ldi	r24, 0xC3	; 195
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <print_LCD_segment>
     41a:	08 95       	ret
		else print_LCD_segment("          ", line, segment);
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	68 2f       	mov	r22, r24
     420:	80 ec       	ldi	r24, 0xC0	; 192
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <print_LCD_segment>
     428:	08 95       	ret
	}
	else {
		if (((line == LCD_LINE_1) || (line == LCD_LINE_3))) print_LCD_segment("             ", line, segment);
     42a:	88 23       	and	r24, r24
     42c:	11 f0       	breq	.+4      	; 0x432 <clear_LCD_segment+0x30>
     42e:	84 31       	cpi	r24, 0x14	; 20
     430:	39 f4       	brne	.+14     	; 0x440 <clear_LCD_segment+0x3e>
     432:	46 2f       	mov	r20, r22
     434:	68 2f       	mov	r22, r24
     436:	8d eb       	ldi	r24, 0xBD	; 189
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <print_LCD_segment>
     43e:	08 95       	ret
		else print_LCD_segment("           ", line, segment);
     440:	46 2f       	mov	r20, r22
     442:	68 2f       	mov	r22, r24
     444:	8f eb       	ldi	r24, 0xBF	; 191
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <print_LCD_segment>
     44c:	08 95       	ret

0000044e <beep>:
	memset(UI.amplitude_A, 0, 4);
	memset(UI.amplitude_B, 0, 4);
	memset(UI.bias_A, 0, 5);
	memset(UI.bias_B, 0, 5);
	memset(UI.type_A, 0, 4);
	memset(UI.type_B, 0, 4);
     44e:	86 e4       	ldi	r24, 0x46	; 70
     450:	db 9a       	sbi	0x1b, 3	; 27
     452:	e3 e5       	ldi	r30, 0x53	; 83
     454:	f3 e0       	ldi	r31, 0x03	; 3
     456:	31 97       	sbiw	r30, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <beep+0x8>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <beep+0xe>
     45c:	00 00       	nop
     45e:	db 98       	cbi	0x1b, 3	; 27
     460:	e3 e5       	ldi	r30, 0x53	; 83
     462:	f3 e0       	ldi	r31, 0x03	; 3
     464:	31 97       	sbiw	r30, 0x01	; 1
     466:	f1 f7       	brne	.-4      	; 0x464 <beep+0x16>
     468:	00 c0       	rjmp	.+0      	; 0x46a <beep+0x1c>
     46a:	00 00       	nop
     46c:	81 50       	subi	r24, 0x01	; 1
     46e:	81 f7       	brne	.-32     	; 0x450 <beep+0x2>
     470:	08 95       	ret

00000472 <play_melody>:
     472:	88 23       	and	r24, r24
     474:	b1 f1       	breq	.+108    	; 0x4e2 <play_melody+0x70>
     476:	8c ee       	ldi	r24, 0xEC	; 236
     478:	db 9a       	sbi	0x1b, 3	; 27
     47a:	e3 e5       	ldi	r30, 0x53	; 83
     47c:	f3 e0       	ldi	r31, 0x03	; 3
     47e:	31 97       	sbiw	r30, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <play_melody+0xc>
     482:	00 c0       	rjmp	.+0      	; 0x484 <play_melody+0x12>
     484:	00 00       	nop
     486:	db 98       	cbi	0x1b, 3	; 27
     488:	e3 e5       	ldi	r30, 0x53	; 83
     48a:	f3 e0       	ldi	r31, 0x03	; 3
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <play_melody+0x1a>
     490:	00 c0       	rjmp	.+0      	; 0x492 <play_melody+0x20>
     492:	00 00       	nop
     494:	81 50       	subi	r24, 0x01	; 1
     496:	81 f7       	brne	.-32     	; 0x478 <play_melody+0x6>
     498:	88 e2       	ldi	r24, 0x28	; 40
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	db 9a       	sbi	0x1b, 3	; 27
     49e:	e3 ea       	ldi	r30, 0xA3	; 163
     4a0:	f2 e0       	ldi	r31, 0x02	; 2
     4a2:	31 97       	sbiw	r30, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <play_melody+0x30>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <play_melody+0x36>
     4a8:	00 00       	nop
     4aa:	db 98       	cbi	0x1b, 3	; 27
     4ac:	e3 ea       	ldi	r30, 0xA3	; 163
     4ae:	f2 e0       	ldi	r31, 0x02	; 2
     4b0:	31 97       	sbiw	r30, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <play_melody+0x3e>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <play_melody+0x44>
     4b6:	00 00       	nop
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	81 f7       	brne	.-32     	; 0x49c <play_melody+0x2a>
     4bc:	80 ec       	ldi	r24, 0xC0	; 192
     4be:	92 e0       	ldi	r25, 0x02	; 2
     4c0:	db 9a       	sbi	0x1b, 3	; 27
     4c2:	e7 e3       	ldi	r30, 0x37	; 55
     4c4:	f2 e0       	ldi	r31, 0x02	; 2
     4c6:	31 97       	sbiw	r30, 0x01	; 1
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <play_melody+0x54>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <play_melody+0x5a>
     4cc:	00 00       	nop
     4ce:	db 98       	cbi	0x1b, 3	; 27
     4d0:	e7 e3       	ldi	r30, 0x37	; 55
     4d2:	f2 e0       	ldi	r31, 0x02	; 2
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <play_melody+0x62>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <play_melody+0x68>
     4da:	00 00       	nop
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	81 f7       	brne	.-32     	; 0x4c0 <play_melody+0x4e>
     4e0:	08 95       	ret
     4e2:	88 e2       	ldi	r24, 0x28	; 40
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	db 9a       	sbi	0x1b, 3	; 27
     4e8:	e3 ea       	ldi	r30, 0xA3	; 163
     4ea:	f2 e0       	ldi	r31, 0x02	; 2
     4ec:	31 97       	sbiw	r30, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <play_melody+0x7a>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <play_melody+0x80>
     4f2:	00 00       	nop
     4f4:	db 98       	cbi	0x1b, 3	; 27
     4f6:	e3 ea       	ldi	r30, 0xA3	; 163
     4f8:	f2 e0       	ldi	r31, 0x02	; 2
     4fa:	31 97       	sbiw	r30, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <play_melody+0x88>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <play_melody+0x8e>
     500:	00 00       	nop
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	81 f7       	brne	.-32     	; 0x4e6 <play_melody+0x74>
     506:	8c ee       	ldi	r24, 0xEC	; 236
     508:	db 9a       	sbi	0x1b, 3	; 27
     50a:	e3 e5       	ldi	r30, 0x53	; 83
     50c:	f3 e0       	ldi	r31, 0x03	; 3
     50e:	31 97       	sbiw	r30, 0x01	; 1
     510:	f1 f7       	brne	.-4      	; 0x50e <play_melody+0x9c>
     512:	00 c0       	rjmp	.+0      	; 0x514 <play_melody+0xa2>
     514:	00 00       	nop
     516:	db 98       	cbi	0x1b, 3	; 27
     518:	e3 e5       	ldi	r30, 0x53	; 83
     51a:	f3 e0       	ldi	r31, 0x03	; 3
     51c:	31 97       	sbiw	r30, 0x01	; 1
     51e:	f1 f7       	brne	.-4      	; 0x51c <play_melody+0xaa>
     520:	00 c0       	rjmp	.+0      	; 0x522 <play_melody+0xb0>
     522:	00 00       	nop
     524:	81 50       	subi	r24, 0x01	; 1
     526:	81 f7       	brne	.-32     	; 0x508 <play_melody+0x96>
     528:	80 e6       	ldi	r24, 0x60	; 96
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	db 9a       	sbi	0x1b, 3	; 27
     52e:	ef e6       	ldi	r30, 0x6F	; 111
     530:	f4 e0       	ldi	r31, 0x04	; 4
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <play_melody+0xc0>
     536:	00 c0       	rjmp	.+0      	; 0x538 <play_melody+0xc6>
     538:	00 00       	nop
     53a:	db 98       	cbi	0x1b, 3	; 27
     53c:	ef e6       	ldi	r30, 0x6F	; 111
     53e:	f4 e0       	ldi	r31, 0x04	; 4
     540:	31 97       	sbiw	r30, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <play_melody+0xce>
     544:	00 c0       	rjmp	.+0      	; 0x546 <play_melody+0xd4>
     546:	00 00       	nop
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	81 f7       	brne	.-32     	; 0x52c <play_melody+0xba>
     54c:	08 95       	ret

0000054e <Init_Ports>:
     54e:	84 b3       	in	r24, 0x14	; 20
     550:	8c 6f       	ori	r24, 0xFC	; 252
     552:	84 bb       	out	0x14, r24	; 20
     554:	d4 9a       	sbi	0x1a, 4	; 26
     556:	87 b3       	in	r24, 0x17	; 23
     558:	8c 61       	ori	r24, 0x1C	; 28
     55a:	87 bb       	out	0x17, r24	; 23
     55c:	87 b3       	in	r24, 0x17	; 23
     55e:	83 60       	ori	r24, 0x03	; 3
     560:	87 bb       	out	0x17, r24	; 23
     562:	81 b3       	in	r24, 0x11	; 17
     564:	80 6f       	ori	r24, 0xF0	; 240
     566:	81 bb       	out	0x11, r24	; 17
     568:	8a b3       	in	r24, 0x1a	; 26
     56a:	8c 7f       	andi	r24, 0xFC	; 252
     56c:	8a bb       	out	0x1a, r24	; 26
     56e:	87 b3       	in	r24, 0x17	; 23
     570:	80 6a       	ori	r24, 0xA0	; 160
     572:	87 bb       	out	0x17, r24	; 23
     574:	be 98       	cbi	0x17, 6	; 23
     576:	89 9a       	sbi	0x11, 1	; 17
     578:	88 98       	cbi	0x11, 0	; 17
     57a:	84 b3       	in	r24, 0x14	; 20
     57c:	83 60       	ori	r24, 0x03	; 3
     57e:	84 bb       	out	0x14, r24	; 20
     580:	8a 98       	cbi	0x11, 2	; 17
     582:	8a b3       	in	r24, 0x1a	; 26
     584:	8c 60       	ori	r24, 0x0C	; 12
     586:	8a bb       	out	0x1a, r24	; 26
     588:	08 95       	ret

0000058a <Init_ADC>:
     58a:	86 b1       	in	r24, 0x06	; 6
     58c:	87 68       	ori	r24, 0x87	; 135
     58e:	86 b9       	out	0x06, r24	; 6
     590:	3e 9a       	sbi	0x07, 6	; 7
     592:	08 95       	ret

00000594 <set_output_selection>:
     594:	63 30       	cpi	r22, 0x03	; 3
     596:	41 f4       	brne	.+16     	; 0x5a8 <set_output_selection+0x14>
     598:	85 30       	cpi	r24, 0x05	; 5
     59a:	11 f4       	brne	.+4      	; 0x5a0 <set_output_selection+0xc>
     59c:	a8 98       	cbi	0x15, 0	; 21
     59e:	08 95       	ret
     5a0:	86 30       	cpi	r24, 0x06	; 6
     5a2:	49 f4       	brne	.+18     	; 0x5b6 <set_output_selection+0x22>
     5a4:	a9 98       	cbi	0x15, 1	; 21
     5a6:	08 95       	ret
     5a8:	85 30       	cpi	r24, 0x05	; 5
     5aa:	11 f4       	brne	.+4      	; 0x5b0 <set_output_selection+0x1c>
     5ac:	a8 9a       	sbi	0x15, 0	; 21
     5ae:	08 95       	ret
     5b0:	86 30       	cpi	r24, 0x06	; 6
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <set_output_selection+0x22>
     5b4:	a9 9a       	sbi	0x15, 1	; 21
     5b6:	08 95       	ret

000005b8 <set_functionality>:
     5b8:	8f 92       	push	r8
     5ba:	9f 92       	push	r9
     5bc:	af 92       	push	r10
     5be:	bf 92       	push	r11
     5c0:	ef 92       	push	r14
     5c2:	ff 92       	push	r15
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	f8 2e       	mov	r15, r24
     5ce:	4a 01       	movw	r8, r20
     5d0:	5b 01       	movw	r10, r22
     5d2:	e2 2e       	mov	r14, r18
     5d4:	0e 94 52 13 	call	0x26a4	; 0x26a4 <Init_SPI_AD9834>
     5d8:	c5 01       	movw	r24, r10
     5da:	b4 01       	movw	r22, r8
     5dc:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__floatunsisf>
     5e0:	27 e7       	ldi	r18, 0x77	; 119
     5e2:	3c ec       	ldi	r19, 0xCC	; 204
     5e4:	4b e2       	ldi	r20, 0x2B	; 43
     5e6:	51 e4       	ldi	r21, 0x41	; 65
     5e8:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulsf3>
     5ec:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__fixunssfsi>
     5f0:	eb 01       	movw	r28, r22
     5f2:	df 73       	andi	r29, 0x3F	; 63
     5f4:	dc 01       	movw	r26, r24
     5f6:	cb 01       	movw	r24, r22
     5f8:	07 2e       	mov	r0, r23
     5fa:	7e e0       	ldi	r23, 0x0E	; 14
     5fc:	b6 95       	lsr	r27
     5fe:	a7 95       	ror	r26
     600:	97 95       	ror	r25
     602:	87 95       	ror	r24
     604:	7a 95       	dec	r23
     606:	d1 f7       	brne	.-12     	; 0x5fc <set_functionality+0x44>
     608:	70 2d       	mov	r23, r0
     60a:	8c 01       	movw	r16, r24
     60c:	1f 73       	andi	r17, 0x3F	; 63
     60e:	4f 2d       	mov	r20, r15
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	81 e2       	ldi	r24, 0x21	; 33
     614:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     618:	8d 2f       	mov	r24, r29
     61a:	8f 73       	andi	r24, 0x3F	; 63
     61c:	4f 2d       	mov	r20, r15
     61e:	6c 2f       	mov	r22, r28
     620:	80 64       	ori	r24, 0x40	; 64
     622:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     626:	81 2f       	mov	r24, r17
     628:	8f 73       	andi	r24, 0x3F	; 63
     62a:	4f 2d       	mov	r20, r15
     62c:	60 2f       	mov	r22, r16
     62e:	80 64       	ori	r24, 0x40	; 64
     630:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     634:	4f 2d       	mov	r20, r15
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	80 ec       	ldi	r24, 0xC0	; 192
     63a:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	e8 16       	cp	r14, r24
     642:	61 f0       	breq	.+24     	; 0x65c <set_functionality+0xa4>
     644:	83 e0       	ldi	r24, 0x03	; 3
     646:	e8 16       	cp	r14, r24
     648:	79 f0       	breq	.+30     	; 0x668 <set_functionality+0xb0>
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	e8 12       	cpse	r14, r24
     64e:	12 c0       	rjmp	.+36     	; 0x674 <set_functionality+0xbc>
     650:	4f 2d       	mov	r20, r15
     652:	60 e2       	ldi	r22, 0x20	; 32
     654:	80 e2       	ldi	r24, 0x20	; 32
     656:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     65a:	11 c0       	rjmp	.+34     	; 0x67e <set_functionality+0xc6>
     65c:	4f 2d       	mov	r20, r15
     65e:	62 e0       	ldi	r22, 0x02	; 2
     660:	80 e2       	ldi	r24, 0x20	; 32
     662:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     666:	0b c0       	rjmp	.+22     	; 0x67e <set_functionality+0xc6>
     668:	4f 2d       	mov	r20, r15
     66a:	68 e2       	ldi	r22, 0x28	; 40
     66c:	80 e2       	ldi	r24, 0x20	; 32
     66e:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     672:	05 c0       	rjmp	.+10     	; 0x67e <set_functionality+0xc6>
     674:	4f 2d       	mov	r20, r15
     676:	60 e8       	ldi	r22, 0x80	; 128
     678:	80 e2       	ldi	r24, 0x20	; 32
     67a:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     67e:	6e 2d       	mov	r22, r14
     680:	8f 2d       	mov	r24, r15
     682:	0e 94 ca 02 	call	0x594	; 0x594 <set_output_selection>
     686:	0e 94 61 13 	call	0x26c2	; 0x26c2 <Init_SPI_All>
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	ff 90       	pop	r15
     694:	ef 90       	pop	r14
     696:	bf 90       	pop	r11
     698:	af 90       	pop	r10
     69a:	9f 90       	pop	r9
     69c:	8f 90       	pop	r8
     69e:	08 95       	ret

000006a0 <set_amplitude>:
     6a0:	2f ef       	ldi	r18, 0xFF	; 255
     6a2:	3f e0       	ldi	r19, 0x0F	; 15
     6a4:	28 1b       	sub	r18, r24
     6a6:	39 0b       	sbc	r19, r25
     6a8:	83 2f       	mov	r24, r19
     6aa:	8f 70       	andi	r24, 0x0F	; 15
     6ac:	65 30       	cpi	r22, 0x05	; 5
     6ae:	41 f4       	brne	.+16     	; 0x6c0 <set_amplitude+0x20>
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	62 2f       	mov	r22, r18
     6b4:	80 6f       	ori	r24, 0xF0	; 240
     6b6:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	08 95       	ret
     6c0:	66 30       	cpi	r22, 0x06	; 6
     6c2:	41 f4       	brne	.+16     	; 0x6d4 <set_amplitude+0x34>
     6c4:	42 e0       	ldi	r20, 0x02	; 2
     6c6:	62 2f       	mov	r22, r18
     6c8:	80 6f       	ori	r24, 0xF0	; 240
     6ca:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	08 95       	ret
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	9f ef       	ldi	r25, 0xFF	; 255
     6d8:	08 95       	ret

000006da <poll_switch>:
     6da:	82 99       	sbic	0x10, 2	; 16
     6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <poll_switch+0xc>
     6de:	82 9b       	sbis	0x10, 2	; 16
     6e0:	fe cf       	rjmp	.-4      	; 0x6de <poll_switch+0x4>
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	08 95       	ret
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	08 95       	ret

000006ea <set_LCD_contrast>:
     6ea:	2f ef       	ldi	r18, 0xFF	; 255
     6ec:	82 9f       	mul	r24, r18
     6ee:	c0 01       	movw	r24, r0
     6f0:	11 24       	eor	r1, r1
     6f2:	64 e6       	ldi	r22, 0x64	; 100
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	0e 94 39 19 	call	0x3272	; 0x3272 <__divmodhi4>
     6fa:	60 95       	com	r22
     6fc:	47 e0       	ldi	r20, 0x07	; 7
     6fe:	81 e1       	ldi	r24, 0x11	; 17
     700:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     704:	08 95       	ret

00000706 <set_LCD_brightness>:
     706:	85 36       	cpi	r24, 0x65	; 101
     708:	f8 f4       	brcc	.+62     	; 0x748 <set_LCD_brightness+0x42>
     70a:	29 e1       	ldi	r18, 0x19	; 25
     70c:	82 9f       	mul	r24, r18
     70e:	c0 01       	movw	r24, r0
     710:	11 24       	eor	r1, r1
     712:	64 e6       	ldi	r22, 0x64	; 100
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	0e 94 39 19 	call	0x3272	; 0x3272 <__divmodhi4>
     71a:	65 5b       	subi	r22, 0xB5	; 181
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 49 16 	call	0x2c92	; 0x2c92 <__floatsisf>
     726:	2d ec       	ldi	r18, 0xCD	; 205
     728:	3c ec       	ldi	r19, 0xCC	; 204
     72a:	43 e2       	ldi	r20, 0x23	; 35
     72c:	52 e4       	ldi	r21, 0x42	; 66
     72e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulsf3>
     732:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__fixunssfsi>
     736:	87 2f       	mov	r24, r23
     738:	8f 70       	andi	r24, 0x0F	; 15
     73a:	42 e0       	ldi	r20, 0x02	; 2
     73c:	80 67       	ori	r24, 0x70	; 112
     73e:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	08 95       	ret
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	9f ef       	ldi	r25, 0xFF	; 255
     74c:	08 95       	ret

0000074e <set_animated_brightness>:
     74e:	cf 93       	push	r28
     750:	c0 e0       	ldi	r28, 0x00	; 0
     752:	8c 2f       	mov	r24, r28
     754:	0e 94 83 03 	call	0x706	; 0x706 <set_LCD_brightness>
     758:	8f e1       	ldi	r24, 0x1F	; 31
     75a:	9e e4       	ldi	r25, 0x4E	; 78
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <set_animated_brightness+0xe>
     760:	00 c0       	rjmp	.+0      	; 0x762 <set_animated_brightness+0x14>
     762:	00 00       	nop
     764:	cf 5f       	subi	r28, 0xFF	; 255
     766:	c5 36       	cpi	r28, 0x65	; 101
     768:	a1 f7       	brne	.-24     	; 0x752 <set_animated_brightness+0x4>
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <Init_UI>:
     76e:	0e 94 a7 03 	call	0x74e	; 0x74e <set_animated_brightness>
     772:	84 e6       	ldi	r24, 0x64	; 100
     774:	0e 94 75 03 	call	0x6ea	; 0x6ea <set_LCD_contrast>
     778:	0e 94 80 01 	call	0x300	; 0x300 <LCD_logo_display>
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	0e 94 39 02 	call	0x472	; 0x472 <play_melody>
     782:	2f ef       	ldi	r18, 0xFF	; 255
     784:	8d e3       	ldi	r24, 0x3D	; 61
     786:	99 e4       	ldi	r25, 0x49	; 73
     788:	21 50       	subi	r18, 0x01	; 1
     78a:	80 40       	sbci	r24, 0x00	; 0
     78c:	90 40       	sbci	r25, 0x00	; 0
     78e:	e1 f7       	brne	.-8      	; 0x788 <Init_UI+0x1a>
     790:	00 c0       	rjmp	.+0      	; 0x792 <Init_UI+0x24>
     792:	00 00       	nop
     794:	08 95       	ret

00000796 <set_dc_bias>:
     796:	7f 70       	andi	r23, 0x0F	; 15
     798:	85 30       	cpi	r24, 0x05	; 5
     79a:	19 f0       	breq	.+6      	; 0x7a2 <set_dc_bias+0xc>
     79c:	86 30       	cpi	r24, 0x06	; 6
     79e:	99 f0       	breq	.+38     	; 0x7c6 <set_dc_bias+0x30>
     7a0:	24 c0       	rjmp	.+72     	; 0x7ea <set_dc_bias+0x54>
     7a2:	44 23       	and	r20, r20
     7a4:	41 f0       	breq	.+16     	; 0x7b6 <set_dc_bias+0x20>
     7a6:	43 e0       	ldi	r20, 0x03	; 3
     7a8:	87 2f       	mov	r24, r23
     7aa:	80 67       	ori	r24, 0x70	; 112
     7ac:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	08 95       	ret
     7b6:	43 e0       	ldi	r20, 0x03	; 3
     7b8:	87 2f       	mov	r24, r23
     7ba:	80 6f       	ori	r24, 0xF0	; 240
     7bc:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	08 95       	ret
     7c6:	44 23       	and	r20, r20
     7c8:	41 f0       	breq	.+16     	; 0x7da <set_dc_bias+0x44>
     7ca:	44 e0       	ldi	r20, 0x04	; 4
     7cc:	87 2f       	mov	r24, r23
     7ce:	80 67       	ori	r24, 0x70	; 112
     7d0:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	08 95       	ret
     7da:	44 e0       	ldi	r20, 0x04	; 4
     7dc:	87 2f       	mov	r24, r23
     7de:	80 6f       	ori	r24, 0xF0	; 240
     7e0:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	08 95       	ret
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	9f ef       	ldi	r25, 0xFF	; 255
     7ee:	08 95       	ret

000007f0 <erase_EEPROM_1K>:
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	c0 e0       	ldi	r28, 0x00	; 0
     7f6:	d0 e0       	ldi	r29, 0x00	; 0
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	ce 01       	movw	r24, r28
     7fc:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <eeprom_write_byte>
     800:	21 96       	adiw	r28, 0x01	; 1
     802:	c1 38       	cpi	r28, 0x81	; 129
     804:	d1 05       	cpc	r29, r1
     806:	c1 f7       	brne	.-16     	; 0x7f8 <erase_EEPROM_1K+0x8>
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <shutdown_sequence>:
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	d8 2f       	mov	r29, r24
     814:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
     818:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	8b ec       	ldi	r24, 0xCB	; 203
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     826:	60 e4       	ldi	r22, 0x40	; 64
     828:	80 ee       	ldi	r24, 0xE0	; 224
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     830:	64 e1       	ldi	r22, 0x14	; 20
     832:	85 ef       	ldi	r24, 0xF5	; 245
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     83a:	c5 e3       	ldi	r28, 0x35	; 53
     83c:	43 e0       	ldi	r20, 0x03	; 3
     83e:	64 e1       	ldi	r22, 0x14	; 20
     840:	8c 2f       	mov	r24, r28
     842:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
     846:	2f ef       	ldi	r18, 0xFF	; 255
     848:	89 e6       	ldi	r24, 0x69	; 105
     84a:	98 e1       	ldi	r25, 0x18	; 24
     84c:	21 50       	subi	r18, 0x01	; 1
     84e:	80 40       	sbci	r24, 0x00	; 0
     850:	90 40       	sbci	r25, 0x00	; 0
     852:	e1 f7       	brne	.-8      	; 0x84c <shutdown_sequence+0x3e>
     854:	00 c0       	rjmp	.+0      	; 0x856 <shutdown_sequence+0x48>
     856:	00 00       	nop
     858:	c1 50       	subi	r28, 0x01	; 1
     85a:	c0 33       	cpi	r28, 0x30	; 48
     85c:	79 f7       	brne	.-34     	; 0x83c <shutdown_sequence+0x2e>
     85e:	d1 11       	cpse	r29, r1
     860:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <erase_EEPROM_1K>
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	0e 94 39 02 	call	0x472	; 0x472 <play_melody>
     86a:	da 98       	cbi	0x1b, 2	; 27
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <create_wifi_command>:
     872:	cf 92       	push	r12
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	c4 e9       	ldi	r28, 0x94	; 148
     884:	d4 e0       	ldi	r29, 0x04	; 4
     886:	80 e8       	ldi	r24, 0x80	; 128
     888:	fe 01       	movw	r30, r28
     88a:	11 92       	st	Z+, r1
     88c:	8a 95       	dec	r24
     88e:	e9 f7       	brne	.-6      	; 0x88a <create_wifi_command+0x18>
     890:	07 e5       	ldi	r16, 0x57	; 87
     892:	15 e0       	ldi	r17, 0x05	; 5
     894:	80 e2       	ldi	r24, 0x20	; 32
     896:	f8 01       	movw	r30, r16
     898:	11 92       	st	Z+, r1
     89a:	8a 95       	dec	r24
     89c:	e9 f7       	brne	.-6      	; 0x898 <create_wifi_command+0x26>
     89e:	0f 2e       	mov	r0, r31
     8a0:	f7 e7       	ldi	r31, 0x77	; 119
     8a2:	ef 2e       	mov	r14, r31
     8a4:	f5 e0       	ldi	r31, 0x05	; 5
     8a6:	ff 2e       	mov	r15, r31
     8a8:	f0 2d       	mov	r31, r0
     8aa:	80 e4       	ldi	r24, 0x40	; 64
     8ac:	f7 01       	movw	r30, r14
     8ae:	11 92       	st	Z+, r1
     8b0:	8a 95       	dec	r24
     8b2:	e9 f7       	brne	.-6      	; 0x8ae <create_wifi_command+0x3c>
     8b4:	0f 2e       	mov	r0, r31
     8b6:	fe ec       	ldi	r31, 0xCE	; 206
     8b8:	cf 2e       	mov	r12, r31
     8ba:	f5 e0       	ldi	r31, 0x05	; 5
     8bc:	df 2e       	mov	r13, r31
     8be:	f0 2d       	mov	r31, r0
     8c0:	f6 01       	movw	r30, r12
     8c2:	10 82       	st	Z, r1
     8c4:	40 e2       	ldi	r20, 0x20	; 32
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	61 e0       	ldi	r22, 0x01	; 1
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	c8 01       	movw	r24, r16
     8ce:	0e 94 b5 1c 	call	0x396a	; 0x396a <eeprom_read_block>
     8d2:	40 e4       	ldi	r20, 0x40	; 64
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	61 e2       	ldi	r22, 0x21	; 33
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	c7 01       	movw	r24, r14
     8dc:	0e 94 b5 1c 	call	0x396a	; 0x396a <eeprom_read_block>
     8e0:	81 e6       	ldi	r24, 0x61	; 97
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 c5 1c 	call	0x398a	; 0x398a <eeprom_read_byte>
     8e8:	f6 01       	movw	r30, r12
     8ea:	80 83       	st	Z, r24
     8ec:	ff 92       	push	r15
     8ee:	ef 92       	push	r14
     8f0:	1f 93       	push	r17
     8f2:	0f 93       	push	r16
     8f4:	8a e0       	ldi	r24, 0x0A	; 10
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	9f 93       	push	r25
     8fa:	8f 93       	push	r24
     8fc:	df 93       	push	r29
     8fe:	cf 93       	push	r28
     900:	0e 94 02 1a 	call	0x3404	; 0x3404 <sprintf>
     904:	ed b7       	in	r30, 0x3d	; 61
     906:	fe b7       	in	r31, 0x3e	; 62
     908:	38 96       	adiw	r30, 0x08	; 8
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	fe bf       	out	0x3e, r31	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	ed bf       	out	0x3d, r30	; 61
     914:	ce 01       	movw	r24, r28
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	08 95       	ret

00000928 <save_wifi_credentials>:
     928:	40 e2       	ldi	r20, 0x20	; 32
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	87 e5       	ldi	r24, 0x57	; 87
     932:	95 e0       	ldi	r25, 0x05	; 5
     934:	0e 94 cd 1c 	call	0x399a	; 0x399a <eeprom_write_block>
     938:	40 e4       	ldi	r20, 0x40	; 64
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	61 e2       	ldi	r22, 0x21	; 33
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	87 e7       	ldi	r24, 0x77	; 119
     942:	95 e0       	ldi	r25, 0x05	; 5
     944:	0e 94 cd 1c 	call	0x399a	; 0x399a <eeprom_write_block>
     948:	60 91 ce 05 	lds	r22, 0x05CE	; 0x8005ce <WIFI+0x77>
     94c:	81 e6       	ldi	r24, 0x61	; 97
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <eeprom_write_byte>
     954:	08 95       	ret

00000956 <retrieve_wifi_credentials>:
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	00 d0       	rcall	.+0      	; 0x95c <retrieve_wifi_credentials+0x6>
     95c:	1f 92       	push	r1
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	80 e2       	ldi	r24, 0x20	; 32
     964:	e7 e5       	ldi	r30, 0x57	; 87
     966:	f5 e0       	ldi	r31, 0x05	; 5
     968:	df 01       	movw	r26, r30
     96a:	1d 92       	st	X+, r1
     96c:	8a 95       	dec	r24
     96e:	e9 f7       	brne	.-6      	; 0x96a <retrieve_wifi_credentials+0x14>
     970:	80 e4       	ldi	r24, 0x40	; 64
     972:	e7 e7       	ldi	r30, 0x77	; 119
     974:	f5 e0       	ldi	r31, 0x05	; 5
     976:	df 01       	movw	r26, r30
     978:	1d 92       	st	X+, r1
     97a:	8a 95       	dec	r24
     97c:	e9 f7       	brne	.-6      	; 0x978 <retrieve_wifi_credentials+0x22>
     97e:	1b 82       	std	Y+3, r1	; 0x03
     980:	e8 ed       	ldi	r30, 0xD8	; 216
     982:	f5 e0       	ldi	r31, 0x05	; 5
     984:	86 e0       	ldi	r24, 0x06	; 6
     986:	91 91       	ld	r25, Z+
     988:	9c 32       	cpi	r25, 0x2C	; 44
     98a:	49 f4       	brne	.+18     	; 0x99e <retrieve_wifi_credentials+0x48>
     98c:	90 81       	ld	r25, Z
     98e:	90 35       	cpi	r25, 0x50	; 80
     990:	31 f4       	brne	.+12     	; 0x99e <retrieve_wifi_credentials+0x48>
     992:	9f ef       	ldi	r25, 0xFF	; 255
     994:	98 0f       	add	r25, r24
     996:	99 83       	std	Y+1, r25	; 0x01
     998:	8e 5f       	subi	r24, 0xFE	; 254
     99a:	8a 83       	std	Y+2, r24	; 0x02
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <retrieve_wifi_credentials+0x4e>
     99e:	8f 5f       	subi	r24, 0xFF	; 255
     9a0:	86 32       	cpi	r24, 0x26	; 38
     9a2:	89 f7       	brne	.-30     	; 0x986 <retrieve_wifi_credentials+0x30>
     9a4:	4a 81       	ldd	r20, Y+2	; 0x02
     9a6:	24 2f       	mov	r18, r20
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	80 5c       	subi	r24, 0xC0	; 192
     9b0:	9f 4f       	sbci	r25, 0xFF	; 255
     9b2:	28 17       	cp	r18, r24
     9b4:	39 07       	cpc	r19, r25
     9b6:	cc f4       	brge	.+50     	; 0x9ea <retrieve_wifi_credentials+0x94>
     9b8:	f9 01       	movw	r30, r18
     9ba:	ee 52       	subi	r30, 0x2E	; 46
     9bc:	fa 4f       	sbci	r31, 0xFA	; 250
     9be:	80 81       	ld	r24, Z
     9c0:	8c 32       	cpi	r24, 0x2C	; 44
     9c2:	49 f4       	brne	.+18     	; 0x9d6 <retrieve_wifi_credentials+0x80>
     9c4:	f9 01       	movw	r30, r18
     9c6:	ee 52       	subi	r30, 0x2E	; 46
     9c8:	fa 4f       	sbci	r31, 0xFA	; 250
     9ca:	81 81       	ldd	r24, Z+1	; 0x01
     9cc:	85 34       	cpi	r24, 0x45	; 69
     9ce:	19 f4       	brne	.+6      	; 0x9d6 <retrieve_wifi_credentials+0x80>
     9d0:	41 50       	subi	r20, 0x01	; 1
     9d2:	4b 83       	std	Y+3, r20	; 0x03
     9d4:	0a c0       	rjmp	.+20     	; 0x9ea <retrieve_wifi_credentials+0x94>
     9d6:	4f 5f       	subi	r20, 0xFF	; 255
     9d8:	24 2f       	mov	r18, r20
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	8a 81       	ldd	r24, Y+2	; 0x02
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	80 5c       	subi	r24, 0xC0	; 192
     9e2:	9f 4f       	sbci	r25, 0xFF	; 255
     9e4:	28 17       	cp	r18, r24
     9e6:	39 07       	cpc	r19, r25
     9e8:	3c f3       	brlt	.-50     	; 0x9b8 <retrieve_wifi_credentials+0x62>
     9ea:	49 81       	ldd	r20, Y+1	; 0x01
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	45 50       	subi	r20, 0x05	; 5
     9f0:	51 09       	sbc	r21, r1
     9f2:	68 ed       	ldi	r22, 0xD8	; 216
     9f4:	75 e0       	ldi	r23, 0x05	; 5
     9f6:	87 e5       	ldi	r24, 0x57	; 87
     9f8:	95 e0       	ldi	r25, 0x05	; 5
     9fa:	0e 94 c1 19 	call	0x3382	; 0x3382 <memcpy>
     9fe:	4b 81       	ldd	r20, Y+3	; 0x03
     a00:	8a 81       	ldd	r24, Y+2	; 0x02
     a02:	6a 81       	ldd	r22, Y+2	; 0x02
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	48 1b       	sub	r20, r24
     a08:	51 09       	sbc	r21, r1
     a0a:	4f 5f       	subi	r20, 0xFF	; 255
     a0c:	5f 4f       	sbci	r21, 0xFF	; 255
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	6e 52       	subi	r22, 0x2E	; 46
     a12:	7a 4f       	sbci	r23, 0xFA	; 250
     a14:	87 e7       	ldi	r24, 0x77	; 119
     a16:	95 e0       	ldi	r25, 0x05	; 5
     a18:	0e 94 c1 19 	call	0x3382	; 0x3382 <memcpy>
     a1c:	eb 81       	ldd	r30, Y+3	; 0x03
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	ee 52       	subi	r30, 0x2E	; 46
     a22:	fa 4f       	sbci	r31, 0xFA	; 250
     a24:	83 81       	ldd	r24, Z+3	; 0x03
     a26:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <WIFI+0x77>
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <pack_mac_string>:
     a36:	e7 eb       	ldi	r30, 0xB7	; 183
     a38:	f5 e0       	ldi	r31, 0x05	; 5
     a3a:	8d e4       	ldi	r24, 0x4D	; 77
     a3c:	91 e4       	ldi	r25, 0x41	; 65
     a3e:	91 83       	std	Z+1, r25	; 0x01
     a40:	80 83       	st	Z, r24
     a42:	83 e4       	ldi	r24, 0x43	; 67
     a44:	9d e3       	ldi	r25, 0x3D	; 61
     a46:	93 83       	std	Z+3, r25	; 0x03
     a48:	82 83       	std	Z+2, r24	; 0x02
     a4a:	81 e1       	ldi	r24, 0x11	; 17
     a4c:	ee ed       	ldi	r30, 0xDE	; 222
     a4e:	f5 e0       	ldi	r31, 0x05	; 5
     a50:	ab eb       	ldi	r26, 0xBB	; 187
     a52:	b5 e0       	ldi	r27, 0x05	; 5
     a54:	01 90       	ld	r0, Z+
     a56:	0d 92       	st	X+, r0
     a58:	8a 95       	dec	r24
     a5a:	e1 f7       	brne	.-8      	; 0xa54 <pack_mac_string+0x1e>
     a5c:	8d e0       	ldi	r24, 0x0D	; 13
     a5e:	9a e0       	ldi	r25, 0x0A	; 10
     a60:	90 93 cd 05 	sts	0x05CD, r25	; 0x8005cd <WIFI+0x76>
     a64:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <WIFI+0x75>
     a68:	08 95       	ret

00000a6a <halt_system>:
     a6a:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	8f e1       	ldi	r24, 0x1F	; 31
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     a78:	60 e4       	ldi	r22, 0x40	; 64
     a7a:	84 e3       	ldi	r24, 0x34	; 52
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     a82:	64 e1       	ldi	r22, 0x14	; 20
     a84:	89 e4       	ldi	r24, 0x49	; 73
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     a8c:	64 e5       	ldi	r22, 0x54	; 84
     a8e:	8e e5       	ldi	r24, 0x5E	; 94
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
     a96:	c0 e0       	ldi	r28, 0x00	; 0
     a98:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
     a9c:	88 23       	and	r24, r24
     a9e:	81 f0       	breq	.+32     	; 0xac0 <halt_system+0x56>
     aa0:	cf 5f       	subi	r28, 0xFF	; 255
     aa2:	2f ef       	ldi	r18, 0xFF	; 255
     aa4:	89 e6       	ldi	r24, 0x69	; 105
     aa6:	98 e1       	ldi	r25, 0x18	; 24
     aa8:	21 50       	subi	r18, 0x01	; 1
     aaa:	80 40       	sbci	r24, 0x00	; 0
     aac:	90 40       	sbci	r25, 0x00	; 0
     aae:	e1 f7       	brne	.-8      	; 0xaa8 <halt_system+0x3e>
     ab0:	00 c0       	rjmp	.+0      	; 0xab2 <halt_system+0x48>
     ab2:	00 00       	nop
     ab4:	c4 30       	cpi	r28, 0x04	; 4
     ab6:	80 f3       	brcs	.-32     	; 0xa98 <halt_system+0x2e>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
     abe:	ec cf       	rjmp	.-40     	; 0xa98 <halt_system+0x2e>
     ac0:	83 e7       	ldi	r24, 0x73	; 115
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
     ac8:	2f ef       	ldi	r18, 0xFF	; 255
     aca:	84 e3       	ldi	r24, 0x34	; 52
     acc:	9c e0       	ldi	r25, 0x0C	; 12
     ace:	21 50       	subi	r18, 0x01	; 1
     ad0:	80 40       	sbci	r24, 0x00	; 0
     ad2:	90 40       	sbci	r25, 0x00	; 0
     ad4:	e1 f7       	brne	.-8      	; 0xace <halt_system+0x64>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <halt_system+0x6e>
     ad8:	00 00       	nop
     ada:	98 e0       	ldi	r25, 0x08	; 8
     adc:	88 e1       	ldi	r24, 0x18	; 24
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	a8 95       	wdr
     ae4:	81 bd       	out	0x21, r24	; 33
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	91 bd       	out	0x21, r25	; 33
     aea:	ff cf       	rjmp	.-2      	; 0xaea <halt_system+0x80>

00000aec <set_volume>:
     aec:	2f ef       	ldi	r18, 0xFF	; 255
     aee:	82 9f       	mul	r24, r18
     af0:	c0 01       	movw	r24, r0
     af2:	11 24       	eor	r1, r1
     af4:	64 e6       	ldi	r22, 0x64	; 100
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	0e 94 39 19 	call	0x3272	; 0x3272 <__divmodhi4>
     afc:	60 95       	com	r22
     afe:	47 e0       	ldi	r20, 0x07	; 7
     b00:	80 e7       	ldi	r24, 0x70	; 112
     b02:	0e 94 0f 13 	call	0x261e	; 0x261e <SPI_write_16bit>
     b06:	08 95       	ret

00000b08 <update_sg_param_value>:
     b08:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <UART+0x7>
     b0c:	9d 30       	cpi	r25, 0x0D	; 13
     b0e:	c9 f1       	breq	.+114    	; 0xb82 <update_sg_param_value+0x7a>
     b10:	30 91 da 05 	lds	r19, 0x05DA	; 0x8005da <UART+0x8>
     b14:	3d 30       	cpi	r19, 0x0D	; 13
     b16:	11 f4       	brne	.+4      	; 0xb1c <update_sg_param_value+0x14>
     b18:	90 53       	subi	r25, 0x30	; 48
     b1a:	21 c0       	rjmp	.+66     	; 0xb5e <update_sg_param_value+0x56>
     b1c:	20 91 db 05 	lds	r18, 0x05DB	; 0x8005db <UART+0x9>
     b20:	2d 30       	cpi	r18, 0x0D	; 13
     b22:	51 f4       	brne	.+20     	; 0xb38 <update_sg_param_value+0x30>
     b24:	99 0f       	add	r25, r25
     b26:	20 ea       	ldi	r18, 0xA0	; 160
     b28:	29 0f       	add	r18, r25
     b2a:	92 2f       	mov	r25, r18
     b2c:	99 0f       	add	r25, r25
     b2e:	99 0f       	add	r25, r25
     b30:	92 0f       	add	r25, r18
     b32:	30 53       	subi	r19, 0x30	; 48
     b34:	93 0f       	add	r25, r19
     b36:	13 c0       	rjmp	.+38     	; 0xb5e <update_sg_param_value+0x56>
     b38:	40 91 dc 05 	lds	r20, 0x05DC	; 0x8005dc <UART+0xa>
     b3c:	4d 30       	cpi	r20, 0x0D	; 13
     b3e:	19 f5       	brne	.+70     	; 0xb86 <update_sg_param_value+0x7e>
     b40:	33 0f       	add	r19, r19
     b42:	30 56       	subi	r19, 0x60	; 96
     b44:	43 2f       	mov	r20, r19
     b46:	44 0f       	add	r20, r20
     b48:	44 0f       	add	r20, r20
     b4a:	34 0f       	add	r19, r20
     b4c:	20 53       	subi	r18, 0x30	; 48
     b4e:	32 0f       	add	r19, r18
     b50:	20 ed       	ldi	r18, 0xD0	; 208
     b52:	29 0f       	add	r18, r25
     b54:	93 2f       	mov	r25, r19
     b56:	44 e6       	ldi	r20, 0x64	; 100
     b58:	24 9f       	mul	r18, r20
     b5a:	90 0d       	add	r25, r0
     b5c:	11 24       	eor	r1, r1
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	21 f4       	brne	.+8      	; 0xb6a <update_sg_param_value+0x62>
     b62:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <LCD+0x1>
     b66:	89 2f       	mov	r24, r25
     b68:	08 95       	ret
     b6a:	81 11       	cpse	r24, r1
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <update_sg_param_value+0x6e>
     b6e:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <LCD>
     b72:	89 2f       	mov	r24, r25
     b74:	08 95       	ret
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	41 f4       	brne	.+16     	; 0xb8a <update_sg_param_value+0x82>
     b7a:	90 93 d1 05 	sts	0x05D1, r25	; 0x8005d1 <LCD+0x2>
     b7e:	89 2f       	mov	r24, r25
     b80:	08 95       	ret
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	08 95       	ret
     b86:	84 e6       	ldi	r24, 0x64	; 100
     b88:	08 95       	ret
     b8a:	89 2f       	mov	r24, r25
     b8c:	08 95       	ret

00000b8e <update_ac_power_status>:
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	00 d0       	rcall	.+0      	; 0xb94 <update_ac_power_status+0x6>
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	1a 82       	std	Y+2, r1	; 0x02
     b9a:	19 82       	std	Y+1, r1	; 0x01
     b9c:	38 9a       	sbi	0x07, 0	; 7
     b9e:	36 9a       	sbi	0x06, 6	; 6
     ba0:	36 99       	sbic	0x06, 6	; 6
     ba2:	fe cf       	rjmp	.-4      	; 0xba0 <update_ac_power_status+0x12>
     ba4:	84 b1       	in	r24, 0x04	; 4
     ba6:	95 b1       	in	r25, 0x05	; 5
     ba8:	9a 83       	std	Y+2, r25	; 0x02
     baa:	89 83       	std	Y+1, r24	; 0x01
     bac:	36 9a       	sbi	0x06, 6	; 6
     bae:	36 99       	sbic	0x06, 6	; 6
     bb0:	fe cf       	rjmp	.-4      	; 0xbae <update_ac_power_status+0x20>
     bb2:	24 b1       	in	r18, 0x04	; 4
     bb4:	35 b1       	in	r19, 0x05	; 5
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	9a 81       	ldd	r25, Y+2	; 0x02
     bba:	82 0f       	add	r24, r18
     bbc:	93 1f       	adc	r25, r19
     bbe:	96 95       	lsr	r25
     bc0:	87 95       	ror	r24
     bc2:	9a 83       	std	Y+2, r25	; 0x02
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	9a 81       	ldd	r25, Y+2	; 0x02
     bca:	84 3f       	cpi	r24, 0xF4	; 244
     bcc:	91 40       	sbci	r25, 0x01	; 1
     bce:	18 f4       	brcc	.+6      	; 0xbd6 <update_ac_power_status+0x48>
     bd0:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <STATUS+0x1>
     bd4:	03 c0       	rjmp	.+6      	; 0xbdc <update_ac_power_status+0x4e>
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <STATUS+0x1>
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <get_battery_status>:
     be6:	ea e8       	ldi	r30, 0x8A	; 138
     be8:	f4 e0       	ldi	r31, 0x04	; 4
     bea:	8a e0       	ldi	r24, 0x0A	; 10
     bec:	df 01       	movw	r26, r30
     bee:	1d 92       	st	X+, r1
     bf0:	8a 95       	dec	r24
     bf2:	e9 f7       	brne	.-6      	; 0xbee <get_battery_status+0x8>
     bf4:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <STATUS>
     bf8:	1f 92       	push	r1
     bfa:	8f 93       	push	r24
     bfc:	8d e7       	ldi	r24, 0x7D	; 125
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	9f 93       	push	r25
     c02:	8f 93       	push	r24
     c04:	1f 92       	push	r1
     c06:	8b e0       	ldi	r24, 0x0B	; 11
     c08:	8f 93       	push	r24
     c0a:	ff 93       	push	r31
     c0c:	ef 93       	push	r30
     c0e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
     c12:	8d b7       	in	r24, 0x3d	; 61
     c14:	9e b7       	in	r25, 0x3e	; 62
     c16:	08 96       	adiw	r24, 0x08	; 8
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	9e bf       	out	0x3e, r25	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	8d bf       	out	0x3d, r24	; 61
     c22:	8a e8       	ldi	r24, 0x8A	; 138
     c24:	94 e0       	ldi	r25, 0x04	; 4
     c26:	08 95       	ret

00000c28 <get_ac_power_status>:
     c28:	88 e0       	ldi	r24, 0x08	; 8
     c2a:	e2 e8       	ldi	r30, 0x82	; 130
     c2c:	f4 e0       	ldi	r31, 0x04	; 4
     c2e:	df 01       	movw	r26, r30
     c30:	1d 92       	st	X+, r1
     c32:	8a 95       	dec	r24
     c34:	e9 f7       	brne	.-6      	; 0xc30 <get_ac_power_status+0x8>
     c36:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <STATUS+0x1>
     c3a:	88 23       	and	r24, r24
     c3c:	99 f0       	breq	.+38     	; 0xc64 <get_ac_power_status+0x3c>
     c3e:	87 e8       	ldi	r24, 0x87	; 135
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	9f 93       	push	r25
     c44:	8f 93       	push	r24
     c46:	1f 92       	push	r1
     c48:	87 e0       	ldi	r24, 0x07	; 7
     c4a:	8f 93       	push	r24
     c4c:	cf 01       	movw	r24, r30
     c4e:	9f 93       	push	r25
     c50:	ef 93       	push	r30
     c52:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	09 c0       	rjmp	.+18     	; 0xc76 <get_ac_power_status+0x4e>
     c64:	89 e0       	ldi	r24, 0x09	; 9
     c66:	ef e8       	ldi	r30, 0x8F	; 143
     c68:	f1 e0       	ldi	r31, 0x01	; 1
     c6a:	a2 e8       	ldi	r26, 0x82	; 130
     c6c:	b4 e0       	ldi	r27, 0x04	; 4
     c6e:	01 90       	ld	r0, Z+
     c70:	0d 92       	st	X+, r0
     c72:	8a 95       	dec	r24
     c74:	e1 f7       	brne	.-8      	; 0xc6e <get_ac_power_status+0x46>
     c76:	82 e8       	ldi	r24, 0x82	; 130
     c78:	94 e0       	ldi	r25, 0x04	; 4
     c7a:	08 95       	ret

00000c7c <get_li_ion_percentage>:
     c7c:	84 3e       	cpi	r24, 0xE4	; 228
     c7e:	2c e0       	ldi	r18, 0x0C	; 12
     c80:	92 07       	cpc	r25, r18
     c82:	08 f4       	brcc	.+2      	; 0xc86 <get_li_ion_percentage+0xa>
     c84:	a6 c0       	rjmp	.+332    	; 0xdd2 <get_li_ion_percentage+0x156>
     c86:	ac 01       	movw	r20, r24
     c88:	9c 01       	movw	r18, r24
     c8a:	24 5e       	subi	r18, 0xE4	; 228
     c8c:	3c 40       	sbci	r19, 0x0C	; 12
     c8e:	24 3f       	cpi	r18, 0xF4	; 244
     c90:	31 40       	sbci	r19, 0x01	; 1
     c92:	b0 f4       	brcc	.+44     	; 0xcc0 <get_li_ion_percentage+0x44>
     c94:	94 e2       	ldi	r25, 0x24	; 36
     c96:	94 9f       	mul	r25, r20
     c98:	b0 01       	movw	r22, r0
     c9a:	95 9f       	mul	r25, r21
     c9c:	70 0d       	add	r23, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	60 51       	subi	r22, 0x10	; 16
     ca2:	70 4d       	sbci	r23, 0xD0	; 208
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__floatunsisf>
     cac:	2f e6       	ldi	r18, 0x6F	; 111
     cae:	32 e1       	ldi	r19, 0x12	; 18
     cb0:	43 e0       	ldi	r20, 0x03	; 3
     cb2:	5b e3       	ldi	r21, 0x3B	; 59
     cb4:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulsf3>
     cb8:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__fixunssfsi>
     cbc:	86 2f       	mov	r24, r22
     cbe:	08 95       	ret
     cc0:	9a 01       	movw	r18, r20
     cc2:	28 5d       	subi	r18, 0xD8	; 216
     cc4:	3e 40       	sbci	r19, 0x0E	; 14
     cc6:	24 36       	cpi	r18, 0x64	; 100
     cc8:	31 05       	cpc	r19, r1
     cca:	e0 f4       	brcc	.+56     	; 0xd04 <get_li_ion_percentage+0x88>
     ccc:	8a e1       	ldi	r24, 0x1A	; 26
     cce:	84 9f       	mul	r24, r20
     cd0:	b0 01       	movw	r22, r0
     cd2:	85 9f       	mul	r24, r21
     cd4:	70 0d       	add	r23, r0
     cd6:	11 24       	eor	r1, r1
     cd8:	60 5f       	subi	r22, 0xF0	; 240
     cda:	71 48       	sbci	r23, 0x81	; 129
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__floatunsisf>
     ce4:	2a e0       	ldi	r18, 0x0A	; 10
     ce6:	37 ed       	ldi	r19, 0xD7	; 215
     ce8:	43 e2       	ldi	r20, 0x23	; 35
     cea:	5c e3       	ldi	r21, 0x3C	; 60
     cec:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulsf3>
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e1       	ldi	r20, 0x10	; 16
     cf6:	52 e4       	ldi	r21, 0x42	; 66
     cf8:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__addsf3>
     cfc:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__fixunssfsi>
     d00:	86 2f       	mov	r24, r22
     d02:	08 95       	ret
     d04:	9a 01       	movw	r18, r20
     d06:	2c 53       	subi	r18, 0x3C	; 60
     d08:	3f 40       	sbci	r19, 0x0F	; 15
     d0a:	24 36       	cpi	r18, 0x64	; 100
     d0c:	31 05       	cpc	r19, r1
     d0e:	e0 f4       	brcc	.+56     	; 0xd48 <get_li_ion_percentage+0xcc>
     d10:	8b e0       	ldi	r24, 0x0B	; 11
     d12:	84 9f       	mul	r24, r20
     d14:	b0 01       	movw	r22, r0
     d16:	85 9f       	mul	r24, r21
     d18:	70 0d       	add	r23, r0
     d1a:	11 24       	eor	r1, r1
     d1c:	64 59       	subi	r22, 0x94	; 148
     d1e:	77 4a       	sbci	r23, 0xA7	; 167
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__floatunsisf>
     d28:	2a e0       	ldi	r18, 0x0A	; 10
     d2a:	37 ed       	ldi	r19, 0xD7	; 215
     d2c:	43 e2       	ldi	r20, 0x23	; 35
     d2e:	5c e3       	ldi	r21, 0x3C	; 60
     d30:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulsf3>
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	48 e7       	ldi	r20, 0x78	; 120
     d3a:	52 e4       	ldi	r21, 0x42	; 66
     d3c:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__addsf3>
     d40:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__fixunssfsi>
     d44:	86 2f       	mov	r24, r22
     d46:	08 95       	ret
     d48:	ca 01       	movw	r24, r20
     d4a:	80 5a       	subi	r24, 0xA0	; 160
     d4c:	9f 40       	sbci	r25, 0x0F	; 15
     d4e:	84 36       	cpi	r24, 0x64	; 100
     d50:	91 05       	cpc	r25, r1
     d52:	e8 f4       	brcc	.+58     	; 0xd8e <get_li_ion_percentage+0x112>
     d54:	ba 01       	movw	r22, r20
     d56:	60 5a       	subi	r22, 0xA0	; 160
     d58:	7f 4f       	sbci	r23, 0xFF	; 255
     d5a:	62 95       	swap	r22
     d5c:	72 95       	swap	r23
     d5e:	70 7f       	andi	r23, 0xF0	; 240
     d60:	76 27       	eor	r23, r22
     d62:	60 7f       	andi	r22, 0xF0	; 240
     d64:	76 27       	eor	r23, r22
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__floatunsisf>
     d6e:	2a e0       	ldi	r18, 0x0A	; 10
     d70:	37 ed       	ldi	r19, 0xD7	; 215
     d72:	43 e2       	ldi	r20, 0x23	; 35
     d74:	5c e3       	ldi	r21, 0x3C	; 60
     d76:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulsf3>
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	42 e9       	ldi	r20, 0x92	; 146
     d80:	52 e4       	ldi	r21, 0x42	; 66
     d82:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__addsf3>
     d86:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__fixunssfsi>
     d8a:	86 2f       	mov	r24, r22
     d8c:	08 95       	ret
     d8e:	ca 01       	movw	r24, r20
     d90:	84 50       	subi	r24, 0x04	; 4
     d92:	90 41       	sbci	r25, 0x10	; 16
     d94:	84 36       	cpi	r24, 0x64	; 100
     d96:	91 05       	cpc	r25, r1
     d98:	f0 f4       	brcc	.+60     	; 0xdd6 <get_li_ion_percentage+0x15a>
     d9a:	8b e0       	ldi	r24, 0x0B	; 11
     d9c:	84 9f       	mul	r24, r20
     d9e:	b0 01       	movw	r22, r0
     da0:	85 9f       	mul	r24, r21
     da2:	70 0d       	add	r23, r0
     da4:	11 24       	eor	r1, r1
     da6:	6c 52       	subi	r22, 0x2C	; 44
     da8:	70 4b       	sbci	r23, 0xB0	; 176
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__floatunsisf>
     db2:	2a e0       	ldi	r18, 0x0A	; 10
     db4:	37 ed       	ldi	r19, 0xD7	; 215
     db6:	43 e2       	ldi	r20, 0x23	; 35
     db8:	5c e3       	ldi	r21, 0x3C	; 60
     dba:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulsf3>
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	42 eb       	ldi	r20, 0xB2	; 178
     dc4:	52 e4       	ldi	r21, 0x42	; 66
     dc6:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__addsf3>
     dca:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__fixunssfsi>
     dce:	86 2f       	mov	r24, r22
     dd0:	08 95       	ret
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	08 95       	ret
     dd6:	84 e6       	ldi	r24, 0x64	; 100
     dd8:	08 95       	ret

00000dda <update_battery_status>:
     dda:	17 b8       	out	0x07, r1	; 7
     ddc:	36 9a       	sbi	0x06, 6	; 6
     dde:	36 99       	sbic	0x06, 6	; 6
     de0:	fe cf       	rjmp	.-4      	; 0xdde <update_battery_status+0x4>
     de2:	64 b1       	in	r22, 0x04	; 4
     de4:	75 b1       	in	r23, 0x05	; 5
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__floatunsisf>
     dee:	2c ea       	ldi	r18, 0xAC	; 172
     df0:	3c e1       	ldi	r19, 0x1C	; 28
     df2:	4a e7       	ldi	r20, 0x7A	; 122
     df4:	5f e3       	ldi	r21, 0x3F	; 63
     df6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulsf3>
     dfa:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__fixunssfsi>
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__floatunsisf>
     e06:	26 e9       	ldi	r18, 0x96	; 150
     e08:	33 e4       	ldi	r19, 0x43	; 67
     e0a:	43 eb       	ldi	r20, 0xB3	; 179
     e0c:	50 e4       	ldi	r21, 0x40	; 64
     e0e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulsf3>
     e12:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__fixunssfsi>
     e16:	cb 01       	movw	r24, r22
     e18:	0e 94 3e 06 	call	0xc7c	; 0xc7c <get_li_ion_percentage>
     e1c:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <STATUS>
     e20:	08 95       	ret

00000e22 <update_UI_activity>:
}


void update_UI_activity(uint8_t line, uint8_t segment) {
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	64 97       	sbiw	r28, 0x14	; 20
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	18 2f       	mov	r17, r24
     e3c:	06 2f       	mov	r16, r22
	int sprintf_store = 0;
	char bufX[MAX_STRING_BUFFER];
	clear_LCD_segment(line, segment);
     e3e:	0e 94 01 02 	call	0x402	; 0x402 <clear_LCD_segment>
	memset(bufX, 0, 20);
     e42:	fe 01       	movw	r30, r28
     e44:	31 96       	adiw	r30, 0x01	; 1
     e46:	84 e1       	ldi	r24, 0x14	; 20
     e48:	df 01       	movw	r26, r30
     e4a:	1d 92       	st	X+, r1
     e4c:	8a 95       	dec	r24
     e4e:	e9 f7       	brne	.-6      	; 0xe4a <update_UI_activity+0x28>
	switch(line) {
     e50:	14 31       	cpi	r17, 0x14	; 20
     e52:	09 f4       	brne	.+2      	; 0xe56 <update_UI_activity+0x34>
     e54:	6a c0       	rjmp	.+212    	; 0xf2a <update_UI_activity+0x108>
     e56:	18 f4       	brcc	.+6      	; 0xe5e <update_UI_activity+0x3c>
     e58:	11 23       	and	r17, r17
     e5a:	39 f0       	breq	.+14     	; 0xe6a <update_UI_activity+0x48>
     e5c:	c5 c0       	rjmp	.+394    	; 0xfe8 <update_UI_activity+0x1c6>
     e5e:	10 34       	cpi	r17, 0x40	; 64
     e60:	a1 f1       	breq	.+104    	; 0xeca <update_UI_activity+0xa8>
     e62:	14 35       	cpi	r17, 0x54	; 84
     e64:	09 f4       	brne	.+2      	; 0xe68 <update_UI_activity+0x46>
     e66:	91 c0       	rjmp	.+290    	; 0xf8a <update_UI_activity+0x168>
     e68:	bf c0       	rjmp	.+382    	; 0xfe8 <update_UI_activity+0x1c6>
		case LCD_LINE_1: 
			if (segment == 0) sprintf_store = snprintf(bufX, 7, "A:%s|", UI.type_A);   
     e6a:	01 11       	cpse	r16, r1
     e6c:	17 c0       	rjmp	.+46     	; 0xe9c <update_UI_activity+0x7a>
     e6e:	89 e3       	ldi	r24, 0x39	; 57
     e70:	95 e0       	ldi	r25, 0x05	; 5
     e72:	9f 93       	push	r25
     e74:	8f 93       	push	r24
     e76:	88 e9       	ldi	r24, 0x98	; 152
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	9f 93       	push	r25
     e7c:	8f 93       	push	r24
     e7e:	1f 92       	push	r1
     e80:	87 e0       	ldi	r24, 0x07	; 7
     e82:	8f 93       	push	r24
     e84:	ce 01       	movw	r24, r28
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	9f 93       	push	r25
     e8a:	8f 93       	push	r24
     e8c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	a6 c0       	rjmp	.+332    	; 0xfe8 <update_UI_activity+0x1c6>
			else sprintf_store = snprintf(bufX, 13, "f:%s Hz", UI.frequency_A);
     e9c:	87 e1       	ldi	r24, 0x17	; 23
     e9e:	95 e0       	ldi	r25, 0x05	; 5
     ea0:	9f 93       	push	r25
     ea2:	8f 93       	push	r24
     ea4:	8e e9       	ldi	r24, 0x9E	; 158
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	9f 93       	push	r25
     eaa:	8f 93       	push	r24
     eac:	1f 92       	push	r1
     eae:	8d e0       	ldi	r24, 0x0D	; 13
     eb0:	8f 93       	push	r24
     eb2:	ce 01       	movw	r24, r28
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	9f 93       	push	r25
     eb8:	8f 93       	push	r24
     eba:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	8f c0       	rjmp	.+286    	; 0xfe8 <update_UI_activity+0x1c6>
			break;
		case LCD_LINE_2: 
			if (segment == 0) sprintf_store = snprintf(bufX, 10, "VA=%sV|", UI.amplitude_A);
     eca:	01 11       	cpse	r16, r1
     ecc:	17 c0       	rjmp	.+46     	; 0xefc <update_UI_activity+0xda>
     ece:	87 e2       	ldi	r24, 0x27	; 39
     ed0:	95 e0       	ldi	r25, 0x05	; 5
     ed2:	9f 93       	push	r25
     ed4:	8f 93       	push	r24
     ed6:	86 ea       	ldi	r24, 0xA6	; 166
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	9f 93       	push	r25
     edc:	8f 93       	push	r24
     ede:	1f 92       	push	r1
     ee0:	8a e0       	ldi	r24, 0x0A	; 10
     ee2:	8f 93       	push	r24
     ee4:	ce 01       	movw	r24, r28
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	9f 93       	push	r25
     eea:	8f 93       	push	r24
     eec:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	76 c0       	rjmp	.+236    	; 0xfe8 <update_UI_activity+0x1c6>
			else sprintf_store = snprintf(bufX, 11, "VbA=%sV", UI.bias_A); 
     efc:	8f e2       	ldi	r24, 0x2F	; 47
     efe:	95 e0       	ldi	r25, 0x05	; 5
     f00:	9f 93       	push	r25
     f02:	8f 93       	push	r24
     f04:	8e ea       	ldi	r24, 0xAE	; 174
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	9f 93       	push	r25
     f0a:	8f 93       	push	r24
     f0c:	1f 92       	push	r1
     f0e:	8b e0       	ldi	r24, 0x0B	; 11
     f10:	8f 93       	push	r24
     f12:	ce 01       	movw	r24, r28
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	9f 93       	push	r25
     f18:	8f 93       	push	r24
     f1a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	5f c0       	rjmp	.+190    	; 0xfe8 <update_UI_activity+0x1c6>
			break;
		case LCD_LINE_3: 
			if (segment == 0) sprintf_store = snprintf(bufX, 7, "B:%s|", UI.type_B);
     f2a:	01 11       	cpse	r16, r1
     f2c:	17 c0       	rjmp	.+46     	; 0xf5c <update_UI_activity+0x13a>
     f2e:	8c e3       	ldi	r24, 0x3C	; 60
     f30:	95 e0       	ldi	r25, 0x05	; 5
     f32:	9f 93       	push	r25
     f34:	8f 93       	push	r24
     f36:	86 eb       	ldi	r24, 0xB6	; 182
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	9f 93       	push	r25
     f3c:	8f 93       	push	r24
     f3e:	1f 92       	push	r1
     f40:	87 e0       	ldi	r24, 0x07	; 7
     f42:	8f 93       	push	r24
     f44:	ce 01       	movw	r24, r28
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	9f 93       	push	r25
     f4a:	8f 93       	push	r24
     f4c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	46 c0       	rjmp	.+140    	; 0xfe8 <update_UI_activity+0x1c6>
			else sprintf_store = snprintf(bufX, 13, "f:%s Hz", UI.frequency_B); 
     f5c:	8f e1       	ldi	r24, 0x1F	; 31
     f5e:	95 e0       	ldi	r25, 0x05	; 5
     f60:	9f 93       	push	r25
     f62:	8f 93       	push	r24
     f64:	8e e9       	ldi	r24, 0x9E	; 158
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	9f 93       	push	r25
     f6a:	8f 93       	push	r24
     f6c:	1f 92       	push	r1
     f6e:	8d e0       	ldi	r24, 0x0D	; 13
     f70:	8f 93       	push	r24
     f72:	ce 01       	movw	r24, r28
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	9f 93       	push	r25
     f78:	8f 93       	push	r24
     f7a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	2f c0       	rjmp	.+94     	; 0xfe8 <update_UI_activity+0x1c6>
			break;
		case LCD_LINE_4:
			if (segment == 0) sprintf_store = snprintf(bufX, 10, "VB=%sV|", UI.amplitude_B); 
     f8a:	01 11       	cpse	r16, r1
     f8c:	17 c0       	rjmp	.+46     	; 0xfbc <update_UI_activity+0x19a>
     f8e:	8b e2       	ldi	r24, 0x2B	; 43
     f90:	95 e0       	ldi	r25, 0x05	; 5
     f92:	9f 93       	push	r25
     f94:	8f 93       	push	r24
     f96:	8c eb       	ldi	r24, 0xBC	; 188
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	9f 93       	push	r25
     f9c:	8f 93       	push	r24
     f9e:	1f 92       	push	r1
     fa0:	8a e0       	ldi	r24, 0x0A	; 10
     fa2:	8f 93       	push	r24
     fa4:	ce 01       	movw	r24, r28
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	9f 93       	push	r25
     faa:	8f 93       	push	r24
     fac:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	16 c0       	rjmp	.+44     	; 0xfe8 <update_UI_activity+0x1c6>
			else sprintf_store = snprintf(bufX, 11, "VbB=%sV", UI.bias_B); 
     fbc:	84 e3       	ldi	r24, 0x34	; 52
     fbe:	95 e0       	ldi	r25, 0x05	; 5
     fc0:	9f 93       	push	r25
     fc2:	8f 93       	push	r24
     fc4:	84 ec       	ldi	r24, 0xC4	; 196
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	9f 93       	push	r25
     fca:	8f 93       	push	r24
     fcc:	1f 92       	push	r1
     fce:	8b e0       	ldi	r24, 0x0B	; 11
     fd0:	8f 93       	push	r24
     fd2:	ce 01       	movw	r24, r28
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	9f 93       	push	r25
     fd8:	8f 93       	push	r24
     fda:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
			break;
		default: break;		
	}
	print_LCD_segment(bufX, line, segment);
     fe8:	40 2f       	mov	r20, r16
     fea:	61 2f       	mov	r22, r17
     fec:	ce 01       	movw	r24, r28
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <print_LCD_segment>
}
     ff4:	64 96       	adiw	r28, 0x14	; 20
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	08 95       	ret

0000100a <update_complete_UI>:

void update_complete_UI() {
	update_UI_activity(LCD_LINE_1, 0);
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
	update_UI_activity(LCD_LINE_1, 1);
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
	update_UI_activity(LCD_LINE_2, 0);
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	80 e4       	ldi	r24, 0x40	; 64
    101e:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
	update_UI_activity(LCD_LINE_2, 1);
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	80 e4       	ldi	r24, 0x40	; 64
    1026:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
	update_UI_activity(LCD_LINE_3, 0);
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	84 e1       	ldi	r24, 0x14	; 20
    102e:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
	update_UI_activity(LCD_LINE_3, 1);
    1032:	61 e0       	ldi	r22, 0x01	; 1
    1034:	84 e1       	ldi	r24, 0x14	; 20
    1036:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
	update_UI_activity(LCD_LINE_4, 0);
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	84 e5       	ldi	r24, 0x54	; 84
    103e:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
	update_UI_activity(LCD_LINE_4, 1);
    1042:	61 e0       	ldi	r22, 0x01	; 1
    1044:	84 e5       	ldi	r24, 0x54	; 84
    1046:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
    104a:	08 95       	ret

0000104c <retrieve_frequency_uint32>:

}

uint32_t retrieve_frequency_uint32(char channel_in) {
    104c:	8f 92       	push	r8
    104e:	9f 92       	push	r9
    1050:	af 92       	push	r10
    1052:	bf 92       	push	r11
    1054:	cf 92       	push	r12
    1056:	df 92       	push	r13
    1058:	ef 92       	push	r14
    105a:	ff 92       	push	r15
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	00 d0       	rcall	.+0      	; 0x1066 <retrieve_frequency_uint32+0x1a>
    1066:	00 d0       	rcall	.+0      	; 0x1068 <retrieve_frequency_uint32+0x1c>
    1068:	00 d0       	rcall	.+0      	; 0x106a <retrieve_frequency_uint32+0x1e>
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	18 2f       	mov	r17, r24
	volatile uint8_t mark_ptr = 0;
    1070:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t end_of_freq_string = 0;
    1072:	1a 82       	std	Y+2, r1	; 0x02
	volatile uint32_t return_number = 0;
    1074:	1b 82       	std	Y+3, r1	; 0x03
    1076:	1c 82       	std	Y+4, r1	; 0x04
    1078:	1d 82       	std	Y+5, r1	; 0x05
    107a:	1e 82       	std	Y+6, r1	; 0x06
	if (channel_in == PARAM_CH0) memset(UI.frequency_A, 0, 8);
    107c:	80 33       	cpi	r24, 0x30	; 48
    107e:	41 f4       	brne	.+16     	; 0x1090 <retrieve_frequency_uint32+0x44>
    1080:	88 e0       	ldi	r24, 0x08	; 8
    1082:	e7 e1       	ldi	r30, 0x17	; 23
    1084:	f5 e0       	ldi	r31, 0x05	; 5
    1086:	df 01       	movw	r26, r30
    1088:	1d 92       	st	X+, r1
    108a:	8a 95       	dec	r24
    108c:	e9 f7       	brne	.-6      	; 0x1088 <retrieve_frequency_uint32+0x3c>
    108e:	07 c0       	rjmp	.+14     	; 0x109e <retrieve_frequency_uint32+0x52>
	else memset(UI.frequency_B, 0, 8);
    1090:	88 e0       	ldi	r24, 0x08	; 8
    1092:	ef e1       	ldi	r30, 0x1F	; 31
    1094:	f5 e0       	ldi	r31, 0x05	; 5
    1096:	df 01       	movw	r26, r30
    1098:	1d 92       	st	X+, r1
    109a:	8a 95       	dec	r24
    109c:	e9 f7       	brne	.-6      	; 0x1098 <retrieve_frequency_uint32+0x4c>
	for (mark_ptr = FG_DATA_START_NUM; mark_ptr < FG_DATA_LENGTH; mark_ptr++) if (UART.rx_buffer[mark_ptr + 1] == '\"') { end_of_freq_string = mark_ptr; break; }
    109e:	89 e0       	ldi	r24, 0x09	; 9
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	80 32       	cpi	r24, 0x20	; 32
    10a6:	c0 f4       	brcc	.+48     	; 0x10d8 <retrieve_frequency_uint32+0x8c>
    10a8:	e9 81       	ldd	r30, Y+1	; 0x01
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	ee 52       	subi	r30, 0x2E	; 46
    10ae:	fa 4f       	sbci	r31, 0xFA	; 250
    10b0:	81 81       	ldd	r24, Z+1	; 0x01
    10b2:	82 32       	cpi	r24, 0x22	; 34
    10b4:	59 f4       	brne	.+22     	; 0x10cc <retrieve_frequency_uint32+0x80>
    10b6:	07 c0       	rjmp	.+14     	; 0x10c6 <retrieve_frequency_uint32+0x7a>
    10b8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	ee 52       	subi	r30, 0x2E	; 46
    10be:	fa 4f       	sbci	r31, 0xFA	; 250
    10c0:	81 81       	ldd	r24, Z+1	; 0x01
    10c2:	82 32       	cpi	r24, 0x22	; 34
    10c4:	19 f4       	brne	.+6      	; 0x10cc <retrieve_frequency_uint32+0x80>
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	8a 83       	std	Y+2, r24	; 0x02
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <retrieve_frequency_uint32+0x8c>
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	8f 5f       	subi	r24, 0xFF	; 255
    10d0:	89 83       	std	Y+1, r24	; 0x01
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	80 32       	cpi	r24, 0x20	; 32
    10d6:	80 f3       	brcs	.-32     	; 0x10b8 <retrieve_frequency_uint32+0x6c>
	for (mark_ptr = end_of_freq_string; mark_ptr >= FG_DATA_START_NUM; mark_ptr--) {
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	89 30       	cpi	r24, 0x09	; 9
    10e0:	08 f4       	brcc	.+2      	; 0x10e4 <retrieve_frequency_uint32+0x98>
    10e2:	5c c0       	rjmp	.+184    	; 0x119c <retrieve_frequency_uint32+0x150>
		return_number += (UART.rx_buffer[mark_ptr] - 0x30) * pow(10, end_of_freq_string - mark_ptr);
    10e4:	09 81       	ldd	r16, Y+1	; 0x01
    10e6:	6a 81       	ldd	r22, Y+2	; 0x02
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	68 1b       	sub	r22, r24
    10ee:	71 09       	sbc	r23, r1
    10f0:	07 2e       	mov	r0, r23
    10f2:	00 0c       	add	r0, r0
    10f4:	88 0b       	sbc	r24, r24
    10f6:	99 0b       	sbc	r25, r25
    10f8:	0e 94 49 16 	call	0x2c92	; 0x2c92 <__floatsisf>
    10fc:	9b 01       	movw	r18, r22
    10fe:	ac 01       	movw	r20, r24
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	80 e2       	ldi	r24, 0x20	; 32
    1106:	91 e4       	ldi	r25, 0x41	; 65
    1108:	0e 94 42 17 	call	0x2e84	; 0x2e84 <pow>
    110c:	6b 01       	movw	r12, r22
    110e:	7c 01       	movw	r14, r24
    1110:	8b 80       	ldd	r8, Y+3	; 0x03
    1112:	9c 80       	ldd	r9, Y+4	; 0x04
    1114:	ad 80       	ldd	r10, Y+5	; 0x05
    1116:	be 80       	ldd	r11, Y+6	; 0x06
    1118:	e0 2f       	mov	r30, r16
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	ee 52       	subi	r30, 0x2E	; 46
    111e:	fa 4f       	sbci	r31, 0xFA	; 250
    1120:	60 81       	ld	r22, Z
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	60 53       	subi	r22, 0x30	; 48
    1126:	71 09       	sbc	r23, r1
    1128:	07 2e       	mov	r0, r23
    112a:	00 0c       	add	r0, r0
    112c:	88 0b       	sbc	r24, r24
    112e:	99 0b       	sbc	r25, r25
    1130:	0e 94 49 16 	call	0x2c92	; 0x2c92 <__floatsisf>
    1134:	a7 01       	movw	r20, r14
    1136:	96 01       	movw	r18, r12
    1138:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulsf3>
    113c:	6b 01       	movw	r12, r22
    113e:	7c 01       	movw	r14, r24
    1140:	c5 01       	movw	r24, r10
    1142:	b4 01       	movw	r22, r8
    1144:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__floatunsisf>
    1148:	9b 01       	movw	r18, r22
    114a:	ac 01       	movw	r20, r24
    114c:	c7 01       	movw	r24, r14
    114e:	b6 01       	movw	r22, r12
    1150:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__addsf3>
    1154:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__fixunssfsi>
    1158:	6b 83       	std	Y+3, r22	; 0x03
    115a:	7c 83       	std	Y+4, r23	; 0x04
    115c:	8d 83       	std	Y+5, r24	; 0x05
    115e:	9e 83       	std	Y+6, r25	; 0x06
		if (channel_in == PARAM_CH0) UI.frequency_A[mark_ptr - FG_DATA_START_NUM] = UART.rx_buffer[mark_ptr];
    1160:	10 33       	cpi	r17, 0x30	; 48
    1162:	59 f4       	brne	.+22     	; 0x117a <retrieve_frequency_uint32+0x12e>
    1164:	e9 81       	ldd	r30, Y+1	; 0x01
    1166:	a9 81       	ldd	r26, Y+1	; 0x01
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	e2 5f       	subi	r30, 0xF2	; 242
    116c:	fa 4f       	sbci	r31, 0xFA	; 250
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	ae 52       	subi	r26, 0x2E	; 46
    1172:	ba 4f       	sbci	r27, 0xFA	; 250
    1174:	8c 91       	ld	r24, X
    1176:	80 83       	st	Z, r24
    1178:	0a c0       	rjmp	.+20     	; 0x118e <retrieve_frequency_uint32+0x142>
		else UI.frequency_B[mark_ptr - FG_DATA_START_NUM] = UART.rx_buffer[mark_ptr];
    117a:	e9 81       	ldd	r30, Y+1	; 0x01
    117c:	a9 81       	ldd	r26, Y+1	; 0x01
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	ea 5e       	subi	r30, 0xEA	; 234
    1182:	fa 4f       	sbci	r31, 0xFA	; 250
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	ae 52       	subi	r26, 0x2E	; 46
    1188:	ba 4f       	sbci	r27, 0xFA	; 250
    118a:	8c 91       	ld	r24, X
    118c:	80 83       	st	Z, r24
	volatile uint8_t end_of_freq_string = 0;
	volatile uint32_t return_number = 0;
	if (channel_in == PARAM_CH0) memset(UI.frequency_A, 0, 8);
	else memset(UI.frequency_B, 0, 8);
	for (mark_ptr = FG_DATA_START_NUM; mark_ptr < FG_DATA_LENGTH; mark_ptr++) if (UART.rx_buffer[mark_ptr + 1] == '\"') { end_of_freq_string = mark_ptr; break; }
	for (mark_ptr = end_of_freq_string; mark_ptr >= FG_DATA_START_NUM; mark_ptr--) {
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	81 50       	subi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	89 30       	cpi	r24, 0x09	; 9
    1198:	08 f0       	brcs	.+2      	; 0x119c <retrieve_frequency_uint32+0x150>
    119a:	a4 cf       	rjmp	.-184    	; 0x10e4 <retrieve_frequency_uint32+0x98>
		return_number += (UART.rx_buffer[mark_ptr] - 0x30) * pow(10, end_of_freq_string - mark_ptr);
		if (channel_in == PARAM_CH0) UI.frequency_A[mark_ptr - FG_DATA_START_NUM] = UART.rx_buffer[mark_ptr];
		else UI.frequency_B[mark_ptr - FG_DATA_START_NUM] = UART.rx_buffer[mark_ptr];
	}
	return return_number + 1;
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	ad 81       	ldd	r26, Y+5	; 0x05
    11a2:	be 81       	ldd	r27, Y+6	; 0x06
    11a4:	bc 01       	movw	r22, r24
    11a6:	cd 01       	movw	r24, r26
    11a8:	6f 5f       	subi	r22, 0xFF	; 255
    11aa:	7f 4f       	sbci	r23, 0xFF	; 255
    11ac:	8f 4f       	sbci	r24, 0xFF	; 255
    11ae:	9f 4f       	sbci	r25, 0xFF	; 255
}
    11b0:	26 96       	adiw	r28, 0x06	; 6
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	bf 90       	pop	r11
    11ce:	af 90       	pop	r10
    11d0:	9f 90       	pop	r9
    11d2:	8f 90       	pop	r8
    11d4:	08 95       	ret

000011d6 <retrieve_amplitude_12_bit>:

uint16_t retrieve_amplitude_12_bit(char channel_in) { // MAX 700mV
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	27 97       	sbiw	r28, 0x07	; 7
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	e8 2e       	mov	r14, r24
	int sprintf_store = 0;
	volatile uint32_t num = 0;
    11f4:	19 82       	std	Y+1, r1	; 0x01
    11f6:	1a 82       	std	Y+2, r1	; 0x02
    11f8:	1b 82       	std	Y+3, r1	; 0x03
    11fa:	1c 82       	std	Y+4, r1	; 0x04
	char buffer[3];
	buffer[0] = UART.rx_buffer[9];
    11fc:	e2 ed       	ldi	r30, 0xD2	; 210
    11fe:	f5 e0       	ldi	r31, 0x05	; 5
    1200:	11 85       	ldd	r17, Z+9	; 0x09
    1202:	1d 83       	std	Y+5, r17	; 0x05
	buffer[1] = UART.rx_buffer[11];
    1204:	03 85       	ldd	r16, Z+11	; 0x0b
    1206:	0e 83       	std	Y+6, r16	; 0x06
	buffer[2] = UART.rx_buffer[12];
    1208:	f4 84       	ldd	r15, Z+12	; 0x0c
    120a:	ff 82       	std	Y+7, r15	; 0x07
	num = atoi(buffer);
    120c:	ce 01       	movw	r24, r28
    120e:	05 96       	adiw	r24, 0x05	; 5
    1210:	0e 94 a3 19 	call	0x3346	; 0x3346 <atoi>
    1214:	09 2e       	mov	r0, r25
    1216:	00 0c       	add	r0, r0
    1218:	aa 0b       	sbc	r26, r26
    121a:	bb 0b       	sbc	r27, r27
    121c:	89 83       	std	Y+1, r24	; 0x01
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	ab 83       	std	Y+3, r26	; 0x03
    1222:	bc 83       	std	Y+4, r27	; 0x04
	if (channel_in == PARAM_CH0) memset(UI.amplitude_A, 0, 8);
    1224:	80 e3       	ldi	r24, 0x30	; 48
    1226:	e8 12       	cpse	r14, r24
    1228:	1e c0       	rjmp	.+60     	; 0x1266 <retrieve_amplitude_12_bit+0x90>
    122a:	e7 e2       	ldi	r30, 0x27	; 39
    122c:	f5 e0       	ldi	r31, 0x05	; 5
    122e:	88 e0       	ldi	r24, 0x08	; 8
    1230:	df 01       	movw	r26, r30
    1232:	1d 92       	st	X+, r1
    1234:	8a 95       	dec	r24
    1236:	e9 f7       	brne	.-6      	; 0x1232 <retrieve_amplitude_12_bit+0x5c>
	else memset(UI.amplitude_B, 0, 8);
	if (channel_in == PARAM_CH0) { sprintf_store = snprintf(UI.amplitude_A, 5, "%c.%c%c",buffer[0],buffer[1],buffer[2]); }
    1238:	1f 92       	push	r1
    123a:	ff 92       	push	r15
    123c:	1f 92       	push	r1
    123e:	0f 93       	push	r16
    1240:	1f 92       	push	r1
    1242:	1f 93       	push	r17
    1244:	8e ec       	ldi	r24, 0xCE	; 206
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	9f 93       	push	r25
    124a:	8f 93       	push	r24
    124c:	1f 92       	push	r1
    124e:	85 e0       	ldi	r24, 0x05	; 5
    1250:	8f 93       	push	r24
    1252:	ff 93       	push	r31
    1254:	ef 93       	push	r30
    1256:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	1d c0       	rjmp	.+58     	; 0x12a0 <retrieve_amplitude_12_bit+0xca>
	buffer[0] = UART.rx_buffer[9];
	buffer[1] = UART.rx_buffer[11];
	buffer[2] = UART.rx_buffer[12];
	num = atoi(buffer);
	if (channel_in == PARAM_CH0) memset(UI.amplitude_A, 0, 8);
	else memset(UI.amplitude_B, 0, 8);
    1266:	eb e2       	ldi	r30, 0x2B	; 43
    1268:	f5 e0       	ldi	r31, 0x05	; 5
    126a:	88 e0       	ldi	r24, 0x08	; 8
    126c:	df 01       	movw	r26, r30
    126e:	1d 92       	st	X+, r1
    1270:	8a 95       	dec	r24
    1272:	e9 f7       	brne	.-6      	; 0x126e <retrieve_amplitude_12_bit+0x98>
	if (channel_in == PARAM_CH0) { sprintf_store = snprintf(UI.amplitude_A, 5, "%c.%c%c",buffer[0],buffer[1],buffer[2]); }
	else sprintf_store = snprintf(UI.amplitude_B, 5, "%c.%c%c",buffer[0],buffer[1],buffer[2]);
    1274:	1f 92       	push	r1
    1276:	ff 92       	push	r15
    1278:	1f 92       	push	r1
    127a:	0f 93       	push	r16
    127c:	1f 92       	push	r1
    127e:	1f 93       	push	r17
    1280:	8e ec       	ldi	r24, 0xCE	; 206
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	9f 93       	push	r25
    1286:	8f 93       	push	r24
    1288:	1f 92       	push	r1
    128a:	85 e0       	ldi	r24, 0x05	; 5
    128c:	8f 93       	push	r24
    128e:	ff 93       	push	r31
    1290:	ef 93       	push	r30
    1292:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
	return ((num * MAX_12BIT) / 70);
    12a0:	29 81       	ldd	r18, Y+1	; 0x01
    12a2:	3a 81       	ldd	r19, Y+2	; 0x02
    12a4:	4b 81       	ldd	r20, Y+3	; 0x03
    12a6:	5c 81       	ldd	r21, Y+4	; 0x04
    12a8:	af ef       	ldi	r26, 0xFF	; 255
    12aa:	bf e0       	ldi	r27, 0x0F	; 15
    12ac:	0e 94 75 19 	call	0x32ea	; 0x32ea <__muluhisi3>
    12b0:	26 e4       	ldi	r18, 0x46	; 70
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	0e 94 4d 19 	call	0x329a	; 0x329a <__udivmodsi4>
}
    12bc:	c9 01       	movw	r24, r18
    12be:	27 96       	adiw	r28, 0x07	; 7
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	08 95       	ret

000012d8 <retrieve_bias_12_bit>:

uint16_t retrieve_bias_12_bit(char channel_in) {
    12d8:	ef 92       	push	r14
    12da:	ff 92       	push	r15
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	27 97       	sbiw	r28, 0x07	; 7
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	e8 2e       	mov	r14, r24
	int sprintf_store = 0;
	volatile uint32_t num = 0;
    12f6:	19 82       	std	Y+1, r1	; 0x01
    12f8:	1a 82       	std	Y+2, r1	; 0x02
    12fa:	1b 82       	std	Y+3, r1	; 0x03
    12fc:	1c 82       	std	Y+4, r1	; 0x04
	char buffer[3];
	buffer[0] = UART.rx_buffer[10];
    12fe:	e2 ed       	ldi	r30, 0xD2	; 210
    1300:	f5 e0       	ldi	r31, 0x05	; 5
    1302:	12 85       	ldd	r17, Z+10	; 0x0a
    1304:	1d 83       	std	Y+5, r17	; 0x05
	buffer[1] = UART.rx_buffer[12];
    1306:	04 85       	ldd	r16, Z+12	; 0x0c
    1308:	0e 83       	std	Y+6, r16	; 0x06
	buffer[2] = UART.rx_buffer[13];
    130a:	f5 84       	ldd	r15, Z+13	; 0x0d
    130c:	ff 82       	std	Y+7, r15	; 0x07
	num = atoi(buffer);
    130e:	ce 01       	movw	r24, r28
    1310:	05 96       	adiw	r24, 0x05	; 5
    1312:	0e 94 a3 19 	call	0x3346	; 0x3346 <atoi>
    1316:	09 2e       	mov	r0, r25
    1318:	00 0c       	add	r0, r0
    131a:	aa 0b       	sbc	r26, r26
    131c:	bb 0b       	sbc	r27, r27
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	9a 83       	std	Y+2, r25	; 0x02
    1322:	ab 83       	std	Y+3, r26	; 0x03
    1324:	bc 83       	std	Y+4, r27	; 0x04
	if (channel_in == PARAM_CH0) memset(UI.bias_A, 0, 8);
    1326:	80 e3       	ldi	r24, 0x30	; 48
    1328:	e8 12       	cpse	r14, r24
    132a:	22 c0       	rjmp	.+68     	; 0x1370 <retrieve_bias_12_bit+0x98>
    132c:	ef e2       	ldi	r30, 0x2F	; 47
    132e:	f5 e0       	ldi	r31, 0x05	; 5
    1330:	88 e0       	ldi	r24, 0x08	; 8
    1332:	df 01       	movw	r26, r30
    1334:	1d 92       	st	X+, r1
    1336:	8a 95       	dec	r24
    1338:	e9 f7       	brne	.-6      	; 0x1334 <retrieve_bias_12_bit+0x5c>
	else memset(UI.bias_B, 0, 8);
	if (channel_in == PARAM_CH0) sprintf_store = snprintf(UI.bias_A, 6, "%c%c.%c%c",UART.rx_buffer[9],buffer[0],buffer[1],buffer[2]);
    133a:	1f 92       	push	r1
    133c:	ff 92       	push	r15
    133e:	1f 92       	push	r1
    1340:	0f 93       	push	r16
    1342:	1f 92       	push	r1
    1344:	1f 93       	push	r17
    1346:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <UART+0x9>
    134a:	1f 92       	push	r1
    134c:	8f 93       	push	r24
    134e:	8c ec       	ldi	r24, 0xCC	; 204
    1350:	91 e0       	ldi	r25, 0x01	; 1
    1352:	9f 93       	push	r25
    1354:	8f 93       	push	r24
    1356:	1f 92       	push	r1
    1358:	86 e0       	ldi	r24, 0x06	; 6
    135a:	8f 93       	push	r24
    135c:	ff 93       	push	r31
    135e:	ef 93       	push	r30
    1360:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	21 c0       	rjmp	.+66     	; 0x13b2 <retrieve_bias_12_bit+0xda>
	buffer[0] = UART.rx_buffer[10];
	buffer[1] = UART.rx_buffer[12];
	buffer[2] = UART.rx_buffer[13];
	num = atoi(buffer);
	if (channel_in == PARAM_CH0) memset(UI.bias_A, 0, 8);
	else memset(UI.bias_B, 0, 8);
    1370:	e4 e3       	ldi	r30, 0x34	; 52
    1372:	f5 e0       	ldi	r31, 0x05	; 5
    1374:	88 e0       	ldi	r24, 0x08	; 8
    1376:	df 01       	movw	r26, r30
    1378:	1d 92       	st	X+, r1
    137a:	8a 95       	dec	r24
    137c:	e9 f7       	brne	.-6      	; 0x1378 <retrieve_bias_12_bit+0xa0>
	if (channel_in == PARAM_CH0) sprintf_store = snprintf(UI.bias_A, 6, "%c%c.%c%c",UART.rx_buffer[9],buffer[0],buffer[1],buffer[2]);
	else sprintf_store = snprintf(UI.bias_B, 6, "%c%c.%c%c",UART.rx_buffer[9],buffer[0],buffer[1],buffer[2]);
    137e:	1f 92       	push	r1
    1380:	ff 92       	push	r15
    1382:	1f 92       	push	r1
    1384:	0f 93       	push	r16
    1386:	1f 92       	push	r1
    1388:	1f 93       	push	r17
    138a:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <UART+0x9>
    138e:	1f 92       	push	r1
    1390:	8f 93       	push	r24
    1392:	8c ec       	ldi	r24, 0xCC	; 204
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	9f 93       	push	r25
    1398:	8f 93       	push	r24
    139a:	1f 92       	push	r1
    139c:	86 e0       	ldi	r24, 0x06	; 6
    139e:	8f 93       	push	r24
    13a0:	ff 93       	push	r31
    13a2:	ef 93       	push	r30
    13a4:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
	return ((num * MAX_12BIT) / 330);
    13b2:	29 81       	ldd	r18, Y+1	; 0x01
    13b4:	3a 81       	ldd	r19, Y+2	; 0x02
    13b6:	4b 81       	ldd	r20, Y+3	; 0x03
    13b8:	5c 81       	ldd	r21, Y+4	; 0x04
    13ba:	af ef       	ldi	r26, 0xFF	; 255
    13bc:	bf e0       	ldi	r27, 0x0F	; 15
    13be:	0e 94 75 19 	call	0x32ea	; 0x32ea <__muluhisi3>
    13c2:	2a e4       	ldi	r18, 0x4A	; 74
    13c4:	31 e0       	ldi	r19, 0x01	; 1
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	0e 94 4d 19 	call	0x329a	; 0x329a <__udivmodsi4>
	}
    13ce:	c9 01       	movw	r24, r18
    13d0:	27 96       	adiw	r28, 0x07	; 7
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	08 95       	ret

000013ea <retrieve_bias_sign>:

bool retrieve_bias_sign() {
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 91 db 05 	lds	r25, 0x05DB	; 0x8005db <UART+0x9>
    13f0:	9d 32       	cpi	r25, 0x2D	; 45
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <retrieve_bias_sign+0xc>
    13f4:	80 e0       	ldi	r24, 0x00	; 0
	if (UART.rx_buffer[9] == '-') return NEGATIVE;
	else if (UART.rx_buffer[9] == '+') return POSITIVE;
	else return NULL;
}
    13f6:	08 95       	ret

000013f8 <set_parameter>:

void set_parameter() {
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
	if (UART.rx_buffer[4] == PARAM_CH0) {
    13fc:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <UART+0x4>
    1400:	80 33       	cpi	r24, 0x30	; 48
    1402:	09 f0       	breq	.+2      	; 0x1406 <set_parameter+0xe>
    1404:	bb c0       	rjmp	.+374    	; 0x157c <set_parameter+0x184>
		switch(UART.rx_buffer[6]) {
    1406:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <UART+0x6>
    140a:	82 34       	cpi	r24, 0x42	; 66
    140c:	09 f4       	brne	.+2      	; 0x1410 <set_parameter+0x18>
    140e:	90 c0       	rjmp	.+288    	; 0x1530 <set_parameter+0x138>
    1410:	20 f4       	brcc	.+8      	; 0x141a <set_parameter+0x22>
    1412:	81 34       	cpi	r24, 0x41	; 65
    1414:	09 f4       	brne	.+2      	; 0x1418 <set_parameter+0x20>
    1416:	7d c0       	rjmp	.+250    	; 0x1512 <set_parameter+0x11a>
    1418:	6e c1       	rjmp	.+732    	; 0x16f6 <set_parameter+0x2fe>
    141a:	86 34       	cpi	r24, 0x46	; 70
    141c:	19 f0       	breq	.+6      	; 0x1424 <set_parameter+0x2c>
    141e:	84 35       	cpi	r24, 0x54	; 84
    1420:	a9 f0       	breq	.+42     	; 0x144c <set_parameter+0x54>
    1422:	69 c1       	rjmp	.+722    	; 0x16f6 <set_parameter+0x2fe>
			case PARAM_FREQ: 
				FUNCGEN.frequency_A = retrieve_frequency_uint32(PARAM_CH0);
    1424:	80 e3       	ldi	r24, 0x30	; 48
    1426:	0e 94 26 08 	call	0x104c	; 0x104c <retrieve_frequency_uint32>
    142a:	ab 01       	movw	r20, r22
    142c:	bc 01       	movw	r22, r24
    142e:	ef e3       	ldi	r30, 0x3F	; 63
    1430:	f5 e0       	ldi	r31, 0x05	; 5
    1432:	40 83       	st	Z, r20
    1434:	51 83       	std	Z+1, r21	; 0x01
    1436:	62 83       	std	Z+2, r22	; 0x02
    1438:	73 83       	std	Z+3, r23	; 0x03
				set_functionality(FG0, FUNCGEN.frequency_A, FUNCGEN.output_type_A);
    143a:	20 89       	ldd	r18, Z+16	; 0x10
    143c:	85 e0       	ldi	r24, 0x05	; 5
    143e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <set_functionality>
				update_UI_activity(LCD_LINE_1, 1);
    1442:	61 e0       	ldi	r22, 0x01	; 1
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
				break;
    144a:	55 c1       	rjmp	.+682    	; 0x16f6 <set_parameter+0x2fe>
				
			case PARAM_TYPE:
				switch(UART.rx_buffer[9]) {
    144c:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <UART+0x9>
    1450:	81 35       	cpi	r24, 0x51	; 81
    1452:	c9 f0       	breq	.+50     	; 0x1486 <set_parameter+0x8e>
    1454:	28 f4       	brcc	.+10     	; 0x1460 <set_parameter+0x68>
    1456:	84 34       	cpi	r24, 0x44	; 68
    1458:	91 f1       	breq	.+100    	; 0x14be <set_parameter+0xc6>
    145a:	8f 34       	cpi	r24, 0x4F	; 79
    145c:	f1 f1       	breq	.+124    	; 0x14da <set_parameter+0xe2>
    145e:	4a c0       	rjmp	.+148    	; 0x14f4 <set_parameter+0xfc>
    1460:	83 35       	cpi	r24, 0x53	; 83
    1462:	19 f0       	breq	.+6      	; 0x146a <set_parameter+0x72>
    1464:	84 35       	cpi	r24, 0x54	; 84
    1466:	e9 f0       	breq	.+58     	; 0x14a2 <set_parameter+0xaa>
    1468:	45 c0       	rjmp	.+138    	; 0x14f4 <set_parameter+0xfc>
					case TYPE_SINE: FUNCGEN.output_type_A = SINE; snprintf(UI.type_A, 4, "%s","SIN"); break;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <FUNCGEN+0x10>
    1470:	e9 e3       	ldi	r30, 0x39	; 57
    1472:	f5 e0       	ldi	r31, 0x05	; 5
    1474:	83 e5       	ldi	r24, 0x53	; 83
    1476:	99 e4       	ldi	r25, 0x49	; 73
    1478:	91 83       	std	Z+1, r25	; 0x01
    147a:	80 83       	st	Z, r24
    147c:	8e e4       	ldi	r24, 0x4E	; 78
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	93 83       	std	Z+3, r25	; 0x03
    1482:	82 83       	std	Z+2, r24	; 0x02
    1484:	37 c0       	rjmp	.+110    	; 0x14f4 <set_parameter+0xfc>
					case TYPE_SQUARE: FUNCGEN.output_type_A = SQUARE; snprintf(UI.type_A, 4, "%s","SQR"); break;
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <FUNCGEN+0x10>
    148c:	e9 e3       	ldi	r30, 0x39	; 57
    148e:	f5 e0       	ldi	r31, 0x05	; 5
    1490:	83 e5       	ldi	r24, 0x53	; 83
    1492:	91 e5       	ldi	r25, 0x51	; 81
    1494:	91 83       	std	Z+1, r25	; 0x01
    1496:	80 83       	st	Z, r24
    1498:	82 e5       	ldi	r24, 0x52	; 82
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	93 83       	std	Z+3, r25	; 0x03
    149e:	82 83       	std	Z+2, r24	; 0x02
    14a0:	29 c0       	rjmp	.+82     	; 0x14f4 <set_parameter+0xfc>
					case TYPE_TRIANGLE: FUNCGEN.output_type_A = TRIANGLE; snprintf(UI.type_A, 4, "%s","TRG"); break;
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <FUNCGEN+0x10>
    14a8:	e9 e3       	ldi	r30, 0x39	; 57
    14aa:	f5 e0       	ldi	r31, 0x05	; 5
    14ac:	84 e5       	ldi	r24, 0x54	; 84
    14ae:	92 e5       	ldi	r25, 0x52	; 82
    14b0:	91 83       	std	Z+1, r25	; 0x01
    14b2:	80 83       	st	Z, r24
    14b4:	87 e4       	ldi	r24, 0x47	; 71
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	93 83       	std	Z+3, r25	; 0x03
    14ba:	82 83       	std	Z+2, r24	; 0x02
    14bc:	1b c0       	rjmp	.+54     	; 0x14f4 <set_parameter+0xfc>
					case TYPE_DC	  : FUNCGEN.output_type_A = DC; snprintf(UI.type_A, 4, "%s","DC "); break;
    14be:	84 e0       	ldi	r24, 0x04	; 4
    14c0:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <FUNCGEN+0x10>
    14c4:	e9 e3       	ldi	r30, 0x39	; 57
    14c6:	f5 e0       	ldi	r31, 0x05	; 5
    14c8:	84 e4       	ldi	r24, 0x44	; 68
    14ca:	93 e4       	ldi	r25, 0x43	; 67
    14cc:	91 83       	std	Z+1, r25	; 0x01
    14ce:	80 83       	st	Z, r24
    14d0:	80 e2       	ldi	r24, 0x20	; 32
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	93 83       	std	Z+3, r25	; 0x03
    14d6:	82 83       	std	Z+2, r24	; 0x02
    14d8:	0d c0       	rjmp	.+26     	; 0x14f4 <set_parameter+0xfc>
					case TYPE_OFF	  : FUNCGEN.output_type_A = OFF; snprintf(UI.type_A, 4, "%s","OFF"); break;
    14da:	85 e0       	ldi	r24, 0x05	; 5
    14dc:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <FUNCGEN+0x10>
    14e0:	e9 e3       	ldi	r30, 0x39	; 57
    14e2:	f5 e0       	ldi	r31, 0x05	; 5
    14e4:	8f e4       	ldi	r24, 0x4F	; 79
    14e6:	96 e4       	ldi	r25, 0x46	; 70
    14e8:	91 83       	std	Z+1, r25	; 0x01
    14ea:	80 83       	st	Z, r24
    14ec:	86 e4       	ldi	r24, 0x46	; 70
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	93 83       	std	Z+3, r25	; 0x03
    14f2:	82 83       	std	Z+2, r24	; 0x02
					default: break;
				}
				set_functionality(FG0, FUNCGEN.frequency_A, FUNCGEN.output_type_A);
    14f4:	ef e3       	ldi	r30, 0x3F	; 63
    14f6:	f5 e0       	ldi	r31, 0x05	; 5
    14f8:	40 81       	ld	r20, Z
    14fa:	51 81       	ldd	r21, Z+1	; 0x01
    14fc:	62 81       	ldd	r22, Z+2	; 0x02
    14fe:	73 81       	ldd	r23, Z+3	; 0x03
    1500:	20 89       	ldd	r18, Z+16	; 0x10
    1502:	85 e0       	ldi	r24, 0x05	; 5
    1504:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <set_functionality>
				update_UI_activity(LCD_LINE_1, 0);
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
				break;
    1510:	f2 c0       	rjmp	.+484    	; 0x16f6 <set_parameter+0x2fe>
				
			case PARAM_AMP:
				FUNCGEN.amplitude_A = retrieve_amplitude_12_bit(PARAM_CH0);
    1512:	80 e3       	ldi	r24, 0x30	; 48
    1514:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <retrieve_amplitude_12_bit>
    1518:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <FUNCGEN+0xd>
    151c:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <FUNCGEN+0xc>
				set_amplitude(FUNCGEN.amplitude_A, FG0);
    1520:	65 e0       	ldi	r22, 0x05	; 5
    1522:	0e 94 50 03 	call	0x6a0	; 0x6a0 <set_amplitude>
				update_UI_activity(LCD_LINE_2, 0);
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	80 e4       	ldi	r24, 0x40	; 64
    152a:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
				break;
    152e:	e3 c0       	rjmp	.+454    	; 0x16f6 <set_parameter+0x2fe>
				
			case PARAM_BIAS: 
				FUNCGEN.bias_A = retrieve_bias_12_bit(PARAM_CH0);
    1530:	80 e3       	ldi	r24, 0x30	; 48
    1532:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <retrieve_bias_12_bit>
    1536:	cf e3       	ldi	r28, 0x3F	; 63
    1538:	d5 e0       	ldi	r29, 0x05	; 5
    153a:	9b 8b       	std	Y+19, r25	; 0x13
    153c:	8a 8b       	std	Y+18, r24	; 0x12
				FUNCGEN.bias_A_sign = retrieve_bias_sign(); 
    153e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <retrieve_bias_sign>
    1542:	8e 8b       	std	Y+22, r24	; 0x16
				if (FUNCGEN.bias_A_sign == POSITIVE) set_dc_bias(FG0, 0, NEGATIVE);
    1544:	81 11       	cpse	r24, r1
    1546:	07 c0       	rjmp	.+14     	; 0x1556 <set_parameter+0x15e>
    1548:	41 e0       	ldi	r20, 0x01	; 1
    154a:	60 e0       	ldi	r22, 0x00	; 0
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	85 e0       	ldi	r24, 0x05	; 5
    1550:	0e 94 cb 03 	call	0x796	; 0x796 <set_dc_bias>
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <set_parameter+0x16a>
				else set_dc_bias(FG0, 0, POSITIVE);
    1556:	40 e0       	ldi	r20, 0x00	; 0
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	85 e0       	ldi	r24, 0x05	; 5
    155e:	0e 94 cb 03 	call	0x796	; 0x796 <set_dc_bias>
				set_dc_bias(FG0, FUNCGEN.bias_A, FUNCGEN.bias_A_sign);
    1562:	ef e3       	ldi	r30, 0x3F	; 63
    1564:	f5 e0       	ldi	r31, 0x05	; 5
    1566:	62 89       	ldd	r22, Z+18	; 0x12
    1568:	73 89       	ldd	r23, Z+19	; 0x13
    156a:	46 89       	ldd	r20, Z+22	; 0x16
    156c:	85 e0       	ldi	r24, 0x05	; 5
    156e:	0e 94 cb 03 	call	0x796	; 0x796 <set_dc_bias>
				update_UI_activity(LCD_LINE_2, 1);
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	80 e4       	ldi	r24, 0x40	; 64
    1576:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
				break;
    157a:	bd c0       	rjmp	.+378    	; 0x16f6 <set_parameter+0x2fe>
				
			default: break;
		}
		
	}
	else if (UART.rx_buffer[4] == PARAM_CH1) { 
    157c:	81 33       	cpi	r24, 0x31	; 49
    157e:	09 f0       	breq	.+2      	; 0x1582 <set_parameter+0x18a>
    1580:	ba c0       	rjmp	.+372    	; 0x16f6 <set_parameter+0x2fe>
		switch(UART.rx_buffer[6]) {
    1582:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <UART+0x6>
    1586:	82 34       	cpi	r24, 0x42	; 66
    1588:	09 f4       	brne	.+2      	; 0x158c <set_parameter+0x194>
    158a:	90 c0       	rjmp	.+288    	; 0x16ac <set_parameter+0x2b4>
    158c:	20 f4       	brcc	.+8      	; 0x1596 <set_parameter+0x19e>
    158e:	81 34       	cpi	r24, 0x41	; 65
    1590:	09 f4       	brne	.+2      	; 0x1594 <set_parameter+0x19c>
    1592:	7d c0       	rjmp	.+250    	; 0x168e <set_parameter+0x296>
    1594:	b0 c0       	rjmp	.+352    	; 0x16f6 <set_parameter+0x2fe>
    1596:	86 34       	cpi	r24, 0x46	; 70
    1598:	19 f0       	breq	.+6      	; 0x15a0 <set_parameter+0x1a8>
    159a:	84 35       	cpi	r24, 0x54	; 84
    159c:	a9 f0       	breq	.+42     	; 0x15c8 <set_parameter+0x1d0>
    159e:	ab c0       	rjmp	.+342    	; 0x16f6 <set_parameter+0x2fe>
			case PARAM_FREQ: 
				FUNCGEN.frequency_B = retrieve_frequency_uint32(PARAM_CH1);
    15a0:	81 e3       	ldi	r24, 0x31	; 49
    15a2:	0e 94 26 08 	call	0x104c	; 0x104c <retrieve_frequency_uint32>
    15a6:	ab 01       	movw	r20, r22
    15a8:	bc 01       	movw	r22, r24
    15aa:	ef e3       	ldi	r30, 0x3F	; 63
    15ac:	f5 e0       	ldi	r31, 0x05	; 5
    15ae:	44 83       	std	Z+4, r20	; 0x04
    15b0:	55 83       	std	Z+5, r21	; 0x05
    15b2:	66 83       	std	Z+6, r22	; 0x06
    15b4:	77 83       	std	Z+7, r23	; 0x07
				set_functionality(FG1, FUNCGEN.frequency_B, FUNCGEN.output_type_B);
    15b6:	21 89       	ldd	r18, Z+17	; 0x11
    15b8:	86 e0       	ldi	r24, 0x06	; 6
    15ba:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <set_functionality>
				update_UI_activity(LCD_LINE_3, 1);
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	84 e1       	ldi	r24, 0x14	; 20
    15c2:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
				break;
    15c6:	97 c0       	rjmp	.+302    	; 0x16f6 <set_parameter+0x2fe>
				
			case PARAM_TYPE:
				switch(UART.rx_buffer[9]) {
    15c8:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <UART+0x9>
    15cc:	81 35       	cpi	r24, 0x51	; 81
    15ce:	c9 f0       	breq	.+50     	; 0x1602 <set_parameter+0x20a>
    15d0:	28 f4       	brcc	.+10     	; 0x15dc <set_parameter+0x1e4>
    15d2:	84 34       	cpi	r24, 0x44	; 68
    15d4:	91 f1       	breq	.+100    	; 0x163a <set_parameter+0x242>
    15d6:	8f 34       	cpi	r24, 0x4F	; 79
    15d8:	f1 f1       	breq	.+124    	; 0x1656 <set_parameter+0x25e>
    15da:	4a c0       	rjmp	.+148    	; 0x1670 <set_parameter+0x278>
    15dc:	83 35       	cpi	r24, 0x53	; 83
    15de:	19 f0       	breq	.+6      	; 0x15e6 <set_parameter+0x1ee>
    15e0:	84 35       	cpi	r24, 0x54	; 84
    15e2:	e9 f0       	breq	.+58     	; 0x161e <set_parameter+0x226>
    15e4:	45 c0       	rjmp	.+138    	; 0x1670 <set_parameter+0x278>
					case TYPE_SINE: FUNCGEN.output_type_B = SINE; snprintf(UI.type_B, 4, "%s","SIN"); break;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <FUNCGEN+0x11>
    15ec:	ec e3       	ldi	r30, 0x3C	; 60
    15ee:	f5 e0       	ldi	r31, 0x05	; 5
    15f0:	83 e5       	ldi	r24, 0x53	; 83
    15f2:	99 e4       	ldi	r25, 0x49	; 73
    15f4:	91 83       	std	Z+1, r25	; 0x01
    15f6:	80 83       	st	Z, r24
    15f8:	8e e4       	ldi	r24, 0x4E	; 78
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	93 83       	std	Z+3, r25	; 0x03
    15fe:	82 83       	std	Z+2, r24	; 0x02
    1600:	37 c0       	rjmp	.+110    	; 0x1670 <set_parameter+0x278>
					case TYPE_SQUARE: FUNCGEN.output_type_B = SQUARE;snprintf(UI.type_B, 4, "%s","SQR"); break;
    1602:	83 e0       	ldi	r24, 0x03	; 3
    1604:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <FUNCGEN+0x11>
    1608:	ec e3       	ldi	r30, 0x3C	; 60
    160a:	f5 e0       	ldi	r31, 0x05	; 5
    160c:	83 e5       	ldi	r24, 0x53	; 83
    160e:	91 e5       	ldi	r25, 0x51	; 81
    1610:	91 83       	std	Z+1, r25	; 0x01
    1612:	80 83       	st	Z, r24
    1614:	82 e5       	ldi	r24, 0x52	; 82
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	93 83       	std	Z+3, r25	; 0x03
    161a:	82 83       	std	Z+2, r24	; 0x02
    161c:	29 c0       	rjmp	.+82     	; 0x1670 <set_parameter+0x278>
					case TYPE_TRIANGLE: FUNCGEN.output_type_B = TRIANGLE; snprintf(UI.type_B, 4, "%s","TRG"); break;
    161e:	82 e0       	ldi	r24, 0x02	; 2
    1620:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <FUNCGEN+0x11>
    1624:	ec e3       	ldi	r30, 0x3C	; 60
    1626:	f5 e0       	ldi	r31, 0x05	; 5
    1628:	84 e5       	ldi	r24, 0x54	; 84
    162a:	92 e5       	ldi	r25, 0x52	; 82
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	80 83       	st	Z, r24
    1630:	87 e4       	ldi	r24, 0x47	; 71
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	93 83       	std	Z+3, r25	; 0x03
    1636:	82 83       	std	Z+2, r24	; 0x02
    1638:	1b c0       	rjmp	.+54     	; 0x1670 <set_parameter+0x278>
					case TYPE_DC	  : FUNCGEN.output_type_B = DC; snprintf(UI.type_B, 4, "%s","DC "); break;
    163a:	84 e0       	ldi	r24, 0x04	; 4
    163c:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <FUNCGEN+0x11>
    1640:	ec e3       	ldi	r30, 0x3C	; 60
    1642:	f5 e0       	ldi	r31, 0x05	; 5
    1644:	84 e4       	ldi	r24, 0x44	; 68
    1646:	93 e4       	ldi	r25, 0x43	; 67
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	80 83       	st	Z, r24
    164c:	80 e2       	ldi	r24, 0x20	; 32
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	93 83       	std	Z+3, r25	; 0x03
    1652:	82 83       	std	Z+2, r24	; 0x02
    1654:	0d c0       	rjmp	.+26     	; 0x1670 <set_parameter+0x278>
					case TYPE_OFF	  : FUNCGEN.output_type_B = OFF;snprintf(UI.type_B, 4, "%s","OFF"); break;
    1656:	85 e0       	ldi	r24, 0x05	; 5
    1658:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <FUNCGEN+0x11>
    165c:	ec e3       	ldi	r30, 0x3C	; 60
    165e:	f5 e0       	ldi	r31, 0x05	; 5
    1660:	8f e4       	ldi	r24, 0x4F	; 79
    1662:	96 e4       	ldi	r25, 0x46	; 70
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
    1668:	86 e4       	ldi	r24, 0x46	; 70
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	93 83       	std	Z+3, r25	; 0x03
    166e:	82 83       	std	Z+2, r24	; 0x02
					default: break;
				}
				set_functionality(FG1, FUNCGEN.frequency_B, FUNCGEN.output_type_B);
    1670:	ef e3       	ldi	r30, 0x3F	; 63
    1672:	f5 e0       	ldi	r31, 0x05	; 5
    1674:	44 81       	ldd	r20, Z+4	; 0x04
    1676:	55 81       	ldd	r21, Z+5	; 0x05
    1678:	66 81       	ldd	r22, Z+6	; 0x06
    167a:	77 81       	ldd	r23, Z+7	; 0x07
    167c:	21 89       	ldd	r18, Z+17	; 0x11
    167e:	86 e0       	ldi	r24, 0x06	; 6
    1680:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <set_functionality>
				update_UI_activity(LCD_LINE_3, 0);
    1684:	60 e0       	ldi	r22, 0x00	; 0
    1686:	84 e1       	ldi	r24, 0x14	; 20
    1688:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
				break;
    168c:	34 c0       	rjmp	.+104    	; 0x16f6 <set_parameter+0x2fe>
				
			case PARAM_AMP:
				FUNCGEN.amplitude_B = retrieve_amplitude_12_bit(PARAM_CH1);
    168e:	81 e3       	ldi	r24, 0x31	; 49
    1690:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <retrieve_amplitude_12_bit>
    1694:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <FUNCGEN+0xf>
    1698:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <FUNCGEN+0xe>
				set_amplitude(FUNCGEN.amplitude_B, FG1);
    169c:	66 e0       	ldi	r22, 0x06	; 6
    169e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <set_amplitude>
				update_UI_activity(LCD_LINE_4, 0);
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	84 e5       	ldi	r24, 0x54	; 84
    16a6:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
				break;
    16aa:	25 c0       	rjmp	.+74     	; 0x16f6 <set_parameter+0x2fe>
				
			case PARAM_BIAS: 
				FUNCGEN.bias_B = retrieve_bias_12_bit(PARAM_CH1);
    16ac:	81 e3       	ldi	r24, 0x31	; 49
    16ae:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <retrieve_bias_12_bit>
    16b2:	cf e3       	ldi	r28, 0x3F	; 63
    16b4:	d5 e0       	ldi	r29, 0x05	; 5
    16b6:	9d 8b       	std	Y+21, r25	; 0x15
    16b8:	8c 8b       	std	Y+20, r24	; 0x14
				FUNCGEN.bias_B_sign = retrieve_bias_sign(); 
    16ba:	0e 94 f5 09 	call	0x13ea	; 0x13ea <retrieve_bias_sign>
    16be:	8f 8b       	std	Y+23, r24	; 0x17
				if (FUNCGEN.bias_B_sign == POSITIVE) set_dc_bias(FG1, 0, NEGATIVE);
    16c0:	81 11       	cpse	r24, r1
    16c2:	07 c0       	rjmp	.+14     	; 0x16d2 <set_parameter+0x2da>
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	86 e0       	ldi	r24, 0x06	; 6
    16cc:	0e 94 cb 03 	call	0x796	; 0x796 <set_dc_bias>
    16d0:	06 c0       	rjmp	.+12     	; 0x16de <set_parameter+0x2e6>
				else set_dc_bias(FG1, 0, POSITIVE);
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	86 e0       	ldi	r24, 0x06	; 6
    16da:	0e 94 cb 03 	call	0x796	; 0x796 <set_dc_bias>
				set_dc_bias(FG1, FUNCGEN.bias_B, FUNCGEN.bias_B_sign);
    16de:	ef e3       	ldi	r30, 0x3F	; 63
    16e0:	f5 e0       	ldi	r31, 0x05	; 5
    16e2:	64 89       	ldd	r22, Z+20	; 0x14
    16e4:	75 89       	ldd	r23, Z+21	; 0x15
    16e6:	47 89       	ldd	r20, Z+23	; 0x17
    16e8:	86 e0       	ldi	r24, 0x06	; 6
    16ea:	0e 94 cb 03 	call	0x796	; 0x796 <set_dc_bias>
				update_UI_activity(LCD_LINE_4, 1);
    16ee:	61 e0       	ldi	r22, 0x01	; 1
    16f0:	84 e5       	ldi	r24, 0x54	; 84
    16f2:	0e 94 11 07 	call	0xe22	; 0xe22 <update_UI_activity>
				break;
				
			default: break;
		}
	}
}
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <socket_message_handler>:
		}
	}
}


void socket_message_handler() {
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	1f 92       	push	r1
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
	volatile enum MESSAGE_HANDLER_STATES msg_state = MESSAGE_HANDLER_IDLE;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	89 83       	std	Y+1, r24	; 0x01
				break;
				
			case VOLUME_ADJUST:
				set_volume(update_sg_param_value(VOLUME));
				clear_uart_rx_message();
				msg_state = MESSAGE_HANDLER_IDLE;
    170a:	ff 24       	eor	r15, r15
    170c:	f3 94       	inc	r15
//				send_command_UART("OK\r\n");	
//				ENABLE_TIMER();			
				break;
				
			case LCD_PARAM_ADJUST:
				switch(UART.rx_buffer[6]) {
    170e:	02 ed       	ldi	r16, 0xD2	; 210
    1710:	15 e0       	ldi	r17, 0x05	; 5
	//Init_Timer();
	while(!output_confirm) {
		update_device_status();
		switch(msg_state) {
			case MESSAGE_HANDLER_IDLE:
				if (UART.message_received) {
    1712:	0f 2e       	mov	r0, r31
    1714:	f3 e5       	ldi	r31, 0x53	; 83
    1716:	8f 2e       	mov	r8, r31
    1718:	f6 e0       	ldi	r31, 0x06	; 6
    171a:	9f 2e       	mov	r9, r31
    171c:	f0 2d       	mov	r31, r0
					beep();
					if ((UART.rx_buffer[2]) == 'G' && (UART.rx_buffer[3] == 'I')) msg_state = PROVIDE_DETAILS;
					else if ((UART.rx_buffer[2]) == 'B' && (UART.rx_buffer[3] == 'O')) msg_state = BOOT_FROM_APP;
					else if (UART.rx_buffer[2] == 'C' && UART.rx_buffer[3] == '=') msg_state = FUNCTION_HANDLER;
					else if (UART.rx_buffer[2] == 'L' && UART.rx_buffer[3] == 'C') msg_state = LCD_PARAM_ADJUST;
					else if (UART.rx_buffer[2] == 'R' && UART.rx_buffer[3] == 'E') msg_state = RESET_HANDLER;
    171e:	0f 2e       	mov	r0, r31
    1720:	f7 e0       	ldi	r31, 0x07	; 7
    1722:	af 2e       	mov	r10, r31
    1724:	f0 2d       	mov	r31, r0
//					DISABLE_TIMER();
					beep();
					if ((UART.rx_buffer[2]) == 'G' && (UART.rx_buffer[3] == 'I')) msg_state = PROVIDE_DETAILS;
					else if ((UART.rx_buffer[2]) == 'B' && (UART.rx_buffer[3] == 'O')) msg_state = BOOT_FROM_APP;
					else if (UART.rx_buffer[2] == 'C' && UART.rx_buffer[3] == '=') msg_state = FUNCTION_HANDLER;
					else if (UART.rx_buffer[2] == 'L' && UART.rx_buffer[3] == 'C') msg_state = LCD_PARAM_ADJUST;
    1726:	0f 2e       	mov	r0, r31
    1728:	f5 e0       	ldi	r31, 0x05	; 5
    172a:	bf 2e       	mov	r11, r31
    172c:	f0 2d       	mov	r31, r0
				if (UART.message_received) {
//					DISABLE_TIMER();
					beep();
					if ((UART.rx_buffer[2]) == 'G' && (UART.rx_buffer[3] == 'I')) msg_state = PROVIDE_DETAILS;
					else if ((UART.rx_buffer[2]) == 'B' && (UART.rx_buffer[3] == 'O')) msg_state = BOOT_FROM_APP;
					else if (UART.rx_buffer[2] == 'C' && UART.rx_buffer[3] == '=') msg_state = FUNCTION_HANDLER;
    172e:	68 94       	set
    1730:	cc 24       	eor	r12, r12
    1732:	c2 f8       	bld	r12, 2
			case MESSAGE_HANDLER_IDLE:
				if (UART.message_received) {
//					DISABLE_TIMER();
					beep();
					if ((UART.rx_buffer[2]) == 'G' && (UART.rx_buffer[3] == 'I')) msg_state = PROVIDE_DETAILS;
					else if ((UART.rx_buffer[2]) == 'B' && (UART.rx_buffer[3] == 'O')) msg_state = BOOT_FROM_APP;
    1734:	0f 2e       	mov	r0, r31
    1736:	f3 e0       	ldi	r31, 0x03	; 3
    1738:	df 2e       	mov	r13, r31
    173a:	f0 2d       	mov	r31, r0

void socket_message_handler() {
	volatile enum MESSAGE_HANDLER_STATES msg_state = MESSAGE_HANDLER_IDLE;
	bool output_confirm = false;
	//Init_Timer();
	while(!output_confirm) {
    173c:	7d c1       	rjmp	.+762    	; 0x1a38 <socket_message_handler+0x33c>
		update_device_status();
		switch(msg_state) {
			case MESSAGE_HANDLER_IDLE:
				if (UART.message_received) {
    173e:	f4 01       	movw	r30, r8
    1740:	80 81       	ld	r24, Z
    1742:	88 23       	and	r24, r24
    1744:	09 f4       	brne	.+2      	; 0x1748 <socket_message_handler+0x4c>
    1746:	78 c1       	rjmp	.+752    	; 0x1a38 <socket_message_handler+0x33c>
//					DISABLE_TIMER();
					beep();
    1748:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
					if ((UART.rx_buffer[2]) == 'G' && (UART.rx_buffer[3] == 'I')) msg_state = PROVIDE_DETAILS;
    174c:	f8 01       	movw	r30, r16
    174e:	82 81       	ldd	r24, Z+2	; 0x02
    1750:	87 34       	cpi	r24, 0x47	; 71
    1752:	31 f4       	brne	.+12     	; 0x1760 <socket_message_handler+0x64>
    1754:	83 81       	ldd	r24, Z+3	; 0x03
    1756:	89 34       	cpi	r24, 0x49	; 73
    1758:	19 f5       	brne	.+70     	; 0x17a0 <socket_message_handler+0xa4>
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	6c c1       	rjmp	.+728    	; 0x1a38 <socket_message_handler+0x33c>
					else if ((UART.rx_buffer[2]) == 'B' && (UART.rx_buffer[3] == 'O')) msg_state = BOOT_FROM_APP;
    1760:	82 34       	cpi	r24, 0x42	; 66
    1762:	31 f4       	brne	.+12     	; 0x1770 <socket_message_handler+0x74>
    1764:	f8 01       	movw	r30, r16
    1766:	83 81       	ldd	r24, Z+3	; 0x03
    1768:	8f 34       	cpi	r24, 0x4F	; 79
    176a:	d1 f4       	brne	.+52     	; 0x17a0 <socket_message_handler+0xa4>
    176c:	d9 82       	std	Y+1, r13	; 0x01
    176e:	64 c1       	rjmp	.+712    	; 0x1a38 <socket_message_handler+0x33c>
					else if (UART.rx_buffer[2] == 'C' && UART.rx_buffer[3] == '=') msg_state = FUNCTION_HANDLER;
    1770:	83 34       	cpi	r24, 0x43	; 67
    1772:	31 f4       	brne	.+12     	; 0x1780 <socket_message_handler+0x84>
    1774:	f8 01       	movw	r30, r16
    1776:	83 81       	ldd	r24, Z+3	; 0x03
    1778:	8d 33       	cpi	r24, 0x3D	; 61
    177a:	91 f4       	brne	.+36     	; 0x17a0 <socket_message_handler+0xa4>
    177c:	c9 82       	std	Y+1, r12	; 0x01
    177e:	5c c1       	rjmp	.+696    	; 0x1a38 <socket_message_handler+0x33c>
					else if (UART.rx_buffer[2] == 'L' && UART.rx_buffer[3] == 'C') msg_state = LCD_PARAM_ADJUST;
    1780:	8c 34       	cpi	r24, 0x4C	; 76
    1782:	31 f4       	brne	.+12     	; 0x1790 <socket_message_handler+0x94>
    1784:	f8 01       	movw	r30, r16
    1786:	83 81       	ldd	r24, Z+3	; 0x03
    1788:	83 34       	cpi	r24, 0x43	; 67
    178a:	51 f4       	brne	.+20     	; 0x17a0 <socket_message_handler+0xa4>
    178c:	b9 82       	std	Y+1, r11	; 0x01
    178e:	54 c1       	rjmp	.+680    	; 0x1a38 <socket_message_handler+0x33c>
					else if (UART.rx_buffer[2] == 'R' && UART.rx_buffer[3] == 'E') msg_state = RESET_HANDLER;
    1790:	82 35       	cpi	r24, 0x52	; 82
    1792:	31 f4       	brne	.+12     	; 0x17a0 <socket_message_handler+0xa4>
    1794:	f8 01       	movw	r30, r16
    1796:	83 81       	ldd	r24, Z+3	; 0x03
    1798:	85 34       	cpi	r24, 0x45	; 69
    179a:	11 f4       	brne	.+4      	; 0x17a0 <socket_message_handler+0xa4>
    179c:	a9 82       	std	Y+1, r10	; 0x01
    179e:	4c c1       	rjmp	.+664    	; 0x1a38 <socket_message_handler+0x33c>
					else clear_uart_rx_message();
    17a0:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
    17a4:	49 c1       	rjmp	.+658    	; 0x1a38 <socket_message_handler+0x33c>
				}
				break;
				
			case PROVIDE_DETAILS:
				switch(UART.rx_buffer[7]) {
    17a6:	f8 01       	movw	r30, r16
    17a8:	87 81       	ldd	r24, Z+7	; 0x07
    17aa:	81 34       	cpi	r24, 0x41	; 65
    17ac:	39 f0       	breq	.+14     	; 0x17bc <socket_message_handler+0xc0>
    17ae:	82 34       	cpi	r24, 0x42	; 66
    17b0:	49 f4       	brne	.+18     	; 0x17c4 <socket_message_handler+0xc8>
					case 'B': send_command_UART(get_battery_status());  break;
    17b2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <get_battery_status>
    17b6:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <socket_message_handler+0xc8>
					case 'A':  send_command_UART(get_ac_power_status()); break;
    17bc:	0e 94 14 06 	call	0xc28	; 0xc28 <get_ac_power_status>
    17c0:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
					default: break;
				}
				clear_uart_rx_message();
    17c4:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
				msg_state = MESSAGE_HANDLER_IDLE;
    17c8:	f9 82       	std	Y+1, r15	; 0x01
//				ENABLE_TIMER();
				break;
    17ca:	36 c1       	rjmp	.+620    	; 0x1a38 <socket_message_handler+0x33c>

			case FUNCTION_HANDLER:
				set_parameter();
    17cc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <set_parameter>
				clear_uart_rx_message();
    17d0:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
				msg_state = MESSAGE_HANDLER_IDLE;
    17d4:	f9 82       	std	Y+1, r15	; 0x01
				//send_command_UART("OK\r\n");
//				ENABLE_TIMER();
				break;
    17d6:	30 c1       	rjmp	.+608    	; 0x1a38 <socket_message_handler+0x33c>
				
			case RESET_HANDLER:
				clear_LCD();
    17d8:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
				print_LCD_line(SHUTDOWN_MSG, LCD_LINE_2);
    17dc:	60 e4       	ldi	r22, 0x40	; 64
    17de:	86 ed       	ldi	r24, 0xD6	; 214
    17e0:	91 e0       	ldi	r25, 0x01	; 1
    17e2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
    17e6:	64 e1       	ldi	r22, 0x14	; 20
    17e8:	8b ee       	ldi	r24, 0xEB	; 235
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    17f0:	15 e3       	ldi	r17, 0x35	; 53
				for (uint8_t ptr = 5; ptr > 0; ptr--) {
					print_LCD_char(ptr + '0',LCD_LINE_4, 9); // X position
    17f2:	49 e0       	ldi	r20, 0x09	; 9
    17f4:	64 e5       	ldi	r22, 0x54	; 84
    17f6:	81 2f       	mov	r24, r17
    17f8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17fc:	ff ef       	ldi	r31, 0xFF	; 255
    17fe:	29 e6       	ldi	r18, 0x69	; 105
    1800:	88 e1       	ldi	r24, 0x18	; 24
    1802:	f1 50       	subi	r31, 0x01	; 1
    1804:	20 40       	sbci	r18, 0x00	; 0
    1806:	80 40       	sbci	r24, 0x00	; 0
    1808:	e1 f7       	brne	.-8      	; 0x1802 <socket_message_handler+0x106>
    180a:	00 c0       	rjmp	.+0      	; 0x180c <socket_message_handler+0x110>
    180c:	00 00       	nop
    180e:	11 50       	subi	r17, 0x01	; 1
				
			case RESET_HANDLER:
				clear_LCD();
				print_LCD_line(SHUTDOWN_MSG, LCD_LINE_2);
				print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
				for (uint8_t ptr = 5; ptr > 0; ptr--) {
    1810:	10 33       	cpi	r17, 0x30	; 48
    1812:	79 f7       	brne	.-34     	; 0x17f2 <socket_message_handler+0xf6>
					print_LCD_char(ptr + '0',LCD_LINE_4, 9); // X position
					_delay_ms(1000);
				}
				play_melody(false);
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	0e 94 39 02 	call	0x472	; 0x472 <play_melody>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    181a:	98 e0       	ldi	r25, 0x08	; 8
    181c:	88 e1       	ldi	r24, 0x18	; 24
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	a8 95       	wdr
    1824:	81 bd       	out	0x21, r24	; 33
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	91 bd       	out	0x21, r25	; 33
    182a:	ff cf       	rjmp	.-2      	; 0x182a <socket_message_handler+0x12e>
				RESET_DEVICE();
				break;
					
			case BOOT_FROM_APP: 
				if (UART.rx_buffer[7] == 'D') { // Direct request.
    182c:	f8 01       	movw	r30, r16
    182e:	87 81       	ldd	r24, Z+7	; 0x07
    1830:	84 34       	cpi	r24, 0x44	; 68
    1832:	61 f5       	brne	.+88     	; 0x188c <socket_message_handler+0x190>
					eeprom_write_byte((uint8_t *)STORED_CONNECTION_STATE_ADDRESS, 'D');
    1834:	64 e4       	ldi	r22, 0x44	; 68
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <eeprom_write_byte>
					clear_LCD();
    183e:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					print_LCD_line(REBOOT_MSG, LCD_LINE_2);
    1842:	60 e4       	ldi	r22, 0x40	; 64
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	92 e0       	ldi	r25, 0x02	; 2
    1848:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
    184c:	64 e1       	ldi	r22, 0x14	; 20
    184e:	8b ee       	ldi	r24, 0xEB	; 235
    1850:	91 e0       	ldi	r25, 0x01	; 1
    1852:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    1856:	15 e3       	ldi	r17, 0x35	; 53
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
    1858:	49 e0       	ldi	r20, 0x09	; 9
    185a:	64 e1       	ldi	r22, 0x14	; 20
    185c:	81 2f       	mov	r24, r17
    185e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
    1862:	ff ef       	ldi	r31, 0xFF	; 255
    1864:	29 e6       	ldi	r18, 0x69	; 105
    1866:	88 e1       	ldi	r24, 0x18	; 24
    1868:	f1 50       	subi	r31, 0x01	; 1
    186a:	20 40       	sbci	r18, 0x00	; 0
    186c:	80 40       	sbci	r24, 0x00	; 0
    186e:	e1 f7       	brne	.-8      	; 0x1868 <socket_message_handler+0x16c>
    1870:	00 c0       	rjmp	.+0      	; 0x1872 <socket_message_handler+0x176>
    1872:	00 00       	nop
    1874:	11 50       	subi	r17, 0x01	; 1
				if (UART.rx_buffer[7] == 'D') { // Direct request.
					eeprom_write_byte((uint8_t *)STORED_CONNECTION_STATE_ADDRESS, 'D');
					clear_LCD();
					print_LCD_line(REBOOT_MSG, LCD_LINE_2);
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
    1876:	10 33       	cpi	r17, 0x30	; 48
    1878:	79 f7       	brne	.-34     	; 0x1858 <socket_message_handler+0x15c>
    187a:	98 e0       	ldi	r25, 0x08	; 8
    187c:	88 e1       	ldi	r24, 0x18	; 24
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	a8 95       	wdr
    1884:	81 bd       	out	0x21, r24	; 33
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	91 bd       	out	0x21, r25	; 33
    188a:	ff cf       	rjmp	.-2      	; 0x188a <socket_message_handler+0x18e>
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
						_delay_ms(1000);
					}	
					RESET_DEVICE();
				}
				else if (UART.rx_buffer[7] == 'L') { // LAN request
    188c:	8c 34       	cpi	r24, 0x4C	; 76
    188e:	61 f5       	brne	.+88     	; 0x18e8 <socket_message_handler+0x1ec>
					eeprom_write_byte((uint8_t *)STORED_CONNECTION_STATE_ADDRESS, 'L');
    1890:	6c e4       	ldi	r22, 0x4C	; 76
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <eeprom_write_byte>
					clear_LCD();
    189a:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					print_LCD_line(REBOOT_MSG, LCD_LINE_2);
    189e:	60 e4       	ldi	r22, 0x40	; 64
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	92 e0       	ldi	r25, 0x02	; 2
    18a4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
    18a8:	64 e1       	ldi	r22, 0x14	; 20
    18aa:	8b ee       	ldi	r24, 0xEB	; 235
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    18b2:	15 e3       	ldi	r17, 0x35	; 53
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
    18b4:	49 e0       	ldi	r20, 0x09	; 9
    18b6:	64 e1       	ldi	r22, 0x14	; 20
    18b8:	81 2f       	mov	r24, r17
    18ba:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
    18be:	9f ef       	ldi	r25, 0xFF	; 255
    18c0:	e9 e6       	ldi	r30, 0x69	; 105
    18c2:	f8 e1       	ldi	r31, 0x18	; 24
    18c4:	91 50       	subi	r25, 0x01	; 1
    18c6:	e0 40       	sbci	r30, 0x00	; 0
    18c8:	f0 40       	sbci	r31, 0x00	; 0
    18ca:	e1 f7       	brne	.-8      	; 0x18c4 <socket_message_handler+0x1c8>
    18cc:	00 c0       	rjmp	.+0      	; 0x18ce <socket_message_handler+0x1d2>
    18ce:	00 00       	nop
    18d0:	11 50       	subi	r17, 0x01	; 1
				else if (UART.rx_buffer[7] == 'L') { // LAN request
					eeprom_write_byte((uint8_t *)STORED_CONNECTION_STATE_ADDRESS, 'L');
					clear_LCD();
					print_LCD_line(REBOOT_MSG, LCD_LINE_2);
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
    18d2:	10 33       	cpi	r17, 0x30	; 48
    18d4:	79 f7       	brne	.-34     	; 0x18b4 <socket_message_handler+0x1b8>
    18d6:	98 e0       	ldi	r25, 0x08	; 8
    18d8:	88 e1       	ldi	r24, 0x18	; 24
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	a8 95       	wdr
    18e0:	81 bd       	out	0x21, r24	; 33
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	91 bd       	out	0x21, r25	; 33
    18e6:	ff cf       	rjmp	.-2      	; 0x18e6 <socket_message_handler+0x1ea>
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
						_delay_ms(1000);
					}
					RESET_DEVICE();
				}
				else if (UART.rx_buffer[7] == 'S')  { // Shutdown
    18e8:	83 35       	cpi	r24, 0x53	; 83
    18ea:	39 f5       	brne	.+78     	; 0x193a <socket_message_handler+0x23e>
					clear_LCD();
    18ec:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					print_LCD_line(SHUTDOWN_MSG, LCD_LINE_2);
    18f0:	60 e4       	ldi	r22, 0x40	; 64
    18f2:	86 ed       	ldi	r24, 0xD6	; 214
    18f4:	91 e0       	ldi	r25, 0x01	; 1
    18f6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
    18fa:	64 e1       	ldi	r22, 0x14	; 20
    18fc:	8b ee       	ldi	r24, 0xEB	; 235
    18fe:	91 e0       	ldi	r25, 0x01	; 1
    1900:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    1904:	0f 2e       	mov	r0, r31
    1906:	f5 e3       	ldi	r31, 0x35	; 53
    1908:	ef 2e       	mov	r14, r31
    190a:	f0 2d       	mov	r31, r0
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
    190c:	49 e0       	ldi	r20, 0x09	; 9
    190e:	64 e1       	ldi	r22, 0x14	; 20
    1910:	8e 2d       	mov	r24, r14
    1912:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
    1916:	2f ef       	ldi	r18, 0xFF	; 255
    1918:	89 e6       	ldi	r24, 0x69	; 105
    191a:	98 e1       	ldi	r25, 0x18	; 24
    191c:	21 50       	subi	r18, 0x01	; 1
    191e:	80 40       	sbci	r24, 0x00	; 0
    1920:	90 40       	sbci	r25, 0x00	; 0
    1922:	e1 f7       	brne	.-8      	; 0x191c <socket_message_handler+0x220>
    1924:	00 c0       	rjmp	.+0      	; 0x1926 <socket_message_handler+0x22a>
    1926:	00 00       	nop
    1928:	ea 94       	dec	r14
				}
				else if (UART.rx_buffer[7] == 'S')  { // Shutdown
					clear_LCD();
					print_LCD_line(SHUTDOWN_MSG, LCD_LINE_2);
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
    192a:	e0 e3       	ldi	r30, 0x30	; 48
    192c:	ee 12       	cpse	r14, r30
    192e:	ee cf       	rjmp	.-36     	; 0x190c <socket_message_handler+0x210>
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
						_delay_ms(1000);
					}
					play_melody(false);
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	0e 94 39 02 	call	0x472	; 0x472 <play_melody>
					DISABLE_DEVICE();
    1936:	da 98       	cbi	0x1b, 2	; 27
    1938:	7f c0       	rjmp	.+254    	; 0x1a38 <socket_message_handler+0x33c>
				}
				else if ((UART.rx_buffer[7] == 'R') && (UART.rx_buffer[10] == 'T'))  { // Shutdown
    193a:	82 35       	cpi	r24, 0x52	; 82
    193c:	09 f0       	breq	.+2      	; 0x1940 <socket_message_handler+0x244>
    193e:	5c c0       	rjmp	.+184    	; 0x19f8 <socket_message_handler+0x2fc>
    1940:	f8 01       	movw	r30, r16
    1942:	82 85       	ldd	r24, Z+10	; 0x0a
    1944:	84 35       	cpi	r24, 0x54	; 84
    1946:	61 f5       	brne	.+88     	; 0x19a0 <socket_message_handler+0x2a4>
					clear_LCD();
    1948:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					print_LCD_line("Reset to factory... ", LCD_LINE_2);
    194c:	60 e4       	ldi	r22, 0x40	; 64
    194e:	85 e1       	ldi	r24, 0x15	; 21
    1950:	92 e0       	ldi	r25, 0x02	; 2
    1952:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
    1956:	64 e1       	ldi	r22, 0x14	; 20
    1958:	8b ee       	ldi	r24, 0xEB	; 235
    195a:	91 e0       	ldi	r25, 0x01	; 1
    195c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    1960:	15 e3       	ldi	r17, 0x35	; 53
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
    1962:	49 e0       	ldi	r20, 0x09	; 9
    1964:	64 e1       	ldi	r22, 0x14	; 20
    1966:	81 2f       	mov	r24, r17
    1968:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
    196c:	ff ef       	ldi	r31, 0xFF	; 255
    196e:	29 e6       	ldi	r18, 0x69	; 105
    1970:	88 e1       	ldi	r24, 0x18	; 24
    1972:	f1 50       	subi	r31, 0x01	; 1
    1974:	20 40       	sbci	r18, 0x00	; 0
    1976:	80 40       	sbci	r24, 0x00	; 0
    1978:	e1 f7       	brne	.-8      	; 0x1972 <socket_message_handler+0x276>
    197a:	00 c0       	rjmp	.+0      	; 0x197c <socket_message_handler+0x280>
    197c:	00 00       	nop
    197e:	11 50       	subi	r17, 0x01	; 1
				}
				else if ((UART.rx_buffer[7] == 'R') && (UART.rx_buffer[10] == 'T'))  { // Shutdown
					clear_LCD();
					print_LCD_line("Reset to factory... ", LCD_LINE_2);
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
    1980:	10 33       	cpi	r17, 0x30	; 48
    1982:	79 f7       	brne	.-34     	; 0x1962 <socket_message_handler+0x266>
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
						_delay_ms(1000);
					}
					play_melody(false);
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	0e 94 39 02 	call	0x472	; 0x472 <play_melody>
					erase_EEPROM_1K();
    198a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <erase_EEPROM_1K>
    198e:	98 e0       	ldi	r25, 0x08	; 8
    1990:	88 e1       	ldi	r24, 0x18	; 24
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	a8 95       	wdr
    1998:	81 bd       	out	0x21, r24	; 33
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	91 bd       	out	0x21, r25	; 33
    199e:	ff cf       	rjmp	.-2      	; 0x199e <socket_message_handler+0x2a2>
					RESET_DEVICE();
				}
				else if ((UART.rx_buffer[7] == 'R') && (UART.rx_buffer[10] == 'E'))  { // Shutdown
    19a0:	85 34       	cpi	r24, 0x45	; 69
    19a2:	51 f5       	brne	.+84     	; 0x19f8 <socket_message_handler+0x2fc>
					clear_LCD();
    19a4:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					print_LCD_line(REBOOT_MSG, LCD_LINE_2);
    19a8:	60 e4       	ldi	r22, 0x40	; 64
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	92 e0       	ldi	r25, 0x02	; 2
    19ae:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
    19b2:	64 e1       	ldi	r22, 0x14	; 20
    19b4:	8b ee       	ldi	r24, 0xEB	; 235
    19b6:	91 e0       	ldi	r25, 0x01	; 1
    19b8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    19bc:	15 e3       	ldi	r17, 0x35	; 53
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
    19be:	49 e0       	ldi	r20, 0x09	; 9
    19c0:	64 e1       	ldi	r22, 0x14	; 20
    19c2:	81 2f       	mov	r24, r17
    19c4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
    19c8:	9f ef       	ldi	r25, 0xFF	; 255
    19ca:	e9 e6       	ldi	r30, 0x69	; 105
    19cc:	f8 e1       	ldi	r31, 0x18	; 24
    19ce:	91 50       	subi	r25, 0x01	; 1
    19d0:	e0 40       	sbci	r30, 0x00	; 0
    19d2:	f0 40       	sbci	r31, 0x00	; 0
    19d4:	e1 f7       	brne	.-8      	; 0x19ce <socket_message_handler+0x2d2>
    19d6:	00 c0       	rjmp	.+0      	; 0x19d8 <socket_message_handler+0x2dc>
    19d8:	00 00       	nop
    19da:	11 50       	subi	r17, 0x01	; 1
				}
				else if ((UART.rx_buffer[7] == 'R') && (UART.rx_buffer[10] == 'E'))  { // Shutdown
					clear_LCD();
					print_LCD_line(REBOOT_MSG, LCD_LINE_2);
					print_LCD_line(IN_X_SEC_MSG, LCD_LINE_3);
					for (uint8_t ptr = 5; ptr > 0; ptr--) {
    19dc:	10 33       	cpi	r17, 0x30	; 48
    19de:	79 f7       	brne	.-34     	; 0x19be <socket_message_handler+0x2c2>
						print_LCD_char(ptr + '0',LCD_LINE_3, 9); // X position
						_delay_ms(1000);
					}
					play_melody(false);
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	0e 94 39 02 	call	0x472	; 0x472 <play_melody>
    19e6:	98 e0       	ldi	r25, 0x08	; 8
    19e8:	88 e1       	ldi	r24, 0x18	; 24
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	a8 95       	wdr
    19f0:	81 bd       	out	0x21, r24	; 33
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	91 bd       	out	0x21, r25	; 33
    19f6:	ff cf       	rjmp	.-2      	; 0x19f6 <socket_message_handler+0x2fa>
					RESET_DEVICE();
				}	
				else msg_state = MESSAGE_HANDLER_IDLE;			
    19f8:	f9 82       	std	Y+1, r15	; 0x01
    19fa:	1e c0       	rjmp	.+60     	; 0x1a38 <socket_message_handler+0x33c>
//				send_command_UART("OK\r\n");	
//				ENABLE_TIMER();			
				break;
				
			case LCD_PARAM_ADJUST:
				switch(UART.rx_buffer[6]) {
    19fc:	f8 01       	movw	r30, r16
    19fe:	86 81       	ldd	r24, Z+6	; 0x06
    1a00:	82 34       	cpi	r24, 0x42	; 66
    1a02:	19 f0       	breq	.+6      	; 0x1a0a <socket_message_handler+0x30e>
    1a04:	83 34       	cpi	r24, 0x43	; 67
    1a06:	39 f0       	breq	.+14     	; 0x1a16 <socket_message_handler+0x31a>
    1a08:	0b c0       	rjmp	.+22     	; 0x1a20 <socket_message_handler+0x324>
					case 'B': set_LCD_brightness(update_sg_param_value(BRIGHTNESS));  break;
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	0e 94 84 05 	call	0xb08	; 0xb08 <update_sg_param_value>
    1a10:	0e 94 83 03 	call	0x706	; 0x706 <set_LCD_brightness>
    1a14:	05 c0       	rjmp	.+10     	; 0x1a20 <socket_message_handler+0x324>
					case 'C': set_LCD_contrast(update_sg_param_value(CONTRAST));  break;
    1a16:	8f 2d       	mov	r24, r15
    1a18:	0e 94 84 05 	call	0xb08	; 0xb08 <update_sg_param_value>
    1a1c:	0e 94 75 03 	call	0x6ea	; 0x6ea <set_LCD_contrast>
					default: break;
				}
				clear_uart_rx_message();
    1a20:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
				msg_state = MESSAGE_HANDLER_IDLE;
    1a24:	f9 82       	std	Y+1, r15	; 0x01
//				send_command_UART("OK\r\n");
//				ENABLE_TIMER();
				break;
    1a26:	08 c0       	rjmp	.+16     	; 0x1a38 <socket_message_handler+0x33c>
				
			case VOLUME_ADJUST:
				set_volume(update_sg_param_value(VOLUME));
    1a28:	82 e0       	ldi	r24, 0x02	; 2
    1a2a:	0e 94 84 05 	call	0xb08	; 0xb08 <update_sg_param_value>
    1a2e:	0e 94 76 05 	call	0xaec	; 0xaec <set_volume>
				clear_uart_rx_message();
    1a32:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
				msg_state = MESSAGE_HANDLER_IDLE;
    1a36:	f9 82       	std	Y+1, r15	; 0x01
	volatile enum MESSAGE_HANDLER_STATES msg_state = MESSAGE_HANDLER_IDLE;
	bool output_confirm = false;
	//Init_Timer();
	while(!output_confirm) {
		update_device_status();
		switch(msg_state) {
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	31 97       	sbiw	r30, 0x01	; 1
    1a40:	e7 30       	cpi	r30, 0x07	; 7
    1a42:	f1 05       	cpc	r31, r1
    1a44:	c8 f7       	brcc	.-14     	; 0x1a38 <socket_message_handler+0x33c>
    1a46:	e6 5d       	subi	r30, 0xD6	; 214
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__tablejump2__>

00001a4e <direct_pairing>:

void direct_pairing() {
	uint8_t retries = 0;
	bool break_from_pairing = false;
	enum DIRECT_PAIRING_STATES direct_pairing_state = SHOW_DIRECT_MESSAGE;
	beep();
    1a4e:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
}

void direct_pairing() {
	uint8_t retries = 0;
	bool break_from_pairing = false;
	enum DIRECT_PAIRING_STATES direct_pairing_state = SHOW_DIRECT_MESSAGE;
    1a52:	d1 e0       	ldi	r29, 0x01	; 1
		}
	}
}

void direct_pairing() {
	uint8_t retries = 0;
    1a54:	c0 e0       	ldi	r28, 0x00	; 0
					_delay_ms(800);
					break;
				
				
				case WAIT_FOR_DEVICE:
					if (UART.message_received) {
    1a56:	03 e5       	ldi	r16, 0x53	; 83
    1a58:	16 e0       	ldi	r17, 0x06	; 6
							direct_pairing_state = MESSAGE_HANDLING_STATE;
							UART.wait_for_message = WAIT_FOR_DATA;
    1a5a:	0f 2e       	mov	r0, r31
    1a5c:	f5 e5       	ldi	r31, 0x55	; 85
    1a5e:	ef 2e       	mov	r14, r31
    1a60:	f6 e0       	ldi	r31, 0x06	; 6
    1a62:	ff 2e       	mov	r15, r31
    1a64:	f0 2d       	mov	r31, r0
    1a66:	68 94       	set
    1a68:	bb 24       	eor	r11, r11
    1a6a:	b3 f8       	bld	r11, 3
							direct_pairing_state = WAIT_FOR_DEVICE;
							clear_uart_rx_message();
							retries = 0;
							print_LCD_line(CREATING_SERVER_MSG_OK, LCD_LINE_3);
							print_LCD_line(WAIT_FOR_DEVICE_MSG, LCD_LINE_4);
							UART.wait_for_message = WAIT_FOR_CONNECT;
    1a6c:	68 94       	set
    1a6e:	cc 24       	eor	r12, r12
    1a70:	c2 f8       	bld	r12, 2
					_delay_ms(400);
					break;	
					
				case OPEN_SOCKET_SERVER:
					if (UART.message_received) {
							direct_pairing_state = WAIT_FOR_DEVICE;
    1a72:	0f 2e       	mov	r0, r31
    1a74:	f7 e0       	ldi	r31, 0x07	; 7
    1a76:	7f 2e       	mov	r7, r31
    1a78:	f0 2d       	mov	r31, r0
					_delay_ms(800);
					break;
				
				case SET_MUX_COMMAND:
					if (UART.message_received) {
							direct_pairing_state = OPEN_SOCKET_SERVER;
    1a7a:	0f 2e       	mov	r0, r31
    1a7c:	f6 e0       	ldi	r31, 0x06	; 6
    1a7e:	8f 2e       	mov	r8, r31
    1a80:	f0 2d       	mov	r31, r0
					_delay_ms(400);
					break;
							
				case OPEN_DIRECT_AP:
					if (UART.message_received) {
						direct_pairing_state = SET_MUX_COMMAND;
    1a82:	0f 2e       	mov	r0, r31
    1a84:	f5 e0       	ldi	r31, 0x05	; 5
    1a86:	9f 2e       	mov	r9, r31
    1a88:	f0 2d       	mov	r31, r0
					UART.wait_for_message = WAIT_FOR_OK;
					break;
			
				case ECHO_OFF_COMMAND: // create wifi AP, create socket.
					if (UART.message_received) {
							direct_pairing_state = SET_AP_MODE;
    1a8a:	0f 2e       	mov	r0, r31
    1a8c:	f3 e0       	ldi	r31, 0x03	; 3
    1a8e:	af 2e       	mov	r10, r31
    1a90:	f0 2d       	mov	r31, r0
			switch(direct_pairing_state)
			{
				case SHOW_DIRECT_MESSAGE:
					clear_LCD();
					print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
					direct_pairing_state = ECHO_OFF_COMMAND;
    1a92:	68 94       	set
    1a94:	dd 24       	eor	r13, r13
    1a96:	d1 f8       	bld	r13, 1
void direct_pairing() {
	uint8_t retries = 0;
	bool break_from_pairing = false;
	enum DIRECT_PAIRING_STATES direct_pairing_state = SHOW_DIRECT_MESSAGE;
	beep();
	while(!break_from_pairing) {
    1a98:	00 c1       	rjmp	.+512    	; 0x1c9a <direct_pairing+0x24c>
		
		if (poll_switch()) shutdown_sequence(true);
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
		
		if (retries < MAXIMUM_COMMAND_RETRIES) {
    1aa0:	c4 31       	cpi	r28, 0x14	; 20
    1aa2:	08 f0       	brcs	.+2      	; 0x1aa6 <direct_pairing+0x58>
    1aa4:	f8 c0       	rjmp	.+496    	; 0x1c96 <direct_pairing+0x248>
			switch(direct_pairing_state)
    1aa6:	8d 2f       	mov	r24, r29
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	fc 01       	movw	r30, r24
    1aac:	31 97       	sbiw	r30, 0x01	; 1
    1aae:	e8 30       	cpi	r30, 0x08	; 8
    1ab0:	f1 05       	cpc	r31, r1
    1ab2:	08 f0       	brcs	.+2      	; 0x1ab6 <direct_pairing+0x68>
    1ab4:	f2 c0       	rjmp	.+484    	; 0x1c9a <direct_pairing+0x24c>
    1ab6:	ef 5c       	subi	r30, 0xCF	; 207
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__tablejump2__>
			{
				case SHOW_DIRECT_MESSAGE:
					clear_LCD();
    1abe:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	8a e2       	ldi	r24, 0x2A	; 42
    1ac6:	92 e0       	ldi	r25, 0x02	; 2
    1ac8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					direct_pairing_state = ECHO_OFF_COMMAND;
					UART.wait_for_message = WAIT_FOR_OK;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	f7 01       	movw	r30, r14
    1ad0:	80 83       	st	Z, r24
			switch(direct_pairing_state)
			{
				case SHOW_DIRECT_MESSAGE:
					clear_LCD();
					print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
					direct_pairing_state = ECHO_OFF_COMMAND;
    1ad2:	dd 2d       	mov	r29, r13
					UART.wait_for_message = WAIT_FOR_OK;
					break;
    1ad4:	e2 c0       	rjmp	.+452    	; 0x1c9a <direct_pairing+0x24c>
			
				case ECHO_OFF_COMMAND: // create wifi AP, create socket.
					if (UART.message_received) {
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	80 81       	ld	r24, Z
    1ada:	88 23       	and	r24, r24
    1adc:	91 f0       	breq	.+36     	; 0x1b02 <direct_pairing+0xb4>
							direct_pairing_state = SET_AP_MODE;
							clear_uart_rx_message();
    1ade:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
							retries = 0;
							UART.wait_for_message = WAIT_FOR_OK;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	f7 01       	movw	r30, r14
    1ae6:	80 83       	st	Z, r24
							print_LCD_line(ESP32_STATUS_MSG_OK, LCD_LINE_1);				
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	8f e3       	ldi	r24, 0x3F	; 63
    1aec:	92 e0       	ldi	r25, 0x02	; 2
    1aee:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
							print_LCD_line(REQUEST_NETWORK_MSG, LCD_LINE_2);
    1af2:	60 e4       	ldi	r22, 0x40	; 64
    1af4:	84 e5       	ldi	r24, 0x54	; 84
    1af6:	92 e0       	ldi	r25, 0x02	; 2
    1af8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					UART.wait_for_message = WAIT_FOR_OK;
					break;
			
				case ECHO_OFF_COMMAND: // create wifi AP, create socket.
					if (UART.message_received) {
							direct_pairing_state = SET_AP_MODE;
    1afc:	da 2d       	mov	r29, r10
							clear_uart_rx_message();
							retries = 0;
    1afe:	c0 e0       	ldi	r28, 0x00	; 0
							UART.wait_for_message = WAIT_FOR_OK;
							print_LCD_line(ESP32_STATUS_MSG_OK, LCD_LINE_1);				
							print_LCD_line(REQUEST_NETWORK_MSG, LCD_LINE_2);
							break;
    1b00:	cc c0       	rjmp	.+408    	; 0x1c9a <direct_pairing+0x24c>
						}
					//else clear_uart_rx_message();
					retries++;
    1b02:	cf 5f       	subi	r28, 0xFF	; 255
					send_command_UART("ATE0\r\n");
    1b04:	89 e6       	ldi	r24, 0x69	; 105
    1b06:	92 e0       	ldi	r25, 0x02	; 2
    1b08:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
    1b0c:	ff ef       	ldi	r31, 0xFF	; 255
    1b0e:	23 ec       	ldi	r18, 0xC3	; 195
    1b10:	89 e0       	ldi	r24, 0x09	; 9
    1b12:	f1 50       	subi	r31, 0x01	; 1
    1b14:	20 40       	sbci	r18, 0x00	; 0
    1b16:	80 40       	sbci	r24, 0x00	; 0
    1b18:	e1 f7       	brne	.-8      	; 0x1b12 <direct_pairing+0xc4>
    1b1a:	00 c0       	rjmp	.+0      	; 0x1b1c <direct_pairing+0xce>
    1b1c:	00 00       	nop
    1b1e:	bd c0       	rjmp	.+378    	; 0x1c9a <direct_pairing+0x24c>
					_delay_ms(400);
					break;
			
				case SET_AP_MODE: // create wifi AP, create socket.
					if (UART.message_received) {
    1b20:	f8 01       	movw	r30, r16
    1b22:	80 81       	ld	r24, Z
    1b24:	88 23       	and	r24, r24
    1b26:	41 f0       	breq	.+16     	; 0x1b38 <direct_pairing+0xea>
							direct_pairing_state = OPEN_DIRECT_AP;
							clear_uart_rx_message();
    1b28:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
							retries = 0;
							UART.wait_for_message = WAIT_FOR_OK;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	f7 01       	movw	r30, r14
    1b30:	80 83       	st	Z, r24
					_delay_ms(400);
					break;
			
				case SET_AP_MODE: // create wifi AP, create socket.
					if (UART.message_received) {
							direct_pairing_state = OPEN_DIRECT_AP;
    1b32:	dc 2d       	mov	r29, r12
							clear_uart_rx_message();
							retries = 0;
    1b34:	c0 e0       	ldi	r28, 0x00	; 0
							UART.wait_for_message = WAIT_FOR_OK;
							break;
    1b36:	b1 c0       	rjmp	.+354    	; 0x1c9a <direct_pairing+0x24c>
						}
					//else clear_uart_rx_message();
					retries++;
    1b38:	cf 5f       	subi	r28, 0xFF	; 255
					send_command_UART("AT+CWMODE=3\r\n");
    1b3a:	80 e7       	ldi	r24, 0x70	; 112
    1b3c:	92 e0       	ldi	r25, 0x02	; 2
    1b3e:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
    1b42:	ff ef       	ldi	r31, 0xFF	; 255
    1b44:	23 ec       	ldi	r18, 0xC3	; 195
    1b46:	89 e0       	ldi	r24, 0x09	; 9
    1b48:	f1 50       	subi	r31, 0x01	; 1
    1b4a:	20 40       	sbci	r18, 0x00	; 0
    1b4c:	80 40       	sbci	r24, 0x00	; 0
    1b4e:	e1 f7       	brne	.-8      	; 0x1b48 <direct_pairing+0xfa>
    1b50:	00 c0       	rjmp	.+0      	; 0x1b52 <direct_pairing+0x104>
    1b52:	00 00       	nop
    1b54:	a2 c0       	rjmp	.+324    	; 0x1c9a <direct_pairing+0x24c>
					_delay_ms(400);
					break;
							
				case OPEN_DIRECT_AP:
					if (UART.message_received) {
    1b56:	f8 01       	movw	r30, r16
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 23       	and	r24, r24
    1b5c:	91 f0       	breq	.+36     	; 0x1b82 <direct_pairing+0x134>
						direct_pairing_state = SET_MUX_COMMAND;
						clear_uart_rx_message();
    1b5e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
						retries = 0;
						UART.wait_for_message = WAIT_FOR_OK;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	f7 01       	movw	r30, r14
    1b66:	80 83       	st	Z, r24
						print_LCD_line(REQUEST_NETWORK_MSG_OK, LCD_LINE_2);
    1b68:	60 e4       	ldi	r22, 0x40	; 64
    1b6a:	8e e7       	ldi	r24, 0x7E	; 126
    1b6c:	92 e0       	ldi	r25, 0x02	; 2
    1b6e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(CREATING_SERVER_MSG, LCD_LINE_3);
    1b72:	64 e1       	ldi	r22, 0x14	; 20
    1b74:	83 e9       	ldi	r24, 0x93	; 147
    1b76:	92 e0       	ldi	r25, 0x02	; 2
    1b78:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					_delay_ms(400);
					break;
							
				case OPEN_DIRECT_AP:
					if (UART.message_received) {
						direct_pairing_state = SET_MUX_COMMAND;
    1b7c:	d9 2d       	mov	r29, r9
						clear_uart_rx_message();
						retries = 0;
    1b7e:	c0 e0       	ldi	r28, 0x00	; 0
						UART.wait_for_message = WAIT_FOR_OK;
						print_LCD_line(REQUEST_NETWORK_MSG_OK, LCD_LINE_2);
						print_LCD_line(CREATING_SERVER_MSG, LCD_LINE_3);
						break;
    1b80:	8c c0       	rjmp	.+280    	; 0x1c9a <direct_pairing+0x24c>
						}
					
					retries++;
    1b82:	cf 5f       	subi	r28, 0xFF	; 255
					send_command_UART("AT+CWSAP=\"IOT_FUNCGEN\",\"0\",1,0\r\n");
    1b84:	88 ea       	ldi	r24, 0xA8	; 168
    1b86:	92 e0       	ldi	r25, 0x02	; 2
    1b88:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
    1b8c:	ff ef       	ldi	r31, 0xFF	; 255
    1b8e:	27 e8       	ldi	r18, 0x87	; 135
    1b90:	83 e1       	ldi	r24, 0x13	; 19
    1b92:	f1 50       	subi	r31, 0x01	; 1
    1b94:	20 40       	sbci	r18, 0x00	; 0
    1b96:	80 40       	sbci	r24, 0x00	; 0
    1b98:	e1 f7       	brne	.-8      	; 0x1b92 <direct_pairing+0x144>
    1b9a:	00 c0       	rjmp	.+0      	; 0x1b9c <direct_pairing+0x14e>
    1b9c:	00 00       	nop
    1b9e:	7d c0       	rjmp	.+250    	; 0x1c9a <direct_pairing+0x24c>
					_delay_ms(800);
					break;
				
				case SET_MUX_COMMAND:
					if (UART.message_received) {
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	80 81       	ld	r24, Z
    1ba4:	88 23       	and	r24, r24
    1ba6:	41 f0       	breq	.+16     	; 0x1bb8 <direct_pairing+0x16a>
							direct_pairing_state = OPEN_SOCKET_SERVER;
							clear_uart_rx_message();
    1ba8:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
							retries = 0;
							UART.wait_for_message = WAIT_FOR_OK;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	f7 01       	movw	r30, r14
    1bb0:	80 83       	st	Z, r24
					_delay_ms(800);
					break;
				
				case SET_MUX_COMMAND:
					if (UART.message_received) {
							direct_pairing_state = OPEN_SOCKET_SERVER;
    1bb2:	d8 2d       	mov	r29, r8
							clear_uart_rx_message();
							retries = 0;
    1bb4:	c0 e0       	ldi	r28, 0x00	; 0
							UART.wait_for_message = WAIT_FOR_OK;
							break;
    1bb6:	71 c0       	rjmp	.+226    	; 0x1c9a <direct_pairing+0x24c>
					}
					retries++;
    1bb8:	cf 5f       	subi	r28, 0xFF	; 255
					send_command_UART("AT+CIPMUX=1\r\n");
    1bba:	89 ec       	ldi	r24, 0xC9	; 201
    1bbc:	92 e0       	ldi	r25, 0x02	; 2
    1bbe:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
    1bc2:	ff ef       	ldi	r31, 0xFF	; 255
    1bc4:	23 ec       	ldi	r18, 0xC3	; 195
    1bc6:	89 e0       	ldi	r24, 0x09	; 9
    1bc8:	f1 50       	subi	r31, 0x01	; 1
    1bca:	20 40       	sbci	r18, 0x00	; 0
    1bcc:	80 40       	sbci	r24, 0x00	; 0
    1bce:	e1 f7       	brne	.-8      	; 0x1bc8 <direct_pairing+0x17a>
    1bd0:	00 c0       	rjmp	.+0      	; 0x1bd2 <direct_pairing+0x184>
    1bd2:	00 00       	nop
    1bd4:	62 c0       	rjmp	.+196    	; 0x1c9a <direct_pairing+0x24c>
					_delay_ms(400);
					break;	
					
				case OPEN_SOCKET_SERVER:
					if (UART.message_received) {
    1bd6:	f8 01       	movw	r30, r16
    1bd8:	80 81       	ld	r24, Z
    1bda:	88 23       	and	r24, r24
    1bdc:	89 f0       	breq	.+34     	; 0x1c00 <direct_pairing+0x1b2>
							direct_pairing_state = WAIT_FOR_DEVICE;
							clear_uart_rx_message();
    1bde:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
							retries = 0;
							print_LCD_line(CREATING_SERVER_MSG_OK, LCD_LINE_3);
    1be2:	64 e1       	ldi	r22, 0x14	; 20
    1be4:	87 ed       	ldi	r24, 0xD7	; 215
    1be6:	92 e0       	ldi	r25, 0x02	; 2
    1be8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
							print_LCD_line(WAIT_FOR_DEVICE_MSG, LCD_LINE_4);
    1bec:	64 e5       	ldi	r22, 0x54	; 84
    1bee:	8c ee       	ldi	r24, 0xEC	; 236
    1bf0:	92 e0       	ldi	r25, 0x02	; 2
    1bf2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
							UART.wait_for_message = WAIT_FOR_CONNECT;
    1bf6:	f7 01       	movw	r30, r14
    1bf8:	c0 82       	st	Z, r12
					_delay_ms(400);
					break;	
					
				case OPEN_SOCKET_SERVER:
					if (UART.message_received) {
							direct_pairing_state = WAIT_FOR_DEVICE;
    1bfa:	d7 2d       	mov	r29, r7
							clear_uart_rx_message();
							retries = 0;
    1bfc:	c0 e0       	ldi	r28, 0x00	; 0
							print_LCD_line(CREATING_SERVER_MSG_OK, LCD_LINE_3);
							print_LCD_line(WAIT_FOR_DEVICE_MSG, LCD_LINE_4);
							UART.wait_for_message = WAIT_FOR_CONNECT;
							break;
    1bfe:	4d c0       	rjmp	.+154    	; 0x1c9a <direct_pairing+0x24c>
					}
					retries++;
    1c00:	cf 5f       	subi	r28, 0xFF	; 255
					send_command_UART("AT+CIPSERVER=1,1726\r\n");
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	93 e0       	ldi	r25, 0x03	; 3
    1c06:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
    1c0a:	ff ef       	ldi	r31, 0xFF	; 255
    1c0c:	27 e8       	ldi	r18, 0x87	; 135
    1c0e:	83 e1       	ldi	r24, 0x13	; 19
    1c10:	f1 50       	subi	r31, 0x01	; 1
    1c12:	20 40       	sbci	r18, 0x00	; 0
    1c14:	80 40       	sbci	r24, 0x00	; 0
    1c16:	e1 f7       	brne	.-8      	; 0x1c10 <direct_pairing+0x1c2>
    1c18:	00 c0       	rjmp	.+0      	; 0x1c1a <direct_pairing+0x1cc>
    1c1a:	00 00       	nop
    1c1c:	3e c0       	rjmp	.+124    	; 0x1c9a <direct_pairing+0x24c>
					_delay_ms(800);
					break;
				
				
				case WAIT_FOR_DEVICE:
					if (UART.message_received) {
    1c1e:	f8 01       	movw	r30, r16
    1c20:	80 81       	ld	r24, Z
    1c22:	88 23       	and	r24, r24
    1c24:	d1 f1       	breq	.+116    	; 0x1c9a <direct_pairing+0x24c>
							direct_pairing_state = MESSAGE_HANDLING_STATE;
							UART.wait_for_message = WAIT_FOR_DATA;
    1c26:	f7 01       	movw	r30, r14
    1c28:	b0 82       	st	Z, r11
							beep(); _delay_ms(50); beep(); _delay_ms(50); beep();
    1c2a:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
    1c2e:	ff e7       	ldi	r31, 0x7F	; 127
    1c30:	28 e3       	ldi	r18, 0x38	; 56
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	f1 50       	subi	r31, 0x01	; 1
    1c36:	20 40       	sbci	r18, 0x00	; 0
    1c38:	80 40       	sbci	r24, 0x00	; 0
    1c3a:	e1 f7       	brne	.-8      	; 0x1c34 <direct_pairing+0x1e6>
    1c3c:	00 c0       	rjmp	.+0      	; 0x1c3e <direct_pairing+0x1f0>
    1c3e:	00 00       	nop
    1c40:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
    1c44:	9f e7       	ldi	r25, 0x7F	; 127
    1c46:	e8 e3       	ldi	r30, 0x38	; 56
    1c48:	f1 e0       	ldi	r31, 0x01	; 1
    1c4a:	91 50       	subi	r25, 0x01	; 1
    1c4c:	e0 40       	sbci	r30, 0x00	; 0
    1c4e:	f0 40       	sbci	r31, 0x00	; 0
    1c50:	e1 f7       	brne	.-8      	; 0x1c4a <direct_pairing+0x1fc>
    1c52:	00 c0       	rjmp	.+0      	; 0x1c54 <direct_pairing+0x206>
    1c54:	00 00       	nop
    1c56:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
							clear_uart_rx_message();
    1c5a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
							clear_LCD();
    1c5e:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
							retries = 0;
							print_LCD_line(DEVICE_CONNECTED_MSG, LCD_LINE_2);
    1c62:	60 e4       	ldi	r22, 0x40	; 64
    1c64:	87 e1       	ldi	r24, 0x17	; 23
    1c66:	93 e0       	ldi	r25, 0x03	; 3
    1c68:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    1c6c:	2f ef       	ldi	r18, 0xFF	; 255
    1c6e:	83 ed       	ldi	r24, 0xD3	; 211
    1c70:	90 e3       	ldi	r25, 0x30	; 48
    1c72:	21 50       	subi	r18, 0x01	; 1
    1c74:	80 40       	sbci	r24, 0x00	; 0
    1c76:	90 40       	sbci	r25, 0x00	; 0
    1c78:	e1 f7       	brne	.-8      	; 0x1c72 <direct_pairing+0x224>
    1c7a:	00 c0       	rjmp	.+0      	; 0x1c7c <direct_pairing+0x22e>
    1c7c:	00 00       	nop
					break;
				
				
				case WAIT_FOR_DEVICE:
					if (UART.message_received) {
							direct_pairing_state = MESSAGE_HANDLING_STATE;
    1c7e:	db 2d       	mov	r29, r11
							UART.wait_for_message = WAIT_FOR_DATA;
							beep(); _delay_ms(50); beep(); _delay_ms(50); beep();
							clear_uart_rx_message();
							clear_LCD();
							retries = 0;
    1c80:	c0 e0       	ldi	r28, 0x00	; 0
    1c82:	0b c0       	rjmp	.+22     	; 0x1c9a <direct_pairing+0x24c>
							break;
					}
					break;				
				
				case MESSAGE_HANDLING_STATE:
					eeprom_write_byte((uint8_t *)STORED_CONNECTION_STATE_ADDRESS, WIFI_DIRECT_CONNECTION);
    1c84:	64 e4       	ldi	r22, 0x44	; 68
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <eeprom_write_byte>
					update_complete_UI();
    1c8e:	0e 94 05 08 	call	0x100a	; 0x100a <update_complete_UI>
					socket_message_handler();	
    1c92:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <socket_message_handler>
					break;		
			}	
		}
		else {
			halt_system();
    1c96:	0e 94 35 05 	call	0xa6a	; 0xa6a <halt_system>
	bool break_from_pairing = false;
	enum DIRECT_PAIRING_STATES direct_pairing_state = SHOW_DIRECT_MESSAGE;
	beep();
	while(!break_from_pairing) {
		
		if (poll_switch()) shutdown_sequence(true);
    1c9a:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    1c9e:	88 23       	and	r24, r24
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <direct_pairing+0x256>
    1ca2:	fe ce       	rjmp	.-516    	; 0x1aa0 <direct_pairing+0x52>
    1ca4:	fa ce       	rjmp	.-524    	; 0x1a9a <direct_pairing+0x4c>

00001ca6 <clear_funcgen_values>:
	update_ac_power_status();
	update_battery_status();
}

void clear_funcgen_values() {
	FUNCGEN.frequency_A = 0; 
    1ca6:	ef e3       	ldi	r30, 0x3F	; 63
    1ca8:	f5 e0       	ldi	r31, 0x05	; 5
    1caa:	10 82       	st	Z, r1
    1cac:	11 82       	std	Z+1, r1	; 0x01
    1cae:	12 82       	std	Z+2, r1	; 0x02
    1cb0:	13 82       	std	Z+3, r1	; 0x03
	FUNCGEN.frequency_B = 0;
    1cb2:	14 82       	std	Z+4, r1	; 0x04
    1cb4:	15 82       	std	Z+5, r1	; 0x05
    1cb6:	16 82       	std	Z+6, r1	; 0x06
    1cb8:	17 82       	std	Z+7, r1	; 0x07
	FUNCGEN.phase_A = 0; 
    1cba:	11 86       	std	Z+9, r1	; 0x09
    1cbc:	10 86       	std	Z+8, r1	; 0x08
	FUNCGEN.phase_B = 0;
    1cbe:	13 86       	std	Z+11, r1	; 0x0b
    1cc0:	12 86       	std	Z+10, r1	; 0x0a
	FUNCGEN.amplitude_A = 0; 
    1cc2:	15 86       	std	Z+13, r1	; 0x0d
    1cc4:	14 86       	std	Z+12, r1	; 0x0c
	FUNCGEN.amplitude_B = 0;
    1cc6:	17 86       	std	Z+15, r1	; 0x0f
    1cc8:	16 86       	std	Z+14, r1	; 0x0e
	FUNCGEN.output_type_A = OFF; 
    1cca:	85 e0       	ldi	r24, 0x05	; 5
    1ccc:	80 8b       	std	Z+16, r24	; 0x10
	FUNCGEN.output_type_B = OFF;
    1cce:	81 8b       	std	Z+17, r24	; 0x11
	FUNCGEN.bias_A = 0; 
    1cd0:	13 8a       	std	Z+19, r1	; 0x13
    1cd2:	12 8a       	std	Z+18, r1	; 0x12
	FUNCGEN.bias_B = 0;
    1cd4:	15 8a       	std	Z+21, r1	; 0x15
    1cd6:	14 8a       	std	Z+20, r1	; 0x14
    1cd8:	08 95       	ret

00001cda <init_UI_array>:
}

void init_UI_array() {
    1cda:	1f 93       	push	r17
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
	snprintf(UI.amplitude_A, 4, ZERO_AMPLITUDE);
    1ce0:	cd e2       	ldi	r28, 0x2D	; 45
    1ce2:	d3 e0       	ldi	r29, 0x03	; 3
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	1f 92       	push	r1
    1cea:	14 e0       	ldi	r17, 0x04	; 4
    1cec:	1f 93       	push	r17
    1cee:	87 e2       	ldi	r24, 0x27	; 39
    1cf0:	95 e0       	ldi	r25, 0x05	; 5
    1cf2:	9f 93       	push	r25
    1cf4:	8f 93       	push	r24
    1cf6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
	snprintf(UI.amplitude_B, 4, ZERO_AMPLITUDE);
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	1f 92       	push	r1
    1d00:	1f 93       	push	r17
    1d02:	8b e2       	ldi	r24, 0x2B	; 43
    1d04:	95 e0       	ldi	r25, 0x05	; 5
    1d06:	9f 93       	push	r25
    1d08:	8f 93       	push	r24
    1d0a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
	snprintf(UI.bias_A, 5, ZERO_BIAS);
    1d0e:	cc e2       	ldi	r28, 0x2C	; 44
    1d10:	d3 e0       	ldi	r29, 0x03	; 3
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	1f 92       	push	r1
    1d18:	15 e0       	ldi	r17, 0x05	; 5
    1d1a:	1f 93       	push	r17
    1d1c:	8f e2       	ldi	r24, 0x2F	; 47
    1d1e:	95 e0       	ldi	r25, 0x05	; 5
    1d20:	9f 93       	push	r25
    1d22:	8f 93       	push	r24
    1d24:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
	snprintf(UI.bias_B, 5, ZERO_BIAS);
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	1f 92       	push	r1
    1d2e:	1f 93       	push	r17
    1d30:	84 e3       	ldi	r24, 0x34	; 52
    1d32:	95 e0       	ldi	r25, 0x05	; 5
    1d34:	9f 93       	push	r25
    1d36:	8f 93       	push	r24
    1d38:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
	snprintf(UI.frequency_A, 8,"0");
    1d3c:	80 e3       	ldi	r24, 0x30	; 48
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	90 93 18 05 	sts	0x0518, r25	; 0x800518 <UI+0x1>
    1d44:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <UI>
	snprintf(UI.frequency_B, 8,"0");
    1d48:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <UI+0x9>
    1d4c:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <UI+0x8>
    1d50:	8f e1       	ldi	r24, 0x1F	; 31
    1d52:	9e e4       	ldi	r25, 0x4E	; 78
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <init_UI_array+0x7a>
    1d58:	00 c0       	rjmp	.+0      	; 0x1d5a <init_UI_array+0x80>
    1d5a:	00 00       	nop
	_delay_ms(10);
}
    1d5c:	8d b7       	in	r24, 0x3d	; 61
    1d5e:	9e b7       	in	r25, 0x3e	; 62
    1d60:	48 96       	adiw	r24, 0x18	; 24
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	9e bf       	out	0x3e, r25	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	8d bf       	out	0x3d, r24	; 61
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	1f 91       	pop	r17
    1d72:	08 95       	ret

00001d74 <start_wlan_communication>:

void start_wlan_communication() {
	uint8_t retries = 0;
	bool break_from_pairing = false;
	enum WLAN_COMMUNICATION_STATES communication_state = INIT_MESSAGE;
	beep();
    1d74:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
}

void start_wlan_communication() {
	uint8_t retries = 0;
	bool break_from_pairing = false;
	enum WLAN_COMMUNICATION_STATES communication_state = INIT_MESSAGE;
    1d78:	c1 e0       	ldi	r28, 0x01	; 1
		}
	}
}

void start_wlan_communication() {
	uint8_t retries = 0;
    1d7a:	d0 e0       	ldi	r29, 0x00	; 0
					_delay_ms(400);
					if (poll_switch()) shutdown_sequence(true);
					break;

				case REQUEST_WIFI: // create wifi AP, create socket.
					if (UART.message_received) {
    1d7c:	03 e5       	ldi	r16, 0x53	; 83
    1d7e:	16 e0       	ldi	r17, 0x06	; 6
						communication_state = CREATE_SOCKET_SERVER_WLAN;
						UART.wait_for_message = WAIT_FOR_OK;
    1d80:	0f 2e       	mov	r0, r31
    1d82:	f5 e5       	ldi	r31, 0x55	; 85
    1d84:	ef 2e       	mov	r14, r31
    1d86:	f6 e0       	ldi	r31, 0x06	; 6
    1d88:	ff 2e       	mov	r15, r31
    1d8a:	f0 2d       	mov	r31, r0
					if (poll_switch()) shutdown_sequence(true);
					break;

				case REQUEST_WIFI: // create wifi AP, create socket.
					if (UART.message_received) {
						communication_state = CREATE_SOCKET_SERVER_WLAN;
    1d8c:	68 94       	set
    1d8e:	cc 24       	eor	r12, r12
    1d90:	c2 f8       	bld	r12, 2
					break;
				
				case WAIT_FOR_WLAN_DEVICE:
					if (UART.message_received) {
						communication_state = DEVICE_CONNECTED;
						UART.wait_for_message = WAIT_FOR_DATA;
    1d92:	68 94       	set
    1d94:	66 24       	eor	r6, r6
    1d96:	63 f8       	bld	r6, 3
						clear_uart_rx_message();
						retries = 0;
						clear_LCD();
						print_LCD_line(DEVICE_CONNECTED_MSG, LCD_LINE_2);
						STATUS.socket_active = true;
    1d98:	0f 2e       	mov	r0, r31
    1d9a:	f4 e1       	ldi	r31, 0x14	; 20
    1d9c:	af 2e       	mov	r10, r31
    1d9e:	f5 e0       	ldi	r31, 0x05	; 5
    1da0:	bf 2e       	mov	r11, r31
    1da2:	f0 2d       	mov	r31, r0
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case WAIT_FOR_WLAN_DEVICE:
					if (UART.message_received) {
						communication_state = DEVICE_CONNECTED;
    1da4:	0f 2e       	mov	r0, r31
    1da6:	f6 e0       	ldi	r31, 0x06	; 6
    1da8:	7f 2e       	mov	r7, r31
    1daa:	f0 2d       	mov	r31, r0
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case CREATE_SOCKET_SERVER_WLAN: // create wifi AP, create socket.
					if (UART.message_received) {
						communication_state = WAIT_FOR_WLAN_DEVICE;
    1dac:	0f 2e       	mov	r0, r31
    1dae:	f5 e0       	ldi	r31, 0x05	; 5
    1db0:	8f 2e       	mov	r8, r31
    1db2:	f0 2d       	mov	r31, r0
				print_LCD_line(START_COMM_MSG, LCD_LINE_3);
				retries = 0;
				_delay_ms(2000);
				clear_LCD();
				print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
				communication_state = ECHO_OFF;
    1db4:	68 94       	set
    1db6:	dd 24       	eor	r13, r13
    1db8:	d1 f8       	bld	r13, 1
				UART.wait_for_message = WAIT_FOR_OK;
				break;
				
				case ECHO_OFF: // create wifi AP, create socket.
					if (UART.message_received) {
						communication_state = REQUEST_WIFI;
    1dba:	0f 2e       	mov	r0, r31
    1dbc:	f3 e0       	ldi	r31, 0x03	; 3
    1dbe:	9f 2e       	mov	r9, r31
    1dc0:	f0 2d       	mov	r31, r0
	bool break_from_pairing = false;
	enum WLAN_COMMUNICATION_STATES communication_state = INIT_MESSAGE;
	beep();
	while(!break_from_pairing) {
		if (retries < MAXIMUM_COMMAND_RETRIES) {
			switch(communication_state) {	
    1dc2:	c3 30       	cpi	r28, 0x03	; 3
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <start_wlan_communication+0x54>
    1dc6:	5b c0       	rjmp	.+182    	; 0x1e7e <start_wlan_communication+0x10a>
    1dc8:	28 f4       	brcc	.+10     	; 0x1dd4 <start_wlan_communication+0x60>
    1dca:	c1 30       	cpi	r28, 0x01	; 1
    1dcc:	61 f0       	breq	.+24     	; 0x1de6 <start_wlan_communication+0x72>
    1dce:	c2 30       	cpi	r28, 0x02	; 2
    1dd0:	59 f1       	breq	.+86     	; 0x1e28 <start_wlan_communication+0xb4>
    1dd2:	f1 c0       	rjmp	.+482    	; 0x1fb6 <start_wlan_communication+0x242>
    1dd4:	c5 30       	cpi	r28, 0x05	; 5
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <start_wlan_communication+0x66>
    1dd8:	ab c0       	rjmp	.+342    	; 0x1f30 <start_wlan_communication+0x1bc>
    1dda:	08 f4       	brcc	.+2      	; 0x1dde <start_wlan_communication+0x6a>
    1ddc:	7c c0       	rjmp	.+248    	; 0x1ed6 <start_wlan_communication+0x162>
    1dde:	c6 30       	cpi	r28, 0x06	; 6
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <start_wlan_communication+0x70>
    1de2:	d8 c0       	rjmp	.+432    	; 0x1f94 <start_wlan_communication+0x220>
    1de4:	e8 c0       	rjmp	.+464    	; 0x1fb6 <start_wlan_communication+0x242>
				case INIT_MESSAGE:
				clear_LCD();
    1de6:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
				print_LCD_line(START_WLAN_MSG, LCD_LINE_2);
    1dea:	60 e4       	ldi	r22, 0x40	; 64
    1dec:	82 e3       	ldi	r24, 0x32	; 50
    1dee:	93 e0       	ldi	r25, 0x03	; 3
    1df0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				print_LCD_line(START_COMM_MSG, LCD_LINE_3);
    1df4:	64 e1       	ldi	r22, 0x14	; 20
    1df6:	87 e4       	ldi	r24, 0x47	; 71
    1df8:	93 e0       	ldi	r25, 0x03	; 3
    1dfa:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    1dfe:	2f ef       	ldi	r18, 0xFF	; 255
    1e00:	83 ed       	ldi	r24, 0xD3	; 211
    1e02:	90 e3       	ldi	r25, 0x30	; 48
    1e04:	21 50       	subi	r18, 0x01	; 1
    1e06:	80 40       	sbci	r24, 0x00	; 0
    1e08:	90 40       	sbci	r25, 0x00	; 0
    1e0a:	e1 f7       	brne	.-8      	; 0x1e04 <start_wlan_communication+0x90>
    1e0c:	00 c0       	rjmp	.+0      	; 0x1e0e <start_wlan_communication+0x9a>
    1e0e:	00 00       	nop
				retries = 0;
				_delay_ms(2000);
				clear_LCD();
    1e10:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
				print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
    1e14:	60 e0       	ldi	r22, 0x00	; 0
    1e16:	8a e2       	ldi	r24, 0x2A	; 42
    1e18:	92 e0       	ldi	r25, 0x02	; 2
    1e1a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				communication_state = ECHO_OFF;
				UART.wait_for_message = WAIT_FOR_OK;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	f7 01       	movw	r30, r14
    1e22:	80 83       	st	Z, r24
				print_LCD_line(START_COMM_MSG, LCD_LINE_3);
				retries = 0;
				_delay_ms(2000);
				clear_LCD();
				print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
				communication_state = ECHO_OFF;
    1e24:	cd 2d       	mov	r28, r13
				UART.wait_for_message = WAIT_FOR_OK;
				break;
    1e26:	cb c0       	rjmp	.+406    	; 0x1fbe <start_wlan_communication+0x24a>
				
				case ECHO_OFF: // create wifi AP, create socket.
					if (UART.message_received) {
    1e28:	f8 01       	movw	r30, r16
    1e2a:	80 81       	ld	r24, Z
    1e2c:	88 23       	and	r24, r24
    1e2e:	81 f0       	breq	.+32     	; 0x1e50 <start_wlan_communication+0xdc>
						communication_state = REQUEST_WIFI;
						clear_uart_rx_message();
    1e30:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
						retries = 0;
						UART.wait_for_message = WAIT_FOR_GOT_IP;
    1e34:	f7 01       	movw	r30, r14
    1e36:	d0 82       	st	Z, r13
						print_LCD_line(ESP32_STATUS_MSG_OK, LCD_LINE_1);
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	8f e3       	ldi	r24, 0x3F	; 63
    1e3c:	92 e0       	ldi	r25, 0x02	; 2
    1e3e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(REQUEST_NETWORK_MSG, LCD_LINE_2);
    1e42:	60 e4       	ldi	r22, 0x40	; 64
    1e44:	84 e5       	ldi	r24, 0x54	; 84
    1e46:	92 e0       	ldi	r25, 0x02	; 2
    1e48:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				UART.wait_for_message = WAIT_FOR_OK;
				break;
				
				case ECHO_OFF: // create wifi AP, create socket.
					if (UART.message_received) {
						communication_state = REQUEST_WIFI;
    1e4c:	c9 2d       	mov	r28, r9
						clear_uart_rx_message();
						retries = 0;
						UART.wait_for_message = WAIT_FOR_GOT_IP;
						print_LCD_line(ESP32_STATUS_MSG_OK, LCD_LINE_1);
						print_LCD_line(REQUEST_NETWORK_MSG, LCD_LINE_2);
						break;
    1e4e:	b7 c0       	rjmp	.+366    	; 0x1fbe <start_wlan_communication+0x24a>
					}
					send_command_UART("ATE0\r\n");
    1e50:	89 e6       	ldi	r24, 0x69	; 105
    1e52:	92 e0       	ldi	r25, 0x02	; 2
    1e54:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
					retries++;
    1e58:	df 5f       	subi	r29, 0xFF	; 255
    1e5a:	ff ef       	ldi	r31, 0xFF	; 255
    1e5c:	23 ec       	ldi	r18, 0xC3	; 195
    1e5e:	89 e0       	ldi	r24, 0x09	; 9
    1e60:	f1 50       	subi	r31, 0x01	; 1
    1e62:	20 40       	sbci	r18, 0x00	; 0
    1e64:	80 40       	sbci	r24, 0x00	; 0
    1e66:	e1 f7       	brne	.-8      	; 0x1e60 <start_wlan_communication+0xec>
    1e68:	00 c0       	rjmp	.+0      	; 0x1e6a <start_wlan_communication+0xf6>
    1e6a:	00 00       	nop
					_delay_ms(400);
					if (poll_switch()) shutdown_sequence(true);
    1e6c:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    1e70:	88 23       	and	r24, r24
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <start_wlan_communication+0x102>
    1e74:	9c c0       	rjmp	.+312    	; 0x1fae <start_wlan_communication+0x23a>
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    1e7c:	98 c0       	rjmp	.+304    	; 0x1fae <start_wlan_communication+0x23a>
					break;

				case REQUEST_WIFI: // create wifi AP, create socket.
					if (UART.message_received) {
    1e7e:	f8 01       	movw	r30, r16
    1e80:	80 81       	ld	r24, Z
    1e82:	88 23       	and	r24, r24
    1e84:	89 f0       	breq	.+34     	; 0x1ea8 <start_wlan_communication+0x134>
						communication_state = CREATE_SOCKET_SERVER_WLAN;
						UART.wait_for_message = WAIT_FOR_OK;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	f7 01       	movw	r30, r14
    1e8a:	80 83       	st	Z, r24
						clear_uart_rx_message();
    1e8c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
						print_LCD_line(REQUEST_NETWORK_MSG_OK, LCD_LINE_2);
    1e90:	60 e4       	ldi	r22, 0x40	; 64
    1e92:	8e e7       	ldi	r24, 0x7E	; 126
    1e94:	92 e0       	ldi	r25, 0x02	; 2
    1e96:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(CREATING_SERVER_MSG, LCD_LINE_3);
    1e9a:	64 e1       	ldi	r22, 0x14	; 20
    1e9c:	83 e9       	ldi	r24, 0x93	; 147
    1e9e:	92 e0       	ldi	r25, 0x02	; 2
    1ea0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					if (poll_switch()) shutdown_sequence(true);
					break;

				case REQUEST_WIFI: // create wifi AP, create socket.
					if (UART.message_received) {
						communication_state = CREATE_SOCKET_SERVER_WLAN;
    1ea4:	cc 2d       	mov	r28, r12
						UART.wait_for_message = WAIT_FOR_OK;
						clear_uart_rx_message();
						print_LCD_line(REQUEST_NETWORK_MSG_OK, LCD_LINE_2);
						print_LCD_line(CREATING_SERVER_MSG, LCD_LINE_3);
						retries = 0;
						break;
    1ea6:	8b c0       	rjmp	.+278    	; 0x1fbe <start_wlan_communication+0x24a>
					}
					send_command_UART(create_wifi_command());
    1ea8:	0e 94 39 04 	call	0x872	; 0x872 <create_wifi_command>
    1eac:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
					retries++;
    1eb0:	df 5f       	subi	r29, 0xFF	; 255
    1eb2:	ff ef       	ldi	r31, 0xFF	; 255
    1eb4:	21 e1       	ldi	r18, 0x11	; 17
    1eb6:	8a e7       	ldi	r24, 0x7A	; 122
    1eb8:	f1 50       	subi	r31, 0x01	; 1
    1eba:	20 40       	sbci	r18, 0x00	; 0
    1ebc:	80 40       	sbci	r24, 0x00	; 0
    1ebe:	e1 f7       	brne	.-8      	; 0x1eb8 <start_wlan_communication+0x144>
    1ec0:	00 c0       	rjmp	.+0      	; 0x1ec2 <start_wlan_communication+0x14e>
    1ec2:	00 00       	nop
					_delay_ms(5000);
					if (poll_switch()) shutdown_sequence(true);
    1ec4:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    1ec8:	88 23       	and	r24, r24
    1eca:	09 f4       	brne	.+2      	; 0x1ece <start_wlan_communication+0x15a>
    1ecc:	70 c0       	rjmp	.+224    	; 0x1fae <start_wlan_communication+0x23a>
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    1ed4:	6c c0       	rjmp	.+216    	; 0x1fae <start_wlan_communication+0x23a>
					break;
				
				case CREATE_SOCKET_SERVER_WLAN: // create wifi AP, create socket.
					if (UART.message_received) {
    1ed6:	f8 01       	movw	r30, r16
    1ed8:	80 81       	ld	r24, Z
    1eda:	88 23       	and	r24, r24
    1edc:	91 f0       	breq	.+36     	; 0x1f02 <start_wlan_communication+0x18e>
						communication_state = WAIT_FOR_WLAN_DEVICE;
						UART.wait_for_message = WAIT_FOR_CONNECT;
    1ede:	f7 01       	movw	r30, r14
    1ee0:	c0 82       	st	Z, r12
						clear_uart_rx_message();
    1ee2:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
						print_LCD_line(CREATING_SERVER_MSG_OK, LCD_LINE_3);
    1ee6:	64 e1       	ldi	r22, 0x14	; 20
    1ee8:	87 ed       	ldi	r24, 0xD7	; 215
    1eea:	92 e0       	ldi	r25, 0x02	; 2
    1eec:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(WAIT_FOR_DEVICE_MSG, LCD_LINE_4);
    1ef0:	64 e5       	ldi	r22, 0x54	; 84
    1ef2:	8c ee       	ldi	r24, 0xEC	; 236
    1ef4:	92 e0       	ldi	r25, 0x02	; 2
    1ef6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						retries = 0;
						clear_LCD();
    1efa:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case CREATE_SOCKET_SERVER_WLAN: // create wifi AP, create socket.
					if (UART.message_received) {
						communication_state = WAIT_FOR_WLAN_DEVICE;
    1efe:	c8 2d       	mov	r28, r8
						clear_uart_rx_message();
						print_LCD_line(CREATING_SERVER_MSG_OK, LCD_LINE_3);
						print_LCD_line(WAIT_FOR_DEVICE_MSG, LCD_LINE_4);
						retries = 0;
						clear_LCD();
						break;
    1f00:	5e c0       	rjmp	.+188    	; 0x1fbe <start_wlan_communication+0x24a>
					}
					send_command_UART("AT+CIPSERVER=1,1726\r\n");
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	93 e0       	ldi	r25, 0x03	; 3
    1f06:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
					retries++;
    1f0a:	df 5f       	subi	r29, 0xFF	; 255
    1f0c:	ff ef       	ldi	r31, 0xFF	; 255
    1f0e:	27 e8       	ldi	r18, 0x87	; 135
    1f10:	83 e1       	ldi	r24, 0x13	; 19
    1f12:	f1 50       	subi	r31, 0x01	; 1
    1f14:	20 40       	sbci	r18, 0x00	; 0
    1f16:	80 40       	sbci	r24, 0x00	; 0
    1f18:	e1 f7       	brne	.-8      	; 0x1f12 <start_wlan_communication+0x19e>
    1f1a:	00 c0       	rjmp	.+0      	; 0x1f1c <start_wlan_communication+0x1a8>
    1f1c:	00 00       	nop
					_delay_ms(800);
					if (poll_switch()) shutdown_sequence(true);
    1f1e:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    1f22:	88 23       	and	r24, r24
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <start_wlan_communication+0x1b4>
    1f26:	43 c0       	rjmp	.+134    	; 0x1fae <start_wlan_communication+0x23a>
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    1f2e:	3f c0       	rjmp	.+126    	; 0x1fae <start_wlan_communication+0x23a>
					break;
				
				case WAIT_FOR_WLAN_DEVICE:
					if (UART.message_received) {
    1f30:	f8 01       	movw	r30, r16
    1f32:	80 81       	ld	r24, Z
    1f34:	88 23       	and	r24, r24
    1f36:	31 f1       	breq	.+76     	; 0x1f84 <start_wlan_communication+0x210>
						communication_state = DEVICE_CONNECTED;
						UART.wait_for_message = WAIT_FOR_DATA;
    1f38:	f7 01       	movw	r30, r14
    1f3a:	60 82       	st	Z, r6
						clear_uart_rx_message();
    1f3c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
						retries = 0;
						clear_LCD();
    1f40:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
						print_LCD_line(DEVICE_CONNECTED_MSG, LCD_LINE_2);
    1f44:	60 e4       	ldi	r22, 0x40	; 64
    1f46:	87 e1       	ldi	r24, 0x17	; 23
    1f48:	93 e0       	ldi	r25, 0x03	; 3
    1f4a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						STATUS.socket_active = true;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	f5 01       	movw	r30, r10
    1f52:	82 83       	std	Z+2, r24	; 0x02
						beep(); _delay_ms(50); beep();
    1f54:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
    1f58:	ff e7       	ldi	r31, 0x7F	; 127
    1f5a:	28 e3       	ldi	r18, 0x38	; 56
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	f1 50       	subi	r31, 0x01	; 1
    1f60:	20 40       	sbci	r18, 0x00	; 0
    1f62:	80 40       	sbci	r24, 0x00	; 0
    1f64:	e1 f7       	brne	.-8      	; 0x1f5e <start_wlan_communication+0x1ea>
    1f66:	00 c0       	rjmp	.+0      	; 0x1f68 <start_wlan_communication+0x1f4>
    1f68:	00 00       	nop
    1f6a:	0e 94 27 02 	call	0x44e	; 0x44e <beep>
    1f6e:	9f ef       	ldi	r25, 0xFF	; 255
    1f70:	e3 ed       	ldi	r30, 0xD3	; 211
    1f72:	f0 e3       	ldi	r31, 0x30	; 48
    1f74:	91 50       	subi	r25, 0x01	; 1
    1f76:	e0 40       	sbci	r30, 0x00	; 0
    1f78:	f0 40       	sbci	r31, 0x00	; 0
    1f7a:	e1 f7       	brne	.-8      	; 0x1f74 <start_wlan_communication+0x200>
    1f7c:	00 c0       	rjmp	.+0      	; 0x1f7e <start_wlan_communication+0x20a>
    1f7e:	00 00       	nop
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case WAIT_FOR_WLAN_DEVICE:
					if (UART.message_received) {
						communication_state = DEVICE_CONNECTED;
    1f80:	c7 2d       	mov	r28, r7
    1f82:	1d c0       	rjmp	.+58     	; 0x1fbe <start_wlan_communication+0x24a>
						STATUS.socket_active = true;
						beep(); _delay_ms(50); beep();
						_delay_ms(2000);
						break;
					}
					if (poll_switch()) shutdown_sequence(true);
    1f84:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    1f88:	88 23       	and	r24, r24
    1f8a:	89 f0       	breq	.+34     	; 0x1fae <start_wlan_communication+0x23a>
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    1f92:	0d c0       	rjmp	.+26     	; 0x1fae <start_wlan_communication+0x23a>
					break;

				case DEVICE_CONNECTED:
					eeprom_write_byte((uint8_t *)STORED_CONNECTION_STATE_ADDRESS, WIFI_LAN_CONNECTON);
    1f94:	6c e4       	ldi	r22, 0x4C	; 76
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <eeprom_write_byte>
					init_UI_array();
    1f9e:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <init_UI_array>
					update_complete_UI();
    1fa2:	0e 94 05 08 	call	0x100a	; 0x100a <update_complete_UI>
					socket_message_handler();
    1fa6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <socket_message_handler>
					break;
				
			}
		}
		else {
			halt_system();
    1faa:	0e 94 35 05 	call	0xa6a	; 0xa6a <halt_system>
	uint8_t retries = 0;
	bool break_from_pairing = false;
	enum WLAN_COMMUNICATION_STATES communication_state = INIT_MESSAGE;
	beep();
	while(!break_from_pairing) {
		if (retries < MAXIMUM_COMMAND_RETRIES) {
    1fae:	d4 31       	cpi	r29, 0x14	; 20
    1fb0:	08 f4       	brcc	.+2      	; 0x1fb4 <start_wlan_communication+0x240>
    1fb2:	07 cf       	rjmp	.-498    	; 0x1dc2 <start_wlan_communication+0x4e>
    1fb4:	fa cf       	rjmp	.-12     	; 0x1faa <start_wlan_communication+0x236>
    1fb6:	d4 31       	cpi	r29, 0x14	; 20
    1fb8:	08 f4       	brcc	.+2      	; 0x1fbc <start_wlan_communication+0x248>
    1fba:	03 cf       	rjmp	.-506    	; 0x1dc2 <start_wlan_communication+0x4e>
    1fbc:	f6 cf       	rjmp	.-20     	; 0x1faa <start_wlan_communication+0x236>
    1fbe:	d0 e0       	ldi	r29, 0x00	; 0
    1fc0:	00 cf       	rjmp	.-512    	; 0x1dc2 <start_wlan_communication+0x4e>

00001fc2 <wifi_lan_pairing>:
			_delay_ms(1000);
		}
	}
}

void wifi_lan_pairing() {
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	a8 97       	sbiw	r28, 0x28	; 40
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
	uint8_t retries = 0;
	bool break_from_pairing = false;
	enum LAN_PAIRING_STATES pairing_state = SHOW_LAN_MESSAGE;
    1fd6:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
}

void wifi_lan_pairing() {
	uint8_t retries = 0;
    1fd8:	10 e0       	ldi	r17, 0x00	; 0
					break;
				
				case SEND_MAC:
					while(true) {
						if (poll_switch()) shutdown_sequence(true);
						if (UART.message_received) {
    1fda:	0f 2e       	mov	r0, r31
    1fdc:	f3 e5       	ldi	r31, 0x53	; 83
    1fde:	ef 2e       	mov	r14, r31
    1fe0:	f6 e0       	ldi	r31, 0x06	; 6
    1fe2:	ff 2e       	mov	r15, r31
    1fe4:	f0 2d       	mov	r31, r0
							clear_uart_rx_message();
							retries = 0;
							UART.wait_for_message = WAIT_FOR_CREDENTIALS;
    1fe6:	0f 2e       	mov	r0, r31
    1fe8:	f5 e5       	ldi	r31, 0x55	; 85
    1fea:	cf 2e       	mov	r12, r31
    1fec:	f6 e0       	ldi	r31, 0x06	; 6
    1fee:	df 2e       	mov	r13, r31
    1ff0:	f0 2d       	mov	r31, r0
    1ff2:	0f 2e       	mov	r0, r31
    1ff4:	f9 e0       	ldi	r31, 0x09	; 9
    1ff6:	7f 2e       	mov	r7, r31
    1ff8:	f0 2d       	mov	r31, r0
					}
					send_command_UART(WIFI.device_MAC); // MAC String transmission
					while(true) {
						if (poll_switch()) shutdown_sequence(true);
						if (UART.message_received) {
							pairing_state = RETRIEVE_CREDENTIALS;
    1ffa:	0f 2e       	mov	r0, r31
    1ffc:	fa e0       	ldi	r31, 0x0A	; 10
    1ffe:	bf 2e       	mov	r11, r31
    2000:	f0 2d       	mov	r31, r0
					if (UART.message_received) {
						pack_mac_string();
						print_LCD_line(WIFI.device_MAC, LCD_LINE_3);
						_delay_ms(1000);
						pairing_state = SEND_MAC;
						UART.wait_for_message = WAIT_FOR_READY_TO_SEND;
    2002:	0f 2e       	mov	r0, r31
    2004:	f3 e0       	ldi	r31, 0x03	; 3
    2006:	2f 2e       	mov	r2, r31
    2008:	f0 2d       	mov	r31, r0
						clear_uart_rx_message();
						clear_LCD();
						print_LCD_line("Android device found", LCD_LINE_1);
						print_LCD_line("FuncGen MAC Address:", LCD_LINE_2);
						print_LCD_line("<   Retrieving...  >", LCD_LINE_3);
						STATUS.socket_active = true;
    200a:	0f 2e       	mov	r0, r31
    200c:	f4 e1       	ldi	r31, 0x14	; 20
    200e:	8f 2e       	mov	r8, r31
    2010:	f5 e0       	ldi	r31, 0x05	; 5
    2012:	9f 2e       	mov	r9, r31
    2014:	f0 2d       	mov	r31, r0
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case WAIT_FOR_DEVICE_CONNECT:
					if (UART.message_received) {
						pairing_state = RETRIEVE_MAC;
    2016:	68 94       	set
    2018:	33 24       	eor	r3, r3
    201a:	33 f8       	bld	r3, 3
					break;
								
				case OPEN_LOCAL_SOCKET:
					if (UART.message_received) {
						pairing_state = WAIT_FOR_DEVICE_CONNECT;
						UART.wait_for_message = WAIT_FOR_CONNECT;
    201c:	68 94       	set
    201e:	aa 24       	eor	r10, r10
    2020:	a2 f8       	bld	r10, 2
					if (poll_switch()) shutdown_sequence(true);
					break;
								
				case OPEN_LOCAL_SOCKET:
					if (UART.message_received) {
						pairing_state = WAIT_FOR_DEVICE_CONNECT;
    2022:	0f 2e       	mov	r0, r31
    2024:	f7 e0       	ldi	r31, 0x07	; 7
    2026:	4f 2e       	mov	r4, r31
    2028:	f0 2d       	mov	r31, r0
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case SET_MUX_COMMAND:
					if (UART.message_received) {
						pairing_state = OPEN_LOCAL_SOCKET;
    202a:	0f 2e       	mov	r0, r31
    202c:	f6 e0       	ldi	r31, 0x06	; 6
    202e:	5f 2e       	mov	r5, r31
    2030:	f0 2d       	mov	r31, r0
			switch(pairing_state)
			{
				case SHOW_LAN_MESSAGE:
					clear_LCD();
					print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
					pairing_state = ECHO_OFF_COMMAND;
    2032:	68 94       	set
    2034:	66 24       	eor	r6, r6
    2036:	61 f8       	bld	r6, 1
	enum LAN_PAIRING_STATES pairing_state = SHOW_LAN_MESSAGE;
	char buffer_LCD1[LCD_LINE_LENGTH];
	char buffer_LCD2[LCD_LINE_LENGTH];
	while(!break_from_pairing) {
		if (retries < MAXIMUM_COMMAND_RETRIES) {
			switch(pairing_state)
    2038:	80 2f       	mov	r24, r16
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	fc 01       	movw	r30, r24
    203e:	31 97       	sbiw	r30, 0x01	; 1
    2040:	ea 30       	cpi	r30, 0x0A	; 10
    2042:	f1 05       	cpc	r31, r1
    2044:	08 f0       	brcs	.+2      	; 0x2048 <wifi_lan_pairing+0x86>
    2046:	0b c2       	rjmp	.+1046   	; 0x245e <wifi_lan_pairing+0x49c>
    2048:	e7 5c       	subi	r30, 0xC7	; 199
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__tablejump2__>
			{
				case SHOW_LAN_MESSAGE:
					clear_LCD();
    2050:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
					print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	8a e2       	ldi	r24, 0x2A	; 42
    2058:	92 e0       	ldi	r25, 0x02	; 2
    205a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					pairing_state = ECHO_OFF_COMMAND;
					UART.wait_for_message = WAIT_FOR_OK;
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	f6 01       	movw	r30, r12
    2062:	80 83       	st	Z, r24
			switch(pairing_state)
			{
				case SHOW_LAN_MESSAGE:
					clear_LCD();
					print_LCD_line(ESP32_STATUS_MSG, LCD_LINE_1);
					pairing_state = ECHO_OFF_COMMAND;
    2064:	06 2d       	mov	r16, r6
					UART.wait_for_message = WAIT_FOR_OK;
					break;
    2066:	f7 c1       	rjmp	.+1006   	; 0x2456 <wifi_lan_pairing+0x494>
				
				case ECHO_OFF: // create wifi AP, create socket.
				if (UART.message_received) {
    2068:	f7 01       	movw	r30, r14
    206a:	80 81       	ld	r24, Z
    206c:	88 23       	and	r24, r24
    206e:	89 f0       	breq	.+34     	; 0x2092 <wifi_lan_pairing+0xd0>
						pairing_state = OPEN_DIRECT_AP;
						clear_uart_rx_message();
    2070:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
						retries = 0;
						print_LCD_line(ESP32_STATUS_MSG_OK, LCD_LINE_1);
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	8f e3       	ldi	r24, 0x3F	; 63
    2078:	92 e0       	ldi	r25, 0x02	; 2
    207a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(REQUEST_NETWORK_MSG, LCD_LINE_2);
    207e:	60 e4       	ldi	r22, 0x40	; 64
    2080:	84 e5       	ldi	r24, 0x54	; 84
    2082:	92 e0       	ldi	r25, 0x02	; 2
    2084:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						UART.wait_for_message = WAIT_FOR_OK;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	f6 01       	movw	r30, r12
    208c:	80 83       	st	Z, r24
					UART.wait_for_message = WAIT_FOR_OK;
					break;
				
				case ECHO_OFF: // create wifi AP, create socket.
				if (UART.message_received) {
						pairing_state = OPEN_DIRECT_AP;
    208e:	0a 2d       	mov	r16, r10
						clear_uart_rx_message();
						retries = 0;
						print_LCD_line(ESP32_STATUS_MSG_OK, LCD_LINE_1);
						print_LCD_line(REQUEST_NETWORK_MSG, LCD_LINE_2);
						UART.wait_for_message = WAIT_FOR_OK;
						break;
    2090:	eb c1       	rjmp	.+982    	; 0x2468 <wifi_lan_pairing+0x4a6>
				}
				send_command_UART("ATE0\r\n");
    2092:	89 e6       	ldi	r24, 0x69	; 105
    2094:	92 e0       	ldi	r25, 0x02	; 2
    2096:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
				retries++;
    209a:	1f 5f       	subi	r17, 0xFF	; 255
    209c:	ff ef       	ldi	r31, 0xFF	; 255
    209e:	23 ec       	ldi	r18, 0xC3	; 195
    20a0:	89 e0       	ldi	r24, 0x09	; 9
    20a2:	f1 50       	subi	r31, 0x01	; 1
    20a4:	20 40       	sbci	r18, 0x00	; 0
    20a6:	80 40       	sbci	r24, 0x00	; 0
    20a8:	e1 f7       	brne	.-8      	; 0x20a2 <wifi_lan_pairing+0xe0>
    20aa:	00 c0       	rjmp	.+0      	; 0x20ac <wifi_lan_pairing+0xea>
    20ac:	00 00       	nop
				_delay_ms(400);
				if (poll_switch()) shutdown_sequence(true);
    20ae:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    20b2:	88 23       	and	r24, r24
    20b4:	09 f4       	brne	.+2      	; 0x20b8 <wifi_lan_pairing+0xf6>
    20b6:	cf c1       	rjmp	.+926    	; 0x2456 <wifi_lan_pairing+0x494>
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    20be:	cb c1       	rjmp	.+918    	; 0x2456 <wifi_lan_pairing+0x494>
				break;
			
				case SET_AP_MODE: // create wifi AP, create socket.
					if (UART.message_received) {
    20c0:	f7 01       	movw	r30, r14
    20c2:	80 81       	ld	r24, Z
    20c4:	88 23       	and	r24, r24
    20c6:	39 f0       	breq	.+14     	; 0x20d6 <wifi_lan_pairing+0x114>
							pairing_state = OPEN_LOCAL_AP;
							clear_uart_rx_message();
    20c8:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
							retries = 0;
							UART.wait_for_message = WAIT_FOR_OK;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	f6 01       	movw	r30, r12
    20d0:	80 83       	st	Z, r24
				if (poll_switch()) shutdown_sequence(true);
				break;
			
				case SET_AP_MODE: // create wifi AP, create socket.
					if (UART.message_received) {
							pairing_state = OPEN_LOCAL_AP;
    20d2:	0a 2d       	mov	r16, r10
							clear_uart_rx_message();
							retries = 0;
							UART.wait_for_message = WAIT_FOR_OK;
							break;
    20d4:	c9 c1       	rjmp	.+914    	; 0x2468 <wifi_lan_pairing+0x4a6>
					}
					retries++;
    20d6:	1f 5f       	subi	r17, 0xFF	; 255
					send_command_UART("AT+CWMODE=1\r\n");
    20d8:	8c e5       	ldi	r24, 0x5C	; 92
    20da:	93 e0       	ldi	r25, 0x03	; 3
    20dc:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
    20e0:	ff ef       	ldi	r31, 0xFF	; 255
    20e2:	23 ec       	ldi	r18, 0xC3	; 195
    20e4:	89 e0       	ldi	r24, 0x09	; 9
    20e6:	f1 50       	subi	r31, 0x01	; 1
    20e8:	20 40       	sbci	r18, 0x00	; 0
    20ea:	80 40       	sbci	r24, 0x00	; 0
    20ec:	e1 f7       	brne	.-8      	; 0x20e6 <wifi_lan_pairing+0x124>
    20ee:	00 c0       	rjmp	.+0      	; 0x20f0 <wifi_lan_pairing+0x12e>
    20f0:	00 00       	nop
					_delay_ms(400);
					if (poll_switch()) shutdown_sequence(true);
    20f2:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    20f6:	88 23       	and	r24, r24
    20f8:	09 f4       	brne	.+2      	; 0x20fc <wifi_lan_pairing+0x13a>
    20fa:	ad c1       	rjmp	.+858    	; 0x2456 <wifi_lan_pairing+0x494>
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    2102:	a9 c1       	rjmp	.+850    	; 0x2456 <wifi_lan_pairing+0x494>
					break;
							
				case OPEN_LOCAL_AP:
					if (UART.message_received) {
    2104:	f7 01       	movw	r30, r14
    2106:	80 81       	ld	r24, Z
    2108:	88 23       	and	r24, r24
    210a:	89 f0       	breq	.+34     	; 0x212e <wifi_lan_pairing+0x16c>
						pairing_state = SET_MUX_COMMAND;
						clear_uart_rx_message();
    210c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
						retries = 0;
						print_LCD_line(REQUEST_NETWORK_MSG_OK, LCD_LINE_2);
    2110:	60 e4       	ldi	r22, 0x40	; 64
    2112:	8e e7       	ldi	r24, 0x7E	; 126
    2114:	92 e0       	ldi	r25, 0x02	; 2
    2116:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(CREATING_SERVER_MSG, LCD_LINE_3);
    211a:	64 e1       	ldi	r22, 0x14	; 20
    211c:	83 e9       	ldi	r24, 0x93	; 147
    211e:	92 e0       	ldi	r25, 0x02	; 2
    2120:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						UART.wait_for_message = WAIT_FOR_OK;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	f6 01       	movw	r30, r12
    2128:	80 83       	st	Z, r24
					if (poll_switch()) shutdown_sequence(true);
					break;
							
				case OPEN_LOCAL_AP:
					if (UART.message_received) {
						pairing_state = SET_MUX_COMMAND;
    212a:	05 e0       	ldi	r16, 0x05	; 5
						clear_uart_rx_message();
						retries = 0;
						print_LCD_line(REQUEST_NETWORK_MSG_OK, LCD_LINE_2);
						print_LCD_line(CREATING_SERVER_MSG, LCD_LINE_3);
						UART.wait_for_message = WAIT_FOR_OK;
						break;
    212c:	9d c1       	rjmp	.+826    	; 0x2468 <wifi_lan_pairing+0x4a6>
					}
					send_command_UART("AT+CWSAP=\"IOT_FUNCGEN\",\"0\",1,0\r\n");
    212e:	88 ea       	ldi	r24, 0xA8	; 168
    2130:	92 e0       	ldi	r25, 0x02	; 2
    2132:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
					retries++;
    2136:	1f 5f       	subi	r17, 0xFF	; 255
    2138:	ff ef       	ldi	r31, 0xFF	; 255
    213a:	27 e8       	ldi	r18, 0x87	; 135
    213c:	83 e1       	ldi	r24, 0x13	; 19
    213e:	f1 50       	subi	r31, 0x01	; 1
    2140:	20 40       	sbci	r18, 0x00	; 0
    2142:	80 40       	sbci	r24, 0x00	; 0
    2144:	e1 f7       	brne	.-8      	; 0x213e <wifi_lan_pairing+0x17c>
    2146:	00 c0       	rjmp	.+0      	; 0x2148 <wifi_lan_pairing+0x186>
    2148:	00 00       	nop
					_delay_ms(800);
					if (poll_switch()) shutdown_sequence(true);
    214a:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    214e:	88 23       	and	r24, r24
    2150:	09 f4       	brne	.+2      	; 0x2154 <wifi_lan_pairing+0x192>
    2152:	81 c1       	rjmp	.+770    	; 0x2456 <wifi_lan_pairing+0x494>
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    215a:	7d c1       	rjmp	.+762    	; 0x2456 <wifi_lan_pairing+0x494>
					break;
				
				case SET_MUX_COMMAND:
					if (UART.message_received) {
    215c:	f7 01       	movw	r30, r14
    215e:	80 81       	ld	r24, Z
    2160:	88 23       	and	r24, r24
    2162:	39 f0       	breq	.+14     	; 0x2172 <wifi_lan_pairing+0x1b0>
						pairing_state = OPEN_LOCAL_SOCKET;
						UART.wait_for_message = WAIT_FOR_OK;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	f6 01       	movw	r30, r12
    2168:	80 83       	st	Z, r24
						clear_uart_rx_message();
    216a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case SET_MUX_COMMAND:
					if (UART.message_received) {
						pairing_state = OPEN_LOCAL_SOCKET;
    216e:	05 2d       	mov	r16, r5
						UART.wait_for_message = WAIT_FOR_OK;
						clear_uart_rx_message();
						retries = 0;
						break;
    2170:	7b c1       	rjmp	.+758    	; 0x2468 <wifi_lan_pairing+0x4a6>
					}
					retries++;
    2172:	1f 5f       	subi	r17, 0xFF	; 255
					send_command_UART("AT+CIPMUX=1\r\n");
    2174:	89 ec       	ldi	r24, 0xC9	; 201
    2176:	92 e0       	ldi	r25, 0x02	; 2
    2178:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
    217c:	ff ef       	ldi	r31, 0xFF	; 255
    217e:	23 ec       	ldi	r18, 0xC3	; 195
    2180:	89 e0       	ldi	r24, 0x09	; 9
    2182:	f1 50       	subi	r31, 0x01	; 1
    2184:	20 40       	sbci	r18, 0x00	; 0
    2186:	80 40       	sbci	r24, 0x00	; 0
    2188:	e1 f7       	brne	.-8      	; 0x2182 <wifi_lan_pairing+0x1c0>
    218a:	00 c0       	rjmp	.+0      	; 0x218c <wifi_lan_pairing+0x1ca>
    218c:	00 00       	nop
					_delay_ms(400);
					if (poll_switch()) shutdown_sequence(true);
    218e:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    2192:	88 23       	and	r24, r24
    2194:	09 f4       	brne	.+2      	; 0x2198 <wifi_lan_pairing+0x1d6>
    2196:	5f c1       	rjmp	.+702    	; 0x2456 <wifi_lan_pairing+0x494>
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    219e:	5b c1       	rjmp	.+694    	; 0x2456 <wifi_lan_pairing+0x494>
					break;
								
				case OPEN_LOCAL_SOCKET:
					if (UART.message_received) {
    21a0:	f7 01       	movw	r30, r14
    21a2:	80 81       	ld	r24, Z
    21a4:	88 23       	and	r24, r24
    21a6:	81 f0       	breq	.+32     	; 0x21c8 <wifi_lan_pairing+0x206>
						pairing_state = WAIT_FOR_DEVICE_CONNECT;
						UART.wait_for_message = WAIT_FOR_CONNECT;
    21a8:	f6 01       	movw	r30, r12
    21aa:	a0 82       	st	Z, r10
						clear_uart_rx_message();
    21ac:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
						retries = 0;
						print_LCD_line(CREATING_SERVER_MSG_OK, LCD_LINE_3);
    21b0:	64 e1       	ldi	r22, 0x14	; 20
    21b2:	87 ed       	ldi	r24, 0xD7	; 215
    21b4:	92 e0       	ldi	r25, 0x02	; 2
    21b6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(WAIT_FOR_DEVICE_MSG, LCD_LINE_4);
    21ba:	64 e5       	ldi	r22, 0x54	; 84
    21bc:	8c ee       	ldi	r24, 0xEC	; 236
    21be:	92 e0       	ldi	r25, 0x02	; 2
    21c0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
					if (poll_switch()) shutdown_sequence(true);
					break;
								
				case OPEN_LOCAL_SOCKET:
					if (UART.message_received) {
						pairing_state = WAIT_FOR_DEVICE_CONNECT;
    21c4:	04 2d       	mov	r16, r4
						UART.wait_for_message = WAIT_FOR_CONNECT;
						clear_uart_rx_message();
						retries = 0;
						print_LCD_line(CREATING_SERVER_MSG_OK, LCD_LINE_3);
						print_LCD_line(WAIT_FOR_DEVICE_MSG, LCD_LINE_4);
						break;
    21c6:	50 c1       	rjmp	.+672    	; 0x2468 <wifi_lan_pairing+0x4a6>
					}
					send_command_UART("AT+CIPSERVER=1,1726\r\n");
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	93 e0       	ldi	r25, 0x03	; 3
    21cc:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
					retries++;
    21d0:	1f 5f       	subi	r17, 0xFF	; 255
    21d2:	ff ef       	ldi	r31, 0xFF	; 255
    21d4:	27 e8       	ldi	r18, 0x87	; 135
    21d6:	83 e1       	ldi	r24, 0x13	; 19
    21d8:	f1 50       	subi	r31, 0x01	; 1
    21da:	20 40       	sbci	r18, 0x00	; 0
    21dc:	80 40       	sbci	r24, 0x00	; 0
    21de:	e1 f7       	brne	.-8      	; 0x21d8 <wifi_lan_pairing+0x216>
    21e0:	00 c0       	rjmp	.+0      	; 0x21e2 <wifi_lan_pairing+0x220>
    21e2:	00 00       	nop
					_delay_ms(800);
					if (poll_switch()) shutdown_sequence(true);
    21e4:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    21e8:	88 23       	and	r24, r24
    21ea:	09 f4       	brne	.+2      	; 0x21ee <wifi_lan_pairing+0x22c>
    21ec:	34 c1       	rjmp	.+616    	; 0x2456 <wifi_lan_pairing+0x494>
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    21f4:	30 c1       	rjmp	.+608    	; 0x2456 <wifi_lan_pairing+0x494>
					break;
				
				case WAIT_FOR_DEVICE_CONNECT:
					if (UART.message_received) {
    21f6:	f7 01       	movw	r30, r14
    21f8:	80 81       	ld	r24, Z
    21fa:	88 23       	and	r24, r24
    21fc:	19 f1       	breq	.+70     	; 0x2244 <wifi_lan_pairing+0x282>
						pairing_state = RETRIEVE_MAC;
						UART.wait_for_message = WAIT_FOR_MAC;
    21fe:	f6 01       	movw	r30, r12
    2200:	b0 82       	st	Z, r11
						clear_uart_rx_message();
    2202:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
						clear_LCD();
    2206:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
						print_LCD_line("Android device found", LCD_LINE_1);
    220a:	60 e0       	ldi	r22, 0x00	; 0
    220c:	8a e6       	ldi	r24, 0x6A	; 106
    220e:	93 e0       	ldi	r25, 0x03	; 3
    2210:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line("FuncGen MAC Address:", LCD_LINE_2);
    2214:	60 e4       	ldi	r22, 0x40	; 64
    2216:	8f e7       	ldi	r24, 0x7F	; 127
    2218:	93 e0       	ldi	r25, 0x03	; 3
    221a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line("<   Retrieving...  >", LCD_LINE_3);
    221e:	64 e1       	ldi	r22, 0x14	; 20
    2220:	84 e9       	ldi	r24, 0x94	; 148
    2222:	93 e0       	ldi	r25, 0x03	; 3
    2224:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						STATUS.socket_active = true;
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	f4 01       	movw	r30, r8
    222c:	82 83       	std	Z+2, r24	; 0x02
    222e:	ff ef       	ldi	r31, 0xFF	; 255
    2230:	29 e6       	ldi	r18, 0x69	; 105
    2232:	88 e1       	ldi	r24, 0x18	; 24
    2234:	f1 50       	subi	r31, 0x01	; 1
    2236:	20 40       	sbci	r18, 0x00	; 0
    2238:	80 40       	sbci	r24, 0x00	; 0
    223a:	e1 f7       	brne	.-8      	; 0x2234 <wifi_lan_pairing+0x272>
    223c:	00 c0       	rjmp	.+0      	; 0x223e <wifi_lan_pairing+0x27c>
    223e:	00 00       	nop
					if (poll_switch()) shutdown_sequence(true);
					break;
				
				case WAIT_FOR_DEVICE_CONNECT:
					if (UART.message_received) {
						pairing_state = RETRIEVE_MAC;
    2240:	03 2d       	mov	r16, r3
    2242:	12 c1       	rjmp	.+548    	; 0x2468 <wifi_lan_pairing+0x4a6>
						STATUS.socket_active = true;
						retries = 0;
						_delay_ms(1000);
						break;
					}
					if (poll_switch()) shutdown_sequence(true);
    2244:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    2248:	88 23       	and	r24, r24
    224a:	09 f4       	brne	.+2      	; 0x224e <wifi_lan_pairing+0x28c>
    224c:	04 c1       	rjmp	.+520    	; 0x2456 <wifi_lan_pairing+0x494>
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    2254:	00 c1       	rjmp	.+512    	; 0x2456 <wifi_lan_pairing+0x494>
					break;
				
				case RETRIEVE_MAC:
					if (UART.message_received) {
    2256:	f7 01       	movw	r30, r14
    2258:	80 81       	ld	r24, Z
    225a:	88 23       	and	r24, r24
    225c:	49 f1       	breq	.+82     	; 0x22b0 <wifi_lan_pairing+0x2ee>
						pack_mac_string();
    225e:	0e 94 1b 05 	call	0xa36	; 0xa36 <pack_mac_string>
						print_LCD_line(WIFI.device_MAC, LCD_LINE_3);
    2262:	64 e1       	ldi	r22, 0x14	; 20
    2264:	87 eb       	ldi	r24, 0xB7	; 183
    2266:	95 e0       	ldi	r25, 0x05	; 5
    2268:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    226c:	ff ef       	ldi	r31, 0xFF	; 255
    226e:	29 e6       	ldi	r18, 0x69	; 105
    2270:	88 e1       	ldi	r24, 0x18	; 24
    2272:	f1 50       	subi	r31, 0x01	; 1
    2274:	20 40       	sbci	r18, 0x00	; 0
    2276:	80 40       	sbci	r24, 0x00	; 0
    2278:	e1 f7       	brne	.-8      	; 0x2272 <wifi_lan_pairing+0x2b0>
    227a:	00 c0       	rjmp	.+0      	; 0x227c <wifi_lan_pairing+0x2ba>
    227c:	00 00       	nop
						_delay_ms(1000);
						pairing_state = SEND_MAC;
						UART.wait_for_message = WAIT_FOR_READY_TO_SEND;
    227e:	f6 01       	movw	r30, r12
    2280:	20 82       	st	Z, r2
						clear_uart_rx_message();
    2282:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
						retries = 0;
					}
					send_command_UART("AT+CIPSTAMAC?\r\n");
    2286:	89 ea       	ldi	r24, 0xA9	; 169
    2288:	93 e0       	ldi	r25, 0x03	; 3
    228a:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
    228e:	ff ef       	ldi	r31, 0xFF	; 255
    2290:	23 ec       	ldi	r18, 0xC3	; 195
    2292:	89 e0       	ldi	r24, 0x09	; 9
    2294:	f1 50       	subi	r31, 0x01	; 1
    2296:	20 40       	sbci	r18, 0x00	; 0
    2298:	80 40       	sbci	r24, 0x00	; 0
    229a:	e1 f7       	brne	.-8      	; 0x2294 <wifi_lan_pairing+0x2d2>
    229c:	00 c0       	rjmp	.+0      	; 0x229e <wifi_lan_pairing+0x2dc>
    229e:	00 00       	nop
					retries++;
					_delay_ms(400);					
					if (poll_switch()) shutdown_sequence(true);
    22a0:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
						UART.wait_for_message = WAIT_FOR_READY_TO_SEND;
						clear_uart_rx_message();
						retries = 0;
					}
					send_command_UART("AT+CIPSTAMAC?\r\n");
					retries++;
    22a4:	11 e0       	ldi	r17, 0x01	; 1
				case RETRIEVE_MAC:
					if (UART.message_received) {
						pack_mac_string();
						print_LCD_line(WIFI.device_MAC, LCD_LINE_3);
						_delay_ms(1000);
						pairing_state = SEND_MAC;
    22a6:	07 2d       	mov	r16, r7
						retries = 0;
					}
					send_command_UART("AT+CIPSTAMAC?\r\n");
					retries++;
					_delay_ms(400);					
					if (poll_switch()) shutdown_sequence(true);
    22a8:	88 23       	and	r24, r24
    22aa:	09 f4       	brne	.+2      	; 0x22ae <wifi_lan_pairing+0x2ec>
    22ac:	c5 ce       	rjmp	.-630    	; 0x2038 <wifi_lan_pairing+0x76>
    22ae:	14 c0       	rjmp	.+40     	; 0x22d8 <wifi_lan_pairing+0x316>
						pairing_state = SEND_MAC;
						UART.wait_for_message = WAIT_FOR_READY_TO_SEND;
						clear_uart_rx_message();
						retries = 0;
					}
					send_command_UART("AT+CIPSTAMAC?\r\n");
    22b0:	89 ea       	ldi	r24, 0xA9	; 169
    22b2:	93 e0       	ldi	r25, 0x03	; 3
    22b4:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
					retries++;
    22b8:	1f 5f       	subi	r17, 0xFF	; 255
    22ba:	9f ef       	ldi	r25, 0xFF	; 255
    22bc:	e3 ec       	ldi	r30, 0xC3	; 195
    22be:	f9 e0       	ldi	r31, 0x09	; 9
    22c0:	91 50       	subi	r25, 0x01	; 1
    22c2:	e0 40       	sbci	r30, 0x00	; 0
    22c4:	f0 40       	sbci	r31, 0x00	; 0
    22c6:	e1 f7       	brne	.-8      	; 0x22c0 <wifi_lan_pairing+0x2fe>
    22c8:	00 c0       	rjmp	.+0      	; 0x22ca <wifi_lan_pairing+0x308>
    22ca:	00 00       	nop
					_delay_ms(400);					
					if (poll_switch()) shutdown_sequence(true);
    22cc:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    22d0:	88 23       	and	r24, r24
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <wifi_lan_pairing+0x314>
    22d4:	c0 c0       	rjmp	.+384    	; 0x2456 <wifi_lan_pairing+0x494>
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <wifi_lan_pairing+0x31a>
						UART.wait_for_message = WAIT_FOR_READY_TO_SEND;
						clear_uart_rx_message();
						retries = 0;
					}
					send_command_UART("AT+CIPSTAMAC?\r\n");
					retries++;
    22d8:	11 e0       	ldi	r17, 0x01	; 1
				case RETRIEVE_MAC:
					if (UART.message_received) {
						pack_mac_string();
						print_LCD_line(WIFI.device_MAC, LCD_LINE_3);
						_delay_ms(1000);
						pairing_state = SEND_MAC;
    22da:	07 2d       	mov	r16, r7
						retries = 0;
					}
					send_command_UART("AT+CIPSTAMAC?\r\n");
					retries++;
					_delay_ms(400);					
					if (poll_switch()) shutdown_sequence(true);
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    22e2:	b9 c0       	rjmp	.+370    	; 0x2456 <wifi_lan_pairing+0x494>
					break;
				
				case SEND_MAC:
					while(true) {
						if (poll_switch()) shutdown_sequence(true);
    22e4:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    22e8:	88 23       	and	r24, r24
    22ea:	19 f0       	breq	.+6      	; 0x22f2 <wifi_lan_pairing+0x330>
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
						if (UART.message_received) {
    22f2:	f7 01       	movw	r30, r14
    22f4:	80 81       	ld	r24, Z
    22f6:	88 23       	and	r24, r24
    22f8:	51 f0       	breq	.+20     	; 0x230e <wifi_lan_pairing+0x34c>
							clear_uart_rx_message();
    22fa:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
							retries = 0;
							UART.wait_for_message = WAIT_FOR_CREDENTIALS;
    22fe:	f6 01       	movw	r30, r12
    2300:	70 82       	st	Z, r7
								retries++;
								_delay_ms(500);
							}
						}
					}
					send_command_UART(WIFI.device_MAC); // MAC String transmission
    2302:	87 eb       	ldi	r24, 0xB7	; 183
    2304:	95 e0       	ldi	r25, 0x05	; 5
    2306:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
				case SEND_MAC:
					while(true) {
						if (poll_switch()) shutdown_sequence(true);
						if (UART.message_received) {
							clear_uart_rx_message();
							retries = 0;
    230a:	10 e0       	ldi	r17, 0x00	; 0
    230c:	15 c0       	rjmp	.+42     	; 0x2338 <wifi_lan_pairing+0x376>
							UART.wait_for_message = WAIT_FOR_CREDENTIALS;
							break;
						}
						else {
							if (retries >= MAXIMUM_COMMAND_RETRIES) {
    230e:	14 31       	cpi	r17, 0x14	; 20
    2310:	20 f0       	brcs	.+8      	; 0x231a <wifi_lan_pairing+0x358>
								shutdown_sequence(true);
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    2318:	e5 cf       	rjmp	.-54     	; 0x22e4 <wifi_lan_pairing+0x322>
							}
							else {
								send_command_UART("AT+CIPSEND=0,23\r\n");
    231a:	89 eb       	ldi	r24, 0xB9	; 185
    231c:	93 e0       	ldi	r25, 0x03	; 3
    231e:	0e 94 82 15 	call	0x2b04	; 0x2b04 <send_command_UART>
								retries++;
    2322:	1f 5f       	subi	r17, 0xFF	; 255
    2324:	ff ef       	ldi	r31, 0xFF	; 255
    2326:	24 e3       	ldi	r18, 0x34	; 52
    2328:	8c e0       	ldi	r24, 0x0C	; 12
    232a:	f1 50       	subi	r31, 0x01	; 1
    232c:	20 40       	sbci	r18, 0x00	; 0
    232e:	80 40       	sbci	r24, 0x00	; 0
    2330:	e1 f7       	brne	.-8      	; 0x232a <wifi_lan_pairing+0x368>
    2332:	00 c0       	rjmp	.+0      	; 0x2334 <wifi_lan_pairing+0x372>
    2334:	00 00       	nop
    2336:	d6 cf       	rjmp	.-84     	; 0x22e4 <wifi_lan_pairing+0x322>
							}
						}
					}
					send_command_UART(WIFI.device_MAC); // MAC String transmission
					while(true) {
						if (poll_switch()) shutdown_sequence(true);
    2338:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    233c:	88 23       	and	r24, r24
    233e:	19 f0       	breq	.+6      	; 0x2346 <wifi_lan_pairing+0x384>
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
						if (UART.message_received) {
    2346:	f7 01       	movw	r30, r14
    2348:	80 81       	ld	r24, Z
    234a:	81 11       	cpse	r24, r1
    234c:	8c c0       	rjmp	.+280    	; 0x2466 <wifi_lan_pairing+0x4a4>
							pairing_state = RETRIEVE_CREDENTIALS;
							retries = 0;
							break;
						}
						else {
							if (retries >= MAXIMUM_COMMAND_RETRIES) {
    234e:	14 31       	cpi	r17, 0x14	; 20
    2350:	20 f0       	brcs	.+8      	; 0x235a <wifi_lan_pairing+0x398>
								shutdown_sequence(true);
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    2358:	ef cf       	rjmp	.-34     	; 0x2338 <wifi_lan_pairing+0x376>
							}
							else {
								retries++;
    235a:	1f 5f       	subi	r17, 0xFF	; 255
    235c:	ff ef       	ldi	r31, 0xFF	; 255
    235e:	24 e3       	ldi	r18, 0x34	; 52
    2360:	8c e0       	ldi	r24, 0x0C	; 12
    2362:	f1 50       	subi	r31, 0x01	; 1
    2364:	20 40       	sbci	r18, 0x00	; 0
    2366:	80 40       	sbci	r24, 0x00	; 0
    2368:	e1 f7       	brne	.-8      	; 0x2362 <wifi_lan_pairing+0x3a0>
    236a:	00 c0       	rjmp	.+0      	; 0x236c <wifi_lan_pairing+0x3aa>
    236c:	00 00       	nop
    236e:	e4 cf       	rjmp	.-56     	; 0x2338 <wifi_lan_pairing+0x376>
						}
					}
					break;

				case RETRIEVE_CREDENTIALS: //\r\nWN=SVaica1,Pvaica666,E2\r\n
					if (UART.message_received) {
    2370:	f7 01       	movw	r30, r14
    2372:	80 81       	ld	r24, Z
    2374:	88 23       	and	r24, r24
    2376:	09 f4       	brne	.+2      	; 0x237a <wifi_lan_pairing+0x3b8>
    2378:	64 c0       	rjmp	.+200    	; 0x2442 <wifi_lan_pairing+0x480>
						clear_LCD();
    237a:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
						retrieve_wifi_credentials();
    237e:	0e 94 ab 04 	call	0x956	; 0x956 <retrieve_wifi_credentials>
						save_wifi_credentials();
    2382:	0e 94 94 04 	call	0x928	; 0x928 <save_wifi_credentials>
						memset(buffer_LCD1, 0, LCD_LINE_LENGTH);
    2386:	0f 2e       	mov	r0, r31
    2388:	f4 e1       	ldi	r31, 0x14	; 20
    238a:	ff 2e       	mov	r15, r31
    238c:	f0 2d       	mov	r31, r0
    238e:	ce 01       	movw	r24, r28
    2390:	01 96       	adiw	r24, 0x01	; 1
    2392:	6c 01       	movw	r12, r24
    2394:	fc 01       	movw	r30, r24
    2396:	2f 2d       	mov	r18, r15
    2398:	11 92       	st	Z+, r1
    239a:	2a 95       	dec	r18
    239c:	e9 f7       	brne	.-6      	; 0x2398 <wifi_lan_pairing+0x3d6>
						memset(buffer_LCD2, 0, LCD_LINE_LENGTH);
    239e:	8e 01       	movw	r16, r28
    23a0:	0b 5e       	subi	r16, 0xEB	; 235
    23a2:	1f 4f       	sbci	r17, 0xFF	; 255
    23a4:	f8 01       	movw	r30, r16
    23a6:	2f 2d       	mov	r18, r15
    23a8:	11 92       	st	Z+, r1
    23aa:	2a 95       	dec	r18
    23ac:	e9 f7       	brne	.-6      	; 0x23a8 <wifi_lan_pairing+0x3e6>
						snprintf(buffer_LCD1, MAX_STRING_BUFFER, "SSID:%s", WIFI.SSID);
    23ae:	87 e5       	ldi	r24, 0x57	; 87
    23b0:	95 e0       	ldi	r25, 0x05	; 5
    23b2:	9f 93       	push	r25
    23b4:	8f 93       	push	r24
    23b6:	8b ec       	ldi	r24, 0xCB	; 203
    23b8:	93 e0       	ldi	r25, 0x03	; 3
    23ba:	9f 93       	push	r25
    23bc:	8f 93       	push	r24
    23be:	1f 92       	push	r1
    23c0:	ff 92       	push	r15
    23c2:	df 92       	push	r13
    23c4:	cf 92       	push	r12
    23c6:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
						snprintf(buffer_LCD2, MAX_STRING_BUFFER, "PASS:%s", WIFI.PASS);
    23ca:	87 e7       	ldi	r24, 0x77	; 119
    23cc:	95 e0       	ldi	r25, 0x05	; 5
    23ce:	9f 93       	push	r25
    23d0:	8f 93       	push	r24
    23d2:	83 ed       	ldi	r24, 0xD3	; 211
    23d4:	93 e0       	ldi	r25, 0x03	; 3
    23d6:	9f 93       	push	r25
    23d8:	8f 93       	push	r24
    23da:	1f 92       	push	r1
    23dc:	ff 92       	push	r15
    23de:	1f 93       	push	r17
    23e0:	0f 93       	push	r16
    23e2:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <snprintf>
						print_LCD_line("Wi-Fi data received:", LCD_LINE_1);
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	8b ed       	ldi	r24, 0xDB	; 219
    23ea:	93 e0       	ldi	r25, 0x03	; 3
    23ec:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						retries = 0;
						print_LCD_line(buffer_LCD1, LCD_LINE_2);
    23f0:	60 e4       	ldi	r22, 0x40	; 64
    23f2:	c6 01       	movw	r24, r12
    23f4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(buffer_LCD2, LCD_LINE_3);
    23f8:	64 e1       	ldi	r22, 0x14	; 20
    23fa:	c8 01       	movw	r24, r16
    23fc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						if (WIFI.encryption != '4') print_LCD_line("Connection: Secured", LCD_LINE_4);
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <WIFI+0x77>
    240e:	84 33       	cpi	r24, 0x34	; 52
    2410:	31 f0       	breq	.+12     	; 0x241e <wifi_lan_pairing+0x45c>
    2412:	64 e5       	ldi	r22, 0x54	; 84
    2414:	80 ef       	ldi	r24, 0xF0	; 240
    2416:	93 e0       	ldi	r25, 0x03	; 3
    2418:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    241c:	05 c0       	rjmp	.+10     	; 0x2428 <wifi_lan_pairing+0x466>
						else  print_LCD_line("Connection: Open    ", LCD_LINE_4);
    241e:	64 e5       	ldi	r22, 0x54	; 84
    2420:	84 e0       	ldi	r24, 0x04	; 4
    2422:	94 e0       	ldi	r25, 0x04	; 4
    2424:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    2428:	9f ef       	ldi	r25, 0xFF	; 255
    242a:	e7 ea       	ldi	r30, 0xA7	; 167
    242c:	f1 e6       	ldi	r31, 0x61	; 97
    242e:	91 50       	subi	r25, 0x01	; 1
    2430:	e0 40       	sbci	r30, 0x00	; 0
    2432:	f0 40       	sbci	r31, 0x00	; 0
    2434:	e1 f7       	brne	.-8      	; 0x242e <wifi_lan_pairing+0x46c>
    2436:	00 c0       	rjmp	.+0      	; 0x2438 <wifi_lan_pairing+0x476>
    2438:	00 00       	nop
						_delay_ms(4000);
						clear_uart_rx_message();
    243a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
						start_wlan_communication();
    243e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <start_wlan_communication>
						break;
					}
					if (poll_switch()) shutdown_sequence(true);
    2442:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    2446:	88 23       	and	r24, r24
    2448:	31 f0       	breq	.+12     	; 0x2456 <wifi_lan_pairing+0x494>
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	0e 94 07 04 	call	0x80e	; 0x80e <shutdown_sequence>
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <wifi_lan_pairing+0x494>
			}
		}
		else {
			halt_system();
    2452:	0e 94 35 05 	call	0xa6a	; 0xa6a <halt_system>
	bool break_from_pairing = false;
	enum LAN_PAIRING_STATES pairing_state = SHOW_LAN_MESSAGE;
	char buffer_LCD1[LCD_LINE_LENGTH];
	char buffer_LCD2[LCD_LINE_LENGTH];
	while(!break_from_pairing) {
		if (retries < MAXIMUM_COMMAND_RETRIES) {
    2456:	14 31       	cpi	r17, 0x14	; 20
    2458:	08 f4       	brcc	.+2      	; 0x245c <wifi_lan_pairing+0x49a>
    245a:	ee cd       	rjmp	.-1060   	; 0x2038 <wifi_lan_pairing+0x76>
    245c:	fa cf       	rjmp	.-12     	; 0x2452 <wifi_lan_pairing+0x490>
    245e:	14 31       	cpi	r17, 0x14	; 20
    2460:	08 f4       	brcc	.+2      	; 0x2464 <wifi_lan_pairing+0x4a2>
    2462:	ec cd       	rjmp	.-1064   	; 0x203c <wifi_lan_pairing+0x7a>
    2464:	f6 cf       	rjmp	.-20     	; 0x2452 <wifi_lan_pairing+0x490>
					}
					send_command_UART(WIFI.device_MAC); // MAC String transmission
					while(true) {
						if (poll_switch()) shutdown_sequence(true);
						if (UART.message_received) {
							pairing_state = RETRIEVE_CREDENTIALS;
    2466:	0b 2d       	mov	r16, r11
    2468:	10 e0       	ldi	r17, 0x00	; 0
    246a:	e6 cd       	rjmp	.-1076   	; 0x2038 <wifi_lan_pairing+0x76>

0000246c <clear_wifi_values>:
	snprintf(UI.frequency_B, 8,"0");
	_delay_ms(10);
}

void clear_wifi_values() {
	memset(WIFI.SSID, 0, MAX_WIFI_SSID_LENGTH);
    246c:	80 e2       	ldi	r24, 0x20	; 32
    246e:	e7 e5       	ldi	r30, 0x57	; 87
    2470:	f5 e0       	ldi	r31, 0x05	; 5
    2472:	df 01       	movw	r26, r30
    2474:	1d 92       	st	X+, r1
    2476:	8a 95       	dec	r24
    2478:	e9 f7       	brne	.-6      	; 0x2474 <clear_wifi_values+0x8>
	memset(WIFI.PASS, 0, MAX_WIFI_PASS_LENGTH);
    247a:	80 e4       	ldi	r24, 0x40	; 64
    247c:	e7 e7       	ldi	r30, 0x77	; 119
    247e:	f5 e0       	ldi	r31, 0x05	; 5
    2480:	df 01       	movw	r26, r30
    2482:	1d 92       	st	X+, r1
    2484:	8a 95       	dec	r24
    2486:	e9 f7       	brne	.-6      	; 0x2482 <clear_wifi_values+0x16>
	memset(WIFI.device_MAC, 0, MAC_STRING_LENGTH);
    2488:	87 e1       	ldi	r24, 0x17	; 23
    248a:	e7 eb       	ldi	r30, 0xB7	; 183
    248c:	f5 e0       	ldi	r31, 0x05	; 5
    248e:	df 01       	movw	r26, r30
    2490:	1d 92       	st	X+, r1
    2492:	8a 95       	dec	r24
    2494:	e9 f7       	brne	.-6      	; 0x2490 <clear_wifi_values+0x24>
	WIFI.encryption = 0;
    2496:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <WIFI+0x77>
    249a:	08 95       	ret

0000249c <clear_all_values>:
		}
	}
}
	
void clear_all_values() {
	clear_funcgen_values();
    249c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <clear_funcgen_values>
	clear_wifi_values();
    24a0:	0e 94 36 12 	call	0x246c	; 0x246c <clear_wifi_values>
	clear_uart_rx_message();
    24a4:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
	update_ac_power_status();
    24a8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <update_ac_power_status>
	update_battery_status();
    24ac:	0e 94 ed 06 	call	0xdda	; 0xdda <update_battery_status>
    24b0:	08 95       	ret

000024b2 <Init_Device>:
	PB_DDR &= ~S_INT;
	MISC_DDR |= PS_HOLD | BUZZER;
}

void Init_Device() {
	Init_Ports();
    24b2:	0e 94 a7 02 	call	0x54e	; 0x54e <Init_Ports>
	ENABLE_DEVICE();
    24b6:	da 9a       	sbi	0x1b, 2	; 27
	Init_SPI_All();
    24b8:	0e 94 61 13 	call	0x26c2	; 0x26c2 <Init_SPI_All>
	Init_LCD();
    24bc:	0e 94 bb 00 	call	0x176	; 0x176 <Init_LCD>
    24c0:	2f ef       	ldi	r18, 0xFF	; 255
    24c2:	80 e7       	ldi	r24, 0x70	; 112
    24c4:	92 e0       	ldi	r25, 0x02	; 2
    24c6:	21 50       	subi	r18, 0x01	; 1
    24c8:	80 40       	sbci	r24, 0x00	; 0
    24ca:	90 40       	sbci	r25, 0x00	; 0
    24cc:	e1 f7       	brne	.-8      	; 0x24c6 <Init_Device+0x14>
    24ce:	00 c0       	rjmp	.+0      	; 0x24d0 <Init_Device+0x1e>
    24d0:	00 00       	nop
	_delay_ms(100);
	Init_LCD_4bit();
    24d2:	0e 94 25 01 	call	0x24a	; 0x24a <Init_LCD_4bit>
	Init_UART();
    24d6:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <Init_UART>
	Init_ADC();
    24da:	0e 94 c5 02 	call	0x58a	; 0x58a <Init_ADC>
	clear_all_values();
    24de:	0e 94 4e 12 	call	0x249c	; 0x249c <clear_all_values>
	STATUS.socket_active = false;
    24e2:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <STATUS+0x2>
    24e6:	08 95       	ret

000024e8 <main>:
int main() {
	#if PRE_PROG
		ENABLE_DEVICE();
	#else
		enum MENU_STATES_MAIN main_menu_state = INIT_STATE;
		Init_Device();
    24e8:	0e 94 59 12 	call	0x24b2	; 0x24b2 <Init_Device>
		Init_UI();
    24ec:	0e 94 b7 03 	call	0x76e	; 0x76e <Init_UI>

int main() {
	#if PRE_PROG
		ENABLE_DEVICE();
	#else
		enum MENU_STATES_MAIN main_menu_state = INIT_STATE;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
						clear_LCD();
						print_LCD_line(START_DIRECT_MSG, LCD_LINE_1);
						print_LCD_line(START_COMM_MSG, LCD_LINE_2);
						print_LCD_line(PB_MSG, LCD_LINE_4);
						while(!poll_switch());
						main_menu_state = DIRECT_PAIRING_INIT;
    24f2:	d5 e0       	ldi	r29, 0x05	; 5
					case NO_STORED_CONNECTION: default:
						clear_LCD();
						print_LCD_line("  No Defined Wi-Fi  ", LCD_LINE_2);
						print_LCD_line("Connection Available", LCD_LINE_3);
						_delay_ms(3000);
						main_menu_state = PROCEED_BUTTON_PERFORM;
    24f4:	02 e0       	ldi	r16, 0x02	; 2
				break;
			case PROCEED_BUTTON_PERFORM:
				clear_LCD();
				print_LCD_line(PB_MSG, LCD_LINE_2);
				while(!poll_switch());
				main_menu_state = BUTTON_STATE_SELECTION;
    24f6:	13 e0       	ldi	r17, 0x03	; 3
    24f8:	68 94       	set
    24fa:	ff 24       	eor	r15, r15
    24fc:	f2 f8       	bld	r15, 2
    24fe:	03 c0       	rjmp	.+6      	; 0x2506 <main+0x1e>
    2500:	81 2f       	mov	r24, r17
    2502:	01 c0       	rjmp	.+2      	; 0x2506 <main+0x1e>
    2504:	8f 2d       	mov	r24, r15
			_delay_ms(500);
		}
	#endif
	//sei();
	while(1) {
		switch(main_menu_state) {
    2506:	83 30       	cpi	r24, 0x03	; 3
    2508:	09 f4       	brne	.+2      	; 0x250c <main+0x24>
    250a:	53 c0       	rjmp	.+166    	; 0x25b2 <main+0xca>
    250c:	30 f4       	brcc	.+12     	; 0x251a <main+0x32>
    250e:	81 30       	cpi	r24, 0x01	; 1
    2510:	59 f0       	breq	.+22     	; 0x2528 <main+0x40>
    2512:	82 30       	cpi	r24, 0x02	; 2
    2514:	09 f4       	brne	.+2      	; 0x2518 <main+0x30>
    2516:	41 c0       	rjmp	.+130    	; 0x259a <main+0xb2>
    2518:	f6 cf       	rjmp	.-20     	; 0x2506 <main+0x1e>
    251a:	84 30       	cpi	r24, 0x04	; 4
    251c:	09 f4       	brne	.+2      	; 0x2520 <main+0x38>
    251e:	79 c0       	rjmp	.+242    	; 0x2612 <main+0x12a>
    2520:	85 30       	cpi	r24, 0x05	; 5
    2522:	09 f4       	brne	.+2      	; 0x2526 <main+0x3e>
    2524:	73 c0       	rjmp	.+230    	; 0x260c <main+0x124>
    2526:	ef cf       	rjmp	.-34     	; 0x2506 <main+0x1e>
			
			case INIT_STATE: // Check EEPROM saved state
				switch (eeprom_read_byte(STORED_CONNECTION_STATE_ADDRESS)) {
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	0e 94 c5 1c 	call	0x398a	; 0x398a <eeprom_read_byte>
    2530:	84 34       	cpi	r24, 0x44	; 68
    2532:	21 f0       	breq	.+8      	; 0x253c <main+0x54>
    2534:	8c 34       	cpi	r24, 0x4C	; 76
    2536:	d1 f4       	brne	.+52     	; 0x256c <main+0x84>
					
					case WIFI_LAN_CONNECTON: 
						start_wlan_communication(); 
    2538:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <start_wlan_communication>
						break;
					case WIFI_DIRECT_CONNECTION:
						clear_LCD();
    253c:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
						print_LCD_line(START_DIRECT_MSG, LCD_LINE_1);
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	89 e1       	ldi	r24, 0x19	; 25
    2544:	94 e0       	ldi	r25, 0x04	; 4
    2546:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(START_COMM_MSG, LCD_LINE_2);
    254a:	60 e4       	ldi	r22, 0x40	; 64
    254c:	87 e4       	ldi	r24, 0x47	; 71
    254e:	93 e0       	ldi	r25, 0x03	; 3
    2550:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line(PB_MSG, LCD_LINE_4);
    2554:	64 e5       	ldi	r22, 0x54	; 84
    2556:	8e e2       	ldi	r24, 0x2E	; 46
    2558:	94 e0       	ldi	r25, 0x04	; 4
    255a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						while(!poll_switch());
    255e:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    2562:	88 23       	and	r24, r24
    2564:	e1 f3       	breq	.-8      	; 0x255e <main+0x76>
						main_menu_state = DIRECT_PAIRING_INIT;
						sei();
    2566:	78 94       	sei
						clear_LCD();
						print_LCD_line(START_DIRECT_MSG, LCD_LINE_1);
						print_LCD_line(START_COMM_MSG, LCD_LINE_2);
						print_LCD_line(PB_MSG, LCD_LINE_4);
						while(!poll_switch());
						main_menu_state = DIRECT_PAIRING_INIT;
    2568:	8d 2f       	mov	r24, r29
						sei();
						break;
    256a:	cd cf       	rjmp	.-102    	; 0x2506 <main+0x1e>
					
					case NO_STORED_CONNECTION: default:
						clear_LCD();
    256c:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
						print_LCD_line("  No Defined Wi-Fi  ", LCD_LINE_2);
    2570:	60 e4       	ldi	r22, 0x40	; 64
    2572:	83 e4       	ldi	r24, 0x43	; 67
    2574:	94 e0       	ldi	r25, 0x04	; 4
    2576:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
						print_LCD_line("Connection Available", LCD_LINE_3);
    257a:	64 e1       	ldi	r22, 0x14	; 20
    257c:	88 e5       	ldi	r24, 0x58	; 88
    257e:	94 e0       	ldi	r25, 0x04	; 4
    2580:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    2584:	2f ef       	ldi	r18, 0xFF	; 255
    2586:	8d e3       	ldi	r24, 0x3D	; 61
    2588:	99 e4       	ldi	r25, 0x49	; 73
    258a:	21 50       	subi	r18, 0x01	; 1
    258c:	80 40       	sbci	r24, 0x00	; 0
    258e:	90 40       	sbci	r25, 0x00	; 0
    2590:	e1 f7       	brne	.-8      	; 0x258a <main+0xa2>
    2592:	00 c0       	rjmp	.+0      	; 0x2594 <main+0xac>
    2594:	00 00       	nop
						_delay_ms(3000);
						main_menu_state = PROCEED_BUTTON_PERFORM;
    2596:	80 2f       	mov	r24, r16
						break;
    2598:	b6 cf       	rjmp	.-148    	; 0x2506 <main+0x1e>
				}
				break;
			case PROCEED_BUTTON_PERFORM:
				clear_LCD();
    259a:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
				print_LCD_line(PB_MSG, LCD_LINE_2);
    259e:	60 e4       	ldi	r22, 0x40	; 64
    25a0:	8e e2       	ldi	r24, 0x2E	; 46
    25a2:	94 e0       	ldi	r25, 0x04	; 4
    25a4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				while(!poll_switch());
    25a8:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    25ac:	88 23       	and	r24, r24
    25ae:	e1 f3       	breq	.-8      	; 0x25a8 <main+0xc0>
    25b0:	a7 cf       	rjmp	.-178    	; 0x2500 <main+0x18>
				main_menu_state = BUTTON_STATE_SELECTION;
				break;
			
			case BUTTON_STATE_SELECTION:
				clear_LCD();
    25b2:	0e 94 c9 01 	call	0x392	; 0x392 <clear_LCD>
				print_LCD_line(START_DIRECT_MSG, LCD_LINE_1);
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	89 e1       	ldi	r24, 0x19	; 25
    25ba:	94 e0       	ldi	r25, 0x04	; 4
    25bc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				print_LCD_line(START_COMM_MSG, LCD_LINE_2);
    25c0:	60 e4       	ldi	r22, 0x40	; 64
    25c2:	87 e4       	ldi	r24, 0x47	; 71
    25c4:	93 e0       	ldi	r25, 0x03	; 3
    25c6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				print_LCD_line(PB_MSG, LCD_LINE_3);
    25ca:	64 e1       	ldi	r22, 0x14	; 20
    25cc:	8e e2       	ldi	r24, 0x2E	; 46
    25ce:	94 e0       	ldi	r25, 0x04	; 4
    25d0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
				print_LCD_line("WLAN Pairing.. X sec", LCD_LINE_4);
    25d4:	64 e5       	ldi	r22, 0x54	; 84
    25d6:	8d e6       	ldi	r24, 0x6D	; 109
    25d8:	94 e0       	ldi	r25, 0x04	; 4
    25da:	0e 94 73 01 	call	0x2e6	; 0x2e6 <print_LCD_line>
    25de:	c5 e3       	ldi	r28, 0x35	; 53
				//sei();
				for (uint8_t ptr = 5; ptr > 0; ptr--) {
					print_LCD_char(ptr + '0',LCD_LINE_4, 15); // X position
    25e0:	4f e0       	ldi	r20, 0x0F	; 15
    25e2:	64 e5       	ldi	r22, 0x54	; 84
    25e4:	8c 2f       	mov	r24, r28
    25e6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <print_LCD_char>
    25ea:	2f ef       	ldi	r18, 0xFF	; 255
    25ec:	89 e6       	ldi	r24, 0x69	; 105
    25ee:	98 e1       	ldi	r25, 0x18	; 24
    25f0:	21 50       	subi	r18, 0x01	; 1
    25f2:	80 40       	sbci	r24, 0x00	; 0
    25f4:	90 40       	sbci	r25, 0x00	; 0
    25f6:	e1 f7       	brne	.-8      	; 0x25f0 <main+0x108>
    25f8:	00 c0       	rjmp	.+0      	; 0x25fa <main+0x112>
    25fa:	00 00       	nop
					_delay_ms(1000);
					if (poll_switch()) {
    25fc:	0e 94 6d 03 	call	0x6da	; 0x6da <poll_switch>
    2600:	81 11       	cpse	r24, r1
    2602:	80 cf       	rjmp	.-256    	; 0x2504 <main+0x1c>
    2604:	c1 50       	subi	r28, 0x01	; 1
				print_LCD_line(START_DIRECT_MSG, LCD_LINE_1);
				print_LCD_line(START_COMM_MSG, LCD_LINE_2);
				print_LCD_line(PB_MSG, LCD_LINE_3);
				print_LCD_line("WLAN Pairing.. X sec", LCD_LINE_4);
				//sei();
				for (uint8_t ptr = 5; ptr > 0; ptr--) {
    2606:	c0 33       	cpi	r28, 0x30	; 48
    2608:	59 f7       	brne	.-42     	; 0x25e0 <main+0xf8>
    260a:	06 c0       	rjmp	.+12     	; 0x2618 <main+0x130>
				}
				break;
				
			case DIRECT_PAIRING_INIT:
				main_menu_state = IDLE;
				sei();
    260c:	78 94       	sei
				direct_pairing();
    260e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <direct_pairing>
				break;
			
			case WIFI_LAN_PAIRING_INIT:
				main_menu_state = IDLE;
				sei();
    2612:	78 94       	sei
				wifi_lan_pairing();
    2614:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <wifi_lan_pairing>
						main_menu_state = WIFI_LAN_PAIRING_INIT;
						break;
					}
				}
				if (main_menu_state != WIFI_LAN_PAIRING_INIT) {
					sei();
    2618:	78 94       	sei
					main_menu_state = DIRECT_PAIRING_INIT;
    261a:	8d 2f       	mov	r24, r29
    261c:	74 cf       	rjmp	.-280    	; 0x2506 <main+0x1e>

0000261e <SPI_write_16bit>:
#include "Headers\main.h"
#include "Headers\SPIMaster.h"

void SPI_write_16bit(uint8_t address_in, uint8_t data_in, enum DEVICES device) {
    261e:	0f 93       	push	r16
    2620:	1f 93       	push	r17
	switch(device) {
    2622:	04 2f       	mov	r16, r20
    2624:	10 e0       	ldi	r17, 0x00	; 0
    2626:	f8 01       	movw	r30, r16
    2628:	31 97       	sbiw	r30, 0x01	; 1
    262a:	e7 30       	cpi	r30, 0x07	; 7
    262c:	f1 05       	cpc	r31, r1
    262e:	88 f4       	brcc	.+34     	; 0x2652 <SPI_write_16bit+0x34>
    2630:	ed 5b       	subi	r30, 0xBD	; 189
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__tablejump2__>
		case DACA: SPI_CE_PORT &= ~DACA_NCE; break;
    2638:	aa 98       	cbi	0x15, 2	; 21
    263a:	0b c0       	rjmp	.+22     	; 0x2652 <SPI_write_16bit+0x34>
		case DACB: SPI_CE_PORT &= ~DACB_NCE; break;
    263c:	ab 98       	cbi	0x15, 3	; 21
    263e:	09 c0       	rjmp	.+18     	; 0x2652 <SPI_write_16bit+0x34>
		case DACA_BIAS: SPI_CE_PORT &= ~DACA_BIAS_NCE; break;
    2640:	ac 98       	cbi	0x15, 4	; 21
    2642:	07 c0       	rjmp	.+14     	; 0x2652 <SPI_write_16bit+0x34>
		case DACB_BIAS: SPI_CE_PORT &= ~DACB_BIAS_NCE; break;
    2644:	ad 98       	cbi	0x15, 5	; 21
    2646:	05 c0       	rjmp	.+10     	; 0x2652 <SPI_write_16bit+0x34>
		case FG0: SPI_CE_PORT &= ~FG0_NCE; break;
    2648:	ae 98       	cbi	0x15, 6	; 21
    264a:	03 c0       	rjmp	.+6      	; 0x2652 <SPI_write_16bit+0x34>
		case FG1: SPI_CE_PORT &= ~FG1_NCE; break;
    264c:	af 98       	cbi	0x15, 7	; 21
    264e:	01 c0       	rjmp	.+2      	; 0x2652 <SPI_write_16bit+0x34>
		case LCD_POT: LCD_POT_PORT &= ~POT_LCD_NCE; break;
    2650:	dc 98       	cbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2652:	98 e2       	ldi	r25, 0x28	; 40
    2654:	9a 95       	dec	r25
    2656:	f1 f7       	brne	.-4      	; 0x2654 <SPI_write_16bit+0x36>
		default: break;
	}
	_delay_us(15);
	SPDR = address_in;
    2658:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
    265a:	77 9b       	sbis	0x0e, 7	; 14
    265c:	fe cf       	rjmp	.-4      	; 0x265a <SPI_write_16bit+0x3c>
    265e:	88 e2       	ldi	r24, 0x28	; 40
    2660:	8a 95       	dec	r24
    2662:	f1 f7       	brne	.-4      	; 0x2660 <SPI_write_16bit+0x42>
	_delay_us(15);
	SPDR = data_in;
    2664:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)));
    2666:	77 9b       	sbis	0x0e, 7	; 14
    2668:	fe cf       	rjmp	.-4      	; 0x2666 <SPI_write_16bit+0x48>
    266a:	98 e2       	ldi	r25, 0x28	; 40
    266c:	9a 95       	dec	r25
    266e:	f1 f7       	brne	.-4      	; 0x266c <SPI_write_16bit+0x4e>
	_delay_us(15);
	switch(device) {
    2670:	50 e0       	ldi	r21, 0x00	; 0
    2672:	fa 01       	movw	r30, r20
    2674:	31 97       	sbiw	r30, 0x01	; 1
    2676:	e7 30       	cpi	r30, 0x07	; 7
    2678:	f1 05       	cpc	r31, r1
    267a:	88 f4       	brcc	.+34     	; 0x269e <SPI_write_16bit+0x80>
    267c:	e6 5b       	subi	r30, 0xB6	; 182
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__tablejump2__>
		case DACA: SPI_CE_PORT |= DACA_NCE; break;
    2684:	aa 9a       	sbi	0x15, 2	; 21
    2686:	0b c0       	rjmp	.+22     	; 0x269e <SPI_write_16bit+0x80>
		case DACB: SPI_CE_PORT |= DACB_NCE; break;
    2688:	ab 9a       	sbi	0x15, 3	; 21
    268a:	09 c0       	rjmp	.+18     	; 0x269e <SPI_write_16bit+0x80>
		case DACA_BIAS: SPI_CE_PORT |= DACA_BIAS_NCE; break;
    268c:	ac 9a       	sbi	0x15, 4	; 21
    268e:	07 c0       	rjmp	.+14     	; 0x269e <SPI_write_16bit+0x80>
		case DACB_BIAS: SPI_CE_PORT |= DACB_BIAS_NCE; break;
    2690:	ad 9a       	sbi	0x15, 5	; 21
    2692:	05 c0       	rjmp	.+10     	; 0x269e <SPI_write_16bit+0x80>
		case FG0: SPI_CE_PORT |= FG0_NCE; break;
    2694:	ae 9a       	sbi	0x15, 6	; 21
    2696:	03 c0       	rjmp	.+6      	; 0x269e <SPI_write_16bit+0x80>
		case FG1: SPI_CE_PORT |= FG1_NCE; break;
    2698:	af 9a       	sbi	0x15, 7	; 21
    269a:	01 c0       	rjmp	.+2      	; 0x269e <SPI_write_16bit+0x80>
		case LCD_POT: LCD_POT_PORT |= POT_LCD_NCE; break;
    269c:	dc 9a       	sbi	0x1b, 4	; 27
		default: break;
	}
}
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	08 95       	ret

000026a4 <Init_SPI_AD9834>:


void Init_SPI_AD9834(void) {
	SPI_CE_PORT |= DACA_NCE | DACB_NCE | DACA_BIAS_NCE | DACB_BIAS_NCE | FG0_NCE | FG1_NCE;
    26a4:	85 b3       	in	r24, 0x15	; 21
    26a6:	8c 6f       	ori	r24, 0xFC	; 252
    26a8:	85 bb       	out	0x15, r24	; 21
	LCD_POT_PORT |= POT_LCD_NCE;
    26aa:	dc 9a       	sbi	0x1b, 4	; 27
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPOL);
    26ac:	89 e5       	ldi	r24, 0x59	; 89
    26ae:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    26b4:	8f e1       	ldi	r24, 0x1F	; 31
    26b6:	9e e4       	ldi	r25, 0x4E	; 78
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <Init_SPI_AD9834+0x14>
    26bc:	00 c0       	rjmp	.+0      	; 0x26be <Init_SPI_AD9834+0x1a>
    26be:	00 00       	nop
    26c0:	08 95       	ret

000026c2 <Init_SPI_All>:
	_delay_ms(10);
}

void Init_SPI_All(void) {
	SPI_CE_PORT |= DACA_NCE | DACB_NCE | DACA_BIAS_NCE | DACB_BIAS_NCE | FG0_NCE | FG1_NCE;
    26c2:	85 b3       	in	r24, 0x15	; 21
    26c4:	8c 6f       	ori	r24, 0xFC	; 252
    26c6:	85 bb       	out	0x15, r24	; 21
	LCD_POT_PORT |= POT_LCD_NCE;
    26c8:	dc 9a       	sbi	0x1b, 4	; 27
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    26ca:	81 e5       	ldi	r24, 0x51	; 81
    26cc:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	8e b9       	out	0x0e, r24	; 14
    26d2:	8f e1       	ldi	r24, 0x1F	; 31
    26d4:	9e e4       	ldi	r25, 0x4E	; 78
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <Init_SPI_All+0x14>
    26da:	00 c0       	rjmp	.+0      	; 0x26dc <Init_SPI_All+0x1a>
    26dc:	00 00       	nop
    26de:	08 95       	ret

000026e0 <__vector_13>:
}

char UART_read_char() {
	while(!(UCSRA & (1<<RXC)));
	return UDR;
}
    26e0:	1f 92       	push	r1
    26e2:	0f 92       	push	r0
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	0f 92       	push	r0
    26e8:	11 24       	eor	r1, r1
    26ea:	8f 93       	push	r24
    26ec:	9f 93       	push	r25
    26ee:	af 93       	push	r26
    26f0:	bf 93       	push	r27
    26f2:	ef 93       	push	r30
    26f4:	ff 93       	push	r31
    26f6:	e0 91 55 06 	lds	r30, 0x0655	; 0x800655 <UART+0x83>
    26fa:	8e 2f       	mov	r24, r30
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	fc 01       	movw	r30, r24
    2700:	31 97       	sbiw	r30, 0x01	; 1
    2702:	ea 30       	cpi	r30, 0x0A	; 10
    2704:	f1 05       	cpc	r31, r1
    2706:	08 f0       	brcs	.+2      	; 0x270a <__vector_13+0x2a>
    2708:	ee c1       	rjmp	.+988    	; 0x2ae6 <__vector_13+0x406>
    270a:	ef 5a       	subi	r30, 0xAF	; 175
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	0c 94 6f 19 	jmp	0x32de	; 0x32de <__tablejump2__>
    2712:	a2 e5       	ldi	r26, 0x52	; 82
    2714:	b6 e0       	ldi	r27, 0x06	; 6
    2716:	ec 91       	ld	r30, X
    2718:	8c b1       	in	r24, 0x0c	; 12
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	ee 52       	subi	r30, 0x2E	; 46
    271e:	fa 4f       	sbci	r31, 0xFA	; 250
    2720:	80 83       	st	Z, r24
    2722:	ec 91       	ld	r30, X
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	ee 52       	subi	r30, 0x2E	; 46
    2728:	fa 4f       	sbci	r31, 0xFA	; 250
    272a:	80 81       	ld	r24, Z
    272c:	8a 30       	cpi	r24, 0x0A	; 10
    272e:	b1 f4       	brne	.+44     	; 0x275c <__vector_13+0x7c>
    2730:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	e0 53       	subi	r30, 0x30	; 48
    2738:	fa 4f       	sbci	r31, 0xFA	; 250
    273a:	80 81       	ld	r24, Z
    273c:	8b 34       	cpi	r24, 0x4B	; 75
    273e:	71 f4       	brne	.+28     	; 0x275c <__vector_13+0x7c>
    2740:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	e1 53       	subi	r30, 0x31	; 49
    2748:	fa 4f       	sbci	r31, 0xFA	; 250
    274a:	80 81       	ld	r24, Z
    274c:	8f 34       	cpi	r24, 0x4F	; 79
    274e:	31 f4       	brne	.+12     	; 0x275c <__vector_13+0x7c>
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <UART+0x81>
    2756:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <UART+0x80>
    275a:	c5 c1       	rjmp	.+906    	; 0x2ae6 <__vector_13+0x406>
    275c:	e2 e5       	ldi	r30, 0x52	; 82
    275e:	f6 e0       	ldi	r31, 0x06	; 6
    2760:	80 81       	ld	r24, Z
    2762:	8f 5f       	subi	r24, 0xFF	; 255
    2764:	80 83       	st	Z, r24
    2766:	bf c1       	rjmp	.+894    	; 0x2ae6 <__vector_13+0x406>
    2768:	a2 e5       	ldi	r26, 0x52	; 82
    276a:	b6 e0       	ldi	r27, 0x06	; 6
    276c:	ec 91       	ld	r30, X
    276e:	8c b1       	in	r24, 0x0c	; 12
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	ee 52       	subi	r30, 0x2E	; 46
    2774:	fa 4f       	sbci	r31, 0xFA	; 250
    2776:	80 83       	st	Z, r24
    2778:	ec 91       	ld	r30, X
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	ee 52       	subi	r30, 0x2E	; 46
    277e:	fa 4f       	sbci	r31, 0xFA	; 250
    2780:	80 81       	ld	r24, Z
    2782:	8a 30       	cpi	r24, 0x0A	; 10
    2784:	b1 f4       	brne	.+44     	; 0x27b2 <__vector_13+0xd2>
    2786:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	e0 53       	subi	r30, 0x30	; 48
    278e:	fa 4f       	sbci	r31, 0xFA	; 250
    2790:	80 81       	ld	r24, Z
    2792:	80 35       	cpi	r24, 0x50	; 80
    2794:	71 f4       	brne	.+28     	; 0x27b2 <__vector_13+0xd2>
    2796:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	e1 53       	subi	r30, 0x31	; 49
    279e:	fa 4f       	sbci	r31, 0xFA	; 250
    27a0:	80 81       	ld	r24, Z
    27a2:	89 34       	cpi	r24, 0x49	; 73
    27a4:	31 f4       	brne	.+12     	; 0x27b2 <__vector_13+0xd2>
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <UART+0x81>
    27ac:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <UART+0x80>
    27b0:	9a c1       	rjmp	.+820    	; 0x2ae6 <__vector_13+0x406>
    27b2:	e2 e5       	ldi	r30, 0x52	; 82
    27b4:	f6 e0       	ldi	r31, 0x06	; 6
    27b6:	80 81       	ld	r24, Z
    27b8:	8f 5f       	subi	r24, 0xFF	; 255
    27ba:	80 83       	st	Z, r24
    27bc:	94 c1       	rjmp	.+808    	; 0x2ae6 <__vector_13+0x406>
    27be:	a2 e5       	ldi	r26, 0x52	; 82
    27c0:	b6 e0       	ldi	r27, 0x06	; 6
    27c2:	ec 91       	ld	r30, X
    27c4:	8c b1       	in	r24, 0x0c	; 12
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	ee 52       	subi	r30, 0x2E	; 46
    27ca:	fa 4f       	sbci	r31, 0xFA	; 250
    27cc:	80 83       	st	Z, r24
    27ce:	ec 91       	ld	r30, X
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	ee 52       	subi	r30, 0x2E	; 46
    27d4:	fa 4f       	sbci	r31, 0xFA	; 250
    27d6:	80 81       	ld	r24, Z
    27d8:	8e 33       	cpi	r24, 0x3E	; 62
    27da:	b1 f4       	brne	.+44     	; 0x2808 <__vector_13+0x128>
    27dc:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	ef 52       	subi	r30, 0x2F	; 47
    27e4:	fa 4f       	sbci	r31, 0xFA	; 250
    27e6:	80 81       	ld	r24, Z
    27e8:	8a 30       	cpi	r24, 0x0A	; 10
    27ea:	71 f4       	brne	.+28     	; 0x2808 <__vector_13+0x128>
    27ec:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	e0 53       	subi	r30, 0x30	; 48
    27f4:	fa 4f       	sbci	r31, 0xFA	; 250
    27f6:	80 81       	ld	r24, Z
    27f8:	8d 30       	cpi	r24, 0x0D	; 13
    27fa:	31 f4       	brne	.+12     	; 0x2808 <__vector_13+0x128>
    27fc:	81 e0       	ldi	r24, 0x01	; 1
    27fe:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <UART+0x81>
    2802:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <UART+0x80>
    2806:	6f c1       	rjmp	.+734    	; 0x2ae6 <__vector_13+0x406>
    2808:	e2 e5       	ldi	r30, 0x52	; 82
    280a:	f6 e0       	ldi	r31, 0x06	; 6
    280c:	80 81       	ld	r24, Z
    280e:	8f 5f       	subi	r24, 0xFF	; 255
    2810:	80 83       	st	Z, r24
    2812:	69 c1       	rjmp	.+722    	; 0x2ae6 <__vector_13+0x406>
    2814:	a2 e5       	ldi	r26, 0x52	; 82
    2816:	b6 e0       	ldi	r27, 0x06	; 6
    2818:	ec 91       	ld	r30, X
    281a:	8c b1       	in	r24, 0x0c	; 12
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	ee 52       	subi	r30, 0x2E	; 46
    2820:	fa 4f       	sbci	r31, 0xFA	; 250
    2822:	80 83       	st	Z, r24
    2824:	ec 91       	ld	r30, X
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	ee 52       	subi	r30, 0x2E	; 46
    282a:	fa 4f       	sbci	r31, 0xFA	; 250
    282c:	80 81       	ld	r24, Z
    282e:	8a 30       	cpi	r24, 0x0A	; 10
    2830:	f1 f4       	brne	.+60     	; 0x286e <__vector_13+0x18e>
    2832:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	e0 53       	subi	r30, 0x30	; 48
    283a:	fa 4f       	sbci	r31, 0xFA	; 250
    283c:	80 81       	ld	r24, Z
    283e:	84 35       	cpi	r24, 0x54	; 84
    2840:	b1 f4       	brne	.+44     	; 0x286e <__vector_13+0x18e>
    2842:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	e1 53       	subi	r30, 0x31	; 49
    284a:	fa 4f       	sbci	r31, 0xFA	; 250
    284c:	80 81       	ld	r24, Z
    284e:	83 34       	cpi	r24, 0x43	; 67
    2850:	71 f4       	brne	.+28     	; 0x286e <__vector_13+0x18e>
    2852:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	e2 53       	subi	r30, 0x32	; 50
    285a:	fa 4f       	sbci	r31, 0xFA	; 250
    285c:	80 81       	ld	r24, Z
    285e:	85 34       	cpi	r24, 0x45	; 69
    2860:	31 f4       	brne	.+12     	; 0x286e <__vector_13+0x18e>
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <UART+0x81>
    2868:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <UART+0x80>
    286c:	3c c1       	rjmp	.+632    	; 0x2ae6 <__vector_13+0x406>
    286e:	e2 e5       	ldi	r30, 0x52	; 82
    2870:	f6 e0       	ldi	r31, 0x06	; 6
    2872:	80 81       	ld	r24, Z
    2874:	8f 5f       	subi	r24, 0xFF	; 255
    2876:	80 83       	st	Z, r24
    2878:	36 c1       	rjmp	.+620    	; 0x2ae6 <__vector_13+0x406>
    287a:	a2 e5       	ldi	r26, 0x52	; 82
    287c:	b6 e0       	ldi	r27, 0x06	; 6
    287e:	ec 91       	ld	r30, X
    2880:	8c b1       	in	r24, 0x0c	; 12
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	ee 52       	subi	r30, 0x2E	; 46
    2886:	fa 4f       	sbci	r31, 0xFA	; 250
    2888:	80 83       	st	Z, r24
    288a:	ec 91       	ld	r30, X
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	ee 52       	subi	r30, 0x2E	; 46
    2890:	fa 4f       	sbci	r31, 0xFA	; 250
    2892:	80 81       	ld	r24, Z
    2894:	8a 30       	cpi	r24, 0x0A	; 10
    2896:	f1 f4       	brne	.+60     	; 0x28d4 <__vector_13+0x1f4>
    2898:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	e0 53       	subi	r30, 0x30	; 48
    28a0:	fa 4f       	sbci	r31, 0xFA	; 250
    28a2:	80 81       	ld	r24, Z
    28a4:	84 34       	cpi	r24, 0x44	; 68
    28a6:	b1 f4       	brne	.+44     	; 0x28d4 <__vector_13+0x1f4>
    28a8:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	e1 53       	subi	r30, 0x31	; 49
    28b0:	fa 4f       	sbci	r31, 0xFA	; 250
    28b2:	80 81       	ld	r24, Z
    28b4:	85 34       	cpi	r24, 0x45	; 69
    28b6:	71 f4       	brne	.+28     	; 0x28d4 <__vector_13+0x1f4>
    28b8:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	e2 53       	subi	r30, 0x32	; 50
    28c0:	fa 4f       	sbci	r31, 0xFA	; 250
    28c2:	80 81       	ld	r24, Z
    28c4:	83 35       	cpi	r24, 0x53	; 83
    28c6:	31 f4       	brne	.+12     	; 0x28d4 <__vector_13+0x1f4>
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <UART+0x81>
    28ce:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <UART+0x80>
    28d2:	09 c1       	rjmp	.+530    	; 0x2ae6 <__vector_13+0x406>
    28d4:	e2 e5       	ldi	r30, 0x52	; 82
    28d6:	f6 e0       	ldi	r31, 0x06	; 6
    28d8:	80 81       	ld	r24, Z
    28da:	8f 5f       	subi	r24, 0xFF	; 255
    28dc:	80 83       	st	Z, r24
    28de:	03 c1       	rjmp	.+518    	; 0x2ae6 <__vector_13+0x406>
    28e0:	a2 e5       	ldi	r26, 0x52	; 82
    28e2:	b6 e0       	ldi	r27, 0x06	; 6
    28e4:	ec 91       	ld	r30, X
    28e6:	8c b1       	in	r24, 0x0c	; 12
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	ee 52       	subi	r30, 0x2E	; 46
    28ec:	fa 4f       	sbci	r31, 0xFA	; 250
    28ee:	80 83       	st	Z, r24
    28f0:	ec 91       	ld	r30, X
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	ee 52       	subi	r30, 0x2E	; 46
    28f6:	fa 4f       	sbci	r31, 0xFA	; 250
    28f8:	80 81       	ld	r24, Z
    28fa:	8a 30       	cpi	r24, 0x0A	; 10
    28fc:	f1 f4       	brne	.+60     	; 0x293a <__vector_13+0x25a>
    28fe:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	e0 53       	subi	r30, 0x30	; 48
    2906:	fa 4f       	sbci	r31, 0xFA	; 250
    2908:	80 81       	ld	r24, Z
    290a:	8b 34       	cpi	r24, 0x4B	; 75
    290c:	b1 f4       	brne	.+44     	; 0x293a <__vector_13+0x25a>
    290e:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	e1 53       	subi	r30, 0x31	; 49
    2916:	fa 4f       	sbci	r31, 0xFA	; 250
    2918:	80 81       	ld	r24, Z
    291a:	8f 34       	cpi	r24, 0x4F	; 79
    291c:	71 f4       	brne	.+28     	; 0x293a <__vector_13+0x25a>
    291e:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	e3 53       	subi	r30, 0x33	; 51
    2926:	fa 4f       	sbci	r31, 0xFA	; 250
    2928:	80 81       	ld	r24, Z
    292a:	84 34       	cpi	r24, 0x44	; 68
    292c:	31 f4       	brne	.+12     	; 0x293a <__vector_13+0x25a>
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <UART+0x81>
    2934:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <UART+0x80>
    2938:	d6 c0       	rjmp	.+428    	; 0x2ae6 <__vector_13+0x406>
    293a:	e2 e5       	ldi	r30, 0x52	; 82
    293c:	f6 e0       	ldi	r31, 0x06	; 6
    293e:	80 81       	ld	r24, Z
    2940:	8f 5f       	subi	r24, 0xFF	; 255
    2942:	80 83       	st	Z, r24
    2944:	d0 c0       	rjmp	.+416    	; 0x2ae6 <__vector_13+0x406>
    2946:	a2 e5       	ldi	r26, 0x52	; 82
    2948:	b6 e0       	ldi	r27, 0x06	; 6
    294a:	ec 91       	ld	r30, X
    294c:	8c b1       	in	r24, 0x0c	; 12
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	ee 52       	subi	r30, 0x2E	; 46
    2952:	fa 4f       	sbci	r31, 0xFA	; 250
    2954:	80 83       	st	Z, r24
    2956:	ec 91       	ld	r30, X
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	ee 52       	subi	r30, 0x2E	; 46
    295c:	fa 4f       	sbci	r31, 0xFA	; 250
    295e:	80 81       	ld	r24, Z
    2960:	8a 30       	cpi	r24, 0x0A	; 10
    2962:	f1 f4       	brne	.+60     	; 0x29a0 <__vector_13+0x2c0>
    2964:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	e0 53       	subi	r30, 0x30	; 48
    296c:	fa 4f       	sbci	r31, 0xFA	; 250
    296e:	80 81       	ld	r24, Z
    2970:	89 37       	cpi	r24, 0x79	; 121
    2972:	b1 f4       	brne	.+44     	; 0x29a0 <__vector_13+0x2c0>
    2974:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	e1 53       	subi	r30, 0x31	; 49
    297c:	fa 4f       	sbci	r31, 0xFA	; 250
    297e:	80 81       	ld	r24, Z
    2980:	84 36       	cpi	r24, 0x64	; 100
    2982:	71 f4       	brne	.+28     	; 0x29a0 <__vector_13+0x2c0>
    2984:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	e2 53       	subi	r30, 0x32	; 50
    298c:	fa 4f       	sbci	r31, 0xFA	; 250
    298e:	80 81       	ld	r24, Z
    2990:	81 36       	cpi	r24, 0x61	; 97
    2992:	31 f4       	brne	.+12     	; 0x29a0 <__vector_13+0x2c0>
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <UART+0x81>
    299a:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <UART+0x80>
    299e:	a3 c0       	rjmp	.+326    	; 0x2ae6 <__vector_13+0x406>
    29a0:	e2 e5       	ldi	r30, 0x52	; 82
    29a2:	f6 e0       	ldi	r31, 0x06	; 6
    29a4:	80 81       	ld	r24, Z
    29a6:	8f 5f       	subi	r24, 0xFF	; 255
    29a8:	80 83       	st	Z, r24
    29aa:	9d c0       	rjmp	.+314    	; 0x2ae6 <__vector_13+0x406>
    29ac:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    29b0:	8c b1       	in	r24, 0x0c	; 12
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	ee 52       	subi	r30, 0x2E	; 46
    29b6:	fa 4f       	sbci	r31, 0xFA	; 250
    29b8:	80 83       	st	Z, r24
    29ba:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <UART+0x82>
    29be:	81 11       	cpse	r24, r1
    29c0:	1e c0       	rjmp	.+60     	; 0x29fe <__vector_13+0x31e>
    29c2:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	ef 52       	subi	r30, 0x2F	; 47
    29ca:	fa 4f       	sbci	r31, 0xFA	; 250
    29cc:	80 81       	ld	r24, Z
    29ce:	8d 30       	cpi	r24, 0x0D	; 13
    29d0:	81 f4       	brne	.+32     	; 0x29f2 <__vector_13+0x312>
    29d2:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	ee 52       	subi	r30, 0x2E	; 46
    29da:	fa 4f       	sbci	r31, 0xFA	; 250
    29dc:	80 81       	ld	r24, Z
    29de:	8a 30       	cpi	r24, 0x0A	; 10
    29e0:	41 f4       	brne	.+16     	; 0x29f2 <__vector_13+0x312>
    29e2:	e4 e5       	ldi	r30, 0x54	; 84
    29e4:	f6 e0       	ldi	r31, 0x06	; 6
    29e6:	80 81       	ld	r24, Z
    29e8:	8f 5f       	subi	r24, 0xFF	; 255
    29ea:	80 83       	st	Z, r24
    29ec:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <UART+0x80>
    29f0:	7a c0       	rjmp	.+244    	; 0x2ae6 <__vector_13+0x406>
    29f2:	e2 e5       	ldi	r30, 0x52	; 82
    29f4:	f6 e0       	ldi	r31, 0x06	; 6
    29f6:	80 81       	ld	r24, Z
    29f8:	8f 5f       	subi	r24, 0xFF	; 255
    29fa:	80 83       	st	Z, r24
    29fc:	74 c0       	rjmp	.+232    	; 0x2ae6 <__vector_13+0x406>
    29fe:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <UART+0x82>
    2a02:	81 30       	cpi	r24, 0x01	; 1
    2a04:	21 f5       	brne	.+72     	; 0x2a4e <__vector_13+0x36e>
    2a06:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	ee 52       	subi	r30, 0x2E	; 46
    2a0e:	fa 4f       	sbci	r31, 0xFA	; 250
    2a10:	80 81       	ld	r24, Z
    2a12:	8a 30       	cpi	r24, 0x0A	; 10
    2a14:	b1 f4       	brne	.+44     	; 0x2a42 <__vector_13+0x362>
    2a16:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	ef 52       	subi	r30, 0x2F	; 47
    2a1e:	fa 4f       	sbci	r31, 0xFA	; 250
    2a20:	80 81       	ld	r24, Z
    2a22:	8d 30       	cpi	r24, 0x0D	; 13
    2a24:	71 f4       	brne	.+28     	; 0x2a42 <__vector_13+0x362>
    2a26:	e2 ed       	ldi	r30, 0xD2	; 210
    2a28:	f5 e0       	ldi	r31, 0x05	; 5
    2a2a:	80 83       	st	Z, r24
    2a2c:	8a e0       	ldi	r24, 0x0A	; 10
    2a2e:	81 83       	std	Z+1, r24	; 0x01
    2a30:	e4 e5       	ldi	r30, 0x54	; 84
    2a32:	f6 e0       	ldi	r31, 0x06	; 6
    2a34:	80 81       	ld	r24, Z
    2a36:	8f 5f       	subi	r24, 0xFF	; 255
    2a38:	80 83       	st	Z, r24
    2a3a:	82 e0       	ldi	r24, 0x02	; 2
    2a3c:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <UART+0x80>
    2a40:	52 c0       	rjmp	.+164    	; 0x2ae6 <__vector_13+0x406>
    2a42:	e2 e5       	ldi	r30, 0x52	; 82
    2a44:	f6 e0       	ldi	r31, 0x06	; 6
    2a46:	80 81       	ld	r24, Z
    2a48:	8f 5f       	subi	r24, 0xFF	; 255
    2a4a:	80 83       	st	Z, r24
    2a4c:	4c c0       	rjmp	.+152    	; 0x2ae6 <__vector_13+0x406>
    2a4e:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <UART+0x82>
    2a52:	82 30       	cpi	r24, 0x02	; 2
    2a54:	09 f0       	breq	.+2      	; 0x2a58 <__vector_13+0x378>
    2a56:	47 c0       	rjmp	.+142    	; 0x2ae6 <__vector_13+0x406>
    2a58:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	ee 52       	subi	r30, 0x2E	; 46
    2a60:	fa 4f       	sbci	r31, 0xFA	; 250
    2a62:	80 81       	ld	r24, Z
    2a64:	8a 30       	cpi	r24, 0x0A	; 10
    2a66:	81 f4       	brne	.+32     	; 0x2a88 <__vector_13+0x3a8>
    2a68:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	ef 52       	subi	r30, 0x2F	; 47
    2a70:	fa 4f       	sbci	r31, 0xFA	; 250
    2a72:	80 81       	ld	r24, Z
    2a74:	8d 30       	cpi	r24, 0x0D	; 13
    2a76:	41 f4       	brne	.+16     	; 0x2a88 <__vector_13+0x3a8>
    2a78:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x82>
    2a7c:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <UART+0x80>
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <UART+0x81>
    2a86:	2f c0       	rjmp	.+94     	; 0x2ae6 <__vector_13+0x406>
    2a88:	e2 e5       	ldi	r30, 0x52	; 82
    2a8a:	f6 e0       	ldi	r31, 0x06	; 6
    2a8c:	80 81       	ld	r24, Z
    2a8e:	8f 5f       	subi	r24, 0xFF	; 255
    2a90:	80 83       	st	Z, r24
    2a92:	29 c0       	rjmp	.+82     	; 0x2ae6 <__vector_13+0x406>
    2a94:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2a98:	8c b1       	in	r24, 0x0c	; 12
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	ee 52       	subi	r30, 0x2E	; 46
    2a9e:	fa 4f       	sbci	r31, 0xFA	; 250
    2aa0:	80 83       	st	Z, r24
    2aa2:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <UART>
    2aa6:	8b 32       	cpi	r24, 0x2B	; 43
    2aa8:	19 f0       	breq	.+6      	; 0x2ab0 <__vector_13+0x3d0>
    2aaa:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <UART+0x80>
    2aae:	1b c0       	rjmp	.+54     	; 0x2ae6 <__vector_13+0x406>
    2ab0:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	ef 52       	subi	r30, 0x2F	; 47
    2ab8:	fa 4f       	sbci	r31, 0xFA	; 250
    2aba:	80 81       	ld	r24, Z
    2abc:	8d 30       	cpi	r24, 0x0D	; 13
    2abe:	71 f4       	brne	.+28     	; 0x2adc <__vector_13+0x3fc>
    2ac0:	e0 91 52 06 	lds	r30, 0x0652	; 0x800652 <UART+0x80>
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	ee 52       	subi	r30, 0x2E	; 46
    2ac8:	fa 4f       	sbci	r31, 0xFA	; 250
    2aca:	80 81       	ld	r24, Z
    2acc:	8a 30       	cpi	r24, 0x0A	; 10
    2ace:	31 f4       	brne	.+12     	; 0x2adc <__vector_13+0x3fc>
    2ad0:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <UART+0x80>
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <UART+0x81>
    2ada:	05 c0       	rjmp	.+10     	; 0x2ae6 <__vector_13+0x406>
    2adc:	e2 e5       	ldi	r30, 0x52	; 82
    2ade:	f6 e0       	ldi	r31, 0x06	; 6
    2ae0:	80 81       	ld	r24, Z
    2ae2:	8f 5f       	subi	r24, 0xFF	; 255
    2ae4:	80 83       	st	Z, r24
    2ae6:	ff 91       	pop	r31
    2ae8:	ef 91       	pop	r30
    2aea:	bf 91       	pop	r27
    2aec:	af 91       	pop	r26
    2aee:	9f 91       	pop	r25
    2af0:	8f 91       	pop	r24
    2af2:	0f 90       	pop	r0
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	0f 90       	pop	r0
    2af8:	1f 90       	pop	r1
    2afa:	18 95       	reti

00002afc <write_char_UART>:

void write_char_UART(char data) {
	while(!(UCSRA & (1<<UDRE)));
    2afc:	5d 9b       	sbis	0x0b, 5	; 11
    2afe:	fe cf       	rjmp	.-4      	; 0x2afc <write_char_UART>
	UDR=data;
    2b00:	8c b9       	out	0x0c, r24	; 12
    2b02:	08 95       	ret

00002b04 <send_command_UART>:
}

void send_command_UART(char *str) {
    2b04:	cf 93       	push	r28
    2b06:	df 93       	push	r29
    2b08:	ec 01       	movw	r28, r24
	while (*str != '\0') {
    2b0a:	88 81       	ld	r24, Y
    2b0c:	88 23       	and	r24, r24
    2b0e:	31 f0       	breq	.+12     	; 0x2b1c <send_command_UART+0x18>
    2b10:	21 96       	adiw	r28, 0x01	; 1
		write_char_UART(*str);
    2b12:	0e 94 7e 15 	call	0x2afc	; 0x2afc <write_char_UART>
	while(!(UCSRA & (1<<UDRE)));
	UDR=data;
}

void send_command_UART(char *str) {
	while (*str != '\0') {
    2b16:	89 91       	ld	r24, Y+
    2b18:	81 11       	cpse	r24, r1
    2b1a:	fb cf       	rjmp	.-10     	; 0x2b12 <send_command_UART+0xe>
		write_char_UART(*str);
		++str;
	}
}
    2b1c:	df 91       	pop	r29
    2b1e:	cf 91       	pop	r28
    2b20:	08 95       	ret

00002b22 <clear_uart_rx_message>:

void clear_uart_rx_message() {
	UART.message_received = false;
    2b22:	10 92 53 06 	sts	0x0653, r1	; 0x800653 <UART+0x81>
	memset(UART.rx_buffer,0,RX_BUFFER_LENGTH);
    2b26:	80 e8       	ldi	r24, 0x80	; 128
    2b28:	e2 ed       	ldi	r30, 0xD2	; 210
    2b2a:	f5 e0       	ldi	r31, 0x05	; 5
    2b2c:	df 01       	movw	r26, r30
    2b2e:	1d 92       	st	X+, r1
    2b30:	8a 95       	dec	r24
    2b32:	e9 f7       	brne	.-6      	; 0x2b2e <clear_uart_rx_message+0xc>
    2b34:	08 95       	ret

00002b36 <Init_UART>:
			break;				
	}
}

void Init_UART() {
	UBRRH = (unsigned char) (3 >> 8);
    2b36:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) 3;
    2b38:	83 e0       	ldi	r24, 0x03	; 3
    2b3a:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    2b3c:	88 e9       	ldi	r24, 0x98	; 152
    2b3e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
    2b40:	8e e8       	ldi	r24, 0x8E	; 142
    2b42:	80 bd       	out	0x20, r24	; 32
	clear_uart_rx_message();
    2b44:	0e 94 91 15 	call	0x2b22	; 0x2b22 <clear_uart_rx_message>
	UART.cr_lf_counter = 0;
    2b48:	10 92 54 06 	sts	0x0654, r1	; 0x800654 <UART+0x82>
	UART.rx_ptr = 0;
    2b4c:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <UART+0x80>
	UART.wait_for_message = 0;
    2b50:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <UART+0x83>
    2b54:	08 95       	ret

00002b56 <__subsf3>:
    2b56:	50 58       	subi	r21, 0x80	; 128

00002b58 <__addsf3>:
    2b58:	bb 27       	eor	r27, r27
    2b5a:	aa 27       	eor	r26, r26
    2b5c:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__addsf3x>
    2b60:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__fp_round>
    2b64:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__fp_pscA>
    2b68:	38 f0       	brcs	.+14     	; 0x2b78 <__addsf3+0x20>
    2b6a:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__fp_pscB>
    2b6e:	20 f0       	brcs	.+8      	; 0x2b78 <__addsf3+0x20>
    2b70:	39 f4       	brne	.+14     	; 0x2b80 <__addsf3+0x28>
    2b72:	9f 3f       	cpi	r25, 0xFF	; 255
    2b74:	19 f4       	brne	.+6      	; 0x2b7c <__addsf3+0x24>
    2b76:	26 f4       	brtc	.+8      	; 0x2b80 <__addsf3+0x28>
    2b78:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__fp_nan>
    2b7c:	0e f4       	brtc	.+2      	; 0x2b80 <__addsf3+0x28>
    2b7e:	e0 95       	com	r30
    2b80:	e7 fb       	bst	r30, 7
    2b82:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__fp_inf>

00002b86 <__addsf3x>:
    2b86:	e9 2f       	mov	r30, r25
    2b88:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__fp_split3>
    2b8c:	58 f3       	brcs	.-42     	; 0x2b64 <__addsf3+0xc>
    2b8e:	ba 17       	cp	r27, r26
    2b90:	62 07       	cpc	r22, r18
    2b92:	73 07       	cpc	r23, r19
    2b94:	84 07       	cpc	r24, r20
    2b96:	95 07       	cpc	r25, r21
    2b98:	20 f0       	brcs	.+8      	; 0x2ba2 <__addsf3x+0x1c>
    2b9a:	79 f4       	brne	.+30     	; 0x2bba <__addsf3x+0x34>
    2b9c:	a6 f5       	brtc	.+104    	; 0x2c06 <__addsf3x+0x80>
    2b9e:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__fp_zero>
    2ba2:	0e f4       	brtc	.+2      	; 0x2ba6 <__addsf3x+0x20>
    2ba4:	e0 95       	com	r30
    2ba6:	0b 2e       	mov	r0, r27
    2ba8:	ba 2f       	mov	r27, r26
    2baa:	a0 2d       	mov	r26, r0
    2bac:	0b 01       	movw	r0, r22
    2bae:	b9 01       	movw	r22, r18
    2bb0:	90 01       	movw	r18, r0
    2bb2:	0c 01       	movw	r0, r24
    2bb4:	ca 01       	movw	r24, r20
    2bb6:	a0 01       	movw	r20, r0
    2bb8:	11 24       	eor	r1, r1
    2bba:	ff 27       	eor	r31, r31
    2bbc:	59 1b       	sub	r21, r25
    2bbe:	99 f0       	breq	.+38     	; 0x2be6 <__addsf3x+0x60>
    2bc0:	59 3f       	cpi	r21, 0xF9	; 249
    2bc2:	50 f4       	brcc	.+20     	; 0x2bd8 <__addsf3x+0x52>
    2bc4:	50 3e       	cpi	r21, 0xE0	; 224
    2bc6:	68 f1       	brcs	.+90     	; 0x2c22 <__addsf3x+0x9c>
    2bc8:	1a 16       	cp	r1, r26
    2bca:	f0 40       	sbci	r31, 0x00	; 0
    2bcc:	a2 2f       	mov	r26, r18
    2bce:	23 2f       	mov	r18, r19
    2bd0:	34 2f       	mov	r19, r20
    2bd2:	44 27       	eor	r20, r20
    2bd4:	58 5f       	subi	r21, 0xF8	; 248
    2bd6:	f3 cf       	rjmp	.-26     	; 0x2bbe <__addsf3x+0x38>
    2bd8:	46 95       	lsr	r20
    2bda:	37 95       	ror	r19
    2bdc:	27 95       	ror	r18
    2bde:	a7 95       	ror	r26
    2be0:	f0 40       	sbci	r31, 0x00	; 0
    2be2:	53 95       	inc	r21
    2be4:	c9 f7       	brne	.-14     	; 0x2bd8 <__addsf3x+0x52>
    2be6:	7e f4       	brtc	.+30     	; 0x2c06 <__addsf3x+0x80>
    2be8:	1f 16       	cp	r1, r31
    2bea:	ba 0b       	sbc	r27, r26
    2bec:	62 0b       	sbc	r22, r18
    2bee:	73 0b       	sbc	r23, r19
    2bf0:	84 0b       	sbc	r24, r20
    2bf2:	ba f0       	brmi	.+46     	; 0x2c22 <__addsf3x+0x9c>
    2bf4:	91 50       	subi	r25, 0x01	; 1
    2bf6:	a1 f0       	breq	.+40     	; 0x2c20 <__addsf3x+0x9a>
    2bf8:	ff 0f       	add	r31, r31
    2bfa:	bb 1f       	adc	r27, r27
    2bfc:	66 1f       	adc	r22, r22
    2bfe:	77 1f       	adc	r23, r23
    2c00:	88 1f       	adc	r24, r24
    2c02:	c2 f7       	brpl	.-16     	; 0x2bf4 <__addsf3x+0x6e>
    2c04:	0e c0       	rjmp	.+28     	; 0x2c22 <__addsf3x+0x9c>
    2c06:	ba 0f       	add	r27, r26
    2c08:	62 1f       	adc	r22, r18
    2c0a:	73 1f       	adc	r23, r19
    2c0c:	84 1f       	adc	r24, r20
    2c0e:	48 f4       	brcc	.+18     	; 0x2c22 <__addsf3x+0x9c>
    2c10:	87 95       	ror	r24
    2c12:	77 95       	ror	r23
    2c14:	67 95       	ror	r22
    2c16:	b7 95       	ror	r27
    2c18:	f7 95       	ror	r31
    2c1a:	9e 3f       	cpi	r25, 0xFE	; 254
    2c1c:	08 f0       	brcs	.+2      	; 0x2c20 <__addsf3x+0x9a>
    2c1e:	b0 cf       	rjmp	.-160    	; 0x2b80 <__addsf3+0x28>
    2c20:	93 95       	inc	r25
    2c22:	88 0f       	add	r24, r24
    2c24:	08 f0       	brcs	.+2      	; 0x2c28 <__addsf3x+0xa2>
    2c26:	99 27       	eor	r25, r25
    2c28:	ee 0f       	add	r30, r30
    2c2a:	97 95       	ror	r25
    2c2c:	87 95       	ror	r24
    2c2e:	08 95       	ret

00002c30 <__fixunssfsi>:
    2c30:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__fp_splitA>
    2c34:	88 f0       	brcs	.+34     	; 0x2c58 <__fixunssfsi+0x28>
    2c36:	9f 57       	subi	r25, 0x7F	; 127
    2c38:	98 f0       	brcs	.+38     	; 0x2c60 <__fixunssfsi+0x30>
    2c3a:	b9 2f       	mov	r27, r25
    2c3c:	99 27       	eor	r25, r25
    2c3e:	b7 51       	subi	r27, 0x17	; 23
    2c40:	b0 f0       	brcs	.+44     	; 0x2c6e <__fixunssfsi+0x3e>
    2c42:	e1 f0       	breq	.+56     	; 0x2c7c <__fixunssfsi+0x4c>
    2c44:	66 0f       	add	r22, r22
    2c46:	77 1f       	adc	r23, r23
    2c48:	88 1f       	adc	r24, r24
    2c4a:	99 1f       	adc	r25, r25
    2c4c:	1a f0       	brmi	.+6      	; 0x2c54 <__fixunssfsi+0x24>
    2c4e:	ba 95       	dec	r27
    2c50:	c9 f7       	brne	.-14     	; 0x2c44 <__fixunssfsi+0x14>
    2c52:	14 c0       	rjmp	.+40     	; 0x2c7c <__fixunssfsi+0x4c>
    2c54:	b1 30       	cpi	r27, 0x01	; 1
    2c56:	91 f0       	breq	.+36     	; 0x2c7c <__fixunssfsi+0x4c>
    2c58:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__fp_zero>
    2c5c:	b1 e0       	ldi	r27, 0x01	; 1
    2c5e:	08 95       	ret
    2c60:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__fp_zero>
    2c64:	67 2f       	mov	r22, r23
    2c66:	78 2f       	mov	r23, r24
    2c68:	88 27       	eor	r24, r24
    2c6a:	b8 5f       	subi	r27, 0xF8	; 248
    2c6c:	39 f0       	breq	.+14     	; 0x2c7c <__fixunssfsi+0x4c>
    2c6e:	b9 3f       	cpi	r27, 0xF9	; 249
    2c70:	cc f3       	brlt	.-14     	; 0x2c64 <__fixunssfsi+0x34>
    2c72:	86 95       	lsr	r24
    2c74:	77 95       	ror	r23
    2c76:	67 95       	ror	r22
    2c78:	b3 95       	inc	r27
    2c7a:	d9 f7       	brne	.-10     	; 0x2c72 <__fixunssfsi+0x42>
    2c7c:	3e f4       	brtc	.+14     	; 0x2c8c <__fixunssfsi+0x5c>
    2c7e:	90 95       	com	r25
    2c80:	80 95       	com	r24
    2c82:	70 95       	com	r23
    2c84:	61 95       	neg	r22
    2c86:	7f 4f       	sbci	r23, 0xFF	; 255
    2c88:	8f 4f       	sbci	r24, 0xFF	; 255
    2c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8c:	08 95       	ret

00002c8e <__floatunsisf>:
    2c8e:	e8 94       	clt
    2c90:	09 c0       	rjmp	.+18     	; 0x2ca4 <__floatsisf+0x12>

00002c92 <__floatsisf>:
    2c92:	97 fb       	bst	r25, 7
    2c94:	3e f4       	brtc	.+14     	; 0x2ca4 <__floatsisf+0x12>
    2c96:	90 95       	com	r25
    2c98:	80 95       	com	r24
    2c9a:	70 95       	com	r23
    2c9c:	61 95       	neg	r22
    2c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ca4:	99 23       	and	r25, r25
    2ca6:	a9 f0       	breq	.+42     	; 0x2cd2 <__floatsisf+0x40>
    2ca8:	f9 2f       	mov	r31, r25
    2caa:	96 e9       	ldi	r25, 0x96	; 150
    2cac:	bb 27       	eor	r27, r27
    2cae:	93 95       	inc	r25
    2cb0:	f6 95       	lsr	r31
    2cb2:	87 95       	ror	r24
    2cb4:	77 95       	ror	r23
    2cb6:	67 95       	ror	r22
    2cb8:	b7 95       	ror	r27
    2cba:	f1 11       	cpse	r31, r1
    2cbc:	f8 cf       	rjmp	.-16     	; 0x2cae <__floatsisf+0x1c>
    2cbe:	fa f4       	brpl	.+62     	; 0x2cfe <__floatsisf+0x6c>
    2cc0:	bb 0f       	add	r27, r27
    2cc2:	11 f4       	brne	.+4      	; 0x2cc8 <__floatsisf+0x36>
    2cc4:	60 ff       	sbrs	r22, 0
    2cc6:	1b c0       	rjmp	.+54     	; 0x2cfe <__floatsisf+0x6c>
    2cc8:	6f 5f       	subi	r22, 0xFF	; 255
    2cca:	7f 4f       	sbci	r23, 0xFF	; 255
    2ccc:	8f 4f       	sbci	r24, 0xFF	; 255
    2cce:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd0:	16 c0       	rjmp	.+44     	; 0x2cfe <__floatsisf+0x6c>
    2cd2:	88 23       	and	r24, r24
    2cd4:	11 f0       	breq	.+4      	; 0x2cda <__floatsisf+0x48>
    2cd6:	96 e9       	ldi	r25, 0x96	; 150
    2cd8:	11 c0       	rjmp	.+34     	; 0x2cfc <__floatsisf+0x6a>
    2cda:	77 23       	and	r23, r23
    2cdc:	21 f0       	breq	.+8      	; 0x2ce6 <__floatsisf+0x54>
    2cde:	9e e8       	ldi	r25, 0x8E	; 142
    2ce0:	87 2f       	mov	r24, r23
    2ce2:	76 2f       	mov	r23, r22
    2ce4:	05 c0       	rjmp	.+10     	; 0x2cf0 <__floatsisf+0x5e>
    2ce6:	66 23       	and	r22, r22
    2ce8:	71 f0       	breq	.+28     	; 0x2d06 <__floatsisf+0x74>
    2cea:	96 e8       	ldi	r25, 0x86	; 134
    2cec:	86 2f       	mov	r24, r22
    2cee:	70 e0       	ldi	r23, 0x00	; 0
    2cf0:	60 e0       	ldi	r22, 0x00	; 0
    2cf2:	2a f0       	brmi	.+10     	; 0x2cfe <__floatsisf+0x6c>
    2cf4:	9a 95       	dec	r25
    2cf6:	66 0f       	add	r22, r22
    2cf8:	77 1f       	adc	r23, r23
    2cfa:	88 1f       	adc	r24, r24
    2cfc:	da f7       	brpl	.-10     	; 0x2cf4 <__floatsisf+0x62>
    2cfe:	88 0f       	add	r24, r24
    2d00:	96 95       	lsr	r25
    2d02:	87 95       	ror	r24
    2d04:	97 f9       	bld	r25, 7
    2d06:	08 95       	ret

00002d08 <__fp_inf>:
    2d08:	97 f9       	bld	r25, 7
    2d0a:	9f 67       	ori	r25, 0x7F	; 127
    2d0c:	80 e8       	ldi	r24, 0x80	; 128
    2d0e:	70 e0       	ldi	r23, 0x00	; 0
    2d10:	60 e0       	ldi	r22, 0x00	; 0
    2d12:	08 95       	ret

00002d14 <__fp_nan>:
    2d14:	9f ef       	ldi	r25, 0xFF	; 255
    2d16:	80 ec       	ldi	r24, 0xC0	; 192
    2d18:	08 95       	ret

00002d1a <__fp_pscA>:
    2d1a:	00 24       	eor	r0, r0
    2d1c:	0a 94       	dec	r0
    2d1e:	16 16       	cp	r1, r22
    2d20:	17 06       	cpc	r1, r23
    2d22:	18 06       	cpc	r1, r24
    2d24:	09 06       	cpc	r0, r25
    2d26:	08 95       	ret

00002d28 <__fp_pscB>:
    2d28:	00 24       	eor	r0, r0
    2d2a:	0a 94       	dec	r0
    2d2c:	12 16       	cp	r1, r18
    2d2e:	13 06       	cpc	r1, r19
    2d30:	14 06       	cpc	r1, r20
    2d32:	05 06       	cpc	r0, r21
    2d34:	08 95       	ret

00002d36 <__fp_round>:
    2d36:	09 2e       	mov	r0, r25
    2d38:	03 94       	inc	r0
    2d3a:	00 0c       	add	r0, r0
    2d3c:	11 f4       	brne	.+4      	; 0x2d42 <__fp_round+0xc>
    2d3e:	88 23       	and	r24, r24
    2d40:	52 f0       	brmi	.+20     	; 0x2d56 <__fp_round+0x20>
    2d42:	bb 0f       	add	r27, r27
    2d44:	40 f4       	brcc	.+16     	; 0x2d56 <__fp_round+0x20>
    2d46:	bf 2b       	or	r27, r31
    2d48:	11 f4       	brne	.+4      	; 0x2d4e <__fp_round+0x18>
    2d4a:	60 ff       	sbrs	r22, 0
    2d4c:	04 c0       	rjmp	.+8      	; 0x2d56 <__fp_round+0x20>
    2d4e:	6f 5f       	subi	r22, 0xFF	; 255
    2d50:	7f 4f       	sbci	r23, 0xFF	; 255
    2d52:	8f 4f       	sbci	r24, 0xFF	; 255
    2d54:	9f 4f       	sbci	r25, 0xFF	; 255
    2d56:	08 95       	ret

00002d58 <__fp_split3>:
    2d58:	57 fd       	sbrc	r21, 7
    2d5a:	90 58       	subi	r25, 0x80	; 128
    2d5c:	44 0f       	add	r20, r20
    2d5e:	55 1f       	adc	r21, r21
    2d60:	59 f0       	breq	.+22     	; 0x2d78 <__fp_splitA+0x10>
    2d62:	5f 3f       	cpi	r21, 0xFF	; 255
    2d64:	71 f0       	breq	.+28     	; 0x2d82 <__fp_splitA+0x1a>
    2d66:	47 95       	ror	r20

00002d68 <__fp_splitA>:
    2d68:	88 0f       	add	r24, r24
    2d6a:	97 fb       	bst	r25, 7
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	61 f0       	breq	.+24     	; 0x2d88 <__fp_splitA+0x20>
    2d70:	9f 3f       	cpi	r25, 0xFF	; 255
    2d72:	79 f0       	breq	.+30     	; 0x2d92 <__fp_splitA+0x2a>
    2d74:	87 95       	ror	r24
    2d76:	08 95       	ret
    2d78:	12 16       	cp	r1, r18
    2d7a:	13 06       	cpc	r1, r19
    2d7c:	14 06       	cpc	r1, r20
    2d7e:	55 1f       	adc	r21, r21
    2d80:	f2 cf       	rjmp	.-28     	; 0x2d66 <__fp_split3+0xe>
    2d82:	46 95       	lsr	r20
    2d84:	f1 df       	rcall	.-30     	; 0x2d68 <__fp_splitA>
    2d86:	08 c0       	rjmp	.+16     	; 0x2d98 <__fp_splitA+0x30>
    2d88:	16 16       	cp	r1, r22
    2d8a:	17 06       	cpc	r1, r23
    2d8c:	18 06       	cpc	r1, r24
    2d8e:	99 1f       	adc	r25, r25
    2d90:	f1 cf       	rjmp	.-30     	; 0x2d74 <__fp_splitA+0xc>
    2d92:	86 95       	lsr	r24
    2d94:	71 05       	cpc	r23, r1
    2d96:	61 05       	cpc	r22, r1
    2d98:	08 94       	sec
    2d9a:	08 95       	ret

00002d9c <__fp_zero>:
    2d9c:	e8 94       	clt

00002d9e <__fp_szero>:
    2d9e:	bb 27       	eor	r27, r27
    2da0:	66 27       	eor	r22, r22
    2da2:	77 27       	eor	r23, r23
    2da4:	cb 01       	movw	r24, r22
    2da6:	97 f9       	bld	r25, 7
    2da8:	08 95       	ret

00002daa <__mulsf3>:
    2daa:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__mulsf3x>
    2dae:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__fp_round>
    2db2:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__fp_pscA>
    2db6:	38 f0       	brcs	.+14     	; 0x2dc6 <__mulsf3+0x1c>
    2db8:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__fp_pscB>
    2dbc:	20 f0       	brcs	.+8      	; 0x2dc6 <__mulsf3+0x1c>
    2dbe:	95 23       	and	r25, r21
    2dc0:	11 f0       	breq	.+4      	; 0x2dc6 <__mulsf3+0x1c>
    2dc2:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__fp_inf>
    2dc6:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__fp_nan>
    2dca:	11 24       	eor	r1, r1
    2dcc:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__fp_szero>

00002dd0 <__mulsf3x>:
    2dd0:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__fp_split3>
    2dd4:	70 f3       	brcs	.-36     	; 0x2db2 <__mulsf3+0x8>

00002dd6 <__mulsf3_pse>:
    2dd6:	95 9f       	mul	r25, r21
    2dd8:	c1 f3       	breq	.-16     	; 0x2dca <__mulsf3+0x20>
    2dda:	95 0f       	add	r25, r21
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	55 1f       	adc	r21, r21
    2de0:	62 9f       	mul	r22, r18
    2de2:	f0 01       	movw	r30, r0
    2de4:	72 9f       	mul	r23, r18
    2de6:	bb 27       	eor	r27, r27
    2de8:	f0 0d       	add	r31, r0
    2dea:	b1 1d       	adc	r27, r1
    2dec:	63 9f       	mul	r22, r19
    2dee:	aa 27       	eor	r26, r26
    2df0:	f0 0d       	add	r31, r0
    2df2:	b1 1d       	adc	r27, r1
    2df4:	aa 1f       	adc	r26, r26
    2df6:	64 9f       	mul	r22, r20
    2df8:	66 27       	eor	r22, r22
    2dfa:	b0 0d       	add	r27, r0
    2dfc:	a1 1d       	adc	r26, r1
    2dfe:	66 1f       	adc	r22, r22
    2e00:	82 9f       	mul	r24, r18
    2e02:	22 27       	eor	r18, r18
    2e04:	b0 0d       	add	r27, r0
    2e06:	a1 1d       	adc	r26, r1
    2e08:	62 1f       	adc	r22, r18
    2e0a:	73 9f       	mul	r23, r19
    2e0c:	b0 0d       	add	r27, r0
    2e0e:	a1 1d       	adc	r26, r1
    2e10:	62 1f       	adc	r22, r18
    2e12:	83 9f       	mul	r24, r19
    2e14:	a0 0d       	add	r26, r0
    2e16:	61 1d       	adc	r22, r1
    2e18:	22 1f       	adc	r18, r18
    2e1a:	74 9f       	mul	r23, r20
    2e1c:	33 27       	eor	r19, r19
    2e1e:	a0 0d       	add	r26, r0
    2e20:	61 1d       	adc	r22, r1
    2e22:	23 1f       	adc	r18, r19
    2e24:	84 9f       	mul	r24, r20
    2e26:	60 0d       	add	r22, r0
    2e28:	21 1d       	adc	r18, r1
    2e2a:	82 2f       	mov	r24, r18
    2e2c:	76 2f       	mov	r23, r22
    2e2e:	6a 2f       	mov	r22, r26
    2e30:	11 24       	eor	r1, r1
    2e32:	9f 57       	subi	r25, 0x7F	; 127
    2e34:	50 40       	sbci	r21, 0x00	; 0
    2e36:	9a f0       	brmi	.+38     	; 0x2e5e <__mulsf3_pse+0x88>
    2e38:	f1 f0       	breq	.+60     	; 0x2e76 <__mulsf3_pse+0xa0>
    2e3a:	88 23       	and	r24, r24
    2e3c:	4a f0       	brmi	.+18     	; 0x2e50 <__mulsf3_pse+0x7a>
    2e3e:	ee 0f       	add	r30, r30
    2e40:	ff 1f       	adc	r31, r31
    2e42:	bb 1f       	adc	r27, r27
    2e44:	66 1f       	adc	r22, r22
    2e46:	77 1f       	adc	r23, r23
    2e48:	88 1f       	adc	r24, r24
    2e4a:	91 50       	subi	r25, 0x01	; 1
    2e4c:	50 40       	sbci	r21, 0x00	; 0
    2e4e:	a9 f7       	brne	.-22     	; 0x2e3a <__mulsf3_pse+0x64>
    2e50:	9e 3f       	cpi	r25, 0xFE	; 254
    2e52:	51 05       	cpc	r21, r1
    2e54:	80 f0       	brcs	.+32     	; 0x2e76 <__mulsf3_pse+0xa0>
    2e56:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__fp_inf>
    2e5a:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__fp_szero>
    2e5e:	5f 3f       	cpi	r21, 0xFF	; 255
    2e60:	e4 f3       	brlt	.-8      	; 0x2e5a <__mulsf3_pse+0x84>
    2e62:	98 3e       	cpi	r25, 0xE8	; 232
    2e64:	d4 f3       	brlt	.-12     	; 0x2e5a <__mulsf3_pse+0x84>
    2e66:	86 95       	lsr	r24
    2e68:	77 95       	ror	r23
    2e6a:	67 95       	ror	r22
    2e6c:	b7 95       	ror	r27
    2e6e:	f7 95       	ror	r31
    2e70:	e7 95       	ror	r30
    2e72:	9f 5f       	subi	r25, 0xFF	; 255
    2e74:	c1 f7       	brne	.-16     	; 0x2e66 <__mulsf3_pse+0x90>
    2e76:	fe 2b       	or	r31, r30
    2e78:	88 0f       	add	r24, r24
    2e7a:	91 1d       	adc	r25, r1
    2e7c:	96 95       	lsr	r25
    2e7e:	87 95       	ror	r24
    2e80:	97 f9       	bld	r25, 7
    2e82:	08 95       	ret

00002e84 <pow>:
    2e84:	fa 01       	movw	r30, r20
    2e86:	ee 0f       	add	r30, r30
    2e88:	ff 1f       	adc	r31, r31
    2e8a:	30 96       	adiw	r30, 0x00	; 0
    2e8c:	21 05       	cpc	r18, r1
    2e8e:	31 05       	cpc	r19, r1
    2e90:	a1 f1       	breq	.+104    	; 0x2efa <pow+0x76>
    2e92:	61 15       	cp	r22, r1
    2e94:	71 05       	cpc	r23, r1
    2e96:	61 f4       	brne	.+24     	; 0x2eb0 <pow+0x2c>
    2e98:	80 38       	cpi	r24, 0x80	; 128
    2e9a:	bf e3       	ldi	r27, 0x3F	; 63
    2e9c:	9b 07       	cpc	r25, r27
    2e9e:	49 f1       	breq	.+82     	; 0x2ef2 <pow+0x6e>
    2ea0:	68 94       	set
    2ea2:	90 38       	cpi	r25, 0x80	; 128
    2ea4:	81 05       	cpc	r24, r1
    2ea6:	61 f0       	breq	.+24     	; 0x2ec0 <pow+0x3c>
    2ea8:	80 38       	cpi	r24, 0x80	; 128
    2eaa:	bf ef       	ldi	r27, 0xFF	; 255
    2eac:	9b 07       	cpc	r25, r27
    2eae:	41 f0       	breq	.+16     	; 0x2ec0 <pow+0x3c>
    2eb0:	99 23       	and	r25, r25
    2eb2:	4a f5       	brpl	.+82     	; 0x2f06 <pow+0x82>
    2eb4:	ff 3f       	cpi	r31, 0xFF	; 255
    2eb6:	e1 05       	cpc	r30, r1
    2eb8:	31 05       	cpc	r19, r1
    2eba:	21 05       	cpc	r18, r1
    2ebc:	19 f1       	breq	.+70     	; 0x2f04 <pow+0x80>
    2ebe:	e8 94       	clt
    2ec0:	08 94       	sec
    2ec2:	e7 95       	ror	r30
    2ec4:	d9 01       	movw	r26, r18
    2ec6:	aa 23       	and	r26, r26
    2ec8:	29 f4       	brne	.+10     	; 0x2ed4 <pow+0x50>
    2eca:	ab 2f       	mov	r26, r27
    2ecc:	be 2f       	mov	r27, r30
    2ece:	f8 5f       	subi	r31, 0xF8	; 248
    2ed0:	d0 f3       	brcs	.-12     	; 0x2ec6 <pow+0x42>
    2ed2:	10 c0       	rjmp	.+32     	; 0x2ef4 <pow+0x70>
    2ed4:	ff 5f       	subi	r31, 0xFF	; 255
    2ed6:	70 f4       	brcc	.+28     	; 0x2ef4 <pow+0x70>
    2ed8:	a6 95       	lsr	r26
    2eda:	e0 f7       	brcc	.-8      	; 0x2ed4 <pow+0x50>
    2edc:	f7 39       	cpi	r31, 0x97	; 151
    2ede:	50 f0       	brcs	.+20     	; 0x2ef4 <pow+0x70>
    2ee0:	19 f0       	breq	.+6      	; 0x2ee8 <pow+0x64>
    2ee2:	ff 3a       	cpi	r31, 0xAF	; 175
    2ee4:	38 f4       	brcc	.+14     	; 0x2ef4 <pow+0x70>
    2ee6:	9f 77       	andi	r25, 0x7F	; 127
    2ee8:	9f 93       	push	r25
    2eea:	0d d0       	rcall	.+26     	; 0x2f06 <pow+0x82>
    2eec:	0f 90       	pop	r0
    2eee:	07 fc       	sbrc	r0, 7
    2ef0:	90 58       	subi	r25, 0x80	; 128
    2ef2:	08 95       	ret
    2ef4:	46 f0       	brts	.+16     	; 0x2f06 <pow+0x82>
    2ef6:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__fp_nan>
    2efa:	60 e0       	ldi	r22, 0x00	; 0
    2efc:	70 e0       	ldi	r23, 0x00	; 0
    2efe:	80 e8       	ldi	r24, 0x80	; 128
    2f00:	9f e3       	ldi	r25, 0x3F	; 63
    2f02:	08 95       	ret
    2f04:	4f e7       	ldi	r20, 0x7F	; 127
    2f06:	9f 77       	andi	r25, 0x7F	; 127
    2f08:	5f 93       	push	r21
    2f0a:	4f 93       	push	r20
    2f0c:	3f 93       	push	r19
    2f0e:	2f 93       	push	r18
    2f10:	0e 94 3d 18 	call	0x307a	; 0x307a <log>
    2f14:	2f 91       	pop	r18
    2f16:	3f 91       	pop	r19
    2f18:	4f 91       	pop	r20
    2f1a:	5f 91       	pop	r21
    2f1c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__mulsf3>
    2f20:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <exp>
    2f24:	29 f4       	brne	.+10     	; 0x2f30 <pow+0xac>
    2f26:	16 f0       	brts	.+4      	; 0x2f2c <pow+0xa8>
    2f28:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__fp_inf>
    2f2c:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__fp_zero>
    2f30:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__fp_nan>

00002f34 <exp>:
    2f34:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__fp_splitA>
    2f38:	a8 f3       	brcs	.-22     	; 0x2f24 <pow+0xa0>
    2f3a:	96 38       	cpi	r25, 0x86	; 134
    2f3c:	a0 f7       	brcc	.-24     	; 0x2f26 <pow+0xa2>
    2f3e:	07 f8       	bld	r0, 7
    2f40:	0f 92       	push	r0
    2f42:	e8 94       	clt
    2f44:	2b e3       	ldi	r18, 0x3B	; 59
    2f46:	3a ea       	ldi	r19, 0xAA	; 170
    2f48:	48 eb       	ldi	r20, 0xB8	; 184
    2f4a:	5f e7       	ldi	r21, 0x7F	; 127
    2f4c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__mulsf3_pse>
    2f50:	0f 92       	push	r0
    2f52:	0f 92       	push	r0
    2f54:	0f 92       	push	r0
    2f56:	4d b7       	in	r20, 0x3d	; 61
    2f58:	5e b7       	in	r21, 0x3e	; 62
    2f5a:	0f 92       	push	r0
    2f5c:	0e 94 85 18 	call	0x310a	; 0x310a <modf>
    2f60:	e6 eb       	ldi	r30, 0xB6	; 182
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__fp_powser>
    2f68:	4f 91       	pop	r20
    2f6a:	5f 91       	pop	r21
    2f6c:	ef 91       	pop	r30
    2f6e:	ff 91       	pop	r31
    2f70:	e5 95       	asr	r30
    2f72:	ee 1f       	adc	r30, r30
    2f74:	ff 1f       	adc	r31, r31
    2f76:	49 f0       	breq	.+18     	; 0x2f8a <exp+0x56>
    2f78:	fe 57       	subi	r31, 0x7E	; 126
    2f7a:	e0 68       	ori	r30, 0x80	; 128
    2f7c:	44 27       	eor	r20, r20
    2f7e:	ee 0f       	add	r30, r30
    2f80:	44 1f       	adc	r20, r20
    2f82:	fa 95       	dec	r31
    2f84:	e1 f7       	brne	.-8      	; 0x2f7e <exp+0x4a>
    2f86:	41 95       	neg	r20
    2f88:	55 0b       	sbc	r21, r21
    2f8a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <ldexp>
    2f8e:	0f 90       	pop	r0
    2f90:	07 fe       	sbrs	r0, 7
    2f92:	0c 94 f3 17 	jmp	0x2fe6	; 0x2fe6 <inverse>
    2f96:	08 95       	ret

00002f98 <__fp_powser>:
    2f98:	df 93       	push	r29
    2f9a:	cf 93       	push	r28
    2f9c:	1f 93       	push	r17
    2f9e:	0f 93       	push	r16
    2fa0:	ff 92       	push	r15
    2fa2:	ef 92       	push	r14
    2fa4:	df 92       	push	r13
    2fa6:	7b 01       	movw	r14, r22
    2fa8:	8c 01       	movw	r16, r24
    2faa:	68 94       	set
    2fac:	06 c0       	rjmp	.+12     	; 0x2fba <__fp_powser+0x22>
    2fae:	da 2e       	mov	r13, r26
    2fb0:	ef 01       	movw	r28, r30
    2fb2:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__mulsf3x>
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	e8 94       	clt
    2fba:	a5 91       	lpm	r26, Z+
    2fbc:	25 91       	lpm	r18, Z+
    2fbe:	35 91       	lpm	r19, Z+
    2fc0:	45 91       	lpm	r20, Z+
    2fc2:	55 91       	lpm	r21, Z+
    2fc4:	a6 f3       	brts	.-24     	; 0x2fae <__fp_powser+0x16>
    2fc6:	ef 01       	movw	r28, r30
    2fc8:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__addsf3x>
    2fcc:	fe 01       	movw	r30, r28
    2fce:	97 01       	movw	r18, r14
    2fd0:	a8 01       	movw	r20, r16
    2fd2:	da 94       	dec	r13
    2fd4:	69 f7       	brne	.-38     	; 0x2fb0 <__fp_powser+0x18>
    2fd6:	df 90       	pop	r13
    2fd8:	ef 90       	pop	r14
    2fda:	ff 90       	pop	r15
    2fdc:	0f 91       	pop	r16
    2fde:	1f 91       	pop	r17
    2fe0:	cf 91       	pop	r28
    2fe2:	df 91       	pop	r29
    2fe4:	08 95       	ret

00002fe6 <inverse>:
    2fe6:	9b 01       	movw	r18, r22
    2fe8:	ac 01       	movw	r20, r24
    2fea:	60 e0       	ldi	r22, 0x00	; 0
    2fec:	70 e0       	ldi	r23, 0x00	; 0
    2fee:	80 e8       	ldi	r24, 0x80	; 128
    2ff0:	9f e3       	ldi	r25, 0x3F	; 63
    2ff2:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__divsf3>
    2ff6:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__fp_inf>
    2ffa:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__fp_mpack>

00002ffe <ldexp>:
    2ffe:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__fp_splitA>
    3002:	d8 f3       	brcs	.-10     	; 0x2ffa <inverse+0x14>
    3004:	99 23       	and	r25, r25
    3006:	c9 f3       	breq	.-14     	; 0x2ffa <inverse+0x14>
    3008:	94 0f       	add	r25, r20
    300a:	51 1d       	adc	r21, r1
    300c:	a3 f3       	brvs	.-24     	; 0x2ff6 <inverse+0x10>
    300e:	91 50       	subi	r25, 0x01	; 1
    3010:	50 40       	sbci	r21, 0x00	; 0
    3012:	94 f0       	brlt	.+36     	; 0x3038 <ldexp+0x3a>
    3014:	59 f0       	breq	.+22     	; 0x302c <ldexp+0x2e>
    3016:	88 23       	and	r24, r24
    3018:	32 f0       	brmi	.+12     	; 0x3026 <ldexp+0x28>
    301a:	66 0f       	add	r22, r22
    301c:	77 1f       	adc	r23, r23
    301e:	88 1f       	adc	r24, r24
    3020:	91 50       	subi	r25, 0x01	; 1
    3022:	50 40       	sbci	r21, 0x00	; 0
    3024:	c1 f7       	brne	.-16     	; 0x3016 <ldexp+0x18>
    3026:	9e 3f       	cpi	r25, 0xFE	; 254
    3028:	51 05       	cpc	r21, r1
    302a:	2c f7       	brge	.-54     	; 0x2ff6 <inverse+0x10>
    302c:	88 0f       	add	r24, r24
    302e:	91 1d       	adc	r25, r1
    3030:	96 95       	lsr	r25
    3032:	87 95       	ror	r24
    3034:	97 f9       	bld	r25, 7
    3036:	08 95       	ret
    3038:	5f 3f       	cpi	r21, 0xFF	; 255
    303a:	ac f0       	brlt	.+42     	; 0x3066 <ldexp+0x68>
    303c:	98 3e       	cpi	r25, 0xE8	; 232
    303e:	9c f0       	brlt	.+38     	; 0x3066 <ldexp+0x68>
    3040:	bb 27       	eor	r27, r27
    3042:	86 95       	lsr	r24
    3044:	77 95       	ror	r23
    3046:	67 95       	ror	r22
    3048:	b7 95       	ror	r27
    304a:	08 f4       	brcc	.+2      	; 0x304e <ldexp+0x50>
    304c:	b1 60       	ori	r27, 0x01	; 1
    304e:	93 95       	inc	r25
    3050:	c1 f7       	brne	.-16     	; 0x3042 <ldexp+0x44>
    3052:	bb 0f       	add	r27, r27
    3054:	58 f7       	brcc	.-42     	; 0x302c <ldexp+0x2e>
    3056:	11 f4       	brne	.+4      	; 0x305c <ldexp+0x5e>
    3058:	60 ff       	sbrs	r22, 0
    305a:	e8 cf       	rjmp	.-48     	; 0x302c <ldexp+0x2e>
    305c:	6f 5f       	subi	r22, 0xFF	; 255
    305e:	7f 4f       	sbci	r23, 0xFF	; 255
    3060:	8f 4f       	sbci	r24, 0xFF	; 255
    3062:	9f 4f       	sbci	r25, 0xFF	; 255
    3064:	e3 cf       	rjmp	.-58     	; 0x302c <ldexp+0x2e>
    3066:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__fp_szero>
    306a:	16 f0       	brts	.+4      	; 0x3070 <ldexp+0x72>
    306c:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__fp_mpack>
    3070:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__fp_nan>
    3074:	68 94       	set
    3076:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__fp_inf>

0000307a <log>:
    307a:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__fp_splitA>
    307e:	a8 f3       	brcs	.-22     	; 0x306a <ldexp+0x6c>
    3080:	99 23       	and	r25, r25
    3082:	c1 f3       	breq	.-16     	; 0x3074 <ldexp+0x76>
    3084:	ae f3       	brts	.-22     	; 0x3070 <ldexp+0x72>
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	1f 93       	push	r17
    308c:	0f 93       	push	r16
    308e:	ff 92       	push	r15
    3090:	c9 2f       	mov	r28, r25
    3092:	dd 27       	eor	r29, r29
    3094:	88 23       	and	r24, r24
    3096:	2a f0       	brmi	.+10     	; 0x30a2 <log+0x28>
    3098:	21 97       	sbiw	r28, 0x01	; 1
    309a:	66 0f       	add	r22, r22
    309c:	77 1f       	adc	r23, r23
    309e:	88 1f       	adc	r24, r24
    30a0:	da f7       	brpl	.-10     	; 0x3098 <log+0x1e>
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	40 e8       	ldi	r20, 0x80	; 128
    30a8:	5f eb       	ldi	r21, 0xBF	; 191
    30aa:	9f e3       	ldi	r25, 0x3F	; 63
    30ac:	88 39       	cpi	r24, 0x98	; 152
    30ae:	20 f0       	brcs	.+8      	; 0x30b8 <log+0x3e>
    30b0:	80 3e       	cpi	r24, 0xE0	; 224
    30b2:	38 f0       	brcs	.+14     	; 0x30c2 <log+0x48>
    30b4:	21 96       	adiw	r28, 0x01	; 1
    30b6:	8f 77       	andi	r24, 0x7F	; 127
    30b8:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__addsf3>
    30bc:	ee ed       	ldi	r30, 0xDE	; 222
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	04 c0       	rjmp	.+8      	; 0x30ca <log+0x50>
    30c2:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__addsf3>
    30c6:	eb e0       	ldi	r30, 0x0B	; 11
    30c8:	f1 e0       	ldi	r31, 0x01	; 1
    30ca:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__fp_powser>
    30ce:	8b 01       	movw	r16, r22
    30d0:	be 01       	movw	r22, r28
    30d2:	ec 01       	movw	r28, r24
    30d4:	fb 2e       	mov	r15, r27
    30d6:	6f 57       	subi	r22, 0x7F	; 127
    30d8:	71 09       	sbc	r23, r1
    30da:	75 95       	asr	r23
    30dc:	77 1f       	adc	r23, r23
    30de:	88 0b       	sbc	r24, r24
    30e0:	99 0b       	sbc	r25, r25
    30e2:	0e 94 49 16 	call	0x2c92	; 0x2c92 <__floatsisf>
    30e6:	28 e1       	ldi	r18, 0x18	; 24
    30e8:	32 e7       	ldi	r19, 0x72	; 114
    30ea:	41 e3       	ldi	r20, 0x31	; 49
    30ec:	5f e3       	ldi	r21, 0x3F	; 63
    30ee:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <__mulsf3x>
    30f2:	af 2d       	mov	r26, r15
    30f4:	98 01       	movw	r18, r16
    30f6:	ae 01       	movw	r20, r28
    30f8:	ff 90       	pop	r15
    30fa:	0f 91       	pop	r16
    30fc:	1f 91       	pop	r17
    30fe:	cf 91       	pop	r28
    3100:	df 91       	pop	r29
    3102:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__addsf3x>
    3106:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__fp_round>

0000310a <modf>:
    310a:	fa 01       	movw	r30, r20
    310c:	dc 01       	movw	r26, r24
    310e:	aa 0f       	add	r26, r26
    3110:	bb 1f       	adc	r27, r27
    3112:	9b 01       	movw	r18, r22
    3114:	ac 01       	movw	r20, r24
    3116:	bf 57       	subi	r27, 0x7F	; 127
    3118:	28 f4       	brcc	.+10     	; 0x3124 <modf+0x1a>
    311a:	22 27       	eor	r18, r18
    311c:	33 27       	eor	r19, r19
    311e:	44 27       	eor	r20, r20
    3120:	50 78       	andi	r21, 0x80	; 128
    3122:	20 c0       	rjmp	.+64     	; 0x3164 <modf+0x5a>
    3124:	b7 51       	subi	r27, 0x17	; 23
    3126:	90 f4       	brcc	.+36     	; 0x314c <modf+0x42>
    3128:	ab 2f       	mov	r26, r27
    312a:	00 24       	eor	r0, r0
    312c:	46 95       	lsr	r20
    312e:	37 95       	ror	r19
    3130:	27 95       	ror	r18
    3132:	01 1c       	adc	r0, r1
    3134:	a3 95       	inc	r26
    3136:	d2 f3       	brmi	.-12     	; 0x312c <modf+0x22>
    3138:	00 20       	and	r0, r0
    313a:	71 f0       	breq	.+28     	; 0x3158 <modf+0x4e>
    313c:	22 0f       	add	r18, r18
    313e:	33 1f       	adc	r19, r19
    3140:	44 1f       	adc	r20, r20
    3142:	b3 95       	inc	r27
    3144:	da f3       	brmi	.-10     	; 0x313c <modf+0x32>
    3146:	0e d0       	rcall	.+28     	; 0x3164 <modf+0x5a>
    3148:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__subsf3>
    314c:	61 30       	cpi	r22, 0x01	; 1
    314e:	71 05       	cpc	r23, r1
    3150:	a0 e8       	ldi	r26, 0x80	; 128
    3152:	8a 07       	cpc	r24, r26
    3154:	b9 46       	sbci	r27, 0x69	; 105
    3156:	30 f4       	brcc	.+12     	; 0x3164 <modf+0x5a>
    3158:	9b 01       	movw	r18, r22
    315a:	ac 01       	movw	r20, r24
    315c:	66 27       	eor	r22, r22
    315e:	77 27       	eor	r23, r23
    3160:	88 27       	eor	r24, r24
    3162:	90 78       	andi	r25, 0x80	; 128
    3164:	30 96       	adiw	r30, 0x00	; 0
    3166:	21 f0       	breq	.+8      	; 0x3170 <modf+0x66>
    3168:	20 83       	st	Z, r18
    316a:	31 83       	std	Z+1, r19	; 0x01
    316c:	42 83       	std	Z+2, r20	; 0x02
    316e:	53 83       	std	Z+3, r21	; 0x03
    3170:	08 95       	ret

00003172 <__divsf3>:
    3172:	0e 94 cd 18 	call	0x319a	; 0x319a <__divsf3x>
    3176:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__fp_round>
    317a:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__fp_pscB>
    317e:	58 f0       	brcs	.+22     	; 0x3196 <__divsf3+0x24>
    3180:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__fp_pscA>
    3184:	40 f0       	brcs	.+16     	; 0x3196 <__divsf3+0x24>
    3186:	29 f4       	brne	.+10     	; 0x3192 <__divsf3+0x20>
    3188:	5f 3f       	cpi	r21, 0xFF	; 255
    318a:	29 f0       	breq	.+10     	; 0x3196 <__divsf3+0x24>
    318c:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__fp_inf>
    3190:	51 11       	cpse	r21, r1
    3192:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__fp_szero>
    3196:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__fp_nan>

0000319a <__divsf3x>:
    319a:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <__fp_split3>
    319e:	68 f3       	brcs	.-38     	; 0x317a <__divsf3+0x8>

000031a0 <__divsf3_pse>:
    31a0:	99 23       	and	r25, r25
    31a2:	b1 f3       	breq	.-20     	; 0x3190 <__divsf3+0x1e>
    31a4:	55 23       	and	r21, r21
    31a6:	91 f3       	breq	.-28     	; 0x318c <__divsf3+0x1a>
    31a8:	95 1b       	sub	r25, r21
    31aa:	55 0b       	sbc	r21, r21
    31ac:	bb 27       	eor	r27, r27
    31ae:	aa 27       	eor	r26, r26
    31b0:	62 17       	cp	r22, r18
    31b2:	73 07       	cpc	r23, r19
    31b4:	84 07       	cpc	r24, r20
    31b6:	38 f0       	brcs	.+14     	; 0x31c6 <__divsf3_pse+0x26>
    31b8:	9f 5f       	subi	r25, 0xFF	; 255
    31ba:	5f 4f       	sbci	r21, 0xFF	; 255
    31bc:	22 0f       	add	r18, r18
    31be:	33 1f       	adc	r19, r19
    31c0:	44 1f       	adc	r20, r20
    31c2:	aa 1f       	adc	r26, r26
    31c4:	a9 f3       	breq	.-22     	; 0x31b0 <__divsf3_pse+0x10>
    31c6:	35 d0       	rcall	.+106    	; 0x3232 <__divsf3_pse+0x92>
    31c8:	0e 2e       	mov	r0, r30
    31ca:	3a f0       	brmi	.+14     	; 0x31da <__divsf3_pse+0x3a>
    31cc:	e0 e8       	ldi	r30, 0x80	; 128
    31ce:	32 d0       	rcall	.+100    	; 0x3234 <__divsf3_pse+0x94>
    31d0:	91 50       	subi	r25, 0x01	; 1
    31d2:	50 40       	sbci	r21, 0x00	; 0
    31d4:	e6 95       	lsr	r30
    31d6:	00 1c       	adc	r0, r0
    31d8:	ca f7       	brpl	.-14     	; 0x31cc <__divsf3_pse+0x2c>
    31da:	2b d0       	rcall	.+86     	; 0x3232 <__divsf3_pse+0x92>
    31dc:	fe 2f       	mov	r31, r30
    31de:	29 d0       	rcall	.+82     	; 0x3232 <__divsf3_pse+0x92>
    31e0:	66 0f       	add	r22, r22
    31e2:	77 1f       	adc	r23, r23
    31e4:	88 1f       	adc	r24, r24
    31e6:	bb 1f       	adc	r27, r27
    31e8:	26 17       	cp	r18, r22
    31ea:	37 07       	cpc	r19, r23
    31ec:	48 07       	cpc	r20, r24
    31ee:	ab 07       	cpc	r26, r27
    31f0:	b0 e8       	ldi	r27, 0x80	; 128
    31f2:	09 f0       	breq	.+2      	; 0x31f6 <__divsf3_pse+0x56>
    31f4:	bb 0b       	sbc	r27, r27
    31f6:	80 2d       	mov	r24, r0
    31f8:	bf 01       	movw	r22, r30
    31fa:	ff 27       	eor	r31, r31
    31fc:	93 58       	subi	r25, 0x83	; 131
    31fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3200:	3a f0       	brmi	.+14     	; 0x3210 <__divsf3_pse+0x70>
    3202:	9e 3f       	cpi	r25, 0xFE	; 254
    3204:	51 05       	cpc	r21, r1
    3206:	78 f0       	brcs	.+30     	; 0x3226 <__divsf3_pse+0x86>
    3208:	0c 94 84 16 	jmp	0x2d08	; 0x2d08 <__fp_inf>
    320c:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__fp_szero>
    3210:	5f 3f       	cpi	r21, 0xFF	; 255
    3212:	e4 f3       	brlt	.-8      	; 0x320c <__divsf3_pse+0x6c>
    3214:	98 3e       	cpi	r25, 0xE8	; 232
    3216:	d4 f3       	brlt	.-12     	; 0x320c <__divsf3_pse+0x6c>
    3218:	86 95       	lsr	r24
    321a:	77 95       	ror	r23
    321c:	67 95       	ror	r22
    321e:	b7 95       	ror	r27
    3220:	f7 95       	ror	r31
    3222:	9f 5f       	subi	r25, 0xFF	; 255
    3224:	c9 f7       	brne	.-14     	; 0x3218 <__divsf3_pse+0x78>
    3226:	88 0f       	add	r24, r24
    3228:	91 1d       	adc	r25, r1
    322a:	96 95       	lsr	r25
    322c:	87 95       	ror	r24
    322e:	97 f9       	bld	r25, 7
    3230:	08 95       	ret
    3232:	e1 e0       	ldi	r30, 0x01	; 1
    3234:	66 0f       	add	r22, r22
    3236:	77 1f       	adc	r23, r23
    3238:	88 1f       	adc	r24, r24
    323a:	bb 1f       	adc	r27, r27
    323c:	62 17       	cp	r22, r18
    323e:	73 07       	cpc	r23, r19
    3240:	84 07       	cpc	r24, r20
    3242:	ba 07       	cpc	r27, r26
    3244:	20 f0       	brcs	.+8      	; 0x324e <__divsf3_pse+0xae>
    3246:	62 1b       	sub	r22, r18
    3248:	73 0b       	sbc	r23, r19
    324a:	84 0b       	sbc	r24, r20
    324c:	ba 0b       	sbc	r27, r26
    324e:	ee 1f       	adc	r30, r30
    3250:	88 f7       	brcc	.-30     	; 0x3234 <__divsf3_pse+0x94>
    3252:	e0 95       	com	r30
    3254:	08 95       	ret

00003256 <__fp_mpack>:
    3256:	9f 3f       	cpi	r25, 0xFF	; 255
    3258:	31 f0       	breq	.+12     	; 0x3266 <__fp_mpack_finite+0xc>

0000325a <__fp_mpack_finite>:
    325a:	91 50       	subi	r25, 0x01	; 1
    325c:	20 f4       	brcc	.+8      	; 0x3266 <__fp_mpack_finite+0xc>
    325e:	87 95       	ror	r24
    3260:	77 95       	ror	r23
    3262:	67 95       	ror	r22
    3264:	b7 95       	ror	r27
    3266:	88 0f       	add	r24, r24
    3268:	91 1d       	adc	r25, r1
    326a:	96 95       	lsr	r25
    326c:	87 95       	ror	r24
    326e:	97 f9       	bld	r25, 7
    3270:	08 95       	ret

00003272 <__divmodhi4>:
    3272:	97 fb       	bst	r25, 7
    3274:	07 2e       	mov	r0, r23
    3276:	16 f4       	brtc	.+4      	; 0x327c <__divmodhi4+0xa>
    3278:	00 94       	com	r0
    327a:	07 d0       	rcall	.+14     	; 0x328a <__divmodhi4_neg1>
    327c:	77 fd       	sbrc	r23, 7
    327e:	09 d0       	rcall	.+18     	; 0x3292 <__divmodhi4_neg2>
    3280:	0e 94 80 19 	call	0x3300	; 0x3300 <__udivmodhi4>
    3284:	07 fc       	sbrc	r0, 7
    3286:	05 d0       	rcall	.+10     	; 0x3292 <__divmodhi4_neg2>
    3288:	3e f4       	brtc	.+14     	; 0x3298 <__divmodhi4_exit>

0000328a <__divmodhi4_neg1>:
    328a:	90 95       	com	r25
    328c:	81 95       	neg	r24
    328e:	9f 4f       	sbci	r25, 0xFF	; 255
    3290:	08 95       	ret

00003292 <__divmodhi4_neg2>:
    3292:	70 95       	com	r23
    3294:	61 95       	neg	r22
    3296:	7f 4f       	sbci	r23, 0xFF	; 255

00003298 <__divmodhi4_exit>:
    3298:	08 95       	ret

0000329a <__udivmodsi4>:
    329a:	a1 e2       	ldi	r26, 0x21	; 33
    329c:	1a 2e       	mov	r1, r26
    329e:	aa 1b       	sub	r26, r26
    32a0:	bb 1b       	sub	r27, r27
    32a2:	fd 01       	movw	r30, r26
    32a4:	0d c0       	rjmp	.+26     	; 0x32c0 <__udivmodsi4_ep>

000032a6 <__udivmodsi4_loop>:
    32a6:	aa 1f       	adc	r26, r26
    32a8:	bb 1f       	adc	r27, r27
    32aa:	ee 1f       	adc	r30, r30
    32ac:	ff 1f       	adc	r31, r31
    32ae:	a2 17       	cp	r26, r18
    32b0:	b3 07       	cpc	r27, r19
    32b2:	e4 07       	cpc	r30, r20
    32b4:	f5 07       	cpc	r31, r21
    32b6:	20 f0       	brcs	.+8      	; 0x32c0 <__udivmodsi4_ep>
    32b8:	a2 1b       	sub	r26, r18
    32ba:	b3 0b       	sbc	r27, r19
    32bc:	e4 0b       	sbc	r30, r20
    32be:	f5 0b       	sbc	r31, r21

000032c0 <__udivmodsi4_ep>:
    32c0:	66 1f       	adc	r22, r22
    32c2:	77 1f       	adc	r23, r23
    32c4:	88 1f       	adc	r24, r24
    32c6:	99 1f       	adc	r25, r25
    32c8:	1a 94       	dec	r1
    32ca:	69 f7       	brne	.-38     	; 0x32a6 <__udivmodsi4_loop>
    32cc:	60 95       	com	r22
    32ce:	70 95       	com	r23
    32d0:	80 95       	com	r24
    32d2:	90 95       	com	r25
    32d4:	9b 01       	movw	r18, r22
    32d6:	ac 01       	movw	r20, r24
    32d8:	bd 01       	movw	r22, r26
    32da:	cf 01       	movw	r24, r30
    32dc:	08 95       	ret

000032de <__tablejump2__>:
    32de:	ee 0f       	add	r30, r30
    32e0:	ff 1f       	adc	r31, r31
    32e2:	05 90       	lpm	r0, Z+
    32e4:	f4 91       	lpm	r31, Z
    32e6:	e0 2d       	mov	r30, r0
    32e8:	09 94       	ijmp

000032ea <__muluhisi3>:
    32ea:	0e 94 94 19 	call	0x3328	; 0x3328 <__umulhisi3>
    32ee:	a5 9f       	mul	r26, r21
    32f0:	90 0d       	add	r25, r0
    32f2:	b4 9f       	mul	r27, r20
    32f4:	90 0d       	add	r25, r0
    32f6:	a4 9f       	mul	r26, r20
    32f8:	80 0d       	add	r24, r0
    32fa:	91 1d       	adc	r25, r1
    32fc:	11 24       	eor	r1, r1
    32fe:	08 95       	ret

00003300 <__udivmodhi4>:
    3300:	aa 1b       	sub	r26, r26
    3302:	bb 1b       	sub	r27, r27
    3304:	51 e1       	ldi	r21, 0x11	; 17
    3306:	07 c0       	rjmp	.+14     	; 0x3316 <__udivmodhi4_ep>

00003308 <__udivmodhi4_loop>:
    3308:	aa 1f       	adc	r26, r26
    330a:	bb 1f       	adc	r27, r27
    330c:	a6 17       	cp	r26, r22
    330e:	b7 07       	cpc	r27, r23
    3310:	10 f0       	brcs	.+4      	; 0x3316 <__udivmodhi4_ep>
    3312:	a6 1b       	sub	r26, r22
    3314:	b7 0b       	sbc	r27, r23

00003316 <__udivmodhi4_ep>:
    3316:	88 1f       	adc	r24, r24
    3318:	99 1f       	adc	r25, r25
    331a:	5a 95       	dec	r21
    331c:	a9 f7       	brne	.-22     	; 0x3308 <__udivmodhi4_loop>
    331e:	80 95       	com	r24
    3320:	90 95       	com	r25
    3322:	bc 01       	movw	r22, r24
    3324:	cd 01       	movw	r24, r26
    3326:	08 95       	ret

00003328 <__umulhisi3>:
    3328:	a2 9f       	mul	r26, r18
    332a:	b0 01       	movw	r22, r0
    332c:	b3 9f       	mul	r27, r19
    332e:	c0 01       	movw	r24, r0
    3330:	a3 9f       	mul	r26, r19
    3332:	70 0d       	add	r23, r0
    3334:	81 1d       	adc	r24, r1
    3336:	11 24       	eor	r1, r1
    3338:	91 1d       	adc	r25, r1
    333a:	b2 9f       	mul	r27, r18
    333c:	70 0d       	add	r23, r0
    333e:	81 1d       	adc	r24, r1
    3340:	11 24       	eor	r1, r1
    3342:	91 1d       	adc	r25, r1
    3344:	08 95       	ret

00003346 <atoi>:
    3346:	fc 01       	movw	r30, r24
    3348:	88 27       	eor	r24, r24
    334a:	99 27       	eor	r25, r25
    334c:	e8 94       	clt
    334e:	21 91       	ld	r18, Z+
    3350:	20 32       	cpi	r18, 0x20	; 32
    3352:	e9 f3       	breq	.-6      	; 0x334e <atoi+0x8>
    3354:	29 30       	cpi	r18, 0x09	; 9
    3356:	10 f0       	brcs	.+4      	; 0x335c <atoi+0x16>
    3358:	2e 30       	cpi	r18, 0x0E	; 14
    335a:	c8 f3       	brcs	.-14     	; 0x334e <atoi+0x8>
    335c:	2b 32       	cpi	r18, 0x2B	; 43
    335e:	41 f0       	breq	.+16     	; 0x3370 <atoi+0x2a>
    3360:	2d 32       	cpi	r18, 0x2D	; 45
    3362:	39 f4       	brne	.+14     	; 0x3372 <atoi+0x2c>
    3364:	68 94       	set
    3366:	04 c0       	rjmp	.+8      	; 0x3370 <atoi+0x2a>
    3368:	0e 94 ca 19 	call	0x3394	; 0x3394 <__mulhi_const_10>
    336c:	82 0f       	add	r24, r18
    336e:	91 1d       	adc	r25, r1
    3370:	21 91       	ld	r18, Z+
    3372:	20 53       	subi	r18, 0x30	; 48
    3374:	2a 30       	cpi	r18, 0x0A	; 10
    3376:	c0 f3       	brcs	.-16     	; 0x3368 <atoi+0x22>
    3378:	1e f4       	brtc	.+6      	; 0x3380 <atoi+0x3a>
    337a:	90 95       	com	r25
    337c:	81 95       	neg	r24
    337e:	9f 4f       	sbci	r25, 0xFF	; 255
    3380:	08 95       	ret

00003382 <memcpy>:
    3382:	fb 01       	movw	r30, r22
    3384:	dc 01       	movw	r26, r24
    3386:	02 c0       	rjmp	.+4      	; 0x338c <memcpy+0xa>
    3388:	01 90       	ld	r0, Z+
    338a:	0d 92       	st	X+, r0
    338c:	41 50       	subi	r20, 0x01	; 1
    338e:	50 40       	sbci	r21, 0x00	; 0
    3390:	d8 f7       	brcc	.-10     	; 0x3388 <memcpy+0x6>
    3392:	08 95       	ret

00003394 <__mulhi_const_10>:
    3394:	7a e0       	ldi	r23, 0x0A	; 10
    3396:	97 9f       	mul	r25, r23
    3398:	90 2d       	mov	r25, r0
    339a:	87 9f       	mul	r24, r23
    339c:	80 2d       	mov	r24, r0
    339e:	91 0d       	add	r25, r1
    33a0:	11 24       	eor	r1, r1
    33a2:	08 95       	ret

000033a4 <snprintf>:
    33a4:	ae e0       	ldi	r26, 0x0E	; 14
    33a6:	b0 e0       	ldi	r27, 0x00	; 0
    33a8:	e8 ed       	ldi	r30, 0xD8	; 216
    33aa:	f9 e1       	ldi	r31, 0x19	; 25
    33ac:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__prologue_saves__+0x1c>
    33b0:	0d 89       	ldd	r16, Y+21	; 0x15
    33b2:	1e 89       	ldd	r17, Y+22	; 0x16
    33b4:	8f 89       	ldd	r24, Y+23	; 0x17
    33b6:	98 8d       	ldd	r25, Y+24	; 0x18
    33b8:	26 e0       	ldi	r18, 0x06	; 6
    33ba:	2c 83       	std	Y+4, r18	; 0x04
    33bc:	1a 83       	std	Y+2, r17	; 0x02
    33be:	09 83       	std	Y+1, r16	; 0x01
    33c0:	97 ff       	sbrs	r25, 7
    33c2:	02 c0       	rjmp	.+4      	; 0x33c8 <snprintf+0x24>
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e8       	ldi	r25, 0x80	; 128
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	9e 83       	std	Y+6, r25	; 0x06
    33cc:	8d 83       	std	Y+5, r24	; 0x05
    33ce:	ae 01       	movw	r20, r28
    33d0:	45 5e       	subi	r20, 0xE5	; 229
    33d2:	5f 4f       	sbci	r21, 0xFF	; 255
    33d4:	69 8d       	ldd	r22, Y+25	; 0x19
    33d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33d8:	ce 01       	movw	r24, r28
    33da:	01 96       	adiw	r24, 0x01	; 1
    33dc:	0e 94 24 1a 	call	0x3448	; 0x3448 <vfprintf>
    33e0:	4d 81       	ldd	r20, Y+5	; 0x05
    33e2:	5e 81       	ldd	r21, Y+6	; 0x06
    33e4:	57 fd       	sbrc	r21, 7
    33e6:	0a c0       	rjmp	.+20     	; 0x33fc <snprintf+0x58>
    33e8:	2f 81       	ldd	r18, Y+7	; 0x07
    33ea:	38 85       	ldd	r19, Y+8	; 0x08
    33ec:	42 17       	cp	r20, r18
    33ee:	53 07       	cpc	r21, r19
    33f0:	0c f4       	brge	.+2      	; 0x33f4 <snprintf+0x50>
    33f2:	9a 01       	movw	r18, r20
    33f4:	f8 01       	movw	r30, r16
    33f6:	e2 0f       	add	r30, r18
    33f8:	f3 1f       	adc	r31, r19
    33fa:	10 82       	st	Z, r1
    33fc:	2e 96       	adiw	r28, 0x0e	; 14
    33fe:	e4 e0       	ldi	r30, 0x04	; 4
    3400:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__epilogue_restores__+0x1c>

00003404 <sprintf>:
    3404:	ae e0       	ldi	r26, 0x0E	; 14
    3406:	b0 e0       	ldi	r27, 0x00	; 0
    3408:	e8 e0       	ldi	r30, 0x08	; 8
    340a:	fa e1       	ldi	r31, 0x1A	; 26
    340c:	0c 94 f2 1c 	jmp	0x39e4	; 0x39e4 <__prologue_saves__+0x1c>
    3410:	0d 89       	ldd	r16, Y+21	; 0x15
    3412:	1e 89       	ldd	r17, Y+22	; 0x16
    3414:	86 e0       	ldi	r24, 0x06	; 6
    3416:	8c 83       	std	Y+4, r24	; 0x04
    3418:	1a 83       	std	Y+2, r17	; 0x02
    341a:	09 83       	std	Y+1, r16	; 0x01
    341c:	8f ef       	ldi	r24, 0xFF	; 255
    341e:	9f e7       	ldi	r25, 0x7F	; 127
    3420:	9e 83       	std	Y+6, r25	; 0x06
    3422:	8d 83       	std	Y+5, r24	; 0x05
    3424:	ae 01       	movw	r20, r28
    3426:	47 5e       	subi	r20, 0xE7	; 231
    3428:	5f 4f       	sbci	r21, 0xFF	; 255
    342a:	6f 89       	ldd	r22, Y+23	; 0x17
    342c:	78 8d       	ldd	r23, Y+24	; 0x18
    342e:	ce 01       	movw	r24, r28
    3430:	01 96       	adiw	r24, 0x01	; 1
    3432:	0e 94 24 1a 	call	0x3448	; 0x3448 <vfprintf>
    3436:	ef 81       	ldd	r30, Y+7	; 0x07
    3438:	f8 85       	ldd	r31, Y+8	; 0x08
    343a:	e0 0f       	add	r30, r16
    343c:	f1 1f       	adc	r31, r17
    343e:	10 82       	st	Z, r1
    3440:	2e 96       	adiw	r28, 0x0e	; 14
    3442:	e4 e0       	ldi	r30, 0x04	; 4
    3444:	0c 94 0e 1d 	jmp	0x3a1c	; 0x3a1c <__epilogue_restores__+0x1c>

00003448 <vfprintf>:
    3448:	ab e0       	ldi	r26, 0x0B	; 11
    344a:	b0 e0       	ldi	r27, 0x00	; 0
    344c:	ea e2       	ldi	r30, 0x2A	; 42
    344e:	fa e1       	ldi	r31, 0x1A	; 26
    3450:	0c 94 e4 1c 	jmp	0x39c8	; 0x39c8 <__prologue_saves__>
    3454:	6c 01       	movw	r12, r24
    3456:	7b 01       	movw	r14, r22
    3458:	8a 01       	movw	r16, r20
    345a:	fc 01       	movw	r30, r24
    345c:	17 82       	std	Z+7, r1	; 0x07
    345e:	16 82       	std	Z+6, r1	; 0x06
    3460:	83 81       	ldd	r24, Z+3	; 0x03
    3462:	81 ff       	sbrs	r24, 1
    3464:	cc c1       	rjmp	.+920    	; 0x37fe <vfprintf+0x3b6>
    3466:	ce 01       	movw	r24, r28
    3468:	01 96       	adiw	r24, 0x01	; 1
    346a:	3c 01       	movw	r6, r24
    346c:	f6 01       	movw	r30, r12
    346e:	93 81       	ldd	r25, Z+3	; 0x03
    3470:	f7 01       	movw	r30, r14
    3472:	93 fd       	sbrc	r25, 3
    3474:	85 91       	lpm	r24, Z+
    3476:	93 ff       	sbrs	r25, 3
    3478:	81 91       	ld	r24, Z+
    347a:	7f 01       	movw	r14, r30
    347c:	88 23       	and	r24, r24
    347e:	09 f4       	brne	.+2      	; 0x3482 <vfprintf+0x3a>
    3480:	ba c1       	rjmp	.+884    	; 0x37f6 <vfprintf+0x3ae>
    3482:	85 32       	cpi	r24, 0x25	; 37
    3484:	39 f4       	brne	.+14     	; 0x3494 <vfprintf+0x4c>
    3486:	93 fd       	sbrc	r25, 3
    3488:	85 91       	lpm	r24, Z+
    348a:	93 ff       	sbrs	r25, 3
    348c:	81 91       	ld	r24, Z+
    348e:	7f 01       	movw	r14, r30
    3490:	85 32       	cpi	r24, 0x25	; 37
    3492:	29 f4       	brne	.+10     	; 0x349e <vfprintf+0x56>
    3494:	b6 01       	movw	r22, r12
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	0e 94 1b 1c 	call	0x3836	; 0x3836 <fputc>
    349c:	e7 cf       	rjmp	.-50     	; 0x346c <vfprintf+0x24>
    349e:	91 2c       	mov	r9, r1
    34a0:	21 2c       	mov	r2, r1
    34a2:	31 2c       	mov	r3, r1
    34a4:	ff e1       	ldi	r31, 0x1F	; 31
    34a6:	f3 15       	cp	r31, r3
    34a8:	d8 f0       	brcs	.+54     	; 0x34e0 <vfprintf+0x98>
    34aa:	8b 32       	cpi	r24, 0x2B	; 43
    34ac:	79 f0       	breq	.+30     	; 0x34cc <vfprintf+0x84>
    34ae:	38 f4       	brcc	.+14     	; 0x34be <vfprintf+0x76>
    34b0:	80 32       	cpi	r24, 0x20	; 32
    34b2:	79 f0       	breq	.+30     	; 0x34d2 <vfprintf+0x8a>
    34b4:	83 32       	cpi	r24, 0x23	; 35
    34b6:	a1 f4       	brne	.+40     	; 0x34e0 <vfprintf+0x98>
    34b8:	23 2d       	mov	r18, r3
    34ba:	20 61       	ori	r18, 0x10	; 16
    34bc:	1d c0       	rjmp	.+58     	; 0x34f8 <vfprintf+0xb0>
    34be:	8d 32       	cpi	r24, 0x2D	; 45
    34c0:	61 f0       	breq	.+24     	; 0x34da <vfprintf+0x92>
    34c2:	80 33       	cpi	r24, 0x30	; 48
    34c4:	69 f4       	brne	.+26     	; 0x34e0 <vfprintf+0x98>
    34c6:	23 2d       	mov	r18, r3
    34c8:	21 60       	ori	r18, 0x01	; 1
    34ca:	16 c0       	rjmp	.+44     	; 0x34f8 <vfprintf+0xb0>
    34cc:	83 2d       	mov	r24, r3
    34ce:	82 60       	ori	r24, 0x02	; 2
    34d0:	38 2e       	mov	r3, r24
    34d2:	e3 2d       	mov	r30, r3
    34d4:	e4 60       	ori	r30, 0x04	; 4
    34d6:	3e 2e       	mov	r3, r30
    34d8:	2a c0       	rjmp	.+84     	; 0x352e <vfprintf+0xe6>
    34da:	f3 2d       	mov	r31, r3
    34dc:	f8 60       	ori	r31, 0x08	; 8
    34de:	1d c0       	rjmp	.+58     	; 0x351a <vfprintf+0xd2>
    34e0:	37 fc       	sbrc	r3, 7
    34e2:	2d c0       	rjmp	.+90     	; 0x353e <vfprintf+0xf6>
    34e4:	20 ed       	ldi	r18, 0xD0	; 208
    34e6:	28 0f       	add	r18, r24
    34e8:	2a 30       	cpi	r18, 0x0A	; 10
    34ea:	40 f0       	brcs	.+16     	; 0x34fc <vfprintf+0xb4>
    34ec:	8e 32       	cpi	r24, 0x2E	; 46
    34ee:	b9 f4       	brne	.+46     	; 0x351e <vfprintf+0xd6>
    34f0:	36 fc       	sbrc	r3, 6
    34f2:	81 c1       	rjmp	.+770    	; 0x37f6 <vfprintf+0x3ae>
    34f4:	23 2d       	mov	r18, r3
    34f6:	20 64       	ori	r18, 0x40	; 64
    34f8:	32 2e       	mov	r3, r18
    34fa:	19 c0       	rjmp	.+50     	; 0x352e <vfprintf+0xe6>
    34fc:	36 fe       	sbrs	r3, 6
    34fe:	06 c0       	rjmp	.+12     	; 0x350c <vfprintf+0xc4>
    3500:	8a e0       	ldi	r24, 0x0A	; 10
    3502:	98 9e       	mul	r9, r24
    3504:	20 0d       	add	r18, r0
    3506:	11 24       	eor	r1, r1
    3508:	92 2e       	mov	r9, r18
    350a:	11 c0       	rjmp	.+34     	; 0x352e <vfprintf+0xe6>
    350c:	ea e0       	ldi	r30, 0x0A	; 10
    350e:	2e 9e       	mul	r2, r30
    3510:	20 0d       	add	r18, r0
    3512:	11 24       	eor	r1, r1
    3514:	22 2e       	mov	r2, r18
    3516:	f3 2d       	mov	r31, r3
    3518:	f0 62       	ori	r31, 0x20	; 32
    351a:	3f 2e       	mov	r3, r31
    351c:	08 c0       	rjmp	.+16     	; 0x352e <vfprintf+0xe6>
    351e:	8c 36       	cpi	r24, 0x6C	; 108
    3520:	21 f4       	brne	.+8      	; 0x352a <vfprintf+0xe2>
    3522:	83 2d       	mov	r24, r3
    3524:	80 68       	ori	r24, 0x80	; 128
    3526:	38 2e       	mov	r3, r24
    3528:	02 c0       	rjmp	.+4      	; 0x352e <vfprintf+0xe6>
    352a:	88 36       	cpi	r24, 0x68	; 104
    352c:	41 f4       	brne	.+16     	; 0x353e <vfprintf+0xf6>
    352e:	f7 01       	movw	r30, r14
    3530:	93 fd       	sbrc	r25, 3
    3532:	85 91       	lpm	r24, Z+
    3534:	93 ff       	sbrs	r25, 3
    3536:	81 91       	ld	r24, Z+
    3538:	7f 01       	movw	r14, r30
    353a:	81 11       	cpse	r24, r1
    353c:	b3 cf       	rjmp	.-154    	; 0x34a4 <vfprintf+0x5c>
    353e:	98 2f       	mov	r25, r24
    3540:	9f 7d       	andi	r25, 0xDF	; 223
    3542:	95 54       	subi	r25, 0x45	; 69
    3544:	93 30       	cpi	r25, 0x03	; 3
    3546:	28 f4       	brcc	.+10     	; 0x3552 <vfprintf+0x10a>
    3548:	0c 5f       	subi	r16, 0xFC	; 252
    354a:	1f 4f       	sbci	r17, 0xFF	; 255
    354c:	9f e3       	ldi	r25, 0x3F	; 63
    354e:	99 83       	std	Y+1, r25	; 0x01
    3550:	0d c0       	rjmp	.+26     	; 0x356c <vfprintf+0x124>
    3552:	83 36       	cpi	r24, 0x63	; 99
    3554:	31 f0       	breq	.+12     	; 0x3562 <vfprintf+0x11a>
    3556:	83 37       	cpi	r24, 0x73	; 115
    3558:	71 f0       	breq	.+28     	; 0x3576 <vfprintf+0x12e>
    355a:	83 35       	cpi	r24, 0x53	; 83
    355c:	09 f0       	breq	.+2      	; 0x3560 <vfprintf+0x118>
    355e:	59 c0       	rjmp	.+178    	; 0x3612 <vfprintf+0x1ca>
    3560:	21 c0       	rjmp	.+66     	; 0x35a4 <vfprintf+0x15c>
    3562:	f8 01       	movw	r30, r16
    3564:	80 81       	ld	r24, Z
    3566:	89 83       	std	Y+1, r24	; 0x01
    3568:	0e 5f       	subi	r16, 0xFE	; 254
    356a:	1f 4f       	sbci	r17, 0xFF	; 255
    356c:	88 24       	eor	r8, r8
    356e:	83 94       	inc	r8
    3570:	91 2c       	mov	r9, r1
    3572:	53 01       	movw	r10, r6
    3574:	13 c0       	rjmp	.+38     	; 0x359c <vfprintf+0x154>
    3576:	28 01       	movw	r4, r16
    3578:	f2 e0       	ldi	r31, 0x02	; 2
    357a:	4f 0e       	add	r4, r31
    357c:	51 1c       	adc	r5, r1
    357e:	f8 01       	movw	r30, r16
    3580:	a0 80       	ld	r10, Z
    3582:	b1 80       	ldd	r11, Z+1	; 0x01
    3584:	36 fe       	sbrs	r3, 6
    3586:	03 c0       	rjmp	.+6      	; 0x358e <vfprintf+0x146>
    3588:	69 2d       	mov	r22, r9
    358a:	70 e0       	ldi	r23, 0x00	; 0
    358c:	02 c0       	rjmp	.+4      	; 0x3592 <vfprintf+0x14a>
    358e:	6f ef       	ldi	r22, 0xFF	; 255
    3590:	7f ef       	ldi	r23, 0xFF	; 255
    3592:	c5 01       	movw	r24, r10
    3594:	0e 94 10 1c 	call	0x3820	; 0x3820 <strnlen>
    3598:	4c 01       	movw	r8, r24
    359a:	82 01       	movw	r16, r4
    359c:	f3 2d       	mov	r31, r3
    359e:	ff 77       	andi	r31, 0x7F	; 127
    35a0:	3f 2e       	mov	r3, r31
    35a2:	16 c0       	rjmp	.+44     	; 0x35d0 <vfprintf+0x188>
    35a4:	28 01       	movw	r4, r16
    35a6:	22 e0       	ldi	r18, 0x02	; 2
    35a8:	42 0e       	add	r4, r18
    35aa:	51 1c       	adc	r5, r1
    35ac:	f8 01       	movw	r30, r16
    35ae:	a0 80       	ld	r10, Z
    35b0:	b1 80       	ldd	r11, Z+1	; 0x01
    35b2:	36 fe       	sbrs	r3, 6
    35b4:	03 c0       	rjmp	.+6      	; 0x35bc <vfprintf+0x174>
    35b6:	69 2d       	mov	r22, r9
    35b8:	70 e0       	ldi	r23, 0x00	; 0
    35ba:	02 c0       	rjmp	.+4      	; 0x35c0 <vfprintf+0x178>
    35bc:	6f ef       	ldi	r22, 0xFF	; 255
    35be:	7f ef       	ldi	r23, 0xFF	; 255
    35c0:	c5 01       	movw	r24, r10
    35c2:	0e 94 05 1c 	call	0x380a	; 0x380a <strnlen_P>
    35c6:	4c 01       	movw	r8, r24
    35c8:	f3 2d       	mov	r31, r3
    35ca:	f0 68       	ori	r31, 0x80	; 128
    35cc:	3f 2e       	mov	r3, r31
    35ce:	82 01       	movw	r16, r4
    35d0:	33 fc       	sbrc	r3, 3
    35d2:	1b c0       	rjmp	.+54     	; 0x360a <vfprintf+0x1c2>
    35d4:	82 2d       	mov	r24, r2
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	88 16       	cp	r8, r24
    35da:	99 06       	cpc	r9, r25
    35dc:	b0 f4       	brcc	.+44     	; 0x360a <vfprintf+0x1c2>
    35de:	b6 01       	movw	r22, r12
    35e0:	80 e2       	ldi	r24, 0x20	; 32
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	0e 94 1b 1c 	call	0x3836	; 0x3836 <fputc>
    35e8:	2a 94       	dec	r2
    35ea:	f4 cf       	rjmp	.-24     	; 0x35d4 <vfprintf+0x18c>
    35ec:	f5 01       	movw	r30, r10
    35ee:	37 fc       	sbrc	r3, 7
    35f0:	85 91       	lpm	r24, Z+
    35f2:	37 fe       	sbrs	r3, 7
    35f4:	81 91       	ld	r24, Z+
    35f6:	5f 01       	movw	r10, r30
    35f8:	b6 01       	movw	r22, r12
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	0e 94 1b 1c 	call	0x3836	; 0x3836 <fputc>
    3600:	21 10       	cpse	r2, r1
    3602:	2a 94       	dec	r2
    3604:	21 e0       	ldi	r18, 0x01	; 1
    3606:	82 1a       	sub	r8, r18
    3608:	91 08       	sbc	r9, r1
    360a:	81 14       	cp	r8, r1
    360c:	91 04       	cpc	r9, r1
    360e:	71 f7       	brne	.-36     	; 0x35ec <vfprintf+0x1a4>
    3610:	e8 c0       	rjmp	.+464    	; 0x37e2 <vfprintf+0x39a>
    3612:	84 36       	cpi	r24, 0x64	; 100
    3614:	11 f0       	breq	.+4      	; 0x361a <vfprintf+0x1d2>
    3616:	89 36       	cpi	r24, 0x69	; 105
    3618:	41 f5       	brne	.+80     	; 0x366a <vfprintf+0x222>
    361a:	f8 01       	movw	r30, r16
    361c:	37 fe       	sbrs	r3, 7
    361e:	07 c0       	rjmp	.+14     	; 0x362e <vfprintf+0x1e6>
    3620:	60 81       	ld	r22, Z
    3622:	71 81       	ldd	r23, Z+1	; 0x01
    3624:	82 81       	ldd	r24, Z+2	; 0x02
    3626:	93 81       	ldd	r25, Z+3	; 0x03
    3628:	0c 5f       	subi	r16, 0xFC	; 252
    362a:	1f 4f       	sbci	r17, 0xFF	; 255
    362c:	08 c0       	rjmp	.+16     	; 0x363e <vfprintf+0x1f6>
    362e:	60 81       	ld	r22, Z
    3630:	71 81       	ldd	r23, Z+1	; 0x01
    3632:	07 2e       	mov	r0, r23
    3634:	00 0c       	add	r0, r0
    3636:	88 0b       	sbc	r24, r24
    3638:	99 0b       	sbc	r25, r25
    363a:	0e 5f       	subi	r16, 0xFE	; 254
    363c:	1f 4f       	sbci	r17, 0xFF	; 255
    363e:	f3 2d       	mov	r31, r3
    3640:	ff 76       	andi	r31, 0x6F	; 111
    3642:	3f 2e       	mov	r3, r31
    3644:	97 ff       	sbrs	r25, 7
    3646:	09 c0       	rjmp	.+18     	; 0x365a <vfprintf+0x212>
    3648:	90 95       	com	r25
    364a:	80 95       	com	r24
    364c:	70 95       	com	r23
    364e:	61 95       	neg	r22
    3650:	7f 4f       	sbci	r23, 0xFF	; 255
    3652:	8f 4f       	sbci	r24, 0xFF	; 255
    3654:	9f 4f       	sbci	r25, 0xFF	; 255
    3656:	f0 68       	ori	r31, 0x80	; 128
    3658:	3f 2e       	mov	r3, r31
    365a:	2a e0       	ldi	r18, 0x0A	; 10
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	a3 01       	movw	r20, r6
    3660:	0e 94 57 1c 	call	0x38ae	; 0x38ae <__ultoa_invert>
    3664:	88 2e       	mov	r8, r24
    3666:	86 18       	sub	r8, r6
    3668:	45 c0       	rjmp	.+138    	; 0x36f4 <vfprintf+0x2ac>
    366a:	85 37       	cpi	r24, 0x75	; 117
    366c:	31 f4       	brne	.+12     	; 0x367a <vfprintf+0x232>
    366e:	23 2d       	mov	r18, r3
    3670:	2f 7e       	andi	r18, 0xEF	; 239
    3672:	b2 2e       	mov	r11, r18
    3674:	2a e0       	ldi	r18, 0x0A	; 10
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	25 c0       	rjmp	.+74     	; 0x36c4 <vfprintf+0x27c>
    367a:	93 2d       	mov	r25, r3
    367c:	99 7f       	andi	r25, 0xF9	; 249
    367e:	b9 2e       	mov	r11, r25
    3680:	8f 36       	cpi	r24, 0x6F	; 111
    3682:	c1 f0       	breq	.+48     	; 0x36b4 <vfprintf+0x26c>
    3684:	18 f4       	brcc	.+6      	; 0x368c <vfprintf+0x244>
    3686:	88 35       	cpi	r24, 0x58	; 88
    3688:	79 f0       	breq	.+30     	; 0x36a8 <vfprintf+0x260>
    368a:	b5 c0       	rjmp	.+362    	; 0x37f6 <vfprintf+0x3ae>
    368c:	80 37       	cpi	r24, 0x70	; 112
    368e:	19 f0       	breq	.+6      	; 0x3696 <vfprintf+0x24e>
    3690:	88 37       	cpi	r24, 0x78	; 120
    3692:	21 f0       	breq	.+8      	; 0x369c <vfprintf+0x254>
    3694:	b0 c0       	rjmp	.+352    	; 0x37f6 <vfprintf+0x3ae>
    3696:	e9 2f       	mov	r30, r25
    3698:	e0 61       	ori	r30, 0x10	; 16
    369a:	be 2e       	mov	r11, r30
    369c:	b4 fe       	sbrs	r11, 4
    369e:	0d c0       	rjmp	.+26     	; 0x36ba <vfprintf+0x272>
    36a0:	fb 2d       	mov	r31, r11
    36a2:	f4 60       	ori	r31, 0x04	; 4
    36a4:	bf 2e       	mov	r11, r31
    36a6:	09 c0       	rjmp	.+18     	; 0x36ba <vfprintf+0x272>
    36a8:	34 fe       	sbrs	r3, 4
    36aa:	0a c0       	rjmp	.+20     	; 0x36c0 <vfprintf+0x278>
    36ac:	29 2f       	mov	r18, r25
    36ae:	26 60       	ori	r18, 0x06	; 6
    36b0:	b2 2e       	mov	r11, r18
    36b2:	06 c0       	rjmp	.+12     	; 0x36c0 <vfprintf+0x278>
    36b4:	28 e0       	ldi	r18, 0x08	; 8
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	05 c0       	rjmp	.+10     	; 0x36c4 <vfprintf+0x27c>
    36ba:	20 e1       	ldi	r18, 0x10	; 16
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	02 c0       	rjmp	.+4      	; 0x36c4 <vfprintf+0x27c>
    36c0:	20 e1       	ldi	r18, 0x10	; 16
    36c2:	32 e0       	ldi	r19, 0x02	; 2
    36c4:	f8 01       	movw	r30, r16
    36c6:	b7 fe       	sbrs	r11, 7
    36c8:	07 c0       	rjmp	.+14     	; 0x36d8 <vfprintf+0x290>
    36ca:	60 81       	ld	r22, Z
    36cc:	71 81       	ldd	r23, Z+1	; 0x01
    36ce:	82 81       	ldd	r24, Z+2	; 0x02
    36d0:	93 81       	ldd	r25, Z+3	; 0x03
    36d2:	0c 5f       	subi	r16, 0xFC	; 252
    36d4:	1f 4f       	sbci	r17, 0xFF	; 255
    36d6:	06 c0       	rjmp	.+12     	; 0x36e4 <vfprintf+0x29c>
    36d8:	60 81       	ld	r22, Z
    36da:	71 81       	ldd	r23, Z+1	; 0x01
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	0e 5f       	subi	r16, 0xFE	; 254
    36e2:	1f 4f       	sbci	r17, 0xFF	; 255
    36e4:	a3 01       	movw	r20, r6
    36e6:	0e 94 57 1c 	call	0x38ae	; 0x38ae <__ultoa_invert>
    36ea:	88 2e       	mov	r8, r24
    36ec:	86 18       	sub	r8, r6
    36ee:	fb 2d       	mov	r31, r11
    36f0:	ff 77       	andi	r31, 0x7F	; 127
    36f2:	3f 2e       	mov	r3, r31
    36f4:	36 fe       	sbrs	r3, 6
    36f6:	0d c0       	rjmp	.+26     	; 0x3712 <vfprintf+0x2ca>
    36f8:	23 2d       	mov	r18, r3
    36fa:	2e 7f       	andi	r18, 0xFE	; 254
    36fc:	a2 2e       	mov	r10, r18
    36fe:	89 14       	cp	r8, r9
    3700:	58 f4       	brcc	.+22     	; 0x3718 <vfprintf+0x2d0>
    3702:	34 fe       	sbrs	r3, 4
    3704:	0b c0       	rjmp	.+22     	; 0x371c <vfprintf+0x2d4>
    3706:	32 fc       	sbrc	r3, 2
    3708:	09 c0       	rjmp	.+18     	; 0x371c <vfprintf+0x2d4>
    370a:	83 2d       	mov	r24, r3
    370c:	8e 7e       	andi	r24, 0xEE	; 238
    370e:	a8 2e       	mov	r10, r24
    3710:	05 c0       	rjmp	.+10     	; 0x371c <vfprintf+0x2d4>
    3712:	b8 2c       	mov	r11, r8
    3714:	a3 2c       	mov	r10, r3
    3716:	03 c0       	rjmp	.+6      	; 0x371e <vfprintf+0x2d6>
    3718:	b8 2c       	mov	r11, r8
    371a:	01 c0       	rjmp	.+2      	; 0x371e <vfprintf+0x2d6>
    371c:	b9 2c       	mov	r11, r9
    371e:	a4 fe       	sbrs	r10, 4
    3720:	0f c0       	rjmp	.+30     	; 0x3740 <vfprintf+0x2f8>
    3722:	fe 01       	movw	r30, r28
    3724:	e8 0d       	add	r30, r8
    3726:	f1 1d       	adc	r31, r1
    3728:	80 81       	ld	r24, Z
    372a:	80 33       	cpi	r24, 0x30	; 48
    372c:	21 f4       	brne	.+8      	; 0x3736 <vfprintf+0x2ee>
    372e:	9a 2d       	mov	r25, r10
    3730:	99 7e       	andi	r25, 0xE9	; 233
    3732:	a9 2e       	mov	r10, r25
    3734:	09 c0       	rjmp	.+18     	; 0x3748 <vfprintf+0x300>
    3736:	a2 fe       	sbrs	r10, 2
    3738:	06 c0       	rjmp	.+12     	; 0x3746 <vfprintf+0x2fe>
    373a:	b3 94       	inc	r11
    373c:	b3 94       	inc	r11
    373e:	04 c0       	rjmp	.+8      	; 0x3748 <vfprintf+0x300>
    3740:	8a 2d       	mov	r24, r10
    3742:	86 78       	andi	r24, 0x86	; 134
    3744:	09 f0       	breq	.+2      	; 0x3748 <vfprintf+0x300>
    3746:	b3 94       	inc	r11
    3748:	a3 fc       	sbrc	r10, 3
    374a:	11 c0       	rjmp	.+34     	; 0x376e <vfprintf+0x326>
    374c:	a0 fe       	sbrs	r10, 0
    374e:	06 c0       	rjmp	.+12     	; 0x375c <vfprintf+0x314>
    3750:	b2 14       	cp	r11, r2
    3752:	88 f4       	brcc	.+34     	; 0x3776 <vfprintf+0x32e>
    3754:	28 0c       	add	r2, r8
    3756:	92 2c       	mov	r9, r2
    3758:	9b 18       	sub	r9, r11
    375a:	0e c0       	rjmp	.+28     	; 0x3778 <vfprintf+0x330>
    375c:	b2 14       	cp	r11, r2
    375e:	60 f4       	brcc	.+24     	; 0x3778 <vfprintf+0x330>
    3760:	b6 01       	movw	r22, r12
    3762:	80 e2       	ldi	r24, 0x20	; 32
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	0e 94 1b 1c 	call	0x3836	; 0x3836 <fputc>
    376a:	b3 94       	inc	r11
    376c:	f7 cf       	rjmp	.-18     	; 0x375c <vfprintf+0x314>
    376e:	b2 14       	cp	r11, r2
    3770:	18 f4       	brcc	.+6      	; 0x3778 <vfprintf+0x330>
    3772:	2b 18       	sub	r2, r11
    3774:	02 c0       	rjmp	.+4      	; 0x377a <vfprintf+0x332>
    3776:	98 2c       	mov	r9, r8
    3778:	21 2c       	mov	r2, r1
    377a:	a4 fe       	sbrs	r10, 4
    377c:	10 c0       	rjmp	.+32     	; 0x379e <vfprintf+0x356>
    377e:	b6 01       	movw	r22, r12
    3780:	80 e3       	ldi	r24, 0x30	; 48
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	0e 94 1b 1c 	call	0x3836	; 0x3836 <fputc>
    3788:	a2 fe       	sbrs	r10, 2
    378a:	17 c0       	rjmp	.+46     	; 0x37ba <vfprintf+0x372>
    378c:	a1 fc       	sbrc	r10, 1
    378e:	03 c0       	rjmp	.+6      	; 0x3796 <vfprintf+0x34e>
    3790:	88 e7       	ldi	r24, 0x78	; 120
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	02 c0       	rjmp	.+4      	; 0x379a <vfprintf+0x352>
    3796:	88 e5       	ldi	r24, 0x58	; 88
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	b6 01       	movw	r22, r12
    379c:	0c c0       	rjmp	.+24     	; 0x37b6 <vfprintf+0x36e>
    379e:	8a 2d       	mov	r24, r10
    37a0:	86 78       	andi	r24, 0x86	; 134
    37a2:	59 f0       	breq	.+22     	; 0x37ba <vfprintf+0x372>
    37a4:	a1 fe       	sbrs	r10, 1
    37a6:	02 c0       	rjmp	.+4      	; 0x37ac <vfprintf+0x364>
    37a8:	8b e2       	ldi	r24, 0x2B	; 43
    37aa:	01 c0       	rjmp	.+2      	; 0x37ae <vfprintf+0x366>
    37ac:	80 e2       	ldi	r24, 0x20	; 32
    37ae:	a7 fc       	sbrc	r10, 7
    37b0:	8d e2       	ldi	r24, 0x2D	; 45
    37b2:	b6 01       	movw	r22, r12
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	0e 94 1b 1c 	call	0x3836	; 0x3836 <fputc>
    37ba:	89 14       	cp	r8, r9
    37bc:	38 f4       	brcc	.+14     	; 0x37cc <vfprintf+0x384>
    37be:	b6 01       	movw	r22, r12
    37c0:	80 e3       	ldi	r24, 0x30	; 48
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	0e 94 1b 1c 	call	0x3836	; 0x3836 <fputc>
    37c8:	9a 94       	dec	r9
    37ca:	f7 cf       	rjmp	.-18     	; 0x37ba <vfprintf+0x372>
    37cc:	8a 94       	dec	r8
    37ce:	f3 01       	movw	r30, r6
    37d0:	e8 0d       	add	r30, r8
    37d2:	f1 1d       	adc	r31, r1
    37d4:	80 81       	ld	r24, Z
    37d6:	b6 01       	movw	r22, r12
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	0e 94 1b 1c 	call	0x3836	; 0x3836 <fputc>
    37de:	81 10       	cpse	r8, r1
    37e0:	f5 cf       	rjmp	.-22     	; 0x37cc <vfprintf+0x384>
    37e2:	22 20       	and	r2, r2
    37e4:	09 f4       	brne	.+2      	; 0x37e8 <vfprintf+0x3a0>
    37e6:	42 ce       	rjmp	.-892    	; 0x346c <vfprintf+0x24>
    37e8:	b6 01       	movw	r22, r12
    37ea:	80 e2       	ldi	r24, 0x20	; 32
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	0e 94 1b 1c 	call	0x3836	; 0x3836 <fputc>
    37f2:	2a 94       	dec	r2
    37f4:	f6 cf       	rjmp	.-20     	; 0x37e2 <vfprintf+0x39a>
    37f6:	f6 01       	movw	r30, r12
    37f8:	86 81       	ldd	r24, Z+6	; 0x06
    37fa:	97 81       	ldd	r25, Z+7	; 0x07
    37fc:	02 c0       	rjmp	.+4      	; 0x3802 <vfprintf+0x3ba>
    37fe:	8f ef       	ldi	r24, 0xFF	; 255
    3800:	9f ef       	ldi	r25, 0xFF	; 255
    3802:	2b 96       	adiw	r28, 0x0b	; 11
    3804:	e2 e1       	ldi	r30, 0x12	; 18
    3806:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__epilogue_restores__>

0000380a <strnlen_P>:
    380a:	fc 01       	movw	r30, r24
    380c:	05 90       	lpm	r0, Z+
    380e:	61 50       	subi	r22, 0x01	; 1
    3810:	70 40       	sbci	r23, 0x00	; 0
    3812:	01 10       	cpse	r0, r1
    3814:	d8 f7       	brcc	.-10     	; 0x380c <strnlen_P+0x2>
    3816:	80 95       	com	r24
    3818:	90 95       	com	r25
    381a:	8e 0f       	add	r24, r30
    381c:	9f 1f       	adc	r25, r31
    381e:	08 95       	ret

00003820 <strnlen>:
    3820:	fc 01       	movw	r30, r24
    3822:	61 50       	subi	r22, 0x01	; 1
    3824:	70 40       	sbci	r23, 0x00	; 0
    3826:	01 90       	ld	r0, Z+
    3828:	01 10       	cpse	r0, r1
    382a:	d8 f7       	brcc	.-10     	; 0x3822 <strnlen+0x2>
    382c:	80 95       	com	r24
    382e:	90 95       	com	r25
    3830:	8e 0f       	add	r24, r30
    3832:	9f 1f       	adc	r25, r31
    3834:	08 95       	ret

00003836 <fputc>:
    3836:	0f 93       	push	r16
    3838:	1f 93       	push	r17
    383a:	cf 93       	push	r28
    383c:	df 93       	push	r29
    383e:	fb 01       	movw	r30, r22
    3840:	23 81       	ldd	r18, Z+3	; 0x03
    3842:	21 fd       	sbrc	r18, 1
    3844:	03 c0       	rjmp	.+6      	; 0x384c <fputc+0x16>
    3846:	8f ef       	ldi	r24, 0xFF	; 255
    3848:	9f ef       	ldi	r25, 0xFF	; 255
    384a:	2c c0       	rjmp	.+88     	; 0x38a4 <fputc+0x6e>
    384c:	22 ff       	sbrs	r18, 2
    384e:	16 c0       	rjmp	.+44     	; 0x387c <fputc+0x46>
    3850:	46 81       	ldd	r20, Z+6	; 0x06
    3852:	57 81       	ldd	r21, Z+7	; 0x07
    3854:	24 81       	ldd	r18, Z+4	; 0x04
    3856:	35 81       	ldd	r19, Z+5	; 0x05
    3858:	42 17       	cp	r20, r18
    385a:	53 07       	cpc	r21, r19
    385c:	44 f4       	brge	.+16     	; 0x386e <fputc+0x38>
    385e:	a0 81       	ld	r26, Z
    3860:	b1 81       	ldd	r27, Z+1	; 0x01
    3862:	9d 01       	movw	r18, r26
    3864:	2f 5f       	subi	r18, 0xFF	; 255
    3866:	3f 4f       	sbci	r19, 0xFF	; 255
    3868:	31 83       	std	Z+1, r19	; 0x01
    386a:	20 83       	st	Z, r18
    386c:	8c 93       	st	X, r24
    386e:	26 81       	ldd	r18, Z+6	; 0x06
    3870:	37 81       	ldd	r19, Z+7	; 0x07
    3872:	2f 5f       	subi	r18, 0xFF	; 255
    3874:	3f 4f       	sbci	r19, 0xFF	; 255
    3876:	37 83       	std	Z+7, r19	; 0x07
    3878:	26 83       	std	Z+6, r18	; 0x06
    387a:	14 c0       	rjmp	.+40     	; 0x38a4 <fputc+0x6e>
    387c:	8b 01       	movw	r16, r22
    387e:	ec 01       	movw	r28, r24
    3880:	fb 01       	movw	r30, r22
    3882:	00 84       	ldd	r0, Z+8	; 0x08
    3884:	f1 85       	ldd	r31, Z+9	; 0x09
    3886:	e0 2d       	mov	r30, r0
    3888:	09 95       	icall
    388a:	89 2b       	or	r24, r25
    388c:	e1 f6       	brne	.-72     	; 0x3846 <fputc+0x10>
    388e:	d8 01       	movw	r26, r16
    3890:	16 96       	adiw	r26, 0x06	; 6
    3892:	8d 91       	ld	r24, X+
    3894:	9c 91       	ld	r25, X
    3896:	17 97       	sbiw	r26, 0x07	; 7
    3898:	01 96       	adiw	r24, 0x01	; 1
    389a:	17 96       	adiw	r26, 0x07	; 7
    389c:	9c 93       	st	X, r25
    389e:	8e 93       	st	-X, r24
    38a0:	16 97       	sbiw	r26, 0x06	; 6
    38a2:	ce 01       	movw	r24, r28
    38a4:	df 91       	pop	r29
    38a6:	cf 91       	pop	r28
    38a8:	1f 91       	pop	r17
    38aa:	0f 91       	pop	r16
    38ac:	08 95       	ret

000038ae <__ultoa_invert>:
    38ae:	fa 01       	movw	r30, r20
    38b0:	aa 27       	eor	r26, r26
    38b2:	28 30       	cpi	r18, 0x08	; 8
    38b4:	51 f1       	breq	.+84     	; 0x390a <__ultoa_invert+0x5c>
    38b6:	20 31       	cpi	r18, 0x10	; 16
    38b8:	81 f1       	breq	.+96     	; 0x391a <__ultoa_invert+0x6c>
    38ba:	e8 94       	clt
    38bc:	6f 93       	push	r22
    38be:	6e 7f       	andi	r22, 0xFE	; 254
    38c0:	6e 5f       	subi	r22, 0xFE	; 254
    38c2:	7f 4f       	sbci	r23, 0xFF	; 255
    38c4:	8f 4f       	sbci	r24, 0xFF	; 255
    38c6:	9f 4f       	sbci	r25, 0xFF	; 255
    38c8:	af 4f       	sbci	r26, 0xFF	; 255
    38ca:	b1 e0       	ldi	r27, 0x01	; 1
    38cc:	3e d0       	rcall	.+124    	; 0x394a <__ultoa_invert+0x9c>
    38ce:	b4 e0       	ldi	r27, 0x04	; 4
    38d0:	3c d0       	rcall	.+120    	; 0x394a <__ultoa_invert+0x9c>
    38d2:	67 0f       	add	r22, r23
    38d4:	78 1f       	adc	r23, r24
    38d6:	89 1f       	adc	r24, r25
    38d8:	9a 1f       	adc	r25, r26
    38da:	a1 1d       	adc	r26, r1
    38dc:	68 0f       	add	r22, r24
    38de:	79 1f       	adc	r23, r25
    38e0:	8a 1f       	adc	r24, r26
    38e2:	91 1d       	adc	r25, r1
    38e4:	a1 1d       	adc	r26, r1
    38e6:	6a 0f       	add	r22, r26
    38e8:	71 1d       	adc	r23, r1
    38ea:	81 1d       	adc	r24, r1
    38ec:	91 1d       	adc	r25, r1
    38ee:	a1 1d       	adc	r26, r1
    38f0:	20 d0       	rcall	.+64     	; 0x3932 <__ultoa_invert+0x84>
    38f2:	09 f4       	brne	.+2      	; 0x38f6 <__ultoa_invert+0x48>
    38f4:	68 94       	set
    38f6:	3f 91       	pop	r19
    38f8:	2a e0       	ldi	r18, 0x0A	; 10
    38fa:	26 9f       	mul	r18, r22
    38fc:	11 24       	eor	r1, r1
    38fe:	30 19       	sub	r19, r0
    3900:	30 5d       	subi	r19, 0xD0	; 208
    3902:	31 93       	st	Z+, r19
    3904:	de f6       	brtc	.-74     	; 0x38bc <__ultoa_invert+0xe>
    3906:	cf 01       	movw	r24, r30
    3908:	08 95       	ret
    390a:	46 2f       	mov	r20, r22
    390c:	47 70       	andi	r20, 0x07	; 7
    390e:	40 5d       	subi	r20, 0xD0	; 208
    3910:	41 93       	st	Z+, r20
    3912:	b3 e0       	ldi	r27, 0x03	; 3
    3914:	0f d0       	rcall	.+30     	; 0x3934 <__ultoa_invert+0x86>
    3916:	c9 f7       	brne	.-14     	; 0x390a <__ultoa_invert+0x5c>
    3918:	f6 cf       	rjmp	.-20     	; 0x3906 <__ultoa_invert+0x58>
    391a:	46 2f       	mov	r20, r22
    391c:	4f 70       	andi	r20, 0x0F	; 15
    391e:	40 5d       	subi	r20, 0xD0	; 208
    3920:	4a 33       	cpi	r20, 0x3A	; 58
    3922:	18 f0       	brcs	.+6      	; 0x392a <__ultoa_invert+0x7c>
    3924:	49 5d       	subi	r20, 0xD9	; 217
    3926:	31 fd       	sbrc	r19, 1
    3928:	40 52       	subi	r20, 0x20	; 32
    392a:	41 93       	st	Z+, r20
    392c:	02 d0       	rcall	.+4      	; 0x3932 <__ultoa_invert+0x84>
    392e:	a9 f7       	brne	.-22     	; 0x391a <__ultoa_invert+0x6c>
    3930:	ea cf       	rjmp	.-44     	; 0x3906 <__ultoa_invert+0x58>
    3932:	b4 e0       	ldi	r27, 0x04	; 4
    3934:	a6 95       	lsr	r26
    3936:	97 95       	ror	r25
    3938:	87 95       	ror	r24
    393a:	77 95       	ror	r23
    393c:	67 95       	ror	r22
    393e:	ba 95       	dec	r27
    3940:	c9 f7       	brne	.-14     	; 0x3934 <__ultoa_invert+0x86>
    3942:	00 97       	sbiw	r24, 0x00	; 0
    3944:	61 05       	cpc	r22, r1
    3946:	71 05       	cpc	r23, r1
    3948:	08 95       	ret
    394a:	9b 01       	movw	r18, r22
    394c:	ac 01       	movw	r20, r24
    394e:	0a 2e       	mov	r0, r26
    3950:	06 94       	lsr	r0
    3952:	57 95       	ror	r21
    3954:	47 95       	ror	r20
    3956:	37 95       	ror	r19
    3958:	27 95       	ror	r18
    395a:	ba 95       	dec	r27
    395c:	c9 f7       	brne	.-14     	; 0x3950 <__ultoa_invert+0xa2>
    395e:	62 0f       	add	r22, r18
    3960:	73 1f       	adc	r23, r19
    3962:	84 1f       	adc	r24, r20
    3964:	95 1f       	adc	r25, r21
    3966:	a0 1d       	adc	r26, r0
    3968:	08 95       	ret

0000396a <eeprom_read_block>:
    396a:	dc 01       	movw	r26, r24
    396c:	cb 01       	movw	r24, r22

0000396e <eeprom_read_blraw>:
    396e:	fc 01       	movw	r30, r24
    3970:	e1 99       	sbic	0x1c, 1	; 28
    3972:	fe cf       	rjmp	.-4      	; 0x3970 <eeprom_read_blraw+0x2>
    3974:	06 c0       	rjmp	.+12     	; 0x3982 <eeprom_read_blraw+0x14>
    3976:	ff bb       	out	0x1f, r31	; 31
    3978:	ee bb       	out	0x1e, r30	; 30
    397a:	e0 9a       	sbi	0x1c, 0	; 28
    397c:	31 96       	adiw	r30, 0x01	; 1
    397e:	0d b2       	in	r0, 0x1d	; 29
    3980:	0d 92       	st	X+, r0
    3982:	41 50       	subi	r20, 0x01	; 1
    3984:	50 40       	sbci	r21, 0x00	; 0
    3986:	b8 f7       	brcc	.-18     	; 0x3976 <eeprom_read_blraw+0x8>
    3988:	08 95       	ret

0000398a <eeprom_read_byte>:
    398a:	e1 99       	sbic	0x1c, 1	; 28
    398c:	fe cf       	rjmp	.-4      	; 0x398a <eeprom_read_byte>
    398e:	9f bb       	out	0x1f, r25	; 31
    3990:	8e bb       	out	0x1e, r24	; 30
    3992:	e0 9a       	sbi	0x1c, 0	; 28
    3994:	99 27       	eor	r25, r25
    3996:	8d b3       	in	r24, 0x1d	; 29
    3998:	08 95       	ret

0000399a <eeprom_write_block>:
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	03 c0       	rjmp	.+6      	; 0x39a6 <eeprom_write_block+0xc>
    39a0:	2d 91       	ld	r18, X+
    39a2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <eeprom_write_r18>
    39a6:	41 50       	subi	r20, 0x01	; 1
    39a8:	50 40       	sbci	r21, 0x00	; 0
    39aa:	d0 f7       	brcc	.-12     	; 0x39a0 <eeprom_write_block+0x6>
    39ac:	08 95       	ret

000039ae <eeprom_write_byte>:
    39ae:	26 2f       	mov	r18, r22

000039b0 <eeprom_write_r18>:
    39b0:	e1 99       	sbic	0x1c, 1	; 28
    39b2:	fe cf       	rjmp	.-4      	; 0x39b0 <eeprom_write_r18>
    39b4:	9f bb       	out	0x1f, r25	; 31
    39b6:	8e bb       	out	0x1e, r24	; 30
    39b8:	2d bb       	out	0x1d, r18	; 29
    39ba:	0f b6       	in	r0, 0x3f	; 63
    39bc:	f8 94       	cli
    39be:	e2 9a       	sbi	0x1c, 2	; 28
    39c0:	e1 9a       	sbi	0x1c, 1	; 28
    39c2:	0f be       	out	0x3f, r0	; 63
    39c4:	01 96       	adiw	r24, 0x01	; 1
    39c6:	08 95       	ret

000039c8 <__prologue_saves__>:
    39c8:	2f 92       	push	r2
    39ca:	3f 92       	push	r3
    39cc:	4f 92       	push	r4
    39ce:	5f 92       	push	r5
    39d0:	6f 92       	push	r6
    39d2:	7f 92       	push	r7
    39d4:	8f 92       	push	r8
    39d6:	9f 92       	push	r9
    39d8:	af 92       	push	r10
    39da:	bf 92       	push	r11
    39dc:	cf 92       	push	r12
    39de:	df 92       	push	r13
    39e0:	ef 92       	push	r14
    39e2:	ff 92       	push	r15
    39e4:	0f 93       	push	r16
    39e6:	1f 93       	push	r17
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	cd b7       	in	r28, 0x3d	; 61
    39ee:	de b7       	in	r29, 0x3e	; 62
    39f0:	ca 1b       	sub	r28, r26
    39f2:	db 0b       	sbc	r29, r27
    39f4:	0f b6       	in	r0, 0x3f	; 63
    39f6:	f8 94       	cli
    39f8:	de bf       	out	0x3e, r29	; 62
    39fa:	0f be       	out	0x3f, r0	; 63
    39fc:	cd bf       	out	0x3d, r28	; 61
    39fe:	09 94       	ijmp

00003a00 <__epilogue_restores__>:
    3a00:	2a 88       	ldd	r2, Y+18	; 0x12
    3a02:	39 88       	ldd	r3, Y+17	; 0x11
    3a04:	48 88       	ldd	r4, Y+16	; 0x10
    3a06:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a08:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a0a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a0c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a0e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a10:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a12:	b9 84       	ldd	r11, Y+9	; 0x09
    3a14:	c8 84       	ldd	r12, Y+8	; 0x08
    3a16:	df 80       	ldd	r13, Y+7	; 0x07
    3a18:	ee 80       	ldd	r14, Y+6	; 0x06
    3a1a:	fd 80       	ldd	r15, Y+5	; 0x05
    3a1c:	0c 81       	ldd	r16, Y+4	; 0x04
    3a1e:	1b 81       	ldd	r17, Y+3	; 0x03
    3a20:	aa 81       	ldd	r26, Y+2	; 0x02
    3a22:	b9 81       	ldd	r27, Y+1	; 0x01
    3a24:	ce 0f       	add	r28, r30
    3a26:	d1 1d       	adc	r29, r1
    3a28:	0f b6       	in	r0, 0x3f	; 63
    3a2a:	f8 94       	cli
    3a2c:	de bf       	out	0x3e, r29	; 62
    3a2e:	0f be       	out	0x3f, r0	; 63
    3a30:	cd bf       	out	0x3d, r28	; 61
    3a32:	ed 01       	movw	r28, r26
    3a34:	08 95       	ret

00003a36 <_exit>:
    3a36:	f8 94       	cli

00003a38 <__stop_program>:
    3a38:	ff cf       	rjmp	.-2      	; 0x3a38 <__stop_program>
