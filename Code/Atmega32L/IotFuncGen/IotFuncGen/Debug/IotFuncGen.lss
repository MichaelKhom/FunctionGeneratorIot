
IotFuncGen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000570  00800060  000017ce  00001862  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000142  008005d0  008005d0  00001dd2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000583c  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee3  00000000  00000000  00007938  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a5a  00000000  00000000  0000881b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000774  00000000  00000000  0000b278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000103e  00000000  00000000  0000b9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003625  00000000  00000000  0000ca2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0001004f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__vector_13>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      54:	a3 04       	cpc	r10, r3
      56:	a5 04       	cpc	r10, r5
      58:	a7 04       	cpc	r10, r7
      5a:	a9 04       	cpc	r10, r9
      5c:	ab 04       	cpc	r10, r11
      5e:	ad 04       	cpc	r10, r13
      60:	af 04       	cpc	r10, r15
      62:	c9 04       	cpc	r12, r9
      64:	cb 04       	cpc	r12, r11
      66:	cd 04       	cpc	r12, r13
      68:	cf 04       	cpc	r12, r15
      6a:	d1 04       	cpc	r13, r1
      6c:	d3 04       	cpc	r13, r3
      6e:	d5 04       	cpc	r13, r5
      70:	01 05       	cpc	r16, r1
      72:	2c 05       	cpc	r18, r12
      74:	57 05       	cpc	r21, r7
      76:	82 05       	cpc	r24, r2
      78:	b5 05       	cpc	r27, r5
      7a:	e8 05       	cpc	r30, r8
      7c:	1b 06       	cpc	r1, r27
      7e:	4e 06       	cpc	r4, r30
      80:	4e 06       	cpc	r4, r30
      82:	c2 06       	cpc	r12, r18

00000084 <__ctors_end>:
      84:	11 24       	eor	r1, r1
      86:	1f be       	out	0x3f, r1	; 63
      88:	cf e5       	ldi	r28, 0x5F	; 95
      8a:	d8 e0       	ldi	r29, 0x08	; 8
      8c:	de bf       	out	0x3e, r29	; 62
      8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
      90:	15 e0       	ldi	r17, 0x05	; 5
      92:	a0 e6       	ldi	r26, 0x60	; 96
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ee ec       	ldi	r30, 0xCE	; 206
      98:	f7 e1       	ldi	r31, 0x17	; 23
      9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
      9c:	05 90       	lpm	r0, Z+
      9e:	0d 92       	st	X+, r0
      a0:	a0 3d       	cpi	r26, 0xD0	; 208
      a2:	b1 07       	cpc	r27, r17
      a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
      a6:	27 e0       	ldi	r18, 0x07	; 7
      a8:	a0 ed       	ldi	r26, 0xD0	; 208
      aa:	b5 e0       	ldi	r27, 0x05	; 5
      ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
      ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
      b0:	a2 31       	cpi	r26, 0x12	; 18
      b2:	b2 07       	cpc	r27, r18
      b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
      b6:	0e 94 a7 03 	call	0x74e	; 0x74e <main>
      ba:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <Init_LCD>:
#include "Headers/SPIMaster.h"
#include "Headers/LCD.h"

void Init_LCD(void)
{
	lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
      c2:	8f 9a       	sbi	0x11, 7	; 17
	lcd_D6_ddr |= (1<<lcd_D6_bit);
      c4:	8e 9a       	sbi	0x11, 6	; 17
	lcd_D5_ddr |= (1<<lcd_D5_bit);
      c6:	8d 9a       	sbi	0x11, 5	; 17
	lcd_D4_ddr |= (1<<lcd_D4_bit);
      c8:	8c 9a       	sbi	0x11, 4	; 17
	lcd_E_ddr  |= (1<<lcd_E_bit);                    // E line - output
      ca:	b9 9a       	sbi	0x17, 1	; 23
	lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
      cc:	b8 9a       	sbi	0x17, 0	; 23
      ce:	08 95       	ret

000000d0 <lcd_write_4>:
	lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
	lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
}

void lcd_write_4(uint8_t theByte) {
	lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
      d0:	97 98       	cbi	0x12, 7	; 18
	if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
      d2:	88 23       	and	r24, r24
      d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write_4+0x8>
      d6:	97 9a       	sbi	0x12, 7	; 18
	lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
      d8:	96 98       	cbi	0x12, 6	; 18
	if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
      da:	86 fd       	sbrc	r24, 6
      dc:	96 9a       	sbi	0x12, 6	; 18
	lcd_D5_port &= ~(1<<lcd_D5_bit);
      de:	95 98       	cbi	0x12, 5	; 18
	if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
      e0:	85 fd       	sbrc	r24, 5
      e2:	95 9a       	sbi	0x12, 5	; 18
	lcd_D4_port &= ~(1<<lcd_D4_bit);
      e4:	94 98       	cbi	0x12, 4	; 18
	if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
      e6:	84 fd       	sbrc	r24, 4
      e8:	94 9a       	sbi	0x12, 4	; 18
	// write the data
	// 'Address set-up time' (40 nS)
	lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
      ea:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ec:	8a eb       	ldi	r24, 0xBA	; 186
      ee:	8a 95       	dec	r24
      f0:	f1 f7       	brne	.-4      	; 0xee <lcd_write_4+0x1e>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_write_4+0x24>
	_delay_us(70);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
	lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
      f4:	c1 98       	cbi	0x18, 1	; 24
      f6:	8a eb       	ldi	r24, 0xBA	; 186
      f8:	8a 95       	dec	r24
      fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_write_4+0x28>
      fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd_write_4+0x2e>
      fe:	08 95       	ret

00000100 <lcd_write_character_4d>:
	i++;
	_delay_us(160);                              // 40 uS delay (min)
	}
	}

void lcd_write_character_4d(uint8_t theData) {
     100:	cf 93       	push	r28
     102:	c8 2f       	mov	r28, r24
	lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
     104:	c0 9a       	sbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     106:	c1 98       	cbi	0x18, 1	; 24
	lcd_write_4(theData);                           // write the upper 4-bits of the data
     108:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_4>
	lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     10c:	8c 2f       	mov	r24, r28
     10e:	82 95       	swap	r24
     110:	80 7f       	andi	r24, 0xF0	; 240
     112:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_4>
}
     116:	cf 91       	pop	r28
     118:	08 95       	ret

0000011a <lcd_write_string_4d>:
	lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
	_delay_us(90);                                  // 40uS delay (min)
}


void lcd_write_string_4d(char theString[]) {
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	00 d0       	rcall	.+0      	; 0x124 <lcd_write_string_4d+0xa>
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
     128:	8c 01       	movw	r16, r24
	volatile int i = 0;                             // character counter*/
     12a:	1a 82       	std	Y+2, r1	; 0x02
     12c:	19 82       	std	Y+1, r1	; 0x01
	while (theString[i] != 0)
     12e:	e9 81       	ldd	r30, Y+1	; 0x01
     130:	fa 81       	ldd	r31, Y+2	; 0x02
     132:	e8 0f       	add	r30, r24
     134:	f9 1f       	adc	r31, r25
     136:	80 81       	ld	r24, Z
     138:	88 23       	and	r24, r24
     13a:	c9 f0       	breq	.+50     	; 0x16e <lcd_write_string_4d+0x54>
	{
	lcd_write_character_4d(theString[i]);
     13c:	e9 81       	ldd	r30, Y+1	; 0x01
     13e:	fa 81       	ldd	r31, Y+2	; 0x02
     140:	e0 0f       	add	r30, r16
     142:	f1 1f       	adc	r31, r17
     144:	80 81       	ld	r24, Z
     146:	0e 94 80 00 	call	0x100	; 0x100 <lcd_write_character_4d>
	i++;
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	9a 81       	ldd	r25, Y+2	; 0x02
     14e:	01 96       	adiw	r24, 0x01	; 1
     150:	9a 83       	std	Y+2, r25	; 0x02
     152:	89 83       	std	Y+1, r24	; 0x01
     154:	8f e3       	ldi	r24, 0x3F	; 63
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	01 97       	sbiw	r24, 0x01	; 1
     15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_write_string_4d+0x3e>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <lcd_write_string_4d+0x44>
     15e:	00 00       	nop
}


void lcd_write_string_4d(char theString[]) {
	volatile int i = 0;                             // character counter*/
	while (theString[i] != 0)
     160:	e9 81       	ldd	r30, Y+1	; 0x01
     162:	fa 81       	ldd	r31, Y+2	; 0x02
     164:	e0 0f       	add	r30, r16
     166:	f1 1f       	adc	r31, r17
     168:	80 81       	ld	r24, Z
     16a:	81 11       	cpse	r24, r1
     16c:	e7 cf       	rjmp	.-50     	; 0x13c <lcd_write_string_4d+0x22>
	{
	lcd_write_character_4d(theString[i]);
	i++;
	_delay_us(160);                              // 40 uS delay (min)
	}
	}
     16e:	0f 90       	pop	r0
     170:	0f 90       	pop	r0
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <lcd_write_instruction_4d>:
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
	lcd_write_4(theData);                           // write the upper 4-bits of the data
	lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
}

void lcd_write_instruction_4d(uint8_t theInstruction) {
     17c:	cf 93       	push	r28
     17e:	c8 2f       	mov	r28, r24
	lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     180:	c0 98       	cbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     182:	c1 98       	cbi	0x18, 1	; 24
	lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     184:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_4>
	lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     188:	8c 2f       	mov	r24, r28
     18a:	82 95       	swap	r24
     18c:	80 7f       	andi	r24, 0xF0	; 240
     18e:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_4>
}
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <Init_LCD_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     196:	2f ef       	ldi	r18, 0xFF	; 255
     198:	80 e7       	ldi	r24, 0x70	; 112
     19a:	92 e0       	ldi	r25, 0x02	; 2
     19c:	21 50       	subi	r18, 0x01	; 1
     19e:	80 40       	sbci	r24, 0x00	; 0
     1a0:	90 40       	sbci	r25, 0x00	; 0
     1a2:	e1 f7       	brne	.-8      	; 0x19c <Init_LCD_4bit+0x6>
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <Init_LCD_4bit+0x10>
     1a6:	00 00       	nop
{
	// Power-up delay
	_delay_ms(100);                                 // initial 40 mSec delay

	// Set up the RS and E lines for the 'lcd_write_4' subroutine.
	lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     1a8:	c0 98       	cbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     1aa:	c1 98       	cbi	0x18, 1	; 24

	// Reset the LCD controller
	lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     1ac:	80 e3       	ldi	r24, 0x30	; 48
     1ae:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_4>
     1b2:	8f e3       	ldi	r24, 0x3F	; 63
     1b4:	9c e9       	ldi	r25, 0x9C	; 156
     1b6:	01 97       	sbiw	r24, 0x01	; 1
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <Init_LCD_4bit+0x20>
     1ba:	00 c0       	rjmp	.+0      	; 0x1bc <Init_LCD_4bit+0x26>
     1bc:	00 00       	nop
	_delay_ms(20);                                  // 4.1 mS delay (min)

	lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     1be:	80 e3       	ldi	r24, 0x30	; 48
     1c0:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c4:	87 e5       	ldi	r24, 0x57	; 87
     1c6:	92 e0       	ldi	r25, 0x02	; 2
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <Init_LCD_4bit+0x32>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <Init_LCD_4bit+0x38>
     1ce:	00 00       	nop
	_delay_us(300);                                 // 100uS delay (min)

	lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     1d0:	80 e3       	ldi	r24, 0x30	; 48
     1d2:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_4>
     1d6:	87 e5       	ldi	r24, 0x57	; 87
     1d8:	92 e0       	ldi	r25, 0x02	; 2
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	f1 f7       	brne	.-4      	; 0x1da <Init_LCD_4bit+0x44>
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <Init_LCD_4bit+0x4a>
     1e0:	00 00       	nop
	_delay_us(300);                                 // this delay is omitted in the data sheet
	
	lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     1e2:	88 e2       	ldi	r24, 0x28	; 40
     1e4:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_4>
     1e8:	90 ef       	ldi	r25, 0xF0	; 240
     1ea:	9a 95       	dec	r25
     1ec:	f1 f7       	brne	.-4      	; 0x1ea <Init_LCD_4bit+0x54>
	_delay_us(90);                                  // 40uS delay (min)

	// Function Set instruction
	lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     1ee:	88 e2       	ldi	r24, 0x28	; 40
     1f0:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_write_instruction_4d>
     1f4:	20 ef       	ldi	r18, 0xF0	; 240
     1f6:	2a 95       	dec	r18
     1f8:	f1 f7       	brne	.-4      	; 0x1f6 <Init_LCD_4bit+0x60>
	_delay_us(90);                                  // 40uS delay (min)

	// Display On/Off Control instruction
	lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     1fa:	88 e0       	ldi	r24, 0x08	; 8
     1fc:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_write_instruction_4d>
     200:	80 ef       	ldi	r24, 0xF0	; 240
     202:	8a 95       	dec	r24
     204:	f1 f7       	brne	.-4      	; 0x202 <Init_LCD_4bit+0x6c>
	_delay_us(90);                                  // 40uS delay (min)

	// Clear Display instruction
	lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20c:	8f e7       	ldi	r24, 0x7F	; 127
     20e:	9e e3       	ldi	r25, 0x3E	; 62
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <Init_LCD_4bit+0x7a>
     214:	00 c0       	rjmp	.+0      	; 0x216 <Init_LCD_4bit+0x80>
     216:	00 00       	nop
	_delay_ms(8);                                   // 1.64 mS delay (min)

	// ; Entry Mode Set instruction
	lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     218:	86 e0       	ldi	r24, 0x06	; 6
     21a:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21e:	90 ef       	ldi	r25, 0xF0	; 240
     220:	9a 95       	dec	r25
     222:	f1 f7       	brne	.-4      	; 0x220 <Init_LCD_4bit+0x8a>
	_delay_us(90);                                  // 40uS delay (min)

	// Display On/Off Control instruction
	lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     224:	8c e0       	ldi	r24, 0x0C	; 12
     226:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_write_instruction_4d>
     22a:	20 ef       	ldi	r18, 0xF0	; 240
     22c:	2a 95       	dec	r18
     22e:	f1 f7       	brne	.-4      	; 0x22c <Init_LCD_4bit+0x96>
     230:	08 95       	ret

00000232 <print_LCD_line>:
	snprintf(lbuff, 20, "  Firmware Rev:%c.%c  ", FIRMWARE_VERSION_A, FIRMWARE_VERSION_B);
	print_LCD_line(lbuff, LCD_LINE_3);
	print_LCD_line("  KhomLabs Design   ", LCD_LINE_4);
}

void print_LCD_line(char *input_string, uint8_t line_number) {
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	ec 01       	movw	r28, r24
	lcd_write_instruction_4d(LCD_SET_CURSOR | line_number);
     238:	86 2f       	mov	r24, r22
     23a:	80 68       	ori	r24, 0x80	; 128
     23c:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_write_instruction_4d>
	lcd_write_string_4d(input_string);
     240:	ce 01       	movw	r24, r28
     242:	0e 94 8d 00 	call	0x11a	; 0x11a <lcd_write_string_4d>
}
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	08 95       	ret

0000024c <LCD_logo_display>:
	_delay_us(70);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
	lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
	_delay_us(70);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
	}
	
void LCD_logo_display() {
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	64 97       	sbiw	r28, 0x14	; 20
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
	char lbuff[20];
	print_LCD_line("  IoT Dual-Channel  ", LCD_LINE_1);
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	80 e6       	ldi	r24, 0x60	; 96
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 19 01 	call	0x232	; 0x232 <print_LCD_line>
	print_LCD_line(" Function Generator ", LCD_LINE_2);
     26e:	60 e4       	ldi	r22, 0x40	; 64
     270:	85 e7       	ldi	r24, 0x75	; 117
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 19 01 	call	0x232	; 0x232 <print_LCD_line>
	snprintf(lbuff, 20, "  Firmware Rev:%c.%c  ", FIRMWARE_VERSION_A, FIRMWARE_VERSION_B);
     278:	1f 92       	push	r1
     27a:	80 e3       	ldi	r24, 0x30	; 48
     27c:	8f 93       	push	r24
     27e:	1f 92       	push	r1
     280:	82 e3       	ldi	r24, 0x32	; 50
     282:	8f 93       	push	r24
     284:	8a e8       	ldi	r24, 0x8A	; 138
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	9f 93       	push	r25
     28a:	8f 93       	push	r24
     28c:	1f 92       	push	r1
     28e:	84 e1       	ldi	r24, 0x14	; 20
     290:	8f 93       	push	r24
     292:	8e 01       	movw	r16, r28
     294:	0f 5f       	subi	r16, 0xFF	; 255
     296:	1f 4f       	sbci	r17, 0xFF	; 255
     298:	1f 93       	push	r17
     29a:	0f 93       	push	r16
     29c:	0e 94 ed 08 	call	0x11da	; 0x11da <snprintf>
	print_LCD_line(lbuff, LCD_LINE_3);
     2a0:	64 e1       	ldi	r22, 0x14	; 20
     2a2:	c8 01       	movw	r24, r16
     2a4:	0e 94 19 01 	call	0x232	; 0x232 <print_LCD_line>
	print_LCD_line("  KhomLabs Design   ", LCD_LINE_4);
     2a8:	64 e5       	ldi	r22, 0x54	; 84
     2aa:	81 ea       	ldi	r24, 0xA1	; 161
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 19 01 	call	0x232	; 0x232 <print_LCD_line>
}
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	64 96       	adiw	r28, 0x14	; 20
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	cd bf       	out	0x3d, r28	; 61
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	08 95       	ret

000002d2 <play_melody>:
					}
					send_command_UART(WIFI.device_MAC); // MAC String transmission
					while(true) {
						if (poll_switch()) shutdown_sequence(true);
						if (UART.message_received) {
							pairing_state = RETRIEVE_CREDENTIALS;
     2d2:	88 23       	and	r24, r24
     2d4:	b1 f1       	breq	.+108    	; 0x342 <play_melody+0x70>
     2d6:	8c ee       	ldi	r24, 0xEC	; 236
     2d8:	db 9a       	sbi	0x1b, 3	; 27
     2da:	e3 e5       	ldi	r30, 0x53	; 83
     2dc:	f3 e0       	ldi	r31, 0x03	; 3
     2de:	31 97       	sbiw	r30, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <play_melody+0xc>
     2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <play_melody+0x12>
     2e4:	00 00       	nop
     2e6:	db 98       	cbi	0x1b, 3	; 27
     2e8:	e3 e5       	ldi	r30, 0x53	; 83
     2ea:	f3 e0       	ldi	r31, 0x03	; 3
     2ec:	31 97       	sbiw	r30, 0x01	; 1
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <play_melody+0x1a>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <play_melody+0x20>
     2f2:	00 00       	nop
     2f4:	81 50       	subi	r24, 0x01	; 1
     2f6:	81 f7       	brne	.-32     	; 0x2d8 <play_melody+0x6>
     2f8:	88 e2       	ldi	r24, 0x28	; 40
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	db 9a       	sbi	0x1b, 3	; 27
     2fe:	e3 ea       	ldi	r30, 0xA3	; 163
     300:	f2 e0       	ldi	r31, 0x02	; 2
     302:	31 97       	sbiw	r30, 0x01	; 1
     304:	f1 f7       	brne	.-4      	; 0x302 <play_melody+0x30>
     306:	00 c0       	rjmp	.+0      	; 0x308 <play_melody+0x36>
     308:	00 00       	nop
     30a:	db 98       	cbi	0x1b, 3	; 27
     30c:	e3 ea       	ldi	r30, 0xA3	; 163
     30e:	f2 e0       	ldi	r31, 0x02	; 2
     310:	31 97       	sbiw	r30, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <play_melody+0x3e>
     314:	00 c0       	rjmp	.+0      	; 0x316 <play_melody+0x44>
     316:	00 00       	nop
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	81 f7       	brne	.-32     	; 0x2fc <play_melody+0x2a>
     31c:	80 ec       	ldi	r24, 0xC0	; 192
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	db 9a       	sbi	0x1b, 3	; 27
     322:	e7 e3       	ldi	r30, 0x37	; 55
     324:	f2 e0       	ldi	r31, 0x02	; 2
     326:	31 97       	sbiw	r30, 0x01	; 1
     328:	f1 f7       	brne	.-4      	; 0x326 <play_melody+0x54>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <play_melody+0x5a>
     32c:	00 00       	nop
     32e:	db 98       	cbi	0x1b, 3	; 27
     330:	e7 e3       	ldi	r30, 0x37	; 55
     332:	f2 e0       	ldi	r31, 0x02	; 2
     334:	31 97       	sbiw	r30, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <play_melody+0x62>
     338:	00 c0       	rjmp	.+0      	; 0x33a <play_melody+0x68>
     33a:	00 00       	nop
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	81 f7       	brne	.-32     	; 0x320 <play_melody+0x4e>
     340:	08 95       	ret
     342:	88 e2       	ldi	r24, 0x28	; 40
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	db 9a       	sbi	0x1b, 3	; 27
     348:	e3 ea       	ldi	r30, 0xA3	; 163
     34a:	f2 e0       	ldi	r31, 0x02	; 2
     34c:	31 97       	sbiw	r30, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <play_melody+0x7a>
     350:	00 c0       	rjmp	.+0      	; 0x352 <play_melody+0x80>
     352:	00 00       	nop
     354:	db 98       	cbi	0x1b, 3	; 27
     356:	e3 ea       	ldi	r30, 0xA3	; 163
     358:	f2 e0       	ldi	r31, 0x02	; 2
     35a:	31 97       	sbiw	r30, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <play_melody+0x88>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <play_melody+0x8e>
     360:	00 00       	nop
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	81 f7       	brne	.-32     	; 0x346 <play_melody+0x74>
     366:	8c ee       	ldi	r24, 0xEC	; 236
     368:	db 9a       	sbi	0x1b, 3	; 27
     36a:	e3 e5       	ldi	r30, 0x53	; 83
     36c:	f3 e0       	ldi	r31, 0x03	; 3
     36e:	31 97       	sbiw	r30, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <play_melody+0x9c>
     372:	00 c0       	rjmp	.+0      	; 0x374 <play_melody+0xa2>
     374:	00 00       	nop
     376:	db 98       	cbi	0x1b, 3	; 27
     378:	e3 e5       	ldi	r30, 0x53	; 83
     37a:	f3 e0       	ldi	r31, 0x03	; 3
     37c:	31 97       	sbiw	r30, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <play_melody+0xaa>
     380:	00 c0       	rjmp	.+0      	; 0x382 <play_melody+0xb0>
     382:	00 00       	nop
     384:	81 50       	subi	r24, 0x01	; 1
     386:	81 f7       	brne	.-32     	; 0x368 <play_melody+0x96>
     388:	80 e6       	ldi	r24, 0x60	; 96
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	db 9a       	sbi	0x1b, 3	; 27
     38e:	ef e6       	ldi	r30, 0x6F	; 111
     390:	f4 e0       	ldi	r31, 0x04	; 4
     392:	31 97       	sbiw	r30, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <play_melody+0xc0>
     396:	00 c0       	rjmp	.+0      	; 0x398 <play_melody+0xc6>
     398:	00 00       	nop
     39a:	db 98       	cbi	0x1b, 3	; 27
     39c:	ef e6       	ldi	r30, 0x6F	; 111
     39e:	f4 e0       	ldi	r31, 0x04	; 4
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <play_melody+0xce>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <play_melody+0xd4>
     3a6:	00 00       	nop
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	81 f7       	brne	.-32     	; 0x38c <play_melody+0xba>
     3ac:	08 95       	ret

000003ae <Init_Ports>:
     3ae:	84 b3       	in	r24, 0x14	; 20
     3b0:	8c 6f       	ori	r24, 0xFC	; 252
     3b2:	84 bb       	out	0x14, r24	; 20
     3b4:	d4 9a       	sbi	0x1a, 4	; 26
     3b6:	87 b3       	in	r24, 0x17	; 23
     3b8:	8c 61       	ori	r24, 0x1C	; 28
     3ba:	87 bb       	out	0x17, r24	; 23
     3bc:	87 b3       	in	r24, 0x17	; 23
     3be:	83 60       	ori	r24, 0x03	; 3
     3c0:	87 bb       	out	0x17, r24	; 23
     3c2:	81 b3       	in	r24, 0x11	; 17
     3c4:	80 6f       	ori	r24, 0xF0	; 240
     3c6:	81 bb       	out	0x11, r24	; 17
     3c8:	8a b3       	in	r24, 0x1a	; 26
     3ca:	8c 7f       	andi	r24, 0xFC	; 252
     3cc:	8a bb       	out	0x1a, r24	; 26
     3ce:	87 b3       	in	r24, 0x17	; 23
     3d0:	80 6a       	ori	r24, 0xA0	; 160
     3d2:	87 bb       	out	0x17, r24	; 23
     3d4:	be 98       	cbi	0x17, 6	; 23
     3d6:	89 9a       	sbi	0x11, 1	; 17
     3d8:	88 98       	cbi	0x11, 0	; 17
     3da:	84 b3       	in	r24, 0x14	; 20
     3dc:	83 60       	ori	r24, 0x03	; 3
     3de:	84 bb       	out	0x14, r24	; 20
     3e0:	8a 98       	cbi	0x11, 2	; 17
     3e2:	8a b3       	in	r24, 0x1a	; 26
     3e4:	8c 60       	ori	r24, 0x0C	; 12
     3e6:	8a bb       	out	0x1a, r24	; 26
     3e8:	08 95       	ret

000003ea <Init_ADC>:
     3ea:	86 b1       	in	r24, 0x06	; 6
     3ec:	87 68       	ori	r24, 0x87	; 135
     3ee:	86 b9       	out	0x06, r24	; 6
     3f0:	3e 9a       	sbi	0x07, 6	; 7
     3f2:	08 95       	ret

000003f4 <set_LCD_contrast>:
     3f4:	2f ef       	ldi	r18, 0xFF	; 255
     3f6:	82 9f       	mul	r24, r18
     3f8:	c0 01       	movw	r24, r0
     3fa:	11 24       	eor	r1, r1
     3fc:	64 e6       	ldi	r22, 0x64	; 100
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	0e 94 bf 08 	call	0x117e	; 0x117e <__divmodhi4>
     404:	60 95       	com	r22
     406:	47 e0       	ldi	r20, 0x07	; 7
     408:	81 e1       	ldi	r24, 0x11	; 17
     40a:	0e 94 96 04 	call	0x92c	; 0x92c <SPI_write_16bit>
     40e:	08 95       	ret

00000410 <set_LCD_brightness>:
     410:	85 36       	cpi	r24, 0x65	; 101
     412:	f8 f4       	brcc	.+62     	; 0x452 <set_LCD_brightness+0x42>
     414:	29 e1       	ldi	r18, 0x19	; 25
     416:	82 9f       	mul	r24, r18
     418:	c0 01       	movw	r24, r0
     41a:	11 24       	eor	r1, r1
     41c:	64 e6       	ldi	r22, 0x64	; 100
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	0e 94 bf 08 	call	0x117e	; 0x117e <__divmodhi4>
     424:	65 5b       	subi	r22, 0xB5	; 181
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__floatsisf>
     430:	2d ec       	ldi	r18, 0xCD	; 205
     432:	3c ec       	ldi	r19, 0xCC	; 204
     434:	43 e2       	ldi	r20, 0x23	; 35
     436:	52 e4       	ldi	r21, 0x42	; 66
     438:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3>
     43c:	0e 94 95 07 	call	0xf2a	; 0xf2a <__fixunssfsi>
     440:	87 2f       	mov	r24, r23
     442:	8f 70       	andi	r24, 0x0F	; 15
     444:	42 e0       	ldi	r20, 0x02	; 2
     446:	80 67       	ori	r24, 0x70	; 112
     448:	0e 94 96 04 	call	0x92c	; 0x92c <SPI_write_16bit>
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	08 95       	ret
     452:	8f ef       	ldi	r24, 0xFF	; 255
     454:	9f ef       	ldi	r25, 0xFF	; 255
     456:	08 95       	ret

00000458 <set_animated_brightness>:
     458:	cf 93       	push	r28
     45a:	c0 e0       	ldi	r28, 0x00	; 0
     45c:	8c 2f       	mov	r24, r28
     45e:	0e 94 08 02 	call	0x410	; 0x410 <set_LCD_brightness>
     462:	8f e1       	ldi	r24, 0x1F	; 31
     464:	9e e4       	ldi	r25, 0x4E	; 78
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <set_animated_brightness+0xe>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <set_animated_brightness+0x14>
     46c:	00 00       	nop
     46e:	cf 5f       	subi	r28, 0xFF	; 255
     470:	c5 36       	cpi	r28, 0x65	; 101
     472:	a1 f7       	brne	.-24     	; 0x45c <set_animated_brightness+0x4>
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <Init_UI>:
     478:	0e 94 2c 02 	call	0x458	; 0x458 <set_animated_brightness>
     47c:	84 e6       	ldi	r24, 0x64	; 100
     47e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <set_LCD_contrast>
     482:	0e 94 26 01 	call	0x24c	; 0x24c <LCD_logo_display>
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	0e 94 69 01 	call	0x2d2	; 0x2d2 <play_melody>
     48c:	2f ef       	ldi	r18, 0xFF	; 255
     48e:	83 ed       	ldi	r24, 0xD3	; 211
     490:	90 e3       	ldi	r25, 0x30	; 48
     492:	21 50       	subi	r18, 0x01	; 1
     494:	80 40       	sbci	r24, 0x00	; 0
     496:	90 40       	sbci	r25, 0x00	; 0
     498:	e1 f7       	brne	.-8      	; 0x492 <Init_UI+0x1a>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <Init_UI+0x24>
     49c:	00 00       	nop
     49e:	08 95       	ret

000004a0 <update_ac_power_status>:
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	00 d0       	rcall	.+0      	; 0x4a6 <update_ac_power_status+0x6>
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
     4aa:	1a 82       	std	Y+2, r1	; 0x02
     4ac:	19 82       	std	Y+1, r1	; 0x01
     4ae:	38 9a       	sbi	0x07, 0	; 7
     4b0:	36 9a       	sbi	0x06, 6	; 6
     4b2:	36 99       	sbic	0x06, 6	; 6
     4b4:	fe cf       	rjmp	.-4      	; 0x4b2 <update_ac_power_status+0x12>
     4b6:	84 b1       	in	r24, 0x04	; 4
     4b8:	95 b1       	in	r25, 0x05	; 5
     4ba:	9a 83       	std	Y+2, r25	; 0x02
     4bc:	89 83       	std	Y+1, r24	; 0x01
     4be:	36 9a       	sbi	0x06, 6	; 6
     4c0:	36 99       	sbic	0x06, 6	; 6
     4c2:	fe cf       	rjmp	.-4      	; 0x4c0 <update_ac_power_status+0x20>
     4c4:	24 b1       	in	r18, 0x04	; 4
     4c6:	35 b1       	in	r19, 0x05	; 5
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	82 0f       	add	r24, r18
     4ce:	93 1f       	adc	r25, r19
     4d0:	96 95       	lsr	r25
     4d2:	87 95       	ror	r24
     4d4:	9a 83       	std	Y+2, r25	; 0x02
     4d6:	89 83       	std	Y+1, r24	; 0x01
     4d8:	89 81       	ldd	r24, Y+1	; 0x01
     4da:	9a 81       	ldd	r25, Y+2	; 0x02
     4dc:	84 3f       	cpi	r24, 0xF4	; 244
     4de:	91 40       	sbci	r25, 0x01	; 1
     4e0:	18 f4       	brcc	.+6      	; 0x4e8 <update_ac_power_status+0x48>
     4e2:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <__data_end+0x1>
     4e6:	03 c0       	rjmp	.+6      	; 0x4ee <update_ac_power_status+0x4e>
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <__data_end+0x1>
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <get_li_ion_percentage>:
     4f8:	84 3e       	cpi	r24, 0xE4	; 228
     4fa:	2c e0       	ldi	r18, 0x0C	; 12
     4fc:	92 07       	cpc	r25, r18
     4fe:	08 f4       	brcc	.+2      	; 0x502 <get_li_ion_percentage+0xa>
     500:	a6 c0       	rjmp	.+332    	; 0x64e <get_li_ion_percentage+0x156>
     502:	ac 01       	movw	r20, r24
     504:	9c 01       	movw	r18, r24
     506:	24 5e       	subi	r18, 0xE4	; 228
     508:	3c 40       	sbci	r19, 0x0C	; 12
     50a:	24 3f       	cpi	r18, 0xF4	; 244
     50c:	31 40       	sbci	r19, 0x01	; 1
     50e:	b0 f4       	brcc	.+44     	; 0x53c <get_li_ion_percentage+0x44>
     510:	94 e2       	ldi	r25, 0x24	; 36
     512:	94 9f       	mul	r25, r20
     514:	b0 01       	movw	r22, r0
     516:	95 9f       	mul	r25, r21
     518:	70 0d       	add	r23, r0
     51a:	11 24       	eor	r1, r1
     51c:	60 51       	subi	r22, 0x10	; 16
     51e:	70 4d       	sbci	r23, 0xD0	; 208
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 c4 07 	call	0xf88	; 0xf88 <__floatunsisf>
     528:	2f e6       	ldi	r18, 0x6F	; 111
     52a:	32 e1       	ldi	r19, 0x12	; 18
     52c:	43 e0       	ldi	r20, 0x03	; 3
     52e:	5b e3       	ldi	r21, 0x3B	; 59
     530:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3>
     534:	0e 94 95 07 	call	0xf2a	; 0xf2a <__fixunssfsi>
     538:	86 2f       	mov	r24, r22
     53a:	08 95       	ret
     53c:	9a 01       	movw	r18, r20
     53e:	28 5d       	subi	r18, 0xD8	; 216
     540:	3e 40       	sbci	r19, 0x0E	; 14
     542:	24 36       	cpi	r18, 0x64	; 100
     544:	31 05       	cpc	r19, r1
     546:	e0 f4       	brcc	.+56     	; 0x580 <get_li_ion_percentage+0x88>
     548:	8a e1       	ldi	r24, 0x1A	; 26
     54a:	84 9f       	mul	r24, r20
     54c:	b0 01       	movw	r22, r0
     54e:	85 9f       	mul	r24, r21
     550:	70 0d       	add	r23, r0
     552:	11 24       	eor	r1, r1
     554:	60 5f       	subi	r22, 0xF0	; 240
     556:	71 48       	sbci	r23, 0x81	; 129
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 c4 07 	call	0xf88	; 0xf88 <__floatunsisf>
     560:	2a e0       	ldi	r18, 0x0A	; 10
     562:	37 ed       	ldi	r19, 0xD7	; 215
     564:	43 e2       	ldi	r20, 0x23	; 35
     566:	5c e3       	ldi	r21, 0x3C	; 60
     568:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3>
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	40 e1       	ldi	r20, 0x10	; 16
     572:	52 e4       	ldi	r21, 0x42	; 66
     574:	0e 94 29 07 	call	0xe52	; 0xe52 <__addsf3>
     578:	0e 94 95 07 	call	0xf2a	; 0xf2a <__fixunssfsi>
     57c:	86 2f       	mov	r24, r22
     57e:	08 95       	ret
     580:	9a 01       	movw	r18, r20
     582:	2c 53       	subi	r18, 0x3C	; 60
     584:	3f 40       	sbci	r19, 0x0F	; 15
     586:	24 36       	cpi	r18, 0x64	; 100
     588:	31 05       	cpc	r19, r1
     58a:	e0 f4       	brcc	.+56     	; 0x5c4 <get_li_ion_percentage+0xcc>
     58c:	8b e0       	ldi	r24, 0x0B	; 11
     58e:	84 9f       	mul	r24, r20
     590:	b0 01       	movw	r22, r0
     592:	85 9f       	mul	r24, r21
     594:	70 0d       	add	r23, r0
     596:	11 24       	eor	r1, r1
     598:	64 59       	subi	r22, 0x94	; 148
     59a:	77 4a       	sbci	r23, 0xA7	; 167
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 c4 07 	call	0xf88	; 0xf88 <__floatunsisf>
     5a4:	2a e0       	ldi	r18, 0x0A	; 10
     5a6:	37 ed       	ldi	r19, 0xD7	; 215
     5a8:	43 e2       	ldi	r20, 0x23	; 35
     5aa:	5c e3       	ldi	r21, 0x3C	; 60
     5ac:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3>
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	48 e7       	ldi	r20, 0x78	; 120
     5b6:	52 e4       	ldi	r21, 0x42	; 66
     5b8:	0e 94 29 07 	call	0xe52	; 0xe52 <__addsf3>
     5bc:	0e 94 95 07 	call	0xf2a	; 0xf2a <__fixunssfsi>
     5c0:	86 2f       	mov	r24, r22
     5c2:	08 95       	ret
     5c4:	ca 01       	movw	r24, r20
     5c6:	80 5a       	subi	r24, 0xA0	; 160
     5c8:	9f 40       	sbci	r25, 0x0F	; 15
     5ca:	84 36       	cpi	r24, 0x64	; 100
     5cc:	91 05       	cpc	r25, r1
     5ce:	e8 f4       	brcc	.+58     	; 0x60a <get_li_ion_percentage+0x112>
     5d0:	ba 01       	movw	r22, r20
     5d2:	60 5a       	subi	r22, 0xA0	; 160
     5d4:	7f 4f       	sbci	r23, 0xFF	; 255
     5d6:	62 95       	swap	r22
     5d8:	72 95       	swap	r23
     5da:	70 7f       	andi	r23, 0xF0	; 240
     5dc:	76 27       	eor	r23, r22
     5de:	60 7f       	andi	r22, 0xF0	; 240
     5e0:	76 27       	eor	r23, r22
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 c4 07 	call	0xf88	; 0xf88 <__floatunsisf>
     5ea:	2a e0       	ldi	r18, 0x0A	; 10
     5ec:	37 ed       	ldi	r19, 0xD7	; 215
     5ee:	43 e2       	ldi	r20, 0x23	; 35
     5f0:	5c e3       	ldi	r21, 0x3C	; 60
     5f2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3>
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	42 e9       	ldi	r20, 0x92	; 146
     5fc:	52 e4       	ldi	r21, 0x42	; 66
     5fe:	0e 94 29 07 	call	0xe52	; 0xe52 <__addsf3>
     602:	0e 94 95 07 	call	0xf2a	; 0xf2a <__fixunssfsi>
     606:	86 2f       	mov	r24, r22
     608:	08 95       	ret
     60a:	ca 01       	movw	r24, r20
     60c:	84 50       	subi	r24, 0x04	; 4
     60e:	90 41       	sbci	r25, 0x10	; 16
     610:	84 36       	cpi	r24, 0x64	; 100
     612:	91 05       	cpc	r25, r1
     614:	f0 f4       	brcc	.+60     	; 0x652 <get_li_ion_percentage+0x15a>
     616:	8b e0       	ldi	r24, 0x0B	; 11
     618:	84 9f       	mul	r24, r20
     61a:	b0 01       	movw	r22, r0
     61c:	85 9f       	mul	r24, r21
     61e:	70 0d       	add	r23, r0
     620:	11 24       	eor	r1, r1
     622:	6c 52       	subi	r22, 0x2C	; 44
     624:	70 4b       	sbci	r23, 0xB0	; 176
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 c4 07 	call	0xf88	; 0xf88 <__floatunsisf>
     62e:	2a e0       	ldi	r18, 0x0A	; 10
     630:	37 ed       	ldi	r19, 0xD7	; 215
     632:	43 e2       	ldi	r20, 0x23	; 35
     634:	5c e3       	ldi	r21, 0x3C	; 60
     636:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3>
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	42 eb       	ldi	r20, 0xB2	; 178
     640:	52 e4       	ldi	r21, 0x42	; 66
     642:	0e 94 29 07 	call	0xe52	; 0xe52 <__addsf3>
     646:	0e 94 95 07 	call	0xf2a	; 0xf2a <__fixunssfsi>
     64a:	86 2f       	mov	r24, r22
     64c:	08 95       	ret
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	08 95       	ret
     652:	84 e6       	ldi	r24, 0x64	; 100
     654:	08 95       	ret

00000656 <update_battery_status>:
     656:	17 b8       	out	0x07, r1	; 7
     658:	36 9a       	sbi	0x06, 6	; 6
     65a:	36 99       	sbic	0x06, 6	; 6
     65c:	fe cf       	rjmp	.-4      	; 0x65a <update_battery_status+0x4>
     65e:	64 b1       	in	r22, 0x04	; 4
     660:	75 b1       	in	r23, 0x05	; 5
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 c4 07 	call	0xf88	; 0xf88 <__floatunsisf>
     66a:	2c ea       	ldi	r18, 0xAC	; 172
     66c:	3c e1       	ldi	r19, 0x1C	; 28
     66e:	4a e7       	ldi	r20, 0x7A	; 122
     670:	5f e3       	ldi	r21, 0x3F	; 63
     672:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3>
     676:	0e 94 95 07 	call	0xf2a	; 0xf2a <__fixunssfsi>
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 c4 07 	call	0xf88	; 0xf88 <__floatunsisf>
     682:	26 e9       	ldi	r18, 0x96	; 150
     684:	33 e4       	ldi	r19, 0x43	; 67
     686:	43 eb       	ldi	r20, 0xB3	; 179
     688:	50 e4       	ldi	r21, 0x40	; 64
     68a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3>
     68e:	0e 94 95 07 	call	0xf2a	; 0xf2a <__fixunssfsi>
     692:	cb 01       	movw	r24, r22
     694:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <get_li_ion_percentage>
     698:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <__data_end>
     69c:	08 95       	ret

0000069e <clear_funcgen_values>:
     69e:	eb ef       	ldi	r30, 0xFB	; 251
     6a0:	f5 e0       	ldi	r31, 0x05	; 5
     6a2:	10 82       	st	Z, r1
     6a4:	11 82       	std	Z+1, r1	; 0x01
     6a6:	12 82       	std	Z+2, r1	; 0x02
     6a8:	13 82       	std	Z+3, r1	; 0x03
     6aa:	14 82       	std	Z+4, r1	; 0x04
     6ac:	15 82       	std	Z+5, r1	; 0x05
     6ae:	16 82       	std	Z+6, r1	; 0x06
     6b0:	17 82       	std	Z+7, r1	; 0x07
     6b2:	11 86       	std	Z+9, r1	; 0x09
     6b4:	10 86       	std	Z+8, r1	; 0x08
     6b6:	13 86       	std	Z+11, r1	; 0x0b
     6b8:	12 86       	std	Z+10, r1	; 0x0a
     6ba:	15 86       	std	Z+13, r1	; 0x0d
     6bc:	14 86       	std	Z+12, r1	; 0x0c
     6be:	17 86       	std	Z+15, r1	; 0x0f
     6c0:	16 86       	std	Z+14, r1	; 0x0e
     6c2:	85 e0       	ldi	r24, 0x05	; 5
     6c4:	80 8b       	std	Z+16, r24	; 0x10
     6c6:	81 8b       	std	Z+17, r24	; 0x11
     6c8:	13 8a       	std	Z+19, r1	; 0x13
     6ca:	12 8a       	std	Z+18, r1	; 0x12
     6cc:	15 8a       	std	Z+21, r1	; 0x15
     6ce:	14 8a       	std	Z+20, r1	; 0x14
     6d0:	08 95       	ret

000006d2 <clear_wifi_values>:
	snprintf(UI.frequency_B, 8,"0");
	_delay_ms(10);
}

void clear_wifi_values() {
	memset(WIFI.SSID, 0, MAX_WIFI_SSID_LENGTH);
     6d2:	80 e2       	ldi	r24, 0x20	; 32
     6d4:	e3 e1       	ldi	r30, 0x13	; 19
     6d6:	f6 e0       	ldi	r31, 0x06	; 6
     6d8:	df 01       	movw	r26, r30
     6da:	1d 92       	st	X+, r1
     6dc:	8a 95       	dec	r24
     6de:	e9 f7       	brne	.-6      	; 0x6da <clear_wifi_values+0x8>
	memset(WIFI.PASS, 0, MAX_WIFI_PASS_LENGTH);
     6e0:	80 e4       	ldi	r24, 0x40	; 64
     6e2:	e3 e3       	ldi	r30, 0x33	; 51
     6e4:	f6 e0       	ldi	r31, 0x06	; 6
     6e6:	df 01       	movw	r26, r30
     6e8:	1d 92       	st	X+, r1
     6ea:	8a 95       	dec	r24
     6ec:	e9 f7       	brne	.-6      	; 0x6e8 <clear_wifi_values+0x16>
	memset(WIFI.device_MAC, 0, MAC_STRING_LENGTH);
     6ee:	87 e1       	ldi	r24, 0x17	; 23
     6f0:	e3 e7       	ldi	r30, 0x73	; 115
     6f2:	f6 e0       	ldi	r31, 0x06	; 6
     6f4:	df 01       	movw	r26, r30
     6f6:	1d 92       	st	X+, r1
     6f8:	8a 95       	dec	r24
     6fa:	e9 f7       	brne	.-6      	; 0x6f6 <clear_wifi_values+0x24>
	WIFI.encryption = 0;
     6fc:	10 92 8a 06 	sts	0x068A, r1	; 0x80068a <WIFI+0x77>
     700:	08 95       	ret

00000702 <clear_all_values>:
		}
	}
}
	
void clear_all_values() {
	clear_funcgen_values();
     702:	0e 94 4f 03 	call	0x69e	; 0x69e <clear_funcgen_values>
	clear_wifi_values();
     706:	0e 94 69 03 	call	0x6d2	; 0x6d2 <clear_wifi_values>
	clear_uart_rx_message();
     70a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <clear_uart_rx_message>
	update_ac_power_status();
     70e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <update_ac_power_status>
	update_battery_status();
     712:	0e 94 2b 03 	call	0x656	; 0x656 <update_battery_status>
     716:	08 95       	ret

00000718 <Init_Device>:
	PB_DDR &= ~S_INT;
	MISC_DDR |= PS_HOLD | BUZZER;
}

void Init_Device() {
	Init_Ports();
     718:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Init_Ports>
	ENABLE_DEVICE();
     71c:	da 9a       	sbi	0x1b, 2	; 27
	Init_SPI_All();
     71e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <Init_SPI_All>
	Init_LCD();
     722:	0e 94 61 00 	call	0xc2	; 0xc2 <Init_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     726:	2f ef       	ldi	r18, 0xFF	; 255
     728:	89 e6       	ldi	r24, 0x69	; 105
     72a:	98 e1       	ldi	r25, 0x18	; 24
     72c:	21 50       	subi	r18, 0x01	; 1
     72e:	80 40       	sbci	r24, 0x00	; 0
     730:	90 40       	sbci	r25, 0x00	; 0
     732:	e1 f7       	brne	.-8      	; 0x72c <Init_Device+0x14>
     734:	00 c0       	rjmp	.+0      	; 0x736 <Init_Device+0x1e>
     736:	00 00       	nop
	_delay_ms(DELAY_COMMAND_MS);
	Init_LCD_4bit();
     738:	0e 94 cb 00 	call	0x196	; 0x196 <Init_LCD_4bit>
	Init_UART();
     73c:	0e 94 18 07 	call	0xe30	; 0xe30 <Init_UART>
	Init_ADC();
     740:	0e 94 f5 01 	call	0x3ea	; 0x3ea <Init_ADC>
	clear_all_values();
     744:	0e 94 81 03 	call	0x702	; 0x702 <clear_all_values>
	STATUS.socket_active = false;
     748:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <__data_end+0x2>
     74c:	08 95       	ret

0000074e <main>:
	/* Testing definitions */
	#ifdef PRE_PROG
		ENABLE_DEVICE();
	#else
		enum MENU_STATES_MAIN main_menu_state = INIT_STATE;
		Init_Device();
     74e:	0e 94 8c 03 	call	0x718	; 0x718 <Init_Device>
		Init_UI();
     752:	0e 94 3c 02 	call	0x478	; 0x478 <Init_UI>
	#define TEST_UART
	#ifdef TEST_UART 
// 	enum UART_RX_MESSAGE_TYPES { WAIT_FOR_OK = 1, WAIT_FOR_GOT_IP, WAIT_FOR_READY_TO_SEND,
// 		WAIT_FOR_CONNECT, WAIT_FOR_CLOSED, WAIT_FOR_SEND_OK,
// 	WAIT_FOR_READY, WAIT_FOR_DATA ,WAIT_FOR_CREDENTIALS ,WAIT_FOR_MAC };
		sei();
     756:	78 94       	sei
		while(1) {
		send_command_UART("Device is ready...\r\n");
		send_command_UART("UART.wait_for_message = WAIT_FOR_OK\r\n");
		UART.wait_for_message = WAIT_FOR_OK;
     758:	01 e1       	ldi	r16, 0x11	; 17
     75a:	17 e0       	ldi	r17, 0x07	; 7
     75c:	66 24       	eor	r6, r6
     75e:	63 94       	inc	r6
		while(!UART.message_received);
     760:	cf e0       	ldi	r28, 0x0F	; 15
     762:	d7 e0       	ldi	r29, 0x07	; 7
		send_command_UART("Valid message: ");
		send_command_UART(UART.rx_buffer);
		clear_uart_rx_message();
		
		UART.wait_for_message = WAIT_FOR_GOT_IP;
     764:	68 94       	set
     766:	77 24       	eor	r7, r7
     768:	71 f8       	bld	r7, 1
		send_command_UART("Valid message: \r\n");
		send_command_UART("UART.wait_for_message = WAIT_FOR_READY_TO_SEND\r\n");
		send_command_UART(UART.rx_buffer);
		clear_uart_rx_message();
		
		UART.wait_for_message = WAIT_FOR_READY_TO_SEND;
     76a:	0f 2e       	mov	r0, r31
     76c:	f3 e0       	ldi	r31, 0x03	; 3
     76e:	8f 2e       	mov	r8, r31
     770:	f0 2d       	mov	r31, r0
		send_command_UART("Valid message: \r\n");
		send_command_UART("UART.wait_for_message = WAIT_FOR_CONNECT\r\n");
		send_command_UART(UART.rx_buffer);
		clear_uart_rx_message();
		
		UART.wait_for_message = WAIT_FOR_CONNECT;
     772:	68 94       	set
     774:	99 24       	eor	r9, r9
     776:	92 f8       	bld	r9, 2
		send_command_UART("Valid message: \r\n");
		send_command_UART("UART.wait_for_message = WAIT_FOR_CLOSED\r\n");
		send_command_UART(UART.rx_buffer);
		clear_uart_rx_message();
		
		UART.wait_for_message = WAIT_FOR_CLOSED;
     778:	0f 2e       	mov	r0, r31
     77a:	f5 e0       	ldi	r31, 0x05	; 5
     77c:	af 2e       	mov	r10, r31
     77e:	f0 2d       	mov	r31, r0
		send_command_UART("Valid message: \r\n");
		send_command_UART("UART.wait_for_message = WAIT_FOR_SEND_OK\r\n");
		send_command_UART(UART.rx_buffer);
		clear_uart_rx_message();
		
		UART.wait_for_message = WAIT_FOR_SEND_OK;
     780:	0f 2e       	mov	r0, r31
     782:	f6 e0       	ldi	r31, 0x06	; 6
     784:	bf 2e       	mov	r11, r31
     786:	f0 2d       	mov	r31, r0
		send_command_UART("Valid message: \r\n");
		send_command_UART("UART.wait_for_message = WAIT_FOR_READY\r\n");
		send_command_UART(UART.rx_buffer);
		clear_uart_rx_message();
		
		UART.wait_for_message = WAIT_FOR_READY;
     788:	0f 2e       	mov	r0, r31
     78a:	f7 e0       	ldi	r31, 0x07	; 7
     78c:	cf 2e       	mov	r12, r31
     78e:	f0 2d       	mov	r31, r0
		send_command_UART("Valid message: \r\n");
		send_command_UART("UART.wait_for_message = WAIT_FOR_DATA\r\n");
		send_command_UART(UART.rx_buffer);
		clear_uart_rx_message();
		
		UART.wait_for_message = WAIT_FOR_DATA;
     790:	68 94       	set
     792:	dd 24       	eor	r13, r13
     794:	d3 f8       	bld	r13, 3
		send_command_UART("Valid message: \r\n");
		send_command_UART("UART.wait_for_message = WAIT_FOR_CREDENTIALS\r\n");
		send_command_UART(UART.rx_buffer);
		clear_uart_rx_message();
		
		UART.wait_for_message = WAIT_FOR_CREDENTIALS;
     796:	0f 2e       	mov	r0, r31
     798:	f9 e0       	ldi	r31, 0x09	; 9
     79a:	ef 2e       	mov	r14, r31
     79c:	f0 2d       	mov	r31, r0
		send_command_UART("Valid message: \r\n");
		send_command_UART("UART.wait_for_message = WAIT_FOR_OK\r\n");
		send_command_UART(UART.rx_buffer);
		clear_uart_rx_message();
		
		UART.wait_for_message = WAIT_FOR_MAC;
     79e:	0f 2e       	mov	r0, r31
     7a0:	fa e0       	ldi	r31, 0x0A	; 10
     7a2:	ff 2e       	mov	r15, r31
     7a4:	f0 2d       	mov	r31, r0
// 	enum UART_RX_MESSAGE_TYPES { WAIT_FOR_OK = 1, WAIT_FOR_GOT_IP, WAIT_FOR_READY_TO_SEND,
// 		WAIT_FOR_CONNECT, WAIT_FOR_CLOSED, WAIT_FOR_SEND_OK,
// 	WAIT_FOR_READY, WAIT_FOR_DATA ,WAIT_FOR_CREDENTIALS ,WAIT_FOR_MAC };
		sei();
		while(1) {
		send_command_UART("Device is ready...\r\n");
     7a6:	8b e1       	ldi	r24, 0x1B	; 27
     7a8:	94 e0       	ldi	r25, 0x04	; 4
     7aa:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART("UART.wait_for_message = WAIT_FOR_OK\r\n");
     7ae:	80 e3       	ldi	r24, 0x30	; 48
     7b0:	94 e0       	ldi	r25, 0x04	; 4
     7b2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		UART.wait_for_message = WAIT_FOR_OK;
     7b6:	f8 01       	movw	r30, r16
     7b8:	60 82       	st	Z, r6
		while(!UART.message_received);
     7ba:	88 81       	ld	r24, Y
     7bc:	88 23       	and	r24, r24
     7be:	e9 f3       	breq	.-6      	; 0x7ba <main+0x6c>
		send_command_UART("Valid message: ");
     7c0:	86 e5       	ldi	r24, 0x56	; 86
     7c2:	94 e0       	ldi	r25, 0x04	; 4
     7c4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART(UART.rx_buffer);
     7c8:	8e e8       	ldi	r24, 0x8E	; 142
     7ca:	96 e0       	ldi	r25, 0x06	; 6
     7cc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		clear_uart_rx_message();
     7d0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <clear_uart_rx_message>
		
		UART.wait_for_message = WAIT_FOR_GOT_IP;
     7d4:	f8 01       	movw	r30, r16
     7d6:	70 82       	st	Z, r7
		while(!UART.message_received);
     7d8:	88 81       	ld	r24, Y
     7da:	88 23       	and	r24, r24
     7dc:	e9 f3       	breq	.-6      	; 0x7d8 <main+0x8a>
		send_command_UART("Valid message: \r\n");
     7de:	86 e6       	ldi	r24, 0x66	; 102
     7e0:	94 e0       	ldi	r25, 0x04	; 4
     7e2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART("UART.wait_for_message = WAIT_FOR_READY_TO_SEND\r\n");
     7e6:	88 e7       	ldi	r24, 0x78	; 120
     7e8:	94 e0       	ldi	r25, 0x04	; 4
     7ea:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART(UART.rx_buffer);
     7ee:	8e e8       	ldi	r24, 0x8E	; 142
     7f0:	96 e0       	ldi	r25, 0x06	; 6
     7f2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		clear_uart_rx_message();
     7f6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <clear_uart_rx_message>
		
		UART.wait_for_message = WAIT_FOR_READY_TO_SEND;
     7fa:	f8 01       	movw	r30, r16
     7fc:	80 82       	st	Z, r8
		while(!UART.message_received);
     7fe:	88 81       	ld	r24, Y
     800:	88 23       	and	r24, r24
     802:	e9 f3       	breq	.-6      	; 0x7fe <main+0xb0>
		send_command_UART("Valid message: \r\n");
     804:	86 e6       	ldi	r24, 0x66	; 102
     806:	94 e0       	ldi	r25, 0x04	; 4
     808:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART("UART.wait_for_message = WAIT_FOR_CONNECT\r\n");
     80c:	89 ea       	ldi	r24, 0xA9	; 169
     80e:	94 e0       	ldi	r25, 0x04	; 4
     810:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART(UART.rx_buffer);
     814:	8e e8       	ldi	r24, 0x8E	; 142
     816:	96 e0       	ldi	r25, 0x06	; 6
     818:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		clear_uart_rx_message();
     81c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <clear_uart_rx_message>
		
		UART.wait_for_message = WAIT_FOR_CONNECT;
     820:	f8 01       	movw	r30, r16
     822:	90 82       	st	Z, r9
		while(!UART.message_received);
     824:	88 81       	ld	r24, Y
     826:	88 23       	and	r24, r24
     828:	e9 f3       	breq	.-6      	; 0x824 <main+0xd6>
		send_command_UART("Valid message: \r\n");
     82a:	86 e6       	ldi	r24, 0x66	; 102
     82c:	94 e0       	ldi	r25, 0x04	; 4
     82e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART("UART.wait_for_message = WAIT_FOR_CLOSED\r\n");
     832:	84 ed       	ldi	r24, 0xD4	; 212
     834:	94 e0       	ldi	r25, 0x04	; 4
     836:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART(UART.rx_buffer);
     83a:	8e e8       	ldi	r24, 0x8E	; 142
     83c:	96 e0       	ldi	r25, 0x06	; 6
     83e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		clear_uart_rx_message();
     842:	0e 94 0e 07 	call	0xe1c	; 0xe1c <clear_uart_rx_message>
		
		UART.wait_for_message = WAIT_FOR_CLOSED;
     846:	f8 01       	movw	r30, r16
     848:	a0 82       	st	Z, r10
		while(!UART.message_received);
     84a:	88 81       	ld	r24, Y
     84c:	88 23       	and	r24, r24
     84e:	e9 f3       	breq	.-6      	; 0x84a <main+0xfc>
		send_command_UART("Valid message: \r\n");
     850:	86 e6       	ldi	r24, 0x66	; 102
     852:	94 e0       	ldi	r25, 0x04	; 4
     854:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART("UART.wait_for_message = WAIT_FOR_SEND_OK\r\n");
     858:	8e ef       	ldi	r24, 0xFE	; 254
     85a:	94 e0       	ldi	r25, 0x04	; 4
     85c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART(UART.rx_buffer);
     860:	8e e8       	ldi	r24, 0x8E	; 142
     862:	96 e0       	ldi	r25, 0x06	; 6
     864:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		clear_uart_rx_message();
     868:	0e 94 0e 07 	call	0xe1c	; 0xe1c <clear_uart_rx_message>
		
		UART.wait_for_message = WAIT_FOR_SEND_OK;
     86c:	f8 01       	movw	r30, r16
     86e:	b0 82       	st	Z, r11
		while(!UART.message_received);
     870:	88 81       	ld	r24, Y
     872:	88 23       	and	r24, r24
     874:	e9 f3       	breq	.-6      	; 0x870 <__stack+0x11>
		send_command_UART("Valid message: \r\n");
     876:	86 e6       	ldi	r24, 0x66	; 102
     878:	94 e0       	ldi	r25, 0x04	; 4
     87a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART("UART.wait_for_message = WAIT_FOR_READY\r\n");
     87e:	89 e2       	ldi	r24, 0x29	; 41
     880:	95 e0       	ldi	r25, 0x05	; 5
     882:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART(UART.rx_buffer);
     886:	8e e8       	ldi	r24, 0x8E	; 142
     888:	96 e0       	ldi	r25, 0x06	; 6
     88a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		clear_uart_rx_message();
     88e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <clear_uart_rx_message>
		
		UART.wait_for_message = WAIT_FOR_READY;
     892:	f8 01       	movw	r30, r16
     894:	c0 82       	st	Z, r12
		while(!UART.message_received);
     896:	88 81       	ld	r24, Y
     898:	88 23       	and	r24, r24
     89a:	e9 f3       	breq	.-6      	; 0x896 <__stack+0x37>
		send_command_UART("Valid message: \r\n");
     89c:	86 e6       	ldi	r24, 0x66	; 102
     89e:	94 e0       	ldi	r25, 0x04	; 4
     8a0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART("UART.wait_for_message = WAIT_FOR_DATA\r\n");
     8a4:	82 e5       	ldi	r24, 0x52	; 82
     8a6:	95 e0       	ldi	r25, 0x05	; 5
     8a8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART(UART.rx_buffer);
     8ac:	8e e8       	ldi	r24, 0x8E	; 142
     8ae:	96 e0       	ldi	r25, 0x06	; 6
     8b0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		clear_uart_rx_message();
     8b4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <clear_uart_rx_message>
		
		UART.wait_for_message = WAIT_FOR_DATA;
     8b8:	f8 01       	movw	r30, r16
     8ba:	d0 82       	st	Z, r13
		while(!UART.message_received);
     8bc:	88 81       	ld	r24, Y
     8be:	88 23       	and	r24, r24
     8c0:	e9 f3       	breq	.-6      	; 0x8bc <__stack+0x5d>
		send_command_UART("Valid message: \r\n");
     8c2:	86 e6       	ldi	r24, 0x66	; 102
     8c4:	94 e0       	ldi	r25, 0x04	; 4
     8c6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART("UART.wait_for_message = WAIT_FOR_CREDENTIALS\r\n");
     8ca:	8a e7       	ldi	r24, 0x7A	; 122
     8cc:	95 e0       	ldi	r25, 0x05	; 5
     8ce:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART(UART.rx_buffer);
     8d2:	8e e8       	ldi	r24, 0x8E	; 142
     8d4:	96 e0       	ldi	r25, 0x06	; 6
     8d6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		clear_uart_rx_message();
     8da:	0e 94 0e 07 	call	0xe1c	; 0xe1c <clear_uart_rx_message>
		
		UART.wait_for_message = WAIT_FOR_CREDENTIALS;
     8de:	f8 01       	movw	r30, r16
     8e0:	e0 82       	st	Z, r14
		while(!UART.message_received);
     8e2:	88 81       	ld	r24, Y
     8e4:	88 23       	and	r24, r24
     8e6:	e9 f3       	breq	.-6      	; 0x8e2 <__stack+0x83>
		send_command_UART("Valid message: \r\n");
     8e8:	86 e6       	ldi	r24, 0x66	; 102
     8ea:	94 e0       	ldi	r25, 0x04	; 4
     8ec:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART("UART.wait_for_message = WAIT_FOR_OK\r\n");
     8f0:	80 e3       	ldi	r24, 0x30	; 48
     8f2:	94 e0       	ldi	r25, 0x04	; 4
     8f4:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART(UART.rx_buffer);
     8f8:	8e e8       	ldi	r24, 0x8E	; 142
     8fa:	96 e0       	ldi	r25, 0x06	; 6
     8fc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		clear_uart_rx_message();
     900:	0e 94 0e 07 	call	0xe1c	; 0xe1c <clear_uart_rx_message>
		
		UART.wait_for_message = WAIT_FOR_MAC;
     904:	f8 01       	movw	r30, r16
     906:	f0 82       	st	Z, r15
		while(!UART.message_received);
     908:	88 81       	ld	r24, Y
     90a:	88 23       	and	r24, r24
     90c:	e9 f3       	breq	.-6      	; 0x908 <__stack+0xa9>
		send_command_UART("Valid message: \r\n");
     90e:	86 e6       	ldi	r24, 0x66	; 102
     910:	94 e0       	ldi	r25, 0x04	; 4
     912:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART("UART.wait_for_message = WAIT_FOR_MAC\r\n");
     916:	89 ea       	ldi	r24, 0xA9	; 169
     918:	95 e0       	ldi	r25, 0x05	; 5
     91a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		send_command_UART(UART.rx_buffer);
     91e:	8e e8       	ldi	r24, 0x8E	; 142
     920:	96 e0       	ldi	r25, 0x06	; 6
     922:	0e 94 ff 06 	call	0xdfe	; 0xdfe <send_command_UART>
		clear_uart_rx_message();
     926:	0e 94 0e 07 	call	0xe1c	; 0xe1c <clear_uart_rx_message>
				
		}
     92a:	3d cf       	rjmp	.-390    	; 0x7a6 <main+0x58>

0000092c <SPI_write_16bit>:
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	04 2f       	mov	r16, r20
     932:	10 e0       	ldi	r17, 0x00	; 0
     934:	f8 01       	movw	r30, r16
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	e7 30       	cpi	r30, 0x07	; 7
     93a:	f1 05       	cpc	r31, r1
     93c:	88 f4       	brcc	.+34     	; 0x960 <SPI_write_16bit+0x34>
     93e:	e6 5d       	subi	r30, 0xD6	; 214
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__tablejump2__>
     946:	aa 98       	cbi	0x15, 2	; 21
     948:	0b c0       	rjmp	.+22     	; 0x960 <SPI_write_16bit+0x34>
     94a:	ab 98       	cbi	0x15, 3	; 21
     94c:	09 c0       	rjmp	.+18     	; 0x960 <SPI_write_16bit+0x34>
     94e:	ac 98       	cbi	0x15, 4	; 21
     950:	07 c0       	rjmp	.+14     	; 0x960 <SPI_write_16bit+0x34>
     952:	ad 98       	cbi	0x15, 5	; 21
     954:	05 c0       	rjmp	.+10     	; 0x960 <SPI_write_16bit+0x34>
     956:	ae 98       	cbi	0x15, 6	; 21
     958:	03 c0       	rjmp	.+6      	; 0x960 <SPI_write_16bit+0x34>
     95a:	af 98       	cbi	0x15, 7	; 21
     95c:	01 c0       	rjmp	.+2      	; 0x960 <SPI_write_16bit+0x34>
     95e:	dc 98       	cbi	0x1b, 4	; 27
     960:	98 e2       	ldi	r25, 0x28	; 40
     962:	9a 95       	dec	r25
     964:	f1 f7       	brne	.-4      	; 0x962 <SPI_write_16bit+0x36>
     966:	8f b9       	out	0x0f, r24	; 15
     968:	77 9b       	sbis	0x0e, 7	; 14
     96a:	fe cf       	rjmp	.-4      	; 0x968 <SPI_write_16bit+0x3c>
     96c:	88 e2       	ldi	r24, 0x28	; 40
     96e:	8a 95       	dec	r24
     970:	f1 f7       	brne	.-4      	; 0x96e <SPI_write_16bit+0x42>
     972:	6f b9       	out	0x0f, r22	; 15
     974:	77 9b       	sbis	0x0e, 7	; 14
     976:	fe cf       	rjmp	.-4      	; 0x974 <SPI_write_16bit+0x48>
     978:	98 e2       	ldi	r25, 0x28	; 40
     97a:	9a 95       	dec	r25
     97c:	f1 f7       	brne	.-4      	; 0x97a <SPI_write_16bit+0x4e>
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	fa 01       	movw	r30, r20
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	e7 30       	cpi	r30, 0x07	; 7
     986:	f1 05       	cpc	r31, r1
     988:	88 f4       	brcc	.+34     	; 0x9ac <SPI_write_16bit+0x80>
     98a:	ef 5c       	subi	r30, 0xCF	; 207
     98c:	ff 4f       	sbci	r31, 0xFF	; 255
     98e:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__tablejump2__>
     992:	aa 9a       	sbi	0x15, 2	; 21
     994:	0b c0       	rjmp	.+22     	; 0x9ac <SPI_write_16bit+0x80>
     996:	ab 9a       	sbi	0x15, 3	; 21
     998:	09 c0       	rjmp	.+18     	; 0x9ac <SPI_write_16bit+0x80>
     99a:	ac 9a       	sbi	0x15, 4	; 21
     99c:	07 c0       	rjmp	.+14     	; 0x9ac <SPI_write_16bit+0x80>
     99e:	ad 9a       	sbi	0x15, 5	; 21
     9a0:	05 c0       	rjmp	.+10     	; 0x9ac <SPI_write_16bit+0x80>
     9a2:	ae 9a       	sbi	0x15, 6	; 21
     9a4:	03 c0       	rjmp	.+6      	; 0x9ac <SPI_write_16bit+0x80>
     9a6:	af 9a       	sbi	0x15, 7	; 21
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <SPI_write_16bit+0x80>
     9aa:	dc 9a       	sbi	0x1b, 4	; 27
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	08 95       	ret

000009b2 <Init_SPI_All>:
	SPSR = (1<<SPI2X);
	_delay_ms(10);
}

void Init_SPI_All(void) {
	SPI_CE_PORT |= DACA_NCE | DACB_NCE | DACA_BIAS_NCE | DACB_BIAS_NCE | FG0_NCE | FG1_NCE;
     9b2:	85 b3       	in	r24, 0x15	; 21
     9b4:	8c 6f       	ori	r24, 0xFC	; 252
     9b6:	85 bb       	out	0x15, r24	; 21
	LCD_POT_PORT |= POT_LCD_NCE;
     9b8:	dc 9a       	sbi	0x1b, 4	; 27
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     9ba:	81 e5       	ldi	r24, 0x51	; 81
     9bc:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	8e b9       	out	0x0e, r24	; 14
     9c2:	8f e1       	ldi	r24, 0x1F	; 31
     9c4:	9e e4       	ldi	r25, 0x4E	; 78
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	f1 f7       	brne	.-4      	; 0x9c6 <Init_SPI_All+0x14>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <Init_SPI_All+0x1a>
     9cc:	00 00       	nop
     9ce:	08 95       	ret

000009d0 <__vector_13>:
}

char UART_read_char() {
	while(!(UCSRA & (1<<RXC)));
	return UDR;
}
     9d0:	1f 92       	push	r1
     9d2:	0f 92       	push	r0
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	0f 92       	push	r0
     9d8:	11 24       	eor	r1, r1
     9da:	8f 93       	push	r24
     9dc:	9f 93       	push	r25
     9de:	af 93       	push	r26
     9e0:	bf 93       	push	r27
     9e2:	ef 93       	push	r30
     9e4:	ff 93       	push	r31
     9e6:	e0 91 11 07 	lds	r30, 0x0711	; 0x800711 <UART+0x83>
     9ea:	8e 2f       	mov	r24, r30
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	fc 01       	movw	r30, r24
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	ea 30       	cpi	r30, 0x0A	; 10
     9f4:	f1 05       	cpc	r31, r1
     9f6:	08 f0       	brcs	.+2      	; 0x9fa <__vector_13+0x2a>
     9f8:	ef c1       	rjmp	.+990    	; 0xdd8 <__vector_13+0x408>
     9fa:	e8 5c       	subi	r30, 0xC8	; 200
     9fc:	ff 4f       	sbci	r31, 0xFF	; 255
     9fe:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__tablejump2__>
     a02:	ae e0       	ldi	r26, 0x0E	; 14
     a04:	b7 e0       	ldi	r27, 0x07	; 7
     a06:	ec 91       	ld	r30, X
     a08:	8c b1       	in	r24, 0x0c	; 12
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	e2 57       	subi	r30, 0x72	; 114
     a0e:	f9 4f       	sbci	r31, 0xF9	; 249
     a10:	80 83       	st	Z, r24
     a12:	ec 91       	ld	r30, X
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	e2 57       	subi	r30, 0x72	; 114
     a18:	f9 4f       	sbci	r31, 0xF9	; 249
     a1a:	80 81       	ld	r24, Z
     a1c:	8a 30       	cpi	r24, 0x0A	; 10
     a1e:	b1 f4       	brne	.+44     	; 0xa4c <__vector_13+0x7c>
     a20:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	e4 57       	subi	r30, 0x74	; 116
     a28:	f9 4f       	sbci	r31, 0xF9	; 249
     a2a:	80 81       	ld	r24, Z
     a2c:	8b 34       	cpi	r24, 0x4B	; 75
     a2e:	71 f4       	brne	.+28     	; 0xa4c <__vector_13+0x7c>
     a30:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	e5 57       	subi	r30, 0x75	; 117
     a38:	f9 4f       	sbci	r31, 0xF9	; 249
     a3a:	80 81       	ld	r24, Z
     a3c:	8f 34       	cpi	r24, 0x4F	; 79
     a3e:	31 f4       	brne	.+12     	; 0xa4c <__vector_13+0x7c>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <UART+0x81>
     a46:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <UART+0x80>
     a4a:	ca c1       	rjmp	.+916    	; 0xde0 <__vector_13+0x410>
     a4c:	ee e0       	ldi	r30, 0x0E	; 14
     a4e:	f7 e0       	ldi	r31, 0x07	; 7
     a50:	80 81       	ld	r24, Z
     a52:	8f 5f       	subi	r24, 0xFF	; 255
     a54:	80 83       	st	Z, r24
     a56:	c4 c1       	rjmp	.+904    	; 0xde0 <__vector_13+0x410>
     a58:	ae e0       	ldi	r26, 0x0E	; 14
     a5a:	b7 e0       	ldi	r27, 0x07	; 7
     a5c:	ec 91       	ld	r30, X
     a5e:	8c b1       	in	r24, 0x0c	; 12
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	e2 57       	subi	r30, 0x72	; 114
     a64:	f9 4f       	sbci	r31, 0xF9	; 249
     a66:	80 83       	st	Z, r24
     a68:	ec 91       	ld	r30, X
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	e2 57       	subi	r30, 0x72	; 114
     a6e:	f9 4f       	sbci	r31, 0xF9	; 249
     a70:	80 81       	ld	r24, Z
     a72:	8a 30       	cpi	r24, 0x0A	; 10
     a74:	b1 f4       	brne	.+44     	; 0xaa2 <__vector_13+0xd2>
     a76:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	e4 57       	subi	r30, 0x74	; 116
     a7e:	f9 4f       	sbci	r31, 0xF9	; 249
     a80:	80 81       	ld	r24, Z
     a82:	80 35       	cpi	r24, 0x50	; 80
     a84:	71 f4       	brne	.+28     	; 0xaa2 <__vector_13+0xd2>
     a86:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	e5 57       	subi	r30, 0x75	; 117
     a8e:	f9 4f       	sbci	r31, 0xF9	; 249
     a90:	80 81       	ld	r24, Z
     a92:	89 34       	cpi	r24, 0x49	; 73
     a94:	31 f4       	brne	.+12     	; 0xaa2 <__vector_13+0xd2>
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <UART+0x81>
     a9c:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <UART+0x80>
     aa0:	9f c1       	rjmp	.+830    	; 0xde0 <__vector_13+0x410>
     aa2:	ee e0       	ldi	r30, 0x0E	; 14
     aa4:	f7 e0       	ldi	r31, 0x07	; 7
     aa6:	80 81       	ld	r24, Z
     aa8:	8f 5f       	subi	r24, 0xFF	; 255
     aaa:	80 83       	st	Z, r24
     aac:	99 c1       	rjmp	.+818    	; 0xde0 <__vector_13+0x410>
     aae:	ae e0       	ldi	r26, 0x0E	; 14
     ab0:	b7 e0       	ldi	r27, 0x07	; 7
     ab2:	ec 91       	ld	r30, X
     ab4:	8c b1       	in	r24, 0x0c	; 12
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	e2 57       	subi	r30, 0x72	; 114
     aba:	f9 4f       	sbci	r31, 0xF9	; 249
     abc:	80 83       	st	Z, r24
     abe:	ec 91       	ld	r30, X
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	e2 57       	subi	r30, 0x72	; 114
     ac4:	f9 4f       	sbci	r31, 0xF9	; 249
     ac6:	80 81       	ld	r24, Z
     ac8:	8e 33       	cpi	r24, 0x3E	; 62
     aca:	b1 f4       	brne	.+44     	; 0xaf8 <__vector_13+0x128>
     acc:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	e3 57       	subi	r30, 0x73	; 115
     ad4:	f9 4f       	sbci	r31, 0xF9	; 249
     ad6:	80 81       	ld	r24, Z
     ad8:	8a 30       	cpi	r24, 0x0A	; 10
     ada:	71 f4       	brne	.+28     	; 0xaf8 <__vector_13+0x128>
     adc:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	e4 57       	subi	r30, 0x74	; 116
     ae4:	f9 4f       	sbci	r31, 0xF9	; 249
     ae6:	80 81       	ld	r24, Z
     ae8:	8d 30       	cpi	r24, 0x0D	; 13
     aea:	31 f4       	brne	.+12     	; 0xaf8 <__vector_13+0x128>
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <UART+0x81>
     af2:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <UART+0x80>
     af6:	74 c1       	rjmp	.+744    	; 0xde0 <__vector_13+0x410>
     af8:	ee e0       	ldi	r30, 0x0E	; 14
     afa:	f7 e0       	ldi	r31, 0x07	; 7
     afc:	80 81       	ld	r24, Z
     afe:	8f 5f       	subi	r24, 0xFF	; 255
     b00:	80 83       	st	Z, r24
     b02:	6e c1       	rjmp	.+732    	; 0xde0 <__vector_13+0x410>
     b04:	ae e0       	ldi	r26, 0x0E	; 14
     b06:	b7 e0       	ldi	r27, 0x07	; 7
     b08:	ec 91       	ld	r30, X
     b0a:	8c b1       	in	r24, 0x0c	; 12
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	e2 57       	subi	r30, 0x72	; 114
     b10:	f9 4f       	sbci	r31, 0xF9	; 249
     b12:	80 83       	st	Z, r24
     b14:	ec 91       	ld	r30, X
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	e2 57       	subi	r30, 0x72	; 114
     b1a:	f9 4f       	sbci	r31, 0xF9	; 249
     b1c:	80 81       	ld	r24, Z
     b1e:	8a 30       	cpi	r24, 0x0A	; 10
     b20:	f1 f4       	brne	.+60     	; 0xb5e <__vector_13+0x18e>
     b22:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	e4 57       	subi	r30, 0x74	; 116
     b2a:	f9 4f       	sbci	r31, 0xF9	; 249
     b2c:	80 81       	ld	r24, Z
     b2e:	84 35       	cpi	r24, 0x54	; 84
     b30:	b1 f4       	brne	.+44     	; 0xb5e <__vector_13+0x18e>
     b32:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	e5 57       	subi	r30, 0x75	; 117
     b3a:	f9 4f       	sbci	r31, 0xF9	; 249
     b3c:	80 81       	ld	r24, Z
     b3e:	83 34       	cpi	r24, 0x43	; 67
     b40:	71 f4       	brne	.+28     	; 0xb5e <__vector_13+0x18e>
     b42:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	e6 57       	subi	r30, 0x76	; 118
     b4a:	f9 4f       	sbci	r31, 0xF9	; 249
     b4c:	80 81       	ld	r24, Z
     b4e:	85 34       	cpi	r24, 0x45	; 69
     b50:	31 f4       	brne	.+12     	; 0xb5e <__vector_13+0x18e>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <UART+0x81>
     b58:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <UART+0x80>
     b5c:	41 c1       	rjmp	.+642    	; 0xde0 <__vector_13+0x410>
     b5e:	ee e0       	ldi	r30, 0x0E	; 14
     b60:	f7 e0       	ldi	r31, 0x07	; 7
     b62:	80 81       	ld	r24, Z
     b64:	8f 5f       	subi	r24, 0xFF	; 255
     b66:	80 83       	st	Z, r24
     b68:	3b c1       	rjmp	.+630    	; 0xde0 <__vector_13+0x410>
     b6a:	ae e0       	ldi	r26, 0x0E	; 14
     b6c:	b7 e0       	ldi	r27, 0x07	; 7
     b6e:	ec 91       	ld	r30, X
     b70:	8c b1       	in	r24, 0x0c	; 12
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	e2 57       	subi	r30, 0x72	; 114
     b76:	f9 4f       	sbci	r31, 0xF9	; 249
     b78:	80 83       	st	Z, r24
     b7a:	ec 91       	ld	r30, X
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	e2 57       	subi	r30, 0x72	; 114
     b80:	f9 4f       	sbci	r31, 0xF9	; 249
     b82:	80 81       	ld	r24, Z
     b84:	8a 30       	cpi	r24, 0x0A	; 10
     b86:	f1 f4       	brne	.+60     	; 0xbc4 <__vector_13+0x1f4>
     b88:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	e4 57       	subi	r30, 0x74	; 116
     b90:	f9 4f       	sbci	r31, 0xF9	; 249
     b92:	80 81       	ld	r24, Z
     b94:	84 34       	cpi	r24, 0x44	; 68
     b96:	b1 f4       	brne	.+44     	; 0xbc4 <__vector_13+0x1f4>
     b98:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	e5 57       	subi	r30, 0x75	; 117
     ba0:	f9 4f       	sbci	r31, 0xF9	; 249
     ba2:	80 81       	ld	r24, Z
     ba4:	85 34       	cpi	r24, 0x45	; 69
     ba6:	71 f4       	brne	.+28     	; 0xbc4 <__vector_13+0x1f4>
     ba8:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	e6 57       	subi	r30, 0x76	; 118
     bb0:	f9 4f       	sbci	r31, 0xF9	; 249
     bb2:	80 81       	ld	r24, Z
     bb4:	83 35       	cpi	r24, 0x53	; 83
     bb6:	31 f4       	brne	.+12     	; 0xbc4 <__vector_13+0x1f4>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <UART+0x81>
     bbe:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <UART+0x80>
     bc2:	0e c1       	rjmp	.+540    	; 0xde0 <__vector_13+0x410>
     bc4:	ee e0       	ldi	r30, 0x0E	; 14
     bc6:	f7 e0       	ldi	r31, 0x07	; 7
     bc8:	80 81       	ld	r24, Z
     bca:	8f 5f       	subi	r24, 0xFF	; 255
     bcc:	80 83       	st	Z, r24
     bce:	08 c1       	rjmp	.+528    	; 0xde0 <__vector_13+0x410>
     bd0:	ae e0       	ldi	r26, 0x0E	; 14
     bd2:	b7 e0       	ldi	r27, 0x07	; 7
     bd4:	ec 91       	ld	r30, X
     bd6:	8c b1       	in	r24, 0x0c	; 12
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	e2 57       	subi	r30, 0x72	; 114
     bdc:	f9 4f       	sbci	r31, 0xF9	; 249
     bde:	80 83       	st	Z, r24
     be0:	ec 91       	ld	r30, X
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	e2 57       	subi	r30, 0x72	; 114
     be6:	f9 4f       	sbci	r31, 0xF9	; 249
     be8:	80 81       	ld	r24, Z
     bea:	8a 30       	cpi	r24, 0x0A	; 10
     bec:	f1 f4       	brne	.+60     	; 0xc2a <__vector_13+0x25a>
     bee:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	e4 57       	subi	r30, 0x74	; 116
     bf6:	f9 4f       	sbci	r31, 0xF9	; 249
     bf8:	80 81       	ld	r24, Z
     bfa:	8b 34       	cpi	r24, 0x4B	; 75
     bfc:	b1 f4       	brne	.+44     	; 0xc2a <__vector_13+0x25a>
     bfe:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	e5 57       	subi	r30, 0x75	; 117
     c06:	f9 4f       	sbci	r31, 0xF9	; 249
     c08:	80 81       	ld	r24, Z
     c0a:	8f 34       	cpi	r24, 0x4F	; 79
     c0c:	71 f4       	brne	.+28     	; 0xc2a <__vector_13+0x25a>
     c0e:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	e7 57       	subi	r30, 0x77	; 119
     c16:	f9 4f       	sbci	r31, 0xF9	; 249
     c18:	80 81       	ld	r24, Z
     c1a:	84 34       	cpi	r24, 0x44	; 68
     c1c:	31 f4       	brne	.+12     	; 0xc2a <__vector_13+0x25a>
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <UART+0x81>
     c24:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <UART+0x80>
     c28:	db c0       	rjmp	.+438    	; 0xde0 <__vector_13+0x410>
     c2a:	ee e0       	ldi	r30, 0x0E	; 14
     c2c:	f7 e0       	ldi	r31, 0x07	; 7
     c2e:	80 81       	ld	r24, Z
     c30:	8f 5f       	subi	r24, 0xFF	; 255
     c32:	80 83       	st	Z, r24
     c34:	d5 c0       	rjmp	.+426    	; 0xde0 <__vector_13+0x410>
     c36:	ae e0       	ldi	r26, 0x0E	; 14
     c38:	b7 e0       	ldi	r27, 0x07	; 7
     c3a:	ec 91       	ld	r30, X
     c3c:	8c b1       	in	r24, 0x0c	; 12
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	e2 57       	subi	r30, 0x72	; 114
     c42:	f9 4f       	sbci	r31, 0xF9	; 249
     c44:	80 83       	st	Z, r24
     c46:	ec 91       	ld	r30, X
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	e2 57       	subi	r30, 0x72	; 114
     c4c:	f9 4f       	sbci	r31, 0xF9	; 249
     c4e:	80 81       	ld	r24, Z
     c50:	8a 30       	cpi	r24, 0x0A	; 10
     c52:	f1 f4       	brne	.+60     	; 0xc90 <__vector_13+0x2c0>
     c54:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	e4 57       	subi	r30, 0x74	; 116
     c5c:	f9 4f       	sbci	r31, 0xF9	; 249
     c5e:	80 81       	ld	r24, Z
     c60:	89 37       	cpi	r24, 0x79	; 121
     c62:	b1 f4       	brne	.+44     	; 0xc90 <__vector_13+0x2c0>
     c64:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	e5 57       	subi	r30, 0x75	; 117
     c6c:	f9 4f       	sbci	r31, 0xF9	; 249
     c6e:	80 81       	ld	r24, Z
     c70:	84 36       	cpi	r24, 0x64	; 100
     c72:	71 f4       	brne	.+28     	; 0xc90 <__vector_13+0x2c0>
     c74:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	e6 57       	subi	r30, 0x76	; 118
     c7c:	f9 4f       	sbci	r31, 0xF9	; 249
     c7e:	80 81       	ld	r24, Z
     c80:	81 36       	cpi	r24, 0x61	; 97
     c82:	31 f4       	brne	.+12     	; 0xc90 <__vector_13+0x2c0>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <UART+0x81>
     c8a:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <UART+0x80>
     c8e:	a8 c0       	rjmp	.+336    	; 0xde0 <__vector_13+0x410>
     c90:	ee e0       	ldi	r30, 0x0E	; 14
     c92:	f7 e0       	ldi	r31, 0x07	; 7
     c94:	80 81       	ld	r24, Z
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	80 83       	st	Z, r24
     c9a:	a2 c0       	rjmp	.+324    	; 0xde0 <__vector_13+0x410>
     c9c:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     ca0:	8c b1       	in	r24, 0x0c	; 12
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	e2 57       	subi	r30, 0x72	; 114
     ca6:	f9 4f       	sbci	r31, 0xF9	; 249
     ca8:	80 83       	st	Z, r24
     caa:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <UART+0x82>
     cae:	81 11       	cpse	r24, r1
     cb0:	1e c0       	rjmp	.+60     	; 0xcee <__vector_13+0x31e>
     cb2:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	e3 57       	subi	r30, 0x73	; 115
     cba:	f9 4f       	sbci	r31, 0xF9	; 249
     cbc:	80 81       	ld	r24, Z
     cbe:	8d 30       	cpi	r24, 0x0D	; 13
     cc0:	81 f4       	brne	.+32     	; 0xce2 <__vector_13+0x312>
     cc2:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	e2 57       	subi	r30, 0x72	; 114
     cca:	f9 4f       	sbci	r31, 0xF9	; 249
     ccc:	80 81       	ld	r24, Z
     cce:	8a 30       	cpi	r24, 0x0A	; 10
     cd0:	41 f4       	brne	.+16     	; 0xce2 <__vector_13+0x312>
     cd2:	e0 e1       	ldi	r30, 0x10	; 16
     cd4:	f7 e0       	ldi	r31, 0x07	; 7
     cd6:	80 81       	ld	r24, Z
     cd8:	8f 5f       	subi	r24, 0xFF	; 255
     cda:	80 83       	st	Z, r24
     cdc:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <UART+0x80>
     ce0:	7f c0       	rjmp	.+254    	; 0xde0 <__vector_13+0x410>
     ce2:	ee e0       	ldi	r30, 0x0E	; 14
     ce4:	f7 e0       	ldi	r31, 0x07	; 7
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 5f       	subi	r24, 0xFF	; 255
     cea:	80 83       	st	Z, r24
     cec:	79 c0       	rjmp	.+242    	; 0xde0 <__vector_13+0x410>
     cee:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <UART+0x82>
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	21 f5       	brne	.+72     	; 0xd3e <__vector_13+0x36e>
     cf6:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	e2 57       	subi	r30, 0x72	; 114
     cfe:	f9 4f       	sbci	r31, 0xF9	; 249
     d00:	80 81       	ld	r24, Z
     d02:	8a 30       	cpi	r24, 0x0A	; 10
     d04:	b1 f4       	brne	.+44     	; 0xd32 <__vector_13+0x362>
     d06:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	e3 57       	subi	r30, 0x73	; 115
     d0e:	f9 4f       	sbci	r31, 0xF9	; 249
     d10:	80 81       	ld	r24, Z
     d12:	8d 30       	cpi	r24, 0x0D	; 13
     d14:	71 f4       	brne	.+28     	; 0xd32 <__vector_13+0x362>
     d16:	ee e8       	ldi	r30, 0x8E	; 142
     d18:	f6 e0       	ldi	r31, 0x06	; 6
     d1a:	80 83       	st	Z, r24
     d1c:	8a e0       	ldi	r24, 0x0A	; 10
     d1e:	81 83       	std	Z+1, r24	; 0x01
     d20:	e0 e1       	ldi	r30, 0x10	; 16
     d22:	f7 e0       	ldi	r31, 0x07	; 7
     d24:	80 81       	ld	r24, Z
     d26:	8f 5f       	subi	r24, 0xFF	; 255
     d28:	80 83       	st	Z, r24
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <UART+0x80>
     d30:	57 c0       	rjmp	.+174    	; 0xde0 <__vector_13+0x410>
     d32:	ee e0       	ldi	r30, 0x0E	; 14
     d34:	f7 e0       	ldi	r31, 0x07	; 7
     d36:	80 81       	ld	r24, Z
     d38:	8f 5f       	subi	r24, 0xFF	; 255
     d3a:	80 83       	st	Z, r24
     d3c:	51 c0       	rjmp	.+162    	; 0xde0 <__vector_13+0x410>
     d3e:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <UART+0x82>
     d42:	82 30       	cpi	r24, 0x02	; 2
     d44:	09 f0       	breq	.+2      	; 0xd48 <__vector_13+0x378>
     d46:	4c c0       	rjmp	.+152    	; 0xde0 <__vector_13+0x410>
     d48:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	e2 57       	subi	r30, 0x72	; 114
     d50:	f9 4f       	sbci	r31, 0xF9	; 249
     d52:	80 81       	ld	r24, Z
     d54:	8a 30       	cpi	r24, 0x0A	; 10
     d56:	81 f4       	brne	.+32     	; 0xd78 <__vector_13+0x3a8>
     d58:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	e3 57       	subi	r30, 0x73	; 115
     d60:	f9 4f       	sbci	r31, 0xF9	; 249
     d62:	80 81       	ld	r24, Z
     d64:	8d 30       	cpi	r24, 0x0D	; 13
     d66:	41 f4       	brne	.+16     	; 0xd78 <__vector_13+0x3a8>
     d68:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <UART+0x82>
     d6c:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <UART+0x80>
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <UART+0x81>
     d76:	34 c0       	rjmp	.+104    	; 0xde0 <__vector_13+0x410>
     d78:	ee e0       	ldi	r30, 0x0E	; 14
     d7a:	f7 e0       	ldi	r31, 0x07	; 7
     d7c:	80 81       	ld	r24, Z
     d7e:	8f 5f       	subi	r24, 0xFF	; 255
     d80:	80 83       	st	Z, r24
     d82:	2e c0       	rjmp	.+92     	; 0xde0 <__vector_13+0x410>
     d84:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     d88:	8c b1       	in	r24, 0x0c	; 12
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	e2 57       	subi	r30, 0x72	; 114
     d8e:	f9 4f       	sbci	r31, 0xF9	; 249
     d90:	80 83       	st	Z, r24
     d92:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <UART>
     d96:	8b 32       	cpi	r24, 0x2B	; 43
     d98:	19 f0       	breq	.+6      	; 0xda0 <__vector_13+0x3d0>
     d9a:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <UART+0x80>
     d9e:	20 c0       	rjmp	.+64     	; 0xde0 <__vector_13+0x410>
     da0:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	e3 57       	subi	r30, 0x73	; 115
     da8:	f9 4f       	sbci	r31, 0xF9	; 249
     daa:	80 81       	ld	r24, Z
     dac:	8d 30       	cpi	r24, 0x0D	; 13
     dae:	71 f4       	brne	.+28     	; 0xdcc <__vector_13+0x3fc>
     db0:	e0 91 0e 07 	lds	r30, 0x070E	; 0x80070e <UART+0x80>
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	e2 57       	subi	r30, 0x72	; 114
     db8:	f9 4f       	sbci	r31, 0xF9	; 249
     dba:	80 81       	ld	r24, Z
     dbc:	8a 30       	cpi	r24, 0x0A	; 10
     dbe:	31 f4       	brne	.+12     	; 0xdcc <__vector_13+0x3fc>
     dc0:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <UART+0x80>
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <UART+0x81>
     dca:	0a c0       	rjmp	.+20     	; 0xde0 <__vector_13+0x410>
     dcc:	ee e0       	ldi	r30, 0x0E	; 14
     dce:	f7 e0       	ldi	r31, 0x07	; 7
     dd0:	80 81       	ld	r24, Z
     dd2:	8f 5f       	subi	r24, 0xFF	; 255
     dd4:	80 83       	st	Z, r24
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <__vector_13+0x410>
     dd8:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <UART+0x80>
     ddc:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <UART+0x81>
     de0:	ff 91       	pop	r31
     de2:	ef 91       	pop	r30
     de4:	bf 91       	pop	r27
     de6:	af 91       	pop	r26
     de8:	9f 91       	pop	r25
     dea:	8f 91       	pop	r24
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	0f 90       	pop	r0
     df2:	1f 90       	pop	r1
     df4:	18 95       	reti

00000df6 <write_char_UART>:

void write_char_UART(unsigned char data) {
	while(!(UCSRA & (1<<UDRE)));
     df6:	5d 9b       	sbis	0x0b, 5	; 11
     df8:	fe cf       	rjmp	.-4      	; 0xdf6 <write_char_UART>
	UDR=data;
     dfa:	8c b9       	out	0x0c, r24	; 12
     dfc:	08 95       	ret

00000dfe <send_command_UART>:
}

void send_command_UART(unsigned char *str) {
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	ec 01       	movw	r28, r24
	while (*str != '\0') {
     e04:	88 81       	ld	r24, Y
     e06:	88 23       	and	r24, r24
     e08:	31 f0       	breq	.+12     	; 0xe16 <send_command_UART+0x18>
     e0a:	21 96       	adiw	r28, 0x01	; 1
		write_char_UART(*str);
     e0c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <write_char_UART>
	while(!(UCSRA & (1<<UDRE)));
	UDR=data;
}

void send_command_UART(unsigned char *str) {
	while (*str != '\0') {
     e10:	89 91       	ld	r24, Y+
     e12:	81 11       	cpse	r24, r1
     e14:	fb cf       	rjmp	.-10     	; 0xe0c <send_command_UART+0xe>
		write_char_UART(*str);
		++str;
	}
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <clear_uart_rx_message>:

void clear_uart_rx_message() {
	UART.message_received = false;
     e1c:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <UART+0x81>
	memset(UART.rx_buffer,0,RX_BUFFER_LENGTH);
     e20:	80 e8       	ldi	r24, 0x80	; 128
     e22:	ee e8       	ldi	r30, 0x8E	; 142
     e24:	f6 e0       	ldi	r31, 0x06	; 6
     e26:	df 01       	movw	r26, r30
     e28:	1d 92       	st	X+, r1
     e2a:	8a 95       	dec	r24
     e2c:	e9 f7       	brne	.-6      	; 0xe28 <clear_uart_rx_message+0xc>
     e2e:	08 95       	ret

00000e30 <Init_UART>:
				break;
	}
}

void Init_UART() {
	UBRRH = (unsigned char) (3 >> 8);
     e30:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) 3;
     e32:	83 e0       	ldi	r24, 0x03	; 3
     e34:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
     e36:	88 e9       	ldi	r24, 0x98	; 152
     e38:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
     e3a:	8e e8       	ldi	r24, 0x8E	; 142
     e3c:	80 bd       	out	0x20, r24	; 32
	clear_uart_rx_message();
     e3e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <clear_uart_rx_message>
	UART.cr_lf_counter = 0;
     e42:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <UART+0x82>
	UART.rx_ptr = 0;
     e46:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <UART+0x80>
	UART.wait_for_message = 0;
     e4a:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <UART+0x83>
     e4e:	08 95       	ret

00000e50 <__subsf3>:
     e50:	50 58       	subi	r21, 0x80	; 128

00000e52 <__addsf3>:
     e52:	bb 27       	eor	r27, r27
     e54:	aa 27       	eor	r26, r26
     e56:	0e 94 40 07 	call	0xe80	; 0xe80 <__addsf3x>
     e5a:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__fp_round>
     e5e:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fp_pscA>
     e62:	38 f0       	brcs	.+14     	; 0xe72 <__addsf3+0x20>
     e64:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_pscB>
     e68:	20 f0       	brcs	.+8      	; 0xe72 <__addsf3+0x20>
     e6a:	39 f4       	brne	.+14     	; 0xe7a <__addsf3+0x28>
     e6c:	9f 3f       	cpi	r25, 0xFF	; 255
     e6e:	19 f4       	brne	.+6      	; 0xe76 <__addsf3+0x24>
     e70:	26 f4       	brtc	.+8      	; 0xe7a <__addsf3+0x28>
     e72:	0c 94 07 08 	jmp	0x100e	; 0x100e <__fp_nan>
     e76:	0e f4       	brtc	.+2      	; 0xe7a <__addsf3+0x28>
     e78:	e0 95       	com	r30
     e7a:	e7 fb       	bst	r30, 7
     e7c:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_inf>

00000e80 <__addsf3x>:
     e80:	e9 2f       	mov	r30, r25
     e82:	0e 94 29 08 	call	0x1052	; 0x1052 <__fp_split3>
     e86:	58 f3       	brcs	.-42     	; 0xe5e <__addsf3+0xc>
     e88:	ba 17       	cp	r27, r26
     e8a:	62 07       	cpc	r22, r18
     e8c:	73 07       	cpc	r23, r19
     e8e:	84 07       	cpc	r24, r20
     e90:	95 07       	cpc	r25, r21
     e92:	20 f0       	brcs	.+8      	; 0xe9c <__addsf3x+0x1c>
     e94:	79 f4       	brne	.+30     	; 0xeb4 <__addsf3x+0x34>
     e96:	a6 f5       	brtc	.+104    	; 0xf00 <__addsf3x+0x80>
     e98:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__fp_zero>
     e9c:	0e f4       	brtc	.+2      	; 0xea0 <__addsf3x+0x20>
     e9e:	e0 95       	com	r30
     ea0:	0b 2e       	mov	r0, r27
     ea2:	ba 2f       	mov	r27, r26
     ea4:	a0 2d       	mov	r26, r0
     ea6:	0b 01       	movw	r0, r22
     ea8:	b9 01       	movw	r22, r18
     eaa:	90 01       	movw	r18, r0
     eac:	0c 01       	movw	r0, r24
     eae:	ca 01       	movw	r24, r20
     eb0:	a0 01       	movw	r20, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	ff 27       	eor	r31, r31
     eb6:	59 1b       	sub	r21, r25
     eb8:	99 f0       	breq	.+38     	; 0xee0 <__addsf3x+0x60>
     eba:	59 3f       	cpi	r21, 0xF9	; 249
     ebc:	50 f4       	brcc	.+20     	; 0xed2 <__addsf3x+0x52>
     ebe:	50 3e       	cpi	r21, 0xE0	; 224
     ec0:	68 f1       	brcs	.+90     	; 0xf1c <__addsf3x+0x9c>
     ec2:	1a 16       	cp	r1, r26
     ec4:	f0 40       	sbci	r31, 0x00	; 0
     ec6:	a2 2f       	mov	r26, r18
     ec8:	23 2f       	mov	r18, r19
     eca:	34 2f       	mov	r19, r20
     ecc:	44 27       	eor	r20, r20
     ece:	58 5f       	subi	r21, 0xF8	; 248
     ed0:	f3 cf       	rjmp	.-26     	; 0xeb8 <__addsf3x+0x38>
     ed2:	46 95       	lsr	r20
     ed4:	37 95       	ror	r19
     ed6:	27 95       	ror	r18
     ed8:	a7 95       	ror	r26
     eda:	f0 40       	sbci	r31, 0x00	; 0
     edc:	53 95       	inc	r21
     ede:	c9 f7       	brne	.-14     	; 0xed2 <__addsf3x+0x52>
     ee0:	7e f4       	brtc	.+30     	; 0xf00 <__addsf3x+0x80>
     ee2:	1f 16       	cp	r1, r31
     ee4:	ba 0b       	sbc	r27, r26
     ee6:	62 0b       	sbc	r22, r18
     ee8:	73 0b       	sbc	r23, r19
     eea:	84 0b       	sbc	r24, r20
     eec:	ba f0       	brmi	.+46     	; 0xf1c <__addsf3x+0x9c>
     eee:	91 50       	subi	r25, 0x01	; 1
     ef0:	a1 f0       	breq	.+40     	; 0xf1a <__addsf3x+0x9a>
     ef2:	ff 0f       	add	r31, r31
     ef4:	bb 1f       	adc	r27, r27
     ef6:	66 1f       	adc	r22, r22
     ef8:	77 1f       	adc	r23, r23
     efa:	88 1f       	adc	r24, r24
     efc:	c2 f7       	brpl	.-16     	; 0xeee <__addsf3x+0x6e>
     efe:	0e c0       	rjmp	.+28     	; 0xf1c <__addsf3x+0x9c>
     f00:	ba 0f       	add	r27, r26
     f02:	62 1f       	adc	r22, r18
     f04:	73 1f       	adc	r23, r19
     f06:	84 1f       	adc	r24, r20
     f08:	48 f4       	brcc	.+18     	; 0xf1c <__addsf3x+0x9c>
     f0a:	87 95       	ror	r24
     f0c:	77 95       	ror	r23
     f0e:	67 95       	ror	r22
     f10:	b7 95       	ror	r27
     f12:	f7 95       	ror	r31
     f14:	9e 3f       	cpi	r25, 0xFE	; 254
     f16:	08 f0       	brcs	.+2      	; 0xf1a <__addsf3x+0x9a>
     f18:	b0 cf       	rjmp	.-160    	; 0xe7a <__addsf3+0x28>
     f1a:	93 95       	inc	r25
     f1c:	88 0f       	add	r24, r24
     f1e:	08 f0       	brcs	.+2      	; 0xf22 <__addsf3x+0xa2>
     f20:	99 27       	eor	r25, r25
     f22:	ee 0f       	add	r30, r30
     f24:	97 95       	ror	r25
     f26:	87 95       	ror	r24
     f28:	08 95       	ret

00000f2a <__fixunssfsi>:
     f2a:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_splitA>
     f2e:	88 f0       	brcs	.+34     	; 0xf52 <__fixunssfsi+0x28>
     f30:	9f 57       	subi	r25, 0x7F	; 127
     f32:	98 f0       	brcs	.+38     	; 0xf5a <__fixunssfsi+0x30>
     f34:	b9 2f       	mov	r27, r25
     f36:	99 27       	eor	r25, r25
     f38:	b7 51       	subi	r27, 0x17	; 23
     f3a:	b0 f0       	brcs	.+44     	; 0xf68 <__fixunssfsi+0x3e>
     f3c:	e1 f0       	breq	.+56     	; 0xf76 <__fixunssfsi+0x4c>
     f3e:	66 0f       	add	r22, r22
     f40:	77 1f       	adc	r23, r23
     f42:	88 1f       	adc	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	1a f0       	brmi	.+6      	; 0xf4e <__fixunssfsi+0x24>
     f48:	ba 95       	dec	r27
     f4a:	c9 f7       	brne	.-14     	; 0xf3e <__fixunssfsi+0x14>
     f4c:	14 c0       	rjmp	.+40     	; 0xf76 <__fixunssfsi+0x4c>
     f4e:	b1 30       	cpi	r27, 0x01	; 1
     f50:	91 f0       	breq	.+36     	; 0xf76 <__fixunssfsi+0x4c>
     f52:	0e 94 4b 08 	call	0x1096	; 0x1096 <__fp_zero>
     f56:	b1 e0       	ldi	r27, 0x01	; 1
     f58:	08 95       	ret
     f5a:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__fp_zero>
     f5e:	67 2f       	mov	r22, r23
     f60:	78 2f       	mov	r23, r24
     f62:	88 27       	eor	r24, r24
     f64:	b8 5f       	subi	r27, 0xF8	; 248
     f66:	39 f0       	breq	.+14     	; 0xf76 <__fixunssfsi+0x4c>
     f68:	b9 3f       	cpi	r27, 0xF9	; 249
     f6a:	cc f3       	brlt	.-14     	; 0xf5e <__fixunssfsi+0x34>
     f6c:	86 95       	lsr	r24
     f6e:	77 95       	ror	r23
     f70:	67 95       	ror	r22
     f72:	b3 95       	inc	r27
     f74:	d9 f7       	brne	.-10     	; 0xf6c <__fixunssfsi+0x42>
     f76:	3e f4       	brtc	.+14     	; 0xf86 <__fixunssfsi+0x5c>
     f78:	90 95       	com	r25
     f7a:	80 95       	com	r24
     f7c:	70 95       	com	r23
     f7e:	61 95       	neg	r22
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	8f 4f       	sbci	r24, 0xFF	; 255
     f84:	9f 4f       	sbci	r25, 0xFF	; 255
     f86:	08 95       	ret

00000f88 <__floatunsisf>:
     f88:	e8 94       	clt
     f8a:	09 c0       	rjmp	.+18     	; 0xf9e <__floatsisf+0x12>

00000f8c <__floatsisf>:
     f8c:	97 fb       	bst	r25, 7
     f8e:	3e f4       	brtc	.+14     	; 0xf9e <__floatsisf+0x12>
     f90:	90 95       	com	r25
     f92:	80 95       	com	r24
     f94:	70 95       	com	r23
     f96:	61 95       	neg	r22
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	8f 4f       	sbci	r24, 0xFF	; 255
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	99 23       	and	r25, r25
     fa0:	a9 f0       	breq	.+42     	; 0xfcc <__floatsisf+0x40>
     fa2:	f9 2f       	mov	r31, r25
     fa4:	96 e9       	ldi	r25, 0x96	; 150
     fa6:	bb 27       	eor	r27, r27
     fa8:	93 95       	inc	r25
     faa:	f6 95       	lsr	r31
     fac:	87 95       	ror	r24
     fae:	77 95       	ror	r23
     fb0:	67 95       	ror	r22
     fb2:	b7 95       	ror	r27
     fb4:	f1 11       	cpse	r31, r1
     fb6:	f8 cf       	rjmp	.-16     	; 0xfa8 <__floatsisf+0x1c>
     fb8:	fa f4       	brpl	.+62     	; 0xff8 <__floatsisf+0x6c>
     fba:	bb 0f       	add	r27, r27
     fbc:	11 f4       	brne	.+4      	; 0xfc2 <__floatsisf+0x36>
     fbe:	60 ff       	sbrs	r22, 0
     fc0:	1b c0       	rjmp	.+54     	; 0xff8 <__floatsisf+0x6c>
     fc2:	6f 5f       	subi	r22, 0xFF	; 255
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
     fc6:	8f 4f       	sbci	r24, 0xFF	; 255
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	16 c0       	rjmp	.+44     	; 0xff8 <__floatsisf+0x6c>
     fcc:	88 23       	and	r24, r24
     fce:	11 f0       	breq	.+4      	; 0xfd4 <__floatsisf+0x48>
     fd0:	96 e9       	ldi	r25, 0x96	; 150
     fd2:	11 c0       	rjmp	.+34     	; 0xff6 <__floatsisf+0x6a>
     fd4:	77 23       	and	r23, r23
     fd6:	21 f0       	breq	.+8      	; 0xfe0 <__floatsisf+0x54>
     fd8:	9e e8       	ldi	r25, 0x8E	; 142
     fda:	87 2f       	mov	r24, r23
     fdc:	76 2f       	mov	r23, r22
     fde:	05 c0       	rjmp	.+10     	; 0xfea <__floatsisf+0x5e>
     fe0:	66 23       	and	r22, r22
     fe2:	71 f0       	breq	.+28     	; 0x1000 <__floatsisf+0x74>
     fe4:	96 e8       	ldi	r25, 0x86	; 134
     fe6:	86 2f       	mov	r24, r22
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	2a f0       	brmi	.+10     	; 0xff8 <__floatsisf+0x6c>
     fee:	9a 95       	dec	r25
     ff0:	66 0f       	add	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	88 1f       	adc	r24, r24
     ff6:	da f7       	brpl	.-10     	; 0xfee <__floatsisf+0x62>
     ff8:	88 0f       	add	r24, r24
     ffa:	96 95       	lsr	r25
     ffc:	87 95       	ror	r24
     ffe:	97 f9       	bld	r25, 7
    1000:	08 95       	ret

00001002 <__fp_inf>:
    1002:	97 f9       	bld	r25, 7
    1004:	9f 67       	ori	r25, 0x7F	; 127
    1006:	80 e8       	ldi	r24, 0x80	; 128
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	08 95       	ret

0000100e <__fp_nan>:
    100e:	9f ef       	ldi	r25, 0xFF	; 255
    1010:	80 ec       	ldi	r24, 0xC0	; 192
    1012:	08 95       	ret

00001014 <__fp_pscA>:
    1014:	00 24       	eor	r0, r0
    1016:	0a 94       	dec	r0
    1018:	16 16       	cp	r1, r22
    101a:	17 06       	cpc	r1, r23
    101c:	18 06       	cpc	r1, r24
    101e:	09 06       	cpc	r0, r25
    1020:	08 95       	ret

00001022 <__fp_pscB>:
    1022:	00 24       	eor	r0, r0
    1024:	0a 94       	dec	r0
    1026:	12 16       	cp	r1, r18
    1028:	13 06       	cpc	r1, r19
    102a:	14 06       	cpc	r1, r20
    102c:	05 06       	cpc	r0, r21
    102e:	08 95       	ret

00001030 <__fp_round>:
    1030:	09 2e       	mov	r0, r25
    1032:	03 94       	inc	r0
    1034:	00 0c       	add	r0, r0
    1036:	11 f4       	brne	.+4      	; 0x103c <__fp_round+0xc>
    1038:	88 23       	and	r24, r24
    103a:	52 f0       	brmi	.+20     	; 0x1050 <__fp_round+0x20>
    103c:	bb 0f       	add	r27, r27
    103e:	40 f4       	brcc	.+16     	; 0x1050 <__fp_round+0x20>
    1040:	bf 2b       	or	r27, r31
    1042:	11 f4       	brne	.+4      	; 0x1048 <__fp_round+0x18>
    1044:	60 ff       	sbrs	r22, 0
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <__fp_round+0x20>
    1048:	6f 5f       	subi	r22, 0xFF	; 255
    104a:	7f 4f       	sbci	r23, 0xFF	; 255
    104c:	8f 4f       	sbci	r24, 0xFF	; 255
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	08 95       	ret

00001052 <__fp_split3>:
    1052:	57 fd       	sbrc	r21, 7
    1054:	90 58       	subi	r25, 0x80	; 128
    1056:	44 0f       	add	r20, r20
    1058:	55 1f       	adc	r21, r21
    105a:	59 f0       	breq	.+22     	; 0x1072 <__fp_splitA+0x10>
    105c:	5f 3f       	cpi	r21, 0xFF	; 255
    105e:	71 f0       	breq	.+28     	; 0x107c <__fp_splitA+0x1a>
    1060:	47 95       	ror	r20

00001062 <__fp_splitA>:
    1062:	88 0f       	add	r24, r24
    1064:	97 fb       	bst	r25, 7
    1066:	99 1f       	adc	r25, r25
    1068:	61 f0       	breq	.+24     	; 0x1082 <__fp_splitA+0x20>
    106a:	9f 3f       	cpi	r25, 0xFF	; 255
    106c:	79 f0       	breq	.+30     	; 0x108c <__fp_splitA+0x2a>
    106e:	87 95       	ror	r24
    1070:	08 95       	ret
    1072:	12 16       	cp	r1, r18
    1074:	13 06       	cpc	r1, r19
    1076:	14 06       	cpc	r1, r20
    1078:	55 1f       	adc	r21, r21
    107a:	f2 cf       	rjmp	.-28     	; 0x1060 <__fp_split3+0xe>
    107c:	46 95       	lsr	r20
    107e:	f1 df       	rcall	.-30     	; 0x1062 <__fp_splitA>
    1080:	08 c0       	rjmp	.+16     	; 0x1092 <__fp_splitA+0x30>
    1082:	16 16       	cp	r1, r22
    1084:	17 06       	cpc	r1, r23
    1086:	18 06       	cpc	r1, r24
    1088:	99 1f       	adc	r25, r25
    108a:	f1 cf       	rjmp	.-30     	; 0x106e <__fp_splitA+0xc>
    108c:	86 95       	lsr	r24
    108e:	71 05       	cpc	r23, r1
    1090:	61 05       	cpc	r22, r1
    1092:	08 94       	sec
    1094:	08 95       	ret

00001096 <__fp_zero>:
    1096:	e8 94       	clt

00001098 <__fp_szero>:
    1098:	bb 27       	eor	r27, r27
    109a:	66 27       	eor	r22, r22
    109c:	77 27       	eor	r23, r23
    109e:	cb 01       	movw	r24, r22
    10a0:	97 f9       	bld	r25, 7
    10a2:	08 95       	ret

000010a4 <__mulsf3>:
    10a4:	0e 94 65 08 	call	0x10ca	; 0x10ca <__mulsf3x>
    10a8:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__fp_round>
    10ac:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fp_pscA>
    10b0:	38 f0       	brcs	.+14     	; 0x10c0 <__mulsf3+0x1c>
    10b2:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_pscB>
    10b6:	20 f0       	brcs	.+8      	; 0x10c0 <__mulsf3+0x1c>
    10b8:	95 23       	and	r25, r21
    10ba:	11 f0       	breq	.+4      	; 0x10c0 <__mulsf3+0x1c>
    10bc:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_inf>
    10c0:	0c 94 07 08 	jmp	0x100e	; 0x100e <__fp_nan>
    10c4:	11 24       	eor	r1, r1
    10c6:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__fp_szero>

000010ca <__mulsf3x>:
    10ca:	0e 94 29 08 	call	0x1052	; 0x1052 <__fp_split3>
    10ce:	70 f3       	brcs	.-36     	; 0x10ac <__mulsf3+0x8>

000010d0 <__mulsf3_pse>:
    10d0:	95 9f       	mul	r25, r21
    10d2:	c1 f3       	breq	.-16     	; 0x10c4 <__mulsf3+0x20>
    10d4:	95 0f       	add	r25, r21
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	55 1f       	adc	r21, r21
    10da:	62 9f       	mul	r22, r18
    10dc:	f0 01       	movw	r30, r0
    10de:	72 9f       	mul	r23, r18
    10e0:	bb 27       	eor	r27, r27
    10e2:	f0 0d       	add	r31, r0
    10e4:	b1 1d       	adc	r27, r1
    10e6:	63 9f       	mul	r22, r19
    10e8:	aa 27       	eor	r26, r26
    10ea:	f0 0d       	add	r31, r0
    10ec:	b1 1d       	adc	r27, r1
    10ee:	aa 1f       	adc	r26, r26
    10f0:	64 9f       	mul	r22, r20
    10f2:	66 27       	eor	r22, r22
    10f4:	b0 0d       	add	r27, r0
    10f6:	a1 1d       	adc	r26, r1
    10f8:	66 1f       	adc	r22, r22
    10fa:	82 9f       	mul	r24, r18
    10fc:	22 27       	eor	r18, r18
    10fe:	b0 0d       	add	r27, r0
    1100:	a1 1d       	adc	r26, r1
    1102:	62 1f       	adc	r22, r18
    1104:	73 9f       	mul	r23, r19
    1106:	b0 0d       	add	r27, r0
    1108:	a1 1d       	adc	r26, r1
    110a:	62 1f       	adc	r22, r18
    110c:	83 9f       	mul	r24, r19
    110e:	a0 0d       	add	r26, r0
    1110:	61 1d       	adc	r22, r1
    1112:	22 1f       	adc	r18, r18
    1114:	74 9f       	mul	r23, r20
    1116:	33 27       	eor	r19, r19
    1118:	a0 0d       	add	r26, r0
    111a:	61 1d       	adc	r22, r1
    111c:	23 1f       	adc	r18, r19
    111e:	84 9f       	mul	r24, r20
    1120:	60 0d       	add	r22, r0
    1122:	21 1d       	adc	r18, r1
    1124:	82 2f       	mov	r24, r18
    1126:	76 2f       	mov	r23, r22
    1128:	6a 2f       	mov	r22, r26
    112a:	11 24       	eor	r1, r1
    112c:	9f 57       	subi	r25, 0x7F	; 127
    112e:	50 40       	sbci	r21, 0x00	; 0
    1130:	9a f0       	brmi	.+38     	; 0x1158 <__mulsf3_pse+0x88>
    1132:	f1 f0       	breq	.+60     	; 0x1170 <__mulsf3_pse+0xa0>
    1134:	88 23       	and	r24, r24
    1136:	4a f0       	brmi	.+18     	; 0x114a <__mulsf3_pse+0x7a>
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	bb 1f       	adc	r27, r27
    113e:	66 1f       	adc	r22, r22
    1140:	77 1f       	adc	r23, r23
    1142:	88 1f       	adc	r24, r24
    1144:	91 50       	subi	r25, 0x01	; 1
    1146:	50 40       	sbci	r21, 0x00	; 0
    1148:	a9 f7       	brne	.-22     	; 0x1134 <__mulsf3_pse+0x64>
    114a:	9e 3f       	cpi	r25, 0xFE	; 254
    114c:	51 05       	cpc	r21, r1
    114e:	80 f0       	brcs	.+32     	; 0x1170 <__mulsf3_pse+0xa0>
    1150:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_inf>
    1154:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__fp_szero>
    1158:	5f 3f       	cpi	r21, 0xFF	; 255
    115a:	e4 f3       	brlt	.-8      	; 0x1154 <__mulsf3_pse+0x84>
    115c:	98 3e       	cpi	r25, 0xE8	; 232
    115e:	d4 f3       	brlt	.-12     	; 0x1154 <__mulsf3_pse+0x84>
    1160:	86 95       	lsr	r24
    1162:	77 95       	ror	r23
    1164:	67 95       	ror	r22
    1166:	b7 95       	ror	r27
    1168:	f7 95       	ror	r31
    116a:	e7 95       	ror	r30
    116c:	9f 5f       	subi	r25, 0xFF	; 255
    116e:	c1 f7       	brne	.-16     	; 0x1160 <__mulsf3_pse+0x90>
    1170:	fe 2b       	or	r31, r30
    1172:	88 0f       	add	r24, r24
    1174:	91 1d       	adc	r25, r1
    1176:	96 95       	lsr	r25
    1178:	87 95       	ror	r24
    117a:	97 f9       	bld	r25, 7
    117c:	08 95       	ret

0000117e <__divmodhi4>:
    117e:	97 fb       	bst	r25, 7
    1180:	07 2e       	mov	r0, r23
    1182:	16 f4       	brtc	.+4      	; 0x1188 <__divmodhi4+0xa>
    1184:	00 94       	com	r0
    1186:	07 d0       	rcall	.+14     	; 0x1196 <__divmodhi4_neg1>
    1188:	77 fd       	sbrc	r23, 7
    118a:	09 d0       	rcall	.+18     	; 0x119e <__divmodhi4_neg2>
    118c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__udivmodhi4>
    1190:	07 fc       	sbrc	r0, 7
    1192:	05 d0       	rcall	.+10     	; 0x119e <__divmodhi4_neg2>
    1194:	3e f4       	brtc	.+14     	; 0x11a4 <__divmodhi4_exit>

00001196 <__divmodhi4_neg1>:
    1196:	90 95       	com	r25
    1198:	81 95       	neg	r24
    119a:	9f 4f       	sbci	r25, 0xFF	; 255
    119c:	08 95       	ret

0000119e <__divmodhi4_neg2>:
    119e:	70 95       	com	r23
    11a0:	61 95       	neg	r22
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255

000011a4 <__divmodhi4_exit>:
    11a4:	08 95       	ret

000011a6 <__tablejump2__>:
    11a6:	ee 0f       	add	r30, r30
    11a8:	ff 1f       	adc	r31, r31
    11aa:	05 90       	lpm	r0, Z+
    11ac:	f4 91       	lpm	r31, Z
    11ae:	e0 2d       	mov	r30, r0
    11b0:	09 94       	ijmp

000011b2 <__udivmodhi4>:
    11b2:	aa 1b       	sub	r26, r26
    11b4:	bb 1b       	sub	r27, r27
    11b6:	51 e1       	ldi	r21, 0x11	; 17
    11b8:	07 c0       	rjmp	.+14     	; 0x11c8 <__udivmodhi4_ep>

000011ba <__udivmodhi4_loop>:
    11ba:	aa 1f       	adc	r26, r26
    11bc:	bb 1f       	adc	r27, r27
    11be:	a6 17       	cp	r26, r22
    11c0:	b7 07       	cpc	r27, r23
    11c2:	10 f0       	brcs	.+4      	; 0x11c8 <__udivmodhi4_ep>
    11c4:	a6 1b       	sub	r26, r22
    11c6:	b7 0b       	sbc	r27, r23

000011c8 <__udivmodhi4_ep>:
    11c8:	88 1f       	adc	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	5a 95       	dec	r21
    11ce:	a9 f7       	brne	.-22     	; 0x11ba <__udivmodhi4_loop>
    11d0:	80 95       	com	r24
    11d2:	90 95       	com	r25
    11d4:	bc 01       	movw	r22, r24
    11d6:	cd 01       	movw	r24, r26
    11d8:	08 95       	ret

000011da <snprintf>:
    11da:	ae e0       	ldi	r26, 0x0E	; 14
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e3 ef       	ldi	r30, 0xF3	; 243
    11e0:	f8 e0       	ldi	r31, 0x08	; 8
    11e2:	0c 94 bc 0b 	jmp	0x1778	; 0x1778 <__prologue_saves__+0x1c>
    11e6:	0d 89       	ldd	r16, Y+21	; 0x15
    11e8:	1e 89       	ldd	r17, Y+22	; 0x16
    11ea:	8f 89       	ldd	r24, Y+23	; 0x17
    11ec:	98 8d       	ldd	r25, Y+24	; 0x18
    11ee:	26 e0       	ldi	r18, 0x06	; 6
    11f0:	2c 83       	std	Y+4, r18	; 0x04
    11f2:	1a 83       	std	Y+2, r17	; 0x02
    11f4:	09 83       	std	Y+1, r16	; 0x01
    11f6:	97 ff       	sbrs	r25, 7
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <snprintf+0x24>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e8       	ldi	r25, 0x80	; 128
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	9e 83       	std	Y+6, r25	; 0x06
    1202:	8d 83       	std	Y+5, r24	; 0x05
    1204:	ae 01       	movw	r20, r28
    1206:	45 5e       	subi	r20, 0xE5	; 229
    1208:	5f 4f       	sbci	r21, 0xFF	; 255
    120a:	69 8d       	ldd	r22, Y+25	; 0x19
    120c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    120e:	ce 01       	movw	r24, r28
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	0e 94 1d 09 	call	0x123a	; 0x123a <vfprintf>
    1216:	4d 81       	ldd	r20, Y+5	; 0x05
    1218:	5e 81       	ldd	r21, Y+6	; 0x06
    121a:	57 fd       	sbrc	r21, 7
    121c:	0a c0       	rjmp	.+20     	; 0x1232 <snprintf+0x58>
    121e:	2f 81       	ldd	r18, Y+7	; 0x07
    1220:	38 85       	ldd	r19, Y+8	; 0x08
    1222:	42 17       	cp	r20, r18
    1224:	53 07       	cpc	r21, r19
    1226:	0c f4       	brge	.+2      	; 0x122a <snprintf+0x50>
    1228:	9a 01       	movw	r18, r20
    122a:	f8 01       	movw	r30, r16
    122c:	e2 0f       	add	r30, r18
    122e:	f3 1f       	adc	r31, r19
    1230:	10 82       	st	Z, r1
    1232:	2e 96       	adiw	r28, 0x0e	; 14
    1234:	e4 e0       	ldi	r30, 0x04	; 4
    1236:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__epilogue_restores__+0x1c>

0000123a <vfprintf>:
    123a:	ab e0       	ldi	r26, 0x0B	; 11
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e3 e2       	ldi	r30, 0x23	; 35
    1240:	f9 e0       	ldi	r31, 0x09	; 9
    1242:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__prologue_saves__>
    1246:	6c 01       	movw	r12, r24
    1248:	7b 01       	movw	r14, r22
    124a:	8a 01       	movw	r16, r20
    124c:	fc 01       	movw	r30, r24
    124e:	17 82       	std	Z+7, r1	; 0x07
    1250:	16 82       	std	Z+6, r1	; 0x06
    1252:	83 81       	ldd	r24, Z+3	; 0x03
    1254:	81 ff       	sbrs	r24, 1
    1256:	cc c1       	rjmp	.+920    	; 0x15f0 <vfprintf+0x3b6>
    1258:	ce 01       	movw	r24, r28
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	3c 01       	movw	r6, r24
    125e:	f6 01       	movw	r30, r12
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	f7 01       	movw	r30, r14
    1264:	93 fd       	sbrc	r25, 3
    1266:	85 91       	lpm	r24, Z+
    1268:	93 ff       	sbrs	r25, 3
    126a:	81 91       	ld	r24, Z+
    126c:	7f 01       	movw	r14, r30
    126e:	88 23       	and	r24, r24
    1270:	09 f4       	brne	.+2      	; 0x1274 <vfprintf+0x3a>
    1272:	ba c1       	rjmp	.+884    	; 0x15e8 <vfprintf+0x3ae>
    1274:	85 32       	cpi	r24, 0x25	; 37
    1276:	39 f4       	brne	.+14     	; 0x1286 <vfprintf+0x4c>
    1278:	93 fd       	sbrc	r25, 3
    127a:	85 91       	lpm	r24, Z+
    127c:	93 ff       	sbrs	r25, 3
    127e:	81 91       	ld	r24, Z+
    1280:	7f 01       	movw	r14, r30
    1282:	85 32       	cpi	r24, 0x25	; 37
    1284:	29 f4       	brne	.+10     	; 0x1290 <vfprintf+0x56>
    1286:	b6 01       	movw	r22, r12
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
    128e:	e7 cf       	rjmp	.-50     	; 0x125e <vfprintf+0x24>
    1290:	91 2c       	mov	r9, r1
    1292:	21 2c       	mov	r2, r1
    1294:	31 2c       	mov	r3, r1
    1296:	ff e1       	ldi	r31, 0x1F	; 31
    1298:	f3 15       	cp	r31, r3
    129a:	d8 f0       	brcs	.+54     	; 0x12d2 <vfprintf+0x98>
    129c:	8b 32       	cpi	r24, 0x2B	; 43
    129e:	79 f0       	breq	.+30     	; 0x12be <vfprintf+0x84>
    12a0:	38 f4       	brcc	.+14     	; 0x12b0 <vfprintf+0x76>
    12a2:	80 32       	cpi	r24, 0x20	; 32
    12a4:	79 f0       	breq	.+30     	; 0x12c4 <vfprintf+0x8a>
    12a6:	83 32       	cpi	r24, 0x23	; 35
    12a8:	a1 f4       	brne	.+40     	; 0x12d2 <vfprintf+0x98>
    12aa:	23 2d       	mov	r18, r3
    12ac:	20 61       	ori	r18, 0x10	; 16
    12ae:	1d c0       	rjmp	.+58     	; 0x12ea <vfprintf+0xb0>
    12b0:	8d 32       	cpi	r24, 0x2D	; 45
    12b2:	61 f0       	breq	.+24     	; 0x12cc <vfprintf+0x92>
    12b4:	80 33       	cpi	r24, 0x30	; 48
    12b6:	69 f4       	brne	.+26     	; 0x12d2 <vfprintf+0x98>
    12b8:	23 2d       	mov	r18, r3
    12ba:	21 60       	ori	r18, 0x01	; 1
    12bc:	16 c0       	rjmp	.+44     	; 0x12ea <vfprintf+0xb0>
    12be:	83 2d       	mov	r24, r3
    12c0:	82 60       	ori	r24, 0x02	; 2
    12c2:	38 2e       	mov	r3, r24
    12c4:	e3 2d       	mov	r30, r3
    12c6:	e4 60       	ori	r30, 0x04	; 4
    12c8:	3e 2e       	mov	r3, r30
    12ca:	2a c0       	rjmp	.+84     	; 0x1320 <vfprintf+0xe6>
    12cc:	f3 2d       	mov	r31, r3
    12ce:	f8 60       	ori	r31, 0x08	; 8
    12d0:	1d c0       	rjmp	.+58     	; 0x130c <vfprintf+0xd2>
    12d2:	37 fc       	sbrc	r3, 7
    12d4:	2d c0       	rjmp	.+90     	; 0x1330 <vfprintf+0xf6>
    12d6:	20 ed       	ldi	r18, 0xD0	; 208
    12d8:	28 0f       	add	r18, r24
    12da:	2a 30       	cpi	r18, 0x0A	; 10
    12dc:	40 f0       	brcs	.+16     	; 0x12ee <vfprintf+0xb4>
    12de:	8e 32       	cpi	r24, 0x2E	; 46
    12e0:	b9 f4       	brne	.+46     	; 0x1310 <vfprintf+0xd6>
    12e2:	36 fc       	sbrc	r3, 6
    12e4:	81 c1       	rjmp	.+770    	; 0x15e8 <vfprintf+0x3ae>
    12e6:	23 2d       	mov	r18, r3
    12e8:	20 64       	ori	r18, 0x40	; 64
    12ea:	32 2e       	mov	r3, r18
    12ec:	19 c0       	rjmp	.+50     	; 0x1320 <vfprintf+0xe6>
    12ee:	36 fe       	sbrs	r3, 6
    12f0:	06 c0       	rjmp	.+12     	; 0x12fe <vfprintf+0xc4>
    12f2:	8a e0       	ldi	r24, 0x0A	; 10
    12f4:	98 9e       	mul	r9, r24
    12f6:	20 0d       	add	r18, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	92 2e       	mov	r9, r18
    12fc:	11 c0       	rjmp	.+34     	; 0x1320 <vfprintf+0xe6>
    12fe:	ea e0       	ldi	r30, 0x0A	; 10
    1300:	2e 9e       	mul	r2, r30
    1302:	20 0d       	add	r18, r0
    1304:	11 24       	eor	r1, r1
    1306:	22 2e       	mov	r2, r18
    1308:	f3 2d       	mov	r31, r3
    130a:	f0 62       	ori	r31, 0x20	; 32
    130c:	3f 2e       	mov	r3, r31
    130e:	08 c0       	rjmp	.+16     	; 0x1320 <vfprintf+0xe6>
    1310:	8c 36       	cpi	r24, 0x6C	; 108
    1312:	21 f4       	brne	.+8      	; 0x131c <vfprintf+0xe2>
    1314:	83 2d       	mov	r24, r3
    1316:	80 68       	ori	r24, 0x80	; 128
    1318:	38 2e       	mov	r3, r24
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <vfprintf+0xe6>
    131c:	88 36       	cpi	r24, 0x68	; 104
    131e:	41 f4       	brne	.+16     	; 0x1330 <vfprintf+0xf6>
    1320:	f7 01       	movw	r30, r14
    1322:	93 fd       	sbrc	r25, 3
    1324:	85 91       	lpm	r24, Z+
    1326:	93 ff       	sbrs	r25, 3
    1328:	81 91       	ld	r24, Z+
    132a:	7f 01       	movw	r14, r30
    132c:	81 11       	cpse	r24, r1
    132e:	b3 cf       	rjmp	.-154    	; 0x1296 <vfprintf+0x5c>
    1330:	98 2f       	mov	r25, r24
    1332:	9f 7d       	andi	r25, 0xDF	; 223
    1334:	95 54       	subi	r25, 0x45	; 69
    1336:	93 30       	cpi	r25, 0x03	; 3
    1338:	28 f4       	brcc	.+10     	; 0x1344 <vfprintf+0x10a>
    133a:	0c 5f       	subi	r16, 0xFC	; 252
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	9f e3       	ldi	r25, 0x3F	; 63
    1340:	99 83       	std	Y+1, r25	; 0x01
    1342:	0d c0       	rjmp	.+26     	; 0x135e <vfprintf+0x124>
    1344:	83 36       	cpi	r24, 0x63	; 99
    1346:	31 f0       	breq	.+12     	; 0x1354 <vfprintf+0x11a>
    1348:	83 37       	cpi	r24, 0x73	; 115
    134a:	71 f0       	breq	.+28     	; 0x1368 <vfprintf+0x12e>
    134c:	83 35       	cpi	r24, 0x53	; 83
    134e:	09 f0       	breq	.+2      	; 0x1352 <vfprintf+0x118>
    1350:	59 c0       	rjmp	.+178    	; 0x1404 <vfprintf+0x1ca>
    1352:	21 c0       	rjmp	.+66     	; 0x1396 <vfprintf+0x15c>
    1354:	f8 01       	movw	r30, r16
    1356:	80 81       	ld	r24, Z
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	0e 5f       	subi	r16, 0xFE	; 254
    135c:	1f 4f       	sbci	r17, 0xFF	; 255
    135e:	88 24       	eor	r8, r8
    1360:	83 94       	inc	r8
    1362:	91 2c       	mov	r9, r1
    1364:	53 01       	movw	r10, r6
    1366:	13 c0       	rjmp	.+38     	; 0x138e <vfprintf+0x154>
    1368:	28 01       	movw	r4, r16
    136a:	f2 e0       	ldi	r31, 0x02	; 2
    136c:	4f 0e       	add	r4, r31
    136e:	51 1c       	adc	r5, r1
    1370:	f8 01       	movw	r30, r16
    1372:	a0 80       	ld	r10, Z
    1374:	b1 80       	ldd	r11, Z+1	; 0x01
    1376:	36 fe       	sbrs	r3, 6
    1378:	03 c0       	rjmp	.+6      	; 0x1380 <vfprintf+0x146>
    137a:	69 2d       	mov	r22, r9
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <vfprintf+0x14a>
    1380:	6f ef       	ldi	r22, 0xFF	; 255
    1382:	7f ef       	ldi	r23, 0xFF	; 255
    1384:	c5 01       	movw	r24, r10
    1386:	0e 94 09 0b 	call	0x1612	; 0x1612 <strnlen>
    138a:	4c 01       	movw	r8, r24
    138c:	82 01       	movw	r16, r4
    138e:	f3 2d       	mov	r31, r3
    1390:	ff 77       	andi	r31, 0x7F	; 127
    1392:	3f 2e       	mov	r3, r31
    1394:	16 c0       	rjmp	.+44     	; 0x13c2 <vfprintf+0x188>
    1396:	28 01       	movw	r4, r16
    1398:	22 e0       	ldi	r18, 0x02	; 2
    139a:	42 0e       	add	r4, r18
    139c:	51 1c       	adc	r5, r1
    139e:	f8 01       	movw	r30, r16
    13a0:	a0 80       	ld	r10, Z
    13a2:	b1 80       	ldd	r11, Z+1	; 0x01
    13a4:	36 fe       	sbrs	r3, 6
    13a6:	03 c0       	rjmp	.+6      	; 0x13ae <vfprintf+0x174>
    13a8:	69 2d       	mov	r22, r9
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <vfprintf+0x178>
    13ae:	6f ef       	ldi	r22, 0xFF	; 255
    13b0:	7f ef       	ldi	r23, 0xFF	; 255
    13b2:	c5 01       	movw	r24, r10
    13b4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <strnlen_P>
    13b8:	4c 01       	movw	r8, r24
    13ba:	f3 2d       	mov	r31, r3
    13bc:	f0 68       	ori	r31, 0x80	; 128
    13be:	3f 2e       	mov	r3, r31
    13c0:	82 01       	movw	r16, r4
    13c2:	33 fc       	sbrc	r3, 3
    13c4:	1b c0       	rjmp	.+54     	; 0x13fc <vfprintf+0x1c2>
    13c6:	82 2d       	mov	r24, r2
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	88 16       	cp	r8, r24
    13cc:	99 06       	cpc	r9, r25
    13ce:	b0 f4       	brcc	.+44     	; 0x13fc <vfprintf+0x1c2>
    13d0:	b6 01       	movw	r22, r12
    13d2:	80 e2       	ldi	r24, 0x20	; 32
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
    13da:	2a 94       	dec	r2
    13dc:	f4 cf       	rjmp	.-24     	; 0x13c6 <vfprintf+0x18c>
    13de:	f5 01       	movw	r30, r10
    13e0:	37 fc       	sbrc	r3, 7
    13e2:	85 91       	lpm	r24, Z+
    13e4:	37 fe       	sbrs	r3, 7
    13e6:	81 91       	ld	r24, Z+
    13e8:	5f 01       	movw	r10, r30
    13ea:	b6 01       	movw	r22, r12
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
    13f2:	21 10       	cpse	r2, r1
    13f4:	2a 94       	dec	r2
    13f6:	21 e0       	ldi	r18, 0x01	; 1
    13f8:	82 1a       	sub	r8, r18
    13fa:	91 08       	sbc	r9, r1
    13fc:	81 14       	cp	r8, r1
    13fe:	91 04       	cpc	r9, r1
    1400:	71 f7       	brne	.-36     	; 0x13de <vfprintf+0x1a4>
    1402:	e8 c0       	rjmp	.+464    	; 0x15d4 <vfprintf+0x39a>
    1404:	84 36       	cpi	r24, 0x64	; 100
    1406:	11 f0       	breq	.+4      	; 0x140c <vfprintf+0x1d2>
    1408:	89 36       	cpi	r24, 0x69	; 105
    140a:	41 f5       	brne	.+80     	; 0x145c <vfprintf+0x222>
    140c:	f8 01       	movw	r30, r16
    140e:	37 fe       	sbrs	r3, 7
    1410:	07 c0       	rjmp	.+14     	; 0x1420 <vfprintf+0x1e6>
    1412:	60 81       	ld	r22, Z
    1414:	71 81       	ldd	r23, Z+1	; 0x01
    1416:	82 81       	ldd	r24, Z+2	; 0x02
    1418:	93 81       	ldd	r25, Z+3	; 0x03
    141a:	0c 5f       	subi	r16, 0xFC	; 252
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	08 c0       	rjmp	.+16     	; 0x1430 <vfprintf+0x1f6>
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	07 2e       	mov	r0, r23
    1426:	00 0c       	add	r0, r0
    1428:	88 0b       	sbc	r24, r24
    142a:	99 0b       	sbc	r25, r25
    142c:	0e 5f       	subi	r16, 0xFE	; 254
    142e:	1f 4f       	sbci	r17, 0xFF	; 255
    1430:	f3 2d       	mov	r31, r3
    1432:	ff 76       	andi	r31, 0x6F	; 111
    1434:	3f 2e       	mov	r3, r31
    1436:	97 ff       	sbrs	r25, 7
    1438:	09 c0       	rjmp	.+18     	; 0x144c <vfprintf+0x212>
    143a:	90 95       	com	r25
    143c:	80 95       	com	r24
    143e:	70 95       	com	r23
    1440:	61 95       	neg	r22
    1442:	7f 4f       	sbci	r23, 0xFF	; 255
    1444:	8f 4f       	sbci	r24, 0xFF	; 255
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	f0 68       	ori	r31, 0x80	; 128
    144a:	3f 2e       	mov	r3, r31
    144c:	2a e0       	ldi	r18, 0x0A	; 10
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	a3 01       	movw	r20, r6
    1452:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__ultoa_invert>
    1456:	88 2e       	mov	r8, r24
    1458:	86 18       	sub	r8, r6
    145a:	45 c0       	rjmp	.+138    	; 0x14e6 <vfprintf+0x2ac>
    145c:	85 37       	cpi	r24, 0x75	; 117
    145e:	31 f4       	brne	.+12     	; 0x146c <vfprintf+0x232>
    1460:	23 2d       	mov	r18, r3
    1462:	2f 7e       	andi	r18, 0xEF	; 239
    1464:	b2 2e       	mov	r11, r18
    1466:	2a e0       	ldi	r18, 0x0A	; 10
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	25 c0       	rjmp	.+74     	; 0x14b6 <vfprintf+0x27c>
    146c:	93 2d       	mov	r25, r3
    146e:	99 7f       	andi	r25, 0xF9	; 249
    1470:	b9 2e       	mov	r11, r25
    1472:	8f 36       	cpi	r24, 0x6F	; 111
    1474:	c1 f0       	breq	.+48     	; 0x14a6 <vfprintf+0x26c>
    1476:	18 f4       	brcc	.+6      	; 0x147e <vfprintf+0x244>
    1478:	88 35       	cpi	r24, 0x58	; 88
    147a:	79 f0       	breq	.+30     	; 0x149a <vfprintf+0x260>
    147c:	b5 c0       	rjmp	.+362    	; 0x15e8 <vfprintf+0x3ae>
    147e:	80 37       	cpi	r24, 0x70	; 112
    1480:	19 f0       	breq	.+6      	; 0x1488 <vfprintf+0x24e>
    1482:	88 37       	cpi	r24, 0x78	; 120
    1484:	21 f0       	breq	.+8      	; 0x148e <vfprintf+0x254>
    1486:	b0 c0       	rjmp	.+352    	; 0x15e8 <vfprintf+0x3ae>
    1488:	e9 2f       	mov	r30, r25
    148a:	e0 61       	ori	r30, 0x10	; 16
    148c:	be 2e       	mov	r11, r30
    148e:	b4 fe       	sbrs	r11, 4
    1490:	0d c0       	rjmp	.+26     	; 0x14ac <vfprintf+0x272>
    1492:	fb 2d       	mov	r31, r11
    1494:	f4 60       	ori	r31, 0x04	; 4
    1496:	bf 2e       	mov	r11, r31
    1498:	09 c0       	rjmp	.+18     	; 0x14ac <vfprintf+0x272>
    149a:	34 fe       	sbrs	r3, 4
    149c:	0a c0       	rjmp	.+20     	; 0x14b2 <vfprintf+0x278>
    149e:	29 2f       	mov	r18, r25
    14a0:	26 60       	ori	r18, 0x06	; 6
    14a2:	b2 2e       	mov	r11, r18
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <vfprintf+0x278>
    14a6:	28 e0       	ldi	r18, 0x08	; 8
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <vfprintf+0x27c>
    14ac:	20 e1       	ldi	r18, 0x10	; 16
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <vfprintf+0x27c>
    14b2:	20 e1       	ldi	r18, 0x10	; 16
    14b4:	32 e0       	ldi	r19, 0x02	; 2
    14b6:	f8 01       	movw	r30, r16
    14b8:	b7 fe       	sbrs	r11, 7
    14ba:	07 c0       	rjmp	.+14     	; 0x14ca <vfprintf+0x290>
    14bc:	60 81       	ld	r22, Z
    14be:	71 81       	ldd	r23, Z+1	; 0x01
    14c0:	82 81       	ldd	r24, Z+2	; 0x02
    14c2:	93 81       	ldd	r25, Z+3	; 0x03
    14c4:	0c 5f       	subi	r16, 0xFC	; 252
    14c6:	1f 4f       	sbci	r17, 0xFF	; 255
    14c8:	06 c0       	rjmp	.+12     	; 0x14d6 <vfprintf+0x29c>
    14ca:	60 81       	ld	r22, Z
    14cc:	71 81       	ldd	r23, Z+1	; 0x01
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 5f       	subi	r16, 0xFE	; 254
    14d4:	1f 4f       	sbci	r17, 0xFF	; 255
    14d6:	a3 01       	movw	r20, r6
    14d8:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__ultoa_invert>
    14dc:	88 2e       	mov	r8, r24
    14de:	86 18       	sub	r8, r6
    14e0:	fb 2d       	mov	r31, r11
    14e2:	ff 77       	andi	r31, 0x7F	; 127
    14e4:	3f 2e       	mov	r3, r31
    14e6:	36 fe       	sbrs	r3, 6
    14e8:	0d c0       	rjmp	.+26     	; 0x1504 <vfprintf+0x2ca>
    14ea:	23 2d       	mov	r18, r3
    14ec:	2e 7f       	andi	r18, 0xFE	; 254
    14ee:	a2 2e       	mov	r10, r18
    14f0:	89 14       	cp	r8, r9
    14f2:	58 f4       	brcc	.+22     	; 0x150a <vfprintf+0x2d0>
    14f4:	34 fe       	sbrs	r3, 4
    14f6:	0b c0       	rjmp	.+22     	; 0x150e <vfprintf+0x2d4>
    14f8:	32 fc       	sbrc	r3, 2
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <vfprintf+0x2d4>
    14fc:	83 2d       	mov	r24, r3
    14fe:	8e 7e       	andi	r24, 0xEE	; 238
    1500:	a8 2e       	mov	r10, r24
    1502:	05 c0       	rjmp	.+10     	; 0x150e <vfprintf+0x2d4>
    1504:	b8 2c       	mov	r11, r8
    1506:	a3 2c       	mov	r10, r3
    1508:	03 c0       	rjmp	.+6      	; 0x1510 <vfprintf+0x2d6>
    150a:	b8 2c       	mov	r11, r8
    150c:	01 c0       	rjmp	.+2      	; 0x1510 <vfprintf+0x2d6>
    150e:	b9 2c       	mov	r11, r9
    1510:	a4 fe       	sbrs	r10, 4
    1512:	0f c0       	rjmp	.+30     	; 0x1532 <vfprintf+0x2f8>
    1514:	fe 01       	movw	r30, r28
    1516:	e8 0d       	add	r30, r8
    1518:	f1 1d       	adc	r31, r1
    151a:	80 81       	ld	r24, Z
    151c:	80 33       	cpi	r24, 0x30	; 48
    151e:	21 f4       	brne	.+8      	; 0x1528 <vfprintf+0x2ee>
    1520:	9a 2d       	mov	r25, r10
    1522:	99 7e       	andi	r25, 0xE9	; 233
    1524:	a9 2e       	mov	r10, r25
    1526:	09 c0       	rjmp	.+18     	; 0x153a <vfprintf+0x300>
    1528:	a2 fe       	sbrs	r10, 2
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <vfprintf+0x2fe>
    152c:	b3 94       	inc	r11
    152e:	b3 94       	inc	r11
    1530:	04 c0       	rjmp	.+8      	; 0x153a <vfprintf+0x300>
    1532:	8a 2d       	mov	r24, r10
    1534:	86 78       	andi	r24, 0x86	; 134
    1536:	09 f0       	breq	.+2      	; 0x153a <vfprintf+0x300>
    1538:	b3 94       	inc	r11
    153a:	a3 fc       	sbrc	r10, 3
    153c:	11 c0       	rjmp	.+34     	; 0x1560 <vfprintf+0x326>
    153e:	a0 fe       	sbrs	r10, 0
    1540:	06 c0       	rjmp	.+12     	; 0x154e <vfprintf+0x314>
    1542:	b2 14       	cp	r11, r2
    1544:	88 f4       	brcc	.+34     	; 0x1568 <vfprintf+0x32e>
    1546:	28 0c       	add	r2, r8
    1548:	92 2c       	mov	r9, r2
    154a:	9b 18       	sub	r9, r11
    154c:	0e c0       	rjmp	.+28     	; 0x156a <vfprintf+0x330>
    154e:	b2 14       	cp	r11, r2
    1550:	60 f4       	brcc	.+24     	; 0x156a <vfprintf+0x330>
    1552:	b6 01       	movw	r22, r12
    1554:	80 e2       	ldi	r24, 0x20	; 32
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
    155c:	b3 94       	inc	r11
    155e:	f7 cf       	rjmp	.-18     	; 0x154e <vfprintf+0x314>
    1560:	b2 14       	cp	r11, r2
    1562:	18 f4       	brcc	.+6      	; 0x156a <vfprintf+0x330>
    1564:	2b 18       	sub	r2, r11
    1566:	02 c0       	rjmp	.+4      	; 0x156c <vfprintf+0x332>
    1568:	98 2c       	mov	r9, r8
    156a:	21 2c       	mov	r2, r1
    156c:	a4 fe       	sbrs	r10, 4
    156e:	10 c0       	rjmp	.+32     	; 0x1590 <vfprintf+0x356>
    1570:	b6 01       	movw	r22, r12
    1572:	80 e3       	ldi	r24, 0x30	; 48
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
    157a:	a2 fe       	sbrs	r10, 2
    157c:	17 c0       	rjmp	.+46     	; 0x15ac <vfprintf+0x372>
    157e:	a1 fc       	sbrc	r10, 1
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <vfprintf+0x34e>
    1582:	88 e7       	ldi	r24, 0x78	; 120
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 c0       	rjmp	.+4      	; 0x158c <vfprintf+0x352>
    1588:	88 e5       	ldi	r24, 0x58	; 88
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	b6 01       	movw	r22, r12
    158e:	0c c0       	rjmp	.+24     	; 0x15a8 <vfprintf+0x36e>
    1590:	8a 2d       	mov	r24, r10
    1592:	86 78       	andi	r24, 0x86	; 134
    1594:	59 f0       	breq	.+22     	; 0x15ac <vfprintf+0x372>
    1596:	a1 fe       	sbrs	r10, 1
    1598:	02 c0       	rjmp	.+4      	; 0x159e <vfprintf+0x364>
    159a:	8b e2       	ldi	r24, 0x2B	; 43
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <vfprintf+0x366>
    159e:	80 e2       	ldi	r24, 0x20	; 32
    15a0:	a7 fc       	sbrc	r10, 7
    15a2:	8d e2       	ldi	r24, 0x2D	; 45
    15a4:	b6 01       	movw	r22, r12
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
    15ac:	89 14       	cp	r8, r9
    15ae:	38 f4       	brcc	.+14     	; 0x15be <vfprintf+0x384>
    15b0:	b6 01       	movw	r22, r12
    15b2:	80 e3       	ldi	r24, 0x30	; 48
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
    15ba:	9a 94       	dec	r9
    15bc:	f7 cf       	rjmp	.-18     	; 0x15ac <vfprintf+0x372>
    15be:	8a 94       	dec	r8
    15c0:	f3 01       	movw	r30, r6
    15c2:	e8 0d       	add	r30, r8
    15c4:	f1 1d       	adc	r31, r1
    15c6:	80 81       	ld	r24, Z
    15c8:	b6 01       	movw	r22, r12
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
    15d0:	81 10       	cpse	r8, r1
    15d2:	f5 cf       	rjmp	.-22     	; 0x15be <vfprintf+0x384>
    15d4:	22 20       	and	r2, r2
    15d6:	09 f4       	brne	.+2      	; 0x15da <vfprintf+0x3a0>
    15d8:	42 ce       	rjmp	.-892    	; 0x125e <vfprintf+0x24>
    15da:	b6 01       	movw	r22, r12
    15dc:	80 e2       	ldi	r24, 0x20	; 32
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 94 14 0b 	call	0x1628	; 0x1628 <fputc>
    15e4:	2a 94       	dec	r2
    15e6:	f6 cf       	rjmp	.-20     	; 0x15d4 <vfprintf+0x39a>
    15e8:	f6 01       	movw	r30, r12
    15ea:	86 81       	ldd	r24, Z+6	; 0x06
    15ec:	97 81       	ldd	r25, Z+7	; 0x07
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <vfprintf+0x3ba>
    15f0:	8f ef       	ldi	r24, 0xFF	; 255
    15f2:	9f ef       	ldi	r25, 0xFF	; 255
    15f4:	2b 96       	adiw	r28, 0x0b	; 11
    15f6:	e2 e1       	ldi	r30, 0x12	; 18
    15f8:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__epilogue_restores__>

000015fc <strnlen_P>:
    15fc:	fc 01       	movw	r30, r24
    15fe:	05 90       	lpm	r0, Z+
    1600:	61 50       	subi	r22, 0x01	; 1
    1602:	70 40       	sbci	r23, 0x00	; 0
    1604:	01 10       	cpse	r0, r1
    1606:	d8 f7       	brcc	.-10     	; 0x15fe <strnlen_P+0x2>
    1608:	80 95       	com	r24
    160a:	90 95       	com	r25
    160c:	8e 0f       	add	r24, r30
    160e:	9f 1f       	adc	r25, r31
    1610:	08 95       	ret

00001612 <strnlen>:
    1612:	fc 01       	movw	r30, r24
    1614:	61 50       	subi	r22, 0x01	; 1
    1616:	70 40       	sbci	r23, 0x00	; 0
    1618:	01 90       	ld	r0, Z+
    161a:	01 10       	cpse	r0, r1
    161c:	d8 f7       	brcc	.-10     	; 0x1614 <strnlen+0x2>
    161e:	80 95       	com	r24
    1620:	90 95       	com	r25
    1622:	8e 0f       	add	r24, r30
    1624:	9f 1f       	adc	r25, r31
    1626:	08 95       	ret

00001628 <fputc>:
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	fb 01       	movw	r30, r22
    1632:	23 81       	ldd	r18, Z+3	; 0x03
    1634:	21 fd       	sbrc	r18, 1
    1636:	03 c0       	rjmp	.+6      	; 0x163e <fputc+0x16>
    1638:	8f ef       	ldi	r24, 0xFF	; 255
    163a:	9f ef       	ldi	r25, 0xFF	; 255
    163c:	2c c0       	rjmp	.+88     	; 0x1696 <fputc+0x6e>
    163e:	22 ff       	sbrs	r18, 2
    1640:	16 c0       	rjmp	.+44     	; 0x166e <fputc+0x46>
    1642:	46 81       	ldd	r20, Z+6	; 0x06
    1644:	57 81       	ldd	r21, Z+7	; 0x07
    1646:	24 81       	ldd	r18, Z+4	; 0x04
    1648:	35 81       	ldd	r19, Z+5	; 0x05
    164a:	42 17       	cp	r20, r18
    164c:	53 07       	cpc	r21, r19
    164e:	44 f4       	brge	.+16     	; 0x1660 <fputc+0x38>
    1650:	a0 81       	ld	r26, Z
    1652:	b1 81       	ldd	r27, Z+1	; 0x01
    1654:	9d 01       	movw	r18, r26
    1656:	2f 5f       	subi	r18, 0xFF	; 255
    1658:	3f 4f       	sbci	r19, 0xFF	; 255
    165a:	31 83       	std	Z+1, r19	; 0x01
    165c:	20 83       	st	Z, r18
    165e:	8c 93       	st	X, r24
    1660:	26 81       	ldd	r18, Z+6	; 0x06
    1662:	37 81       	ldd	r19, Z+7	; 0x07
    1664:	2f 5f       	subi	r18, 0xFF	; 255
    1666:	3f 4f       	sbci	r19, 0xFF	; 255
    1668:	37 83       	std	Z+7, r19	; 0x07
    166a:	26 83       	std	Z+6, r18	; 0x06
    166c:	14 c0       	rjmp	.+40     	; 0x1696 <fputc+0x6e>
    166e:	8b 01       	movw	r16, r22
    1670:	ec 01       	movw	r28, r24
    1672:	fb 01       	movw	r30, r22
    1674:	00 84       	ldd	r0, Z+8	; 0x08
    1676:	f1 85       	ldd	r31, Z+9	; 0x09
    1678:	e0 2d       	mov	r30, r0
    167a:	09 95       	icall
    167c:	89 2b       	or	r24, r25
    167e:	e1 f6       	brne	.-72     	; 0x1638 <fputc+0x10>
    1680:	d8 01       	movw	r26, r16
    1682:	16 96       	adiw	r26, 0x06	; 6
    1684:	8d 91       	ld	r24, X+
    1686:	9c 91       	ld	r25, X
    1688:	17 97       	sbiw	r26, 0x07	; 7
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	17 96       	adiw	r26, 0x07	; 7
    168e:	9c 93       	st	X, r25
    1690:	8e 93       	st	-X, r24
    1692:	16 97       	sbiw	r26, 0x06	; 6
    1694:	ce 01       	movw	r24, r28
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	08 95       	ret

000016a0 <__ultoa_invert>:
    16a0:	fa 01       	movw	r30, r20
    16a2:	aa 27       	eor	r26, r26
    16a4:	28 30       	cpi	r18, 0x08	; 8
    16a6:	51 f1       	breq	.+84     	; 0x16fc <__ultoa_invert+0x5c>
    16a8:	20 31       	cpi	r18, 0x10	; 16
    16aa:	81 f1       	breq	.+96     	; 0x170c <__ultoa_invert+0x6c>
    16ac:	e8 94       	clt
    16ae:	6f 93       	push	r22
    16b0:	6e 7f       	andi	r22, 0xFE	; 254
    16b2:	6e 5f       	subi	r22, 0xFE	; 254
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	8f 4f       	sbci	r24, 0xFF	; 255
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	af 4f       	sbci	r26, 0xFF	; 255
    16bc:	b1 e0       	ldi	r27, 0x01	; 1
    16be:	3e d0       	rcall	.+124    	; 0x173c <__ultoa_invert+0x9c>
    16c0:	b4 e0       	ldi	r27, 0x04	; 4
    16c2:	3c d0       	rcall	.+120    	; 0x173c <__ultoa_invert+0x9c>
    16c4:	67 0f       	add	r22, r23
    16c6:	78 1f       	adc	r23, r24
    16c8:	89 1f       	adc	r24, r25
    16ca:	9a 1f       	adc	r25, r26
    16cc:	a1 1d       	adc	r26, r1
    16ce:	68 0f       	add	r22, r24
    16d0:	79 1f       	adc	r23, r25
    16d2:	8a 1f       	adc	r24, r26
    16d4:	91 1d       	adc	r25, r1
    16d6:	a1 1d       	adc	r26, r1
    16d8:	6a 0f       	add	r22, r26
    16da:	71 1d       	adc	r23, r1
    16dc:	81 1d       	adc	r24, r1
    16de:	91 1d       	adc	r25, r1
    16e0:	a1 1d       	adc	r26, r1
    16e2:	20 d0       	rcall	.+64     	; 0x1724 <__ultoa_invert+0x84>
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <__ultoa_invert+0x48>
    16e6:	68 94       	set
    16e8:	3f 91       	pop	r19
    16ea:	2a e0       	ldi	r18, 0x0A	; 10
    16ec:	26 9f       	mul	r18, r22
    16ee:	11 24       	eor	r1, r1
    16f0:	30 19       	sub	r19, r0
    16f2:	30 5d       	subi	r19, 0xD0	; 208
    16f4:	31 93       	st	Z+, r19
    16f6:	de f6       	brtc	.-74     	; 0x16ae <__ultoa_invert+0xe>
    16f8:	cf 01       	movw	r24, r30
    16fa:	08 95       	ret
    16fc:	46 2f       	mov	r20, r22
    16fe:	47 70       	andi	r20, 0x07	; 7
    1700:	40 5d       	subi	r20, 0xD0	; 208
    1702:	41 93       	st	Z+, r20
    1704:	b3 e0       	ldi	r27, 0x03	; 3
    1706:	0f d0       	rcall	.+30     	; 0x1726 <__ultoa_invert+0x86>
    1708:	c9 f7       	brne	.-14     	; 0x16fc <__ultoa_invert+0x5c>
    170a:	f6 cf       	rjmp	.-20     	; 0x16f8 <__ultoa_invert+0x58>
    170c:	46 2f       	mov	r20, r22
    170e:	4f 70       	andi	r20, 0x0F	; 15
    1710:	40 5d       	subi	r20, 0xD0	; 208
    1712:	4a 33       	cpi	r20, 0x3A	; 58
    1714:	18 f0       	brcs	.+6      	; 0x171c <__ultoa_invert+0x7c>
    1716:	49 5d       	subi	r20, 0xD9	; 217
    1718:	31 fd       	sbrc	r19, 1
    171a:	40 52       	subi	r20, 0x20	; 32
    171c:	41 93       	st	Z+, r20
    171e:	02 d0       	rcall	.+4      	; 0x1724 <__ultoa_invert+0x84>
    1720:	a9 f7       	brne	.-22     	; 0x170c <__ultoa_invert+0x6c>
    1722:	ea cf       	rjmp	.-44     	; 0x16f8 <__ultoa_invert+0x58>
    1724:	b4 e0       	ldi	r27, 0x04	; 4
    1726:	a6 95       	lsr	r26
    1728:	97 95       	ror	r25
    172a:	87 95       	ror	r24
    172c:	77 95       	ror	r23
    172e:	67 95       	ror	r22
    1730:	ba 95       	dec	r27
    1732:	c9 f7       	brne	.-14     	; 0x1726 <__ultoa_invert+0x86>
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	61 05       	cpc	r22, r1
    1738:	71 05       	cpc	r23, r1
    173a:	08 95       	ret
    173c:	9b 01       	movw	r18, r22
    173e:	ac 01       	movw	r20, r24
    1740:	0a 2e       	mov	r0, r26
    1742:	06 94       	lsr	r0
    1744:	57 95       	ror	r21
    1746:	47 95       	ror	r20
    1748:	37 95       	ror	r19
    174a:	27 95       	ror	r18
    174c:	ba 95       	dec	r27
    174e:	c9 f7       	brne	.-14     	; 0x1742 <__ultoa_invert+0xa2>
    1750:	62 0f       	add	r22, r18
    1752:	73 1f       	adc	r23, r19
    1754:	84 1f       	adc	r24, r20
    1756:	95 1f       	adc	r25, r21
    1758:	a0 1d       	adc	r26, r0
    175a:	08 95       	ret

0000175c <__prologue_saves__>:
    175c:	2f 92       	push	r2
    175e:	3f 92       	push	r3
    1760:	4f 92       	push	r4
    1762:	5f 92       	push	r5
    1764:	6f 92       	push	r6
    1766:	7f 92       	push	r7
    1768:	8f 92       	push	r8
    176a:	9f 92       	push	r9
    176c:	af 92       	push	r10
    176e:	bf 92       	push	r11
    1770:	cf 92       	push	r12
    1772:	df 92       	push	r13
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	ca 1b       	sub	r28, r26
    1786:	db 0b       	sbc	r29, r27
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	09 94       	ijmp

00001794 <__epilogue_restores__>:
    1794:	2a 88       	ldd	r2, Y+18	; 0x12
    1796:	39 88       	ldd	r3, Y+17	; 0x11
    1798:	48 88       	ldd	r4, Y+16	; 0x10
    179a:	5f 84       	ldd	r5, Y+15	; 0x0f
    179c:	6e 84       	ldd	r6, Y+14	; 0x0e
    179e:	7d 84       	ldd	r7, Y+13	; 0x0d
    17a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    17a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    17a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    17a6:	b9 84       	ldd	r11, Y+9	; 0x09
    17a8:	c8 84       	ldd	r12, Y+8	; 0x08
    17aa:	df 80       	ldd	r13, Y+7	; 0x07
    17ac:	ee 80       	ldd	r14, Y+6	; 0x06
    17ae:	fd 80       	ldd	r15, Y+5	; 0x05
    17b0:	0c 81       	ldd	r16, Y+4	; 0x04
    17b2:	1b 81       	ldd	r17, Y+3	; 0x03
    17b4:	aa 81       	ldd	r26, Y+2	; 0x02
    17b6:	b9 81       	ldd	r27, Y+1	; 0x01
    17b8:	ce 0f       	add	r28, r30
    17ba:	d1 1d       	adc	r29, r1
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	ed 01       	movw	r28, r26
    17c8:	08 95       	ret

000017ca <_exit>:
    17ca:	f8 94       	cli

000017cc <__stop_program>:
    17cc:	ff cf       	rjmp	.-2      	; 0x17cc <__stop_program>
