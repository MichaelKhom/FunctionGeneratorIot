
IotFuncGen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e4  00800060  00002f8e  00003022  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800244  00800244  00003206  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003206  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  000032a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000451c  00000000  00000000  00003558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e68  00000000  00000000  00007a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b3d  00000000  00000000  000088dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000046c  00000000  00000000  0000b41c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c1d  00000000  00000000  0000b888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021c9  00000000  00000000  0000c4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000e66e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__ctors_end>
       4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
       8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
       c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      10:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      14:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      1c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      24:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      2c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      30:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      40:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      4c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      50:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      54:	04 05       	cpc	r16, r4
      56:	04 05       	cpc	r16, r4
      58:	56 05       	cpc	r21, r6
      5a:	1a 05       	cpc	r17, r10
      5c:	0f 05       	cpc	r16, r15
      5e:	0f 05       	cpc	r16, r15
      60:	85 05       	cpc	r24, r5
      62:	38 05       	cpc	r19, r8
      64:	01 06       	cpc	r0, r17
      66:	55 06       	cpc	r5, r21
      68:	16 06       	cpc	r1, r22
      6a:	40 06       	cpc	r4, r16
      6c:	55 06       	cpc	r5, r21
      6e:	2b 06       	cpc	r2, r27
      70:	16 06       	cpc	r1, r22
      72:	40 06       	cpc	r4, r16
      74:	55 06       	cpc	r5, r21
      76:	2b 06       	cpc	r2, r27
      78:	40 06       	cpc	r4, r16
      7a:	55 06       	cpc	r5, r21
      7c:	2b 06       	cpc	r2, r27
      7e:	40 06       	cpc	r4, r16
      80:	2b 06       	cpc	r2, r27
      82:	40 06       	cpc	r4, r16
      84:	79 06       	cpc	r7, r25
      86:	2f 07       	cpc	r18, r31
      88:	95 07       	cpc	r25, r21
      8a:	ff 06       	cpc	r15, r31
      8c:	b3 06       	cpc	r11, r19
      8e:	62 07       	cpc	r22, r18
      90:	c2 07       	cpc	r28, r18
      92:	17 07       	cpc	r17, r23
      94:	74 0d       	add	r23, r4
      96:	24 0c       	add	r2, r4
      98:	51 0c       	add	r5, r1
      9a:	68 0c       	add	r6, r8
      9c:	3b 0c       	add	r3, r11
      9e:	7e 0c       	add	r7, r14
      a0:	ac 0c       	add	r10, r12
      a2:	c3 0c       	add	r12, r3
      a4:	95 0c       	add	r9, r5
      a6:	da 0c       	add	r13, r10
      a8:	61 0d       	add	r22, r1
      aa:	f3 0c       	add	r15, r3
      ac:	12 0d       	add	r17, r2
      ae:	31 0d       	add	r19, r1
      b0:	49 0d       	add	r20, r9
      b2:	a5 11       	cpse	r26, r5
      b4:	8d 0d       	add	r24, r13
      b6:	33 0e       	add	r3, r19
      b8:	06 0f       	add	r16, r22
      ba:	e0 0d       	add	r30, r0
      bc:	99 0f       	add	r25, r25
      be:	3f 10       	cpse	r3, r15
      c0:	12 11       	cpse	r17, r2
      c2:	ec 0f       	add	r30, r28
      c4:	38 12       	cpse	r3, r24
      c6:	3a 12       	cpse	r3, r26
      c8:	3c 12       	cpse	r3, r28
      ca:	3e 12       	cpse	r3, r30
      cc:	40 12       	cpse	r4, r16
      ce:	42 12       	cpse	r4, r18
      d0:	44 12       	cpse	r4, r20
      d2:	5e 12       	cpse	r5, r30
      d4:	60 12       	cpse	r6, r16
      d6:	62 12       	cpse	r6, r18
      d8:	64 12       	cpse	r6, r20
      da:	66 12       	cpse	r6, r22
      dc:	68 12       	cpse	r6, r24
      de:	6a 12       	cpse	r6, r26

000000e0 <__ctors_end>:
      e0:	11 24       	eor	r1, r1
      e2:	1f be       	out	0x3f, r1	; 63
      e4:	cf e5       	ldi	r28, 0x5F	; 95
      e6:	d8 e0       	ldi	r29, 0x08	; 8
      e8:	de bf       	out	0x3e, r29	; 62
      ea:	cd bf       	out	0x3d, r28	; 61

000000ec <__do_copy_data>:
      ec:	12 e0       	ldi	r17, 0x02	; 2
      ee:	a0 e6       	ldi	r26, 0x60	; 96
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	ee e8       	ldi	r30, 0x8E	; 142
      f4:	ff e2       	ldi	r31, 0x2F	; 47
      f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x10>
      f8:	05 90       	lpm	r0, Z+
      fa:	0d 92       	st	X+, r0
      fc:	a4 34       	cpi	r26, 0x44	; 68
      fe:	b1 07       	cpc	r27, r17
     100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0xc>

00000102 <__do_clear_bss>:
     102:	22 e0       	ldi	r18, 0x02	; 2
     104:	a4 e4       	ldi	r26, 0x44	; 68
     106:	b2 e0       	ldi	r27, 0x02	; 2
     108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
     10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
     10c:	a5 39       	cpi	r26, 0x95	; 149
     10e:	b2 07       	cpc	r27, r18
     110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
     112:	0e 94 0d 0b 	call	0x161a	; 0x161a <main>
     116:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <_exit>

0000011a <__bad_interrupt>:
     11a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011e <Init_LCD>:
#include "Headers/SPIMaster.h"
#include "Headers/LCD.h"

void Init_LCD(void)
{
	lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
     11e:	8f 9a       	sbi	0x11, 7	; 17
	lcd_D6_ddr |= (1<<lcd_D6_bit);
     120:	8e 9a       	sbi	0x11, 6	; 17
	lcd_D5_ddr |= (1<<lcd_D5_bit);
     122:	8d 9a       	sbi	0x11, 5	; 17
	lcd_D4_ddr |= (1<<lcd_D4_bit);
     124:	8c 9a       	sbi	0x11, 4	; 17
	lcd_E_ddr  |= (1<<lcd_E_bit);                    // E line - output
     126:	b9 9a       	sbi	0x17, 1	; 23
	lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
     128:	b8 9a       	sbi	0x17, 0	; 23
     12a:	08 95       	ret

0000012c <lcd_write_4>:
	lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
	lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
}

void lcd_write_4(uint8_t theByte) {
	lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
     12c:	97 98       	cbi	0x12, 7	; 18
	if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
     12e:	88 23       	and	r24, r24
     130:	0c f4       	brge	.+2      	; 0x134 <lcd_write_4+0x8>
     132:	97 9a       	sbi	0x12, 7	; 18
	lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
     134:	96 98       	cbi	0x12, 6	; 18
	if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
     136:	86 fd       	sbrc	r24, 6
     138:	96 9a       	sbi	0x12, 6	; 18
	lcd_D5_port &= ~(1<<lcd_D5_bit);
     13a:	95 98       	cbi	0x12, 5	; 18
	if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
     13c:	85 fd       	sbrc	r24, 5
     13e:	95 9a       	sbi	0x12, 5	; 18
	lcd_D4_port &= ~(1<<lcd_D4_bit);
     140:	94 98       	cbi	0x12, 4	; 18
	if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
     142:	84 fd       	sbrc	r24, 4
     144:	94 9a       	sbi	0x12, 4	; 18
	// write the data
	// 'Address set-up time' (40 nS)
	lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
     146:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     148:	8a eb       	ldi	r24, 0xBA	; 186
     14a:	8a 95       	dec	r24
     14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_write_4+0x1e>
     14e:	00 c0       	rjmp	.+0      	; 0x150 <lcd_write_4+0x24>
	_delay_us(70);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
	lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
     150:	c1 98       	cbi	0x18, 1	; 24
     152:	8a eb       	ldi	r24, 0xBA	; 186
     154:	8a 95       	dec	r24
     156:	f1 f7       	brne	.-4      	; 0x154 <lcd_write_4+0x28>
     158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_write_4+0x2e>
     15a:	08 95       	ret

0000015c <lcd_write_character_4d>:
	i++;
	_delay_us(160);                              // 40 uS delay (min)
	}
	}

void lcd_write_character_4d(uint8_t theData) {
     15c:	cf 93       	push	r28
     15e:	c8 2f       	mov	r28, r24
	lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
     160:	c0 9a       	sbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     162:	c1 98       	cbi	0x18, 1	; 24
	lcd_write_4(theData);                           // write the upper 4-bits of the data
     164:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_write_4>
	lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     168:	8c 2f       	mov	r24, r28
     16a:	82 95       	swap	r24
     16c:	80 7f       	andi	r24, 0xF0	; 240
     16e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_write_4>
}
     172:	cf 91       	pop	r28
     174:	08 95       	ret

00000176 <lcd_write_string_4d>:
	lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
	_delay_us(90);                                  // 40uS delay (min)
}


void lcd_write_string_4d(char theString[]) {
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	00 d0       	rcall	.+0      	; 0x180 <lcd_write_string_4d+0xa>
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	8c 01       	movw	r16, r24
	volatile int i = 0;                             // character counter*/
     186:	1a 82       	std	Y+2, r1	; 0x02
     188:	19 82       	std	Y+1, r1	; 0x01
	while (theString[i] != 0)
     18a:	e9 81       	ldd	r30, Y+1	; 0x01
     18c:	fa 81       	ldd	r31, Y+2	; 0x02
     18e:	e8 0f       	add	r30, r24
     190:	f9 1f       	adc	r31, r25
     192:	80 81       	ld	r24, Z
     194:	88 23       	and	r24, r24
     196:	c9 f0       	breq	.+50     	; 0x1ca <lcd_write_string_4d+0x54>
	{
	lcd_write_character_4d(theString[i]);
     198:	e9 81       	ldd	r30, Y+1	; 0x01
     19a:	fa 81       	ldd	r31, Y+2	; 0x02
     19c:	e0 0f       	add	r30, r16
     19e:	f1 1f       	adc	r31, r17
     1a0:	80 81       	ld	r24, Z
     1a2:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_write_character_4d>
	i++;
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	9a 81       	ldd	r25, Y+2	; 0x02
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	9a 83       	std	Y+2, r25	; 0x02
     1ae:	89 83       	std	Y+1, r24	; 0x01
     1b0:	8f e3       	ldi	r24, 0x3F	; 63
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_write_string_4d+0x3e>
     1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lcd_write_string_4d+0x44>
     1ba:	00 00       	nop
}


void lcd_write_string_4d(char theString[]) {
	volatile int i = 0;                             // character counter*/
	while (theString[i] != 0)
     1bc:	e9 81       	ldd	r30, Y+1	; 0x01
     1be:	fa 81       	ldd	r31, Y+2	; 0x02
     1c0:	e0 0f       	add	r30, r16
     1c2:	f1 1f       	adc	r31, r17
     1c4:	80 81       	ld	r24, Z
     1c6:	81 11       	cpse	r24, r1
     1c8:	e7 cf       	rjmp	.-50     	; 0x198 <lcd_write_string_4d+0x22>
	{
	lcd_write_character_4d(theString[i]);
	i++;
	_delay_us(160);                              // 40 uS delay (min)
	}
	}
     1ca:	0f 90       	pop	r0
     1cc:	0f 90       	pop	r0
     1ce:	df 91       	pop	r29
     1d0:	cf 91       	pop	r28
     1d2:	1f 91       	pop	r17
     1d4:	0f 91       	pop	r16
     1d6:	08 95       	ret

000001d8 <lcd_write_instruction_4d>:
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
	lcd_write_4(theData);                           // write the upper 4-bits of the data
	lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
}

void lcd_write_instruction_4d(uint8_t theInstruction) {
     1d8:	cf 93       	push	r28
     1da:	c8 2f       	mov	r28, r24
	lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     1dc:	c0 98       	cbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     1de:	c1 98       	cbi	0x18, 1	; 24
	lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     1e0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_write_4>
	lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     1e4:	8c 2f       	mov	r24, r28
     1e6:	82 95       	swap	r24
     1e8:	80 7f       	andi	r24, 0xF0	; 240
     1ea:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_write_4>
}
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <Init_LCD_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f2:	2f ef       	ldi	r18, 0xFF	; 255
     1f4:	80 e7       	ldi	r24, 0x70	; 112
     1f6:	92 e0       	ldi	r25, 0x02	; 2
     1f8:	21 50       	subi	r18, 0x01	; 1
     1fa:	80 40       	sbci	r24, 0x00	; 0
     1fc:	90 40       	sbci	r25, 0x00	; 0
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <Init_LCD_4bit+0x6>
     200:	00 c0       	rjmp	.+0      	; 0x202 <Init_LCD_4bit+0x10>
     202:	00 00       	nop
{
	// Power-up delay
	_delay_ms(100);                                 // initial 40 mSec delay

	// Set up the RS and E lines for the 'lcd_write_4' subroutine.
	lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     204:	c0 98       	cbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     206:	c1 98       	cbi	0x18, 1	; 24

	// Reset the LCD controller
	lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     208:	80 e3       	ldi	r24, 0x30	; 48
     20a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_write_4>
     20e:	8f e3       	ldi	r24, 0x3F	; 63
     210:	9c e9       	ldi	r25, 0x9C	; 156
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <Init_LCD_4bit+0x20>
     216:	00 c0       	rjmp	.+0      	; 0x218 <Init_LCD_4bit+0x26>
     218:	00 00       	nop
	_delay_ms(20);                                  // 4.1 mS delay (min)

	lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     21a:	80 e3       	ldi	r24, 0x30	; 48
     21c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	87 e5       	ldi	r24, 0x57	; 87
     222:	92 e0       	ldi	r25, 0x02	; 2
     224:	01 97       	sbiw	r24, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <Init_LCD_4bit+0x32>
     228:	00 c0       	rjmp	.+0      	; 0x22a <Init_LCD_4bit+0x38>
     22a:	00 00       	nop
	_delay_us(300);                                 // 100uS delay (min)

	lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     22c:	80 e3       	ldi	r24, 0x30	; 48
     22e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_write_4>
     232:	87 e5       	ldi	r24, 0x57	; 87
     234:	92 e0       	ldi	r25, 0x02	; 2
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <Init_LCD_4bit+0x44>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <Init_LCD_4bit+0x4a>
     23c:	00 00       	nop
	_delay_us(300);                                 // this delay is omitted in the data sheet
	
	lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     23e:	88 e2       	ldi	r24, 0x28	; 40
     240:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_write_4>
     244:	90 ef       	ldi	r25, 0xF0	; 240
     246:	9a 95       	dec	r25
     248:	f1 f7       	brne	.-4      	; 0x246 <Init_LCD_4bit+0x54>
	_delay_us(90);                                  // 40uS delay (min)

	// Function Set instruction
	lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     24a:	88 e2       	ldi	r24, 0x28	; 40
     24c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_write_instruction_4d>
     250:	20 ef       	ldi	r18, 0xF0	; 240
     252:	2a 95       	dec	r18
     254:	f1 f7       	brne	.-4      	; 0x252 <Init_LCD_4bit+0x60>
	_delay_us(90);                                  // 40uS delay (min)

	// Display On/Off Control instruction
	lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     256:	88 e0       	ldi	r24, 0x08	; 8
     258:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_write_instruction_4d>
     25c:	80 ef       	ldi	r24, 0xF0	; 240
     25e:	8a 95       	dec	r24
     260:	f1 f7       	brne	.-4      	; 0x25e <Init_LCD_4bit+0x6c>
	_delay_us(90);                                  // 40uS delay (min)

	// Clear Display instruction
	lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     268:	8f e7       	ldi	r24, 0x7F	; 127
     26a:	9e e3       	ldi	r25, 0x3E	; 62
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	f1 f7       	brne	.-4      	; 0x26c <Init_LCD_4bit+0x7a>
     270:	00 c0       	rjmp	.+0      	; 0x272 <Init_LCD_4bit+0x80>
     272:	00 00       	nop
	_delay_ms(8);                                   // 1.64 mS delay (min)

	// ; Entry Mode Set instruction
	lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     274:	86 e0       	ldi	r24, 0x06	; 6
     276:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     27a:	90 ef       	ldi	r25, 0xF0	; 240
     27c:	9a 95       	dec	r25
     27e:	f1 f7       	brne	.-4      	; 0x27c <Init_LCD_4bit+0x8a>
	_delay_us(90);                                  // 40uS delay (min)

	// Display On/Off Control instruction
	lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     280:	8c e0       	ldi	r24, 0x0C	; 12
     282:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_write_instruction_4d>
     286:	20 ef       	ldi	r18, 0xF0	; 240
     288:	2a 95       	dec	r18
     28a:	f1 f7       	brne	.-4      	; 0x288 <Init_LCD_4bit+0x96>
     28c:	08 95       	ret

0000028e <print_LCD_line>:
	_delay_us(70);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
	lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
	_delay_us(70);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
	}

void print_LCD_line(char *input_string, uint8_t line_number) {
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	ec 01       	movw	r28, r24
	lcd_write_instruction_4d(LCD_SET_CURSOR | line_number);
     294:	86 2f       	mov	r24, r22
     296:	80 68       	ori	r24, 0x80	; 128
     298:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_write_instruction_4d>
	lcd_write_string_4d(input_string);
     29c:	ce 01       	movw	r24, r28
     29e:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_write_string_4d>
}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <clear_LCD_line>:

void clear_LCD_line(unsigned char line) {
	print_LCD_line("                    ", line);
     2a8:	68 2f       	mov	r22, r24
     2aa:	80 e6       	ldi	r24, 0x60	; 96
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
     2b2:	08 95       	ret

000002b4 <clear_LCD>:
}

void clear_LCD() {
	clear_LCD_line(LCD_LINE_1);
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <clear_LCD_line>
	clear_LCD_line(LCD_LINE_2);
     2ba:	80 e4       	ldi	r24, 0x40	; 64
     2bc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <clear_LCD_line>
	clear_LCD_line(LCD_LINE_3);
     2c0:	84 e1       	ldi	r24, 0x14	; 20
     2c2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <clear_LCD_line>
	clear_LCD_line(LCD_LINE_4);
     2c6:	84 e5       	ldi	r24, 0x54	; 84
     2c8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <clear_LCD_line>
     2cc:	08 95       	ret

000002ce <print_LCD_char>:
}

void print_LCD_char(uint8_t ch_in, uint8_t line, uint8_t position) {
     2ce:	cf 93       	push	r28
     2d0:	c8 2f       	mov	r28, r24
	lcd_write_instruction_4d((LCD_SET_CURSOR | line) + position);
     2d2:	86 2f       	mov	r24, r22
     2d4:	80 68       	ori	r24, 0x80	; 128
     2d6:	84 0f       	add	r24, r20
     2d8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_write_instruction_4d>
	lcd_write_character_4d(ch_in);
     2dc:	8c 2f       	mov	r24, r28
     2de:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_write_character_4d>
}
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <beep>:
	return 0;
	}

void erase_EEPROM_1K() {
	for (uint16_t ptr = 0; ptr < EEPROM_ADRESS_SPAN + 1; ptr++) eeprom_write_byte((uint8_t *)ptr, 0);
}
     2e6:	8e e1       	ldi	r24, 0x1E	; 30
     2e8:	db 9a       	sbi	0x1b, 3	; 27
     2ea:	e3 e5       	ldi	r30, 0x53	; 83
     2ec:	f3 e0       	ldi	r31, 0x03	; 3
     2ee:	31 97       	sbiw	r30, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <beep+0x8>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <beep+0xe>
     2f4:	00 00       	nop
     2f6:	db 98       	cbi	0x1b, 3	; 27
     2f8:	e3 e5       	ldi	r30, 0x53	; 83
     2fa:	f3 e0       	ldi	r31, 0x03	; 3
     2fc:	31 97       	sbiw	r30, 0x01	; 1
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <beep+0x16>
     300:	00 c0       	rjmp	.+0      	; 0x302 <beep+0x1c>
     302:	00 00       	nop
     304:	81 50       	subi	r24, 0x01	; 1
     306:	81 f7       	brne	.-32     	; 0x2e8 <beep+0x2>
     308:	08 95       	ret

0000030a <playMelody>:
     30a:	88 23       	and	r24, r24
     30c:	b1 f1       	breq	.+108    	; 0x37a <playMelody+0x70>
     30e:	8c ee       	ldi	r24, 0xEC	; 236
     310:	db 9a       	sbi	0x1b, 3	; 27
     312:	e3 e5       	ldi	r30, 0x53	; 83
     314:	f3 e0       	ldi	r31, 0x03	; 3
     316:	31 97       	sbiw	r30, 0x01	; 1
     318:	f1 f7       	brne	.-4      	; 0x316 <playMelody+0xc>
     31a:	00 c0       	rjmp	.+0      	; 0x31c <playMelody+0x12>
     31c:	00 00       	nop
     31e:	db 98       	cbi	0x1b, 3	; 27
     320:	e3 e5       	ldi	r30, 0x53	; 83
     322:	f3 e0       	ldi	r31, 0x03	; 3
     324:	31 97       	sbiw	r30, 0x01	; 1
     326:	f1 f7       	brne	.-4      	; 0x324 <playMelody+0x1a>
     328:	00 c0       	rjmp	.+0      	; 0x32a <playMelody+0x20>
     32a:	00 00       	nop
     32c:	81 50       	subi	r24, 0x01	; 1
     32e:	81 f7       	brne	.-32     	; 0x310 <playMelody+0x6>
     330:	88 e2       	ldi	r24, 0x28	; 40
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	db 9a       	sbi	0x1b, 3	; 27
     336:	e3 ea       	ldi	r30, 0xA3	; 163
     338:	f2 e0       	ldi	r31, 0x02	; 2
     33a:	31 97       	sbiw	r30, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <playMelody+0x30>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <playMelody+0x36>
     340:	00 00       	nop
     342:	db 98       	cbi	0x1b, 3	; 27
     344:	e3 ea       	ldi	r30, 0xA3	; 163
     346:	f2 e0       	ldi	r31, 0x02	; 2
     348:	31 97       	sbiw	r30, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <playMelody+0x3e>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <playMelody+0x44>
     34e:	00 00       	nop
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	81 f7       	brne	.-32     	; 0x334 <playMelody+0x2a>
     354:	80 e6       	ldi	r24, 0x60	; 96
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	db 9a       	sbi	0x1b, 3	; 27
     35a:	e7 e3       	ldi	r30, 0x37	; 55
     35c:	f2 e0       	ldi	r31, 0x02	; 2
     35e:	31 97       	sbiw	r30, 0x01	; 1
     360:	f1 f7       	brne	.-4      	; 0x35e <playMelody+0x54>
     362:	00 c0       	rjmp	.+0      	; 0x364 <playMelody+0x5a>
     364:	00 00       	nop
     366:	db 98       	cbi	0x1b, 3	; 27
     368:	e7 e3       	ldi	r30, 0x37	; 55
     36a:	f2 e0       	ldi	r31, 0x02	; 2
     36c:	31 97       	sbiw	r30, 0x01	; 1
     36e:	f1 f7       	brne	.-4      	; 0x36c <playMelody+0x62>
     370:	00 c0       	rjmp	.+0      	; 0x372 <playMelody+0x68>
     372:	00 00       	nop
     374:	01 97       	sbiw	r24, 0x01	; 1
     376:	81 f7       	brne	.-32     	; 0x358 <playMelody+0x4e>
     378:	08 95       	ret
     37a:	88 e2       	ldi	r24, 0x28	; 40
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	db 9a       	sbi	0x1b, 3	; 27
     380:	e3 ea       	ldi	r30, 0xA3	; 163
     382:	f2 e0       	ldi	r31, 0x02	; 2
     384:	31 97       	sbiw	r30, 0x01	; 1
     386:	f1 f7       	brne	.-4      	; 0x384 <playMelody+0x7a>
     388:	00 c0       	rjmp	.+0      	; 0x38a <playMelody+0x80>
     38a:	00 00       	nop
     38c:	db 98       	cbi	0x1b, 3	; 27
     38e:	e3 ea       	ldi	r30, 0xA3	; 163
     390:	f2 e0       	ldi	r31, 0x02	; 2
     392:	31 97       	sbiw	r30, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <playMelody+0x88>
     396:	00 c0       	rjmp	.+0      	; 0x398 <playMelody+0x8e>
     398:	00 00       	nop
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	81 f7       	brne	.-32     	; 0x37e <playMelody+0x74>
     39e:	8c ee       	ldi	r24, 0xEC	; 236
     3a0:	db 9a       	sbi	0x1b, 3	; 27
     3a2:	e3 e5       	ldi	r30, 0x53	; 83
     3a4:	f3 e0       	ldi	r31, 0x03	; 3
     3a6:	31 97       	sbiw	r30, 0x01	; 1
     3a8:	f1 f7       	brne	.-4      	; 0x3a6 <playMelody+0x9c>
     3aa:	00 c0       	rjmp	.+0      	; 0x3ac <playMelody+0xa2>
     3ac:	00 00       	nop
     3ae:	db 98       	cbi	0x1b, 3	; 27
     3b0:	e3 e5       	ldi	r30, 0x53	; 83
     3b2:	f3 e0       	ldi	r31, 0x03	; 3
     3b4:	31 97       	sbiw	r30, 0x01	; 1
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <playMelody+0xaa>
     3b8:	00 c0       	rjmp	.+0      	; 0x3ba <playMelody+0xb0>
     3ba:	00 00       	nop
     3bc:	81 50       	subi	r24, 0x01	; 1
     3be:	81 f7       	brne	.-32     	; 0x3a0 <playMelody+0x96>
     3c0:	80 e6       	ldi	r24, 0x60	; 96
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	db 9a       	sbi	0x1b, 3	; 27
     3c6:	ef e6       	ldi	r30, 0x6F	; 111
     3c8:	f4 e0       	ldi	r31, 0x04	; 4
     3ca:	31 97       	sbiw	r30, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <playMelody+0xc0>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <playMelody+0xc6>
     3d0:	00 00       	nop
     3d2:	db 98       	cbi	0x1b, 3	; 27
     3d4:	ef e6       	ldi	r30, 0x6F	; 111
     3d6:	f4 e0       	ldi	r31, 0x04	; 4
     3d8:	31 97       	sbiw	r30, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <playMelody+0xce>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <playMelody+0xd4>
     3de:	00 00       	nop
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	81 f7       	brne	.-32     	; 0x3c4 <playMelody+0xba>
     3e4:	08 95       	ret

000003e6 <shutdownSequence>:
     3e6:	cf 93       	push	r28
     3e8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <beep>
     3ec:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <clear_LCD>
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	85 e7       	ldi	r24, 0x75	; 117
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
     3fa:	60 e4       	ldi	r22, 0x40	; 64
     3fc:	8a e8       	ldi	r24, 0x8A	; 138
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
     404:	64 e1       	ldi	r22, 0x14	; 20
     406:	8f e9       	ldi	r24, 0x9F	; 159
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
     40e:	c5 e3       	ldi	r28, 0x35	; 53
     410:	43 e0       	ldi	r20, 0x03	; 3
     412:	64 e1       	ldi	r22, 0x14	; 20
     414:	8c 2f       	mov	r24, r28
     416:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
     41a:	2f ef       	ldi	r18, 0xFF	; 255
     41c:	89 e6       	ldi	r24, 0x69	; 105
     41e:	98 e1       	ldi	r25, 0x18	; 24
     420:	21 50       	subi	r18, 0x01	; 1
     422:	80 40       	sbci	r24, 0x00	; 0
     424:	90 40       	sbci	r25, 0x00	; 0
     426:	e1 f7       	brne	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     42a:	00 00       	nop
     42c:	c1 50       	subi	r28, 0x01	; 1
     42e:	c0 33       	cpi	r28, 0x30	; 48
     430:	79 f7       	brne	.-34     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	0e 94 85 01 	call	0x30a	; 0x30a <playMelody>
     438:	da 98       	cbi	0x1b, 2	; 27
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <Init_Ports>:
     43e:	ba 98       	cbi	0x17, 2	; 23
     440:	bb 98       	cbi	0x17, 3	; 23
     442:	c2 9a       	sbi	0x18, 2	; 24
     444:	c3 9a       	sbi	0x18, 3	; 24
     446:	84 b3       	in	r24, 0x14	; 20
     448:	8c 6f       	ori	r24, 0xFC	; 252
     44a:	84 bb       	out	0x14, r24	; 20
     44c:	d4 9a       	sbi	0x1a, 4	; 26
     44e:	87 b3       	in	r24, 0x17	; 23
     450:	83 60       	ori	r24, 0x03	; 3
     452:	87 bb       	out	0x17, r24	; 23
     454:	81 b3       	in	r24, 0x11	; 17
     456:	80 6f       	ori	r24, 0xF0	; 240
     458:	81 bb       	out	0x11, r24	; 17
     45a:	8a b3       	in	r24, 0x1a	; 26
     45c:	8c 7f       	andi	r24, 0xFC	; 252
     45e:	8a bb       	out	0x1a, r24	; 26
     460:	87 b3       	in	r24, 0x17	; 23
     462:	80 6a       	ori	r24, 0xA0	; 160
     464:	87 bb       	out	0x17, r24	; 23
     466:	be 98       	cbi	0x17, 6	; 23
     468:	89 9a       	sbi	0x11, 1	; 17
     46a:	84 b3       	in	r24, 0x14	; 20
     46c:	83 60       	ori	r24, 0x03	; 3
     46e:	84 bb       	out	0x14, r24	; 20
     470:	8a 98       	cbi	0x11, 2	; 17
     472:	8a b3       	in	r24, 0x1a	; 26
     474:	8c 60       	ori	r24, 0x0C	; 12
     476:	8a bb       	out	0x1a, r24	; 26
     478:	08 95       	ret

0000047a <Init_ADC>:
     47a:	86 b1       	in	r24, 0x06	; 6
     47c:	87 68       	ori	r24, 0x87	; 135
     47e:	86 b9       	out	0x06, r24	; 6
     480:	3e 9a       	sbi	0x07, 6	; 7
     482:	08 95       	ret

00000484 <Init_Device>:
     484:	0e 94 1f 02 	call	0x43e	; 0x43e <Init_Ports>
     488:	da 9a       	sbi	0x1b, 2	; 27
     48a:	0e 94 7d 12 	call	0x24fa	; 0x24fa <Init_SPI_All>
     48e:	0e 94 8f 00 	call	0x11e	; 0x11e <Init_LCD>
     492:	2f ef       	ldi	r18, 0xFF	; 255
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	98 e1       	ldi	r25, 0x18	; 24
     498:	21 50       	subi	r18, 0x01	; 1
     49a:	80 40       	sbci	r24, 0x00	; 0
     49c:	90 40       	sbci	r25, 0x00	; 0
     49e:	e1 f7       	brne	.-8      	; 0x498 <Init_Device+0x14>
     4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <Init_Device+0x1e>
     4a2:	00 00       	nop
     4a4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Init_LCD_4bit>
     4a8:	0e 94 8c 12 	call	0x2518	; 0x2518 <Init_UART>
     4ac:	0e 94 3d 02 	call	0x47a	; 0x47a <Init_ADC>
     4b0:	08 95       	ret

000004b2 <selectOutputType>:
     4b2:	63 30       	cpi	r22, 0x03	; 3
     4b4:	41 f4       	brne	.+16     	; 0x4c6 <selectOutputType+0x14>
     4b6:	85 30       	cpi	r24, 0x05	; 5
     4b8:	11 f4       	brne	.+4      	; 0x4be <selectOutputType+0xc>
     4ba:	a8 98       	cbi	0x15, 0	; 21
     4bc:	08 95       	ret
     4be:	86 30       	cpi	r24, 0x06	; 6
     4c0:	49 f4       	brne	.+18     	; 0x4d4 <selectOutputType+0x22>
     4c2:	a9 98       	cbi	0x15, 1	; 21
     4c4:	08 95       	ret
     4c6:	85 30       	cpi	r24, 0x05	; 5
     4c8:	11 f4       	brne	.+4      	; 0x4ce <selectOutputType+0x1c>
     4ca:	a8 9a       	sbi	0x15, 0	; 21
     4cc:	08 95       	ret
     4ce:	86 30       	cpi	r24, 0x06	; 6
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <selectOutputType+0x22>
     4d2:	a9 9a       	sbi	0x15, 1	; 21
     4d4:	08 95       	ret

000004d6 <setFunction>:
     4d6:	8f 92       	push	r8
     4d8:	9f 92       	push	r9
     4da:	af 92       	push	r10
     4dc:	bf 92       	push	r11
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	f8 2e       	mov	r15, r24
     4ec:	4a 01       	movw	r8, r20
     4ee:	5b 01       	movw	r10, r22
     4f0:	e2 2e       	mov	r14, r18
     4f2:	0e 94 6e 12 	call	0x24dc	; 0x24dc <Init_SPI_AD9834>
     4f6:	c5 01       	movw	r24, r10
     4f8:	b4 01       	movw	r22, r8
     4fa:	0e 94 35 13 	call	0x266a	; 0x266a <__floatunsisf>
     4fe:	27 e7       	ldi	r18, 0x77	; 119
     500:	3c ec       	ldi	r19, 0xCC	; 204
     502:	4b e2       	ldi	r20, 0x2B	; 43
     504:	51 e4       	ldi	r21, 0x41	; 65
     506:	0e 94 c3 13 	call	0x2786	; 0x2786 <__mulsf3>
     50a:	0e 94 06 13 	call	0x260c	; 0x260c <__fixunssfsi>
     50e:	eb 01       	movw	r28, r22
     510:	df 73       	andi	r29, 0x3F	; 63
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	07 2e       	mov	r0, r23
     518:	7e e0       	ldi	r23, 0x0E	; 14
     51a:	b6 95       	lsr	r27
     51c:	a7 95       	ror	r26
     51e:	97 95       	ror	r25
     520:	87 95       	ror	r24
     522:	7a 95       	dec	r23
     524:	d1 f7       	brne	.-12     	; 0x51a <setFunction+0x44>
     526:	70 2d       	mov	r23, r0
     528:	8c 01       	movw	r16, r24
     52a:	1f 73       	andi	r17, 0x3F	; 63
     52c:	4f 2d       	mov	r20, r15
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	81 e2       	ldi	r24, 0x21	; 33
     532:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     536:	8d 2f       	mov	r24, r29
     538:	8f 73       	andi	r24, 0x3F	; 63
     53a:	4f 2d       	mov	r20, r15
     53c:	6c 2f       	mov	r22, r28
     53e:	80 64       	ori	r24, 0x40	; 64
     540:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     544:	81 2f       	mov	r24, r17
     546:	8f 73       	andi	r24, 0x3F	; 63
     548:	4f 2d       	mov	r20, r15
     54a:	60 2f       	mov	r22, r16
     54c:	80 64       	ori	r24, 0x40	; 64
     54e:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     552:	4f 2d       	mov	r20, r15
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	80 ec       	ldi	r24, 0xC0	; 192
     558:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	e8 16       	cp	r14, r24
     560:	61 f0       	breq	.+24     	; 0x57a <setFunction+0xa4>
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	e8 16       	cp	r14, r24
     566:	79 f0       	breq	.+30     	; 0x586 <setFunction+0xb0>
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	e8 12       	cpse	r14, r24
     56c:	12 c0       	rjmp	.+36     	; 0x592 <setFunction+0xbc>
     56e:	4f 2d       	mov	r20, r15
     570:	60 e2       	ldi	r22, 0x20	; 32
     572:	80 e2       	ldi	r24, 0x20	; 32
     574:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     578:	11 c0       	rjmp	.+34     	; 0x59c <setFunction+0xc6>
     57a:	4f 2d       	mov	r20, r15
     57c:	62 e0       	ldi	r22, 0x02	; 2
     57e:	80 e2       	ldi	r24, 0x20	; 32
     580:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     584:	0b c0       	rjmp	.+22     	; 0x59c <setFunction+0xc6>
     586:	4f 2d       	mov	r20, r15
     588:	68 e2       	ldi	r22, 0x28	; 40
     58a:	80 e2       	ldi	r24, 0x20	; 32
     58c:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     590:	05 c0       	rjmp	.+10     	; 0x59c <setFunction+0xc6>
     592:	4f 2d       	mov	r20, r15
     594:	60 e8       	ldi	r22, 0x80	; 128
     596:	80 e2       	ldi	r24, 0x20	; 32
     598:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     59c:	6e 2d       	mov	r22, r14
     59e:	8f 2d       	mov	r24, r15
     5a0:	0e 94 59 02 	call	0x4b2	; 0x4b2 <selectOutputType>
     5a4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <Init_SPI_All>
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	bf 90       	pop	r11
     5b6:	af 90       	pop	r10
     5b8:	9f 90       	pop	r9
     5ba:	8f 90       	pop	r8
     5bc:	08 95       	ret

000005be <setAmplitude>:
     5be:	2f ef       	ldi	r18, 0xFF	; 255
     5c0:	3f e0       	ldi	r19, 0x0F	; 15
     5c2:	28 1b       	sub	r18, r24
     5c4:	39 0b       	sbc	r19, r25
     5c6:	83 2f       	mov	r24, r19
     5c8:	8f 70       	andi	r24, 0x0F	; 15
     5ca:	65 30       	cpi	r22, 0x05	; 5
     5cc:	41 f4       	brne	.+16     	; 0x5de <setAmplitude+0x20>
     5ce:	41 e0       	ldi	r20, 0x01	; 1
     5d0:	62 2f       	mov	r22, r18
     5d2:	80 6f       	ori	r24, 0xF0	; 240
     5d4:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	08 95       	ret
     5de:	66 30       	cpi	r22, 0x06	; 6
     5e0:	41 f4       	brne	.+16     	; 0x5f2 <setAmplitude+0x34>
     5e2:	42 e0       	ldi	r20, 0x02	; 2
     5e4:	62 2f       	mov	r22, r18
     5e6:	80 6f       	ori	r24, 0xF0	; 240
     5e8:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	08 95       	ret
     5f2:	8f ef       	ldi	r24, 0xFF	; 255
     5f4:	9f ef       	ldi	r25, 0xFF	; 255
     5f6:	08 95       	ret

000005f8 <pollSwitch>:
     5f8:	82 99       	sbic	0x10, 2	; 16
     5fa:	04 c0       	rjmp	.+8      	; 0x604 <pollSwitch+0xc>
     5fc:	82 9b       	sbis	0x10, 2	; 16
     5fe:	fe cf       	rjmp	.-4      	; 0x5fc <pollSwitch+0x4>
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	08 95       	ret
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	08 95       	ret

00000608 <pollEncoder>:
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	00 d0       	rcall	.+0      	; 0x60e <pollEncoder+0x6>
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	86 b3       	in	r24, 0x16	; 22
     614:	19 82       	std	Y+1, r1	; 0x01
     616:	86 b3       	in	r24, 0x16	; 22
     618:	82 95       	swap	r24
     61a:	81 70       	andi	r24, 0x01	; 1
     61c:	8a 83       	std	Y+2, r24	; 0x02
     61e:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <Encoder>
     622:	88 23       	and	r24, r24
     624:	81 f0       	breq	.+32     	; 0x646 <pollEncoder+0x3e>
     626:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <Encoder+0x1>
     62a:	88 23       	and	r24, r24
     62c:	61 f0       	breq	.+24     	; 0x646 <pollEncoder+0x3e>
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	81 11       	cpse	r24, r1
     632:	09 c0       	rjmp	.+18     	; 0x646 <pollEncoder+0x3e>
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	88 23       	and	r24, r24
     638:	31 f0       	breq	.+12     	; 0x646 <pollEncoder+0x3e>
     63a:	eb e7       	ldi	r30, 0x7B	; 123
     63c:	f2 e0       	ldi	r31, 0x02	; 2
     63e:	82 81       	ldd	r24, Z+2	; 0x02
     640:	8f 5f       	subi	r24, 0xFF	; 255
     642:	82 83       	std	Z+2, r24	; 0x02
     644:	8b c0       	rjmp	.+278    	; 0x75c <pollEncoder+0x154>
     646:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <Encoder>
     64a:	81 11       	cpse	r24, r1
     64c:	10 c0       	rjmp	.+32     	; 0x66e <pollEncoder+0x66>
     64e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <Encoder+0x1>
     652:	88 23       	and	r24, r24
     654:	61 f0       	breq	.+24     	; 0x66e <pollEncoder+0x66>
     656:	8a 81       	ldd	r24, Y+2	; 0x02
     658:	81 11       	cpse	r24, r1
     65a:	09 c0       	rjmp	.+18     	; 0x66e <pollEncoder+0x66>
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	81 11       	cpse	r24, r1
     660:	06 c0       	rjmp	.+12     	; 0x66e <pollEncoder+0x66>
     662:	eb e7       	ldi	r30, 0x7B	; 123
     664:	f2 e0       	ldi	r31, 0x02	; 2
     666:	82 81       	ldd	r24, Z+2	; 0x02
     668:	8f 5f       	subi	r24, 0xFF	; 255
     66a:	82 83       	std	Z+2, r24	; 0x02
     66c:	77 c0       	rjmp	.+238    	; 0x75c <pollEncoder+0x154>
     66e:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <Encoder>
     672:	81 11       	cpse	r24, r1
     674:	10 c0       	rjmp	.+32     	; 0x696 <pollEncoder+0x8e>
     676:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <Encoder+0x1>
     67a:	81 11       	cpse	r24, r1
     67c:	0c c0       	rjmp	.+24     	; 0x696 <pollEncoder+0x8e>
     67e:	8a 81       	ldd	r24, Y+2	; 0x02
     680:	88 23       	and	r24, r24
     682:	49 f0       	breq	.+18     	; 0x696 <pollEncoder+0x8e>
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	81 11       	cpse	r24, r1
     688:	06 c0       	rjmp	.+12     	; 0x696 <pollEncoder+0x8e>
     68a:	eb e7       	ldi	r30, 0x7B	; 123
     68c:	f2 e0       	ldi	r31, 0x02	; 2
     68e:	82 81       	ldd	r24, Z+2	; 0x02
     690:	8f 5f       	subi	r24, 0xFF	; 255
     692:	82 83       	std	Z+2, r24	; 0x02
     694:	63 c0       	rjmp	.+198    	; 0x75c <pollEncoder+0x154>
     696:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <Encoder>
     69a:	88 23       	and	r24, r24
     69c:	81 f0       	breq	.+32     	; 0x6be <pollEncoder+0xb6>
     69e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <Encoder+0x1>
     6a2:	81 11       	cpse	r24, r1
     6a4:	0c c0       	rjmp	.+24     	; 0x6be <pollEncoder+0xb6>
     6a6:	8a 81       	ldd	r24, Y+2	; 0x02
     6a8:	88 23       	and	r24, r24
     6aa:	49 f0       	breq	.+18     	; 0x6be <pollEncoder+0xb6>
     6ac:	89 81       	ldd	r24, Y+1	; 0x01
     6ae:	88 23       	and	r24, r24
     6b0:	31 f0       	breq	.+12     	; 0x6be <pollEncoder+0xb6>
     6b2:	eb e7       	ldi	r30, 0x7B	; 123
     6b4:	f2 e0       	ldi	r31, 0x02	; 2
     6b6:	82 81       	ldd	r24, Z+2	; 0x02
     6b8:	8f 5f       	subi	r24, 0xFF	; 255
     6ba:	82 83       	std	Z+2, r24	; 0x02
     6bc:	4f c0       	rjmp	.+158    	; 0x75c <pollEncoder+0x154>
     6be:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <Encoder>
     6c2:	88 23       	and	r24, r24
     6c4:	81 f0       	breq	.+32     	; 0x6e6 <pollEncoder+0xde>
     6c6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <Encoder+0x1>
     6ca:	88 23       	and	r24, r24
     6cc:	61 f0       	breq	.+24     	; 0x6e6 <pollEncoder+0xde>
     6ce:	8a 81       	ldd	r24, Y+2	; 0x02
     6d0:	88 23       	and	r24, r24
     6d2:	49 f0       	breq	.+18     	; 0x6e6 <pollEncoder+0xde>
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	81 11       	cpse	r24, r1
     6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <pollEncoder+0xde>
     6da:	eb e7       	ldi	r30, 0x7B	; 123
     6dc:	f2 e0       	ldi	r31, 0x02	; 2
     6de:	83 81       	ldd	r24, Z+3	; 0x03
     6e0:	8f 5f       	subi	r24, 0xFF	; 255
     6e2:	83 83       	std	Z+3, r24	; 0x03
     6e4:	3b c0       	rjmp	.+118    	; 0x75c <pollEncoder+0x154>
     6e6:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <Encoder>
     6ea:	88 23       	and	r24, r24
     6ec:	81 f0       	breq	.+32     	; 0x70e <pollEncoder+0x106>
     6ee:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <Encoder+0x1>
     6f2:	81 11       	cpse	r24, r1
     6f4:	0c c0       	rjmp	.+24     	; 0x70e <pollEncoder+0x106>
     6f6:	8a 81       	ldd	r24, Y+2	; 0x02
     6f8:	81 11       	cpse	r24, r1
     6fa:	09 c0       	rjmp	.+18     	; 0x70e <pollEncoder+0x106>
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	81 11       	cpse	r24, r1
     700:	06 c0       	rjmp	.+12     	; 0x70e <pollEncoder+0x106>
     702:	eb e7       	ldi	r30, 0x7B	; 123
     704:	f2 e0       	ldi	r31, 0x02	; 2
     706:	83 81       	ldd	r24, Z+3	; 0x03
     708:	8f 5f       	subi	r24, 0xFF	; 255
     70a:	83 83       	std	Z+3, r24	; 0x03
     70c:	27 c0       	rjmp	.+78     	; 0x75c <pollEncoder+0x154>
     70e:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <Encoder>
     712:	81 11       	cpse	r24, r1
     714:	10 c0       	rjmp	.+32     	; 0x736 <pollEncoder+0x12e>
     716:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <Encoder+0x1>
     71a:	81 11       	cpse	r24, r1
     71c:	0c c0       	rjmp	.+24     	; 0x736 <pollEncoder+0x12e>
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	81 11       	cpse	r24, r1
     722:	09 c0       	rjmp	.+18     	; 0x736 <pollEncoder+0x12e>
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	88 23       	and	r24, r24
     728:	31 f0       	breq	.+12     	; 0x736 <pollEncoder+0x12e>
     72a:	eb e7       	ldi	r30, 0x7B	; 123
     72c:	f2 e0       	ldi	r31, 0x02	; 2
     72e:	83 81       	ldd	r24, Z+3	; 0x03
     730:	8f 5f       	subi	r24, 0xFF	; 255
     732:	83 83       	std	Z+3, r24	; 0x03
     734:	13 c0       	rjmp	.+38     	; 0x75c <pollEncoder+0x154>
     736:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <Encoder>
     73a:	81 11       	cpse	r24, r1
     73c:	0f c0       	rjmp	.+30     	; 0x75c <pollEncoder+0x154>
     73e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <Encoder+0x1>
     742:	88 23       	and	r24, r24
     744:	59 f0       	breq	.+22     	; 0x75c <pollEncoder+0x154>
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	88 23       	and	r24, r24
     74a:	41 f0       	breq	.+16     	; 0x75c <pollEncoder+0x154>
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	88 23       	and	r24, r24
     750:	29 f0       	breq	.+10     	; 0x75c <pollEncoder+0x154>
     752:	eb e7       	ldi	r30, 0x7B	; 123
     754:	f2 e0       	ldi	r31, 0x02	; 2
     756:	83 81       	ldd	r24, Z+3	; 0x03
     758:	8f 5f       	subi	r24, 0xFF	; 255
     75a:	83 83       	std	Z+3, r24	; 0x03
     75c:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <Encoder+0x2>
     760:	84 30       	cpi	r24, 0x04	; 4
     762:	21 f4       	brne	.+8      	; 0x76c <pollEncoder+0x164>
     764:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <Encoder+0x2>
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	09 c0       	rjmp	.+18     	; 0x77e <pollEncoder+0x176>
     76c:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <Encoder+0x3>
     770:	84 30       	cpi	r24, 0x04	; 4
     772:	21 f4       	brne	.+8      	; 0x77c <pollEncoder+0x174>
     774:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <Encoder+0x3>
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	01 c0       	rjmp	.+2      	; 0x77e <pollEncoder+0x176>
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	9a 81       	ldd	r25, Y+2	; 0x02
     780:	eb e7       	ldi	r30, 0x7B	; 123
     782:	f2 e0       	ldi	r31, 0x02	; 2
     784:	90 83       	st	Z, r25
     786:	99 81       	ldd	r25, Y+1	; 0x01
     788:	91 83       	std	Z+1, r25	; 0x01
     78a:	e7 ec       	ldi	r30, 0xC7	; 199
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	31 97       	sbiw	r30, 0x01	; 1
     790:	f1 f7       	brne	.-4      	; 0x78e <pollEncoder+0x186>
     792:	00 c0       	rjmp	.+0      	; 0x794 <pollEncoder+0x18c>
     794:	00 00       	nop
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <setContrastLCD>:
     7a0:	2f ef       	ldi	r18, 0xFF	; 255
     7a2:	82 9f       	mul	r24, r18
     7a4:	c0 01       	movw	r24, r0
     7a6:	11 24       	eor	r1, r1
     7a8:	64 e6       	ldi	r22, 0x64	; 100
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	0e 94 30 14 	call	0x2860	; 0x2860 <__divmodhi4>
     7b0:	60 95       	com	r22
     7b2:	47 e0       	ldi	r20, 0x07	; 7
     7b4:	81 e1       	ldi	r24, 0x11	; 17
     7b6:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     7ba:	08 95       	ret

000007bc <setBrightnessLCD>:
     7bc:	85 36       	cpi	r24, 0x65	; 101
     7be:	f8 f4       	brcc	.+62     	; 0x7fe <setBrightnessLCD+0x42>
     7c0:	29 e1       	ldi	r18, 0x19	; 25
     7c2:	82 9f       	mul	r24, r18
     7c4:	c0 01       	movw	r24, r0
     7c6:	11 24       	eor	r1, r1
     7c8:	64 e6       	ldi	r22, 0x64	; 100
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	0e 94 30 14 	call	0x2860	; 0x2860 <__divmodhi4>
     7d0:	65 5b       	subi	r22, 0xB5	; 181
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 37 13 	call	0x266e	; 0x266e <__floatsisf>
     7dc:	2d ec       	ldi	r18, 0xCD	; 205
     7de:	3c ec       	ldi	r19, 0xCC	; 204
     7e0:	43 e2       	ldi	r20, 0x23	; 35
     7e2:	52 e4       	ldi	r21, 0x42	; 66
     7e4:	0e 94 c3 13 	call	0x2786	; 0x2786 <__mulsf3>
     7e8:	0e 94 06 13 	call	0x260c	; 0x260c <__fixunssfsi>
     7ec:	87 2f       	mov	r24, r23
     7ee:	8f 70       	andi	r24, 0x0F	; 15
     7f0:	42 e0       	ldi	r20, 0x02	; 2
     7f2:	80 67       	ori	r24, 0x70	; 112
     7f4:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	08 95       	ret
     7fe:	8f ef       	ldi	r24, 0xFF	; 255
     800:	9f ef       	ldi	r25, 0xFF	; 255
     802:	08 95       	ret

00000804 <brightnessAnimation>:
     804:	cf 93       	push	r28
     806:	c0 e0       	ldi	r28, 0x00	; 0
     808:	8c 2f       	mov	r24, r28
     80a:	0e 94 de 03 	call	0x7bc	; 0x7bc <setBrightnessLCD>
     80e:	8f e1       	ldi	r24, 0x1F	; 31
     810:	9e e4       	ldi	r25, 0x4E	; 78
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <brightnessAnimation+0xe>
     816:	00 c0       	rjmp	.+0      	; 0x818 <brightnessAnimation+0x14>
     818:	00 00       	nop
     81a:	cf 5f       	subi	r28, 0xFF	; 255
     81c:	c5 36       	cpi	r28, 0x65	; 101
     81e:	a1 f7       	brne	.-24     	; 0x808 <brightnessAnimation+0x4>
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <setBiasDC>:
     824:	7f 70       	andi	r23, 0x0F	; 15
     826:	85 30       	cpi	r24, 0x05	; 5
     828:	19 f0       	breq	.+6      	; 0x830 <setBiasDC+0xc>
     82a:	86 30       	cpi	r24, 0x06	; 6
     82c:	99 f0       	breq	.+38     	; 0x854 <setBiasDC+0x30>
     82e:	24 c0       	rjmp	.+72     	; 0x878 <__stack+0x19>
     830:	44 23       	and	r20, r20
     832:	41 f0       	breq	.+16     	; 0x844 <setBiasDC+0x20>
     834:	43 e0       	ldi	r20, 0x03	; 3
     836:	87 2f       	mov	r24, r23
     838:	80 67       	ori	r24, 0x70	; 112
     83a:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	08 95       	ret
     844:	43 e0       	ldi	r20, 0x03	; 3
     846:	87 2f       	mov	r24, r23
     848:	80 6f       	ori	r24, 0xF0	; 240
     84a:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	08 95       	ret
     854:	44 23       	and	r20, r20
     856:	41 f0       	breq	.+16     	; 0x868 <__stack+0x9>
     858:	44 e0       	ldi	r20, 0x04	; 4
     85a:	87 2f       	mov	r24, r23
     85c:	80 67       	ori	r24, 0x70	; 112
     85e:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	08 95       	ret
     868:	44 e0       	ldi	r20, 0x04	; 4
     86a:	87 2f       	mov	r24, r23
     86c:	80 6f       	ori	r24, 0xF0	; 240
     86e:	0e 94 2b 12 	call	0x2456	; 0x2456 <SPI_write_16bit>
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	08 95       	ret
     878:	8f ef       	ldi	r24, 0xFF	; 255
     87a:	9f ef       	ldi	r25, 0xFF	; 255
     87c:	08 95       	ret

0000087e <updateBatteryStatus>:

void updateBatteryStatus() {
	ADMUX = 0;
     87e:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1 << ADSC);
     880:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     882:	36 99       	sbic	0x06, 6	; 6
     884:	fe cf       	rjmp	.-4      	; 0x882 <updateBatteryStatus+0x4>
	PowerStatus.battery_voltage = ADC * BATTERY_ADC_FACTOR_A * BATTERY_ADC_FACTOR_B / 10;
     886:	64 b1       	in	r22, 0x04	; 4
     888:	75 b1       	in	r23, 0x05	; 5
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 35 13 	call	0x266a	; 0x266a <__floatunsisf>
     892:	2c ea       	ldi	r18, 0xAC	; 172
     894:	3c e1       	ldi	r19, 0x1C	; 28
     896:	4a e7       	ldi	r20, 0x7A	; 122
     898:	5f e3       	ldi	r21, 0x3F	; 63
     89a:	0e 94 c3 13 	call	0x2786	; 0x2786 <__mulsf3>
     89e:	26 e9       	ldi	r18, 0x96	; 150
     8a0:	33 e4       	ldi	r19, 0x43	; 67
     8a2:	43 eb       	ldi	r20, 0xB3	; 179
     8a4:	50 e4       	ldi	r21, 0x40	; 64
     8a6:	0e 94 c3 13 	call	0x2786	; 0x2786 <__mulsf3>
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 e2       	ldi	r20, 0x20	; 32
     8b0:	51 e4       	ldi	r21, 0x41	; 65
     8b2:	0e 94 94 12 	call	0x2528	; 0x2528 <__divsf3>
     8b6:	0e 94 06 13 	call	0x260c	; 0x260c <__fixunssfsi>
     8ba:	60 93 50 02 	sts	0x0250, r22	; 0x800250 <PowerStatus>
     8be:	08 95       	ret

000008c0 <updateAcStatus>:
}

void updateAcStatus() {
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <updateAcStatus+0x6>
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t adcx = 0;
     8ca:	1a 82       	std	Y+2, r1	; 0x02
     8cc:	19 82       	std	Y+1, r1	; 0x01
	ADMUX |= 1;
     8ce:	38 9a       	sbi	0x07, 0	; 7
	ADCSRA |= (1 << ADSC);
     8d0:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     8d2:	36 99       	sbic	0x06, 6	; 6
     8d4:	fe cf       	rjmp	.-4      	; 0x8d2 <updateAcStatus+0x12>
	adcx = ADC;
     8d6:	84 b1       	in	r24, 0x04	; 4
     8d8:	95 b1       	in	r25, 0x05	; 5
     8da:	9a 83       	std	Y+2, r25	; 0x02
     8dc:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA |= (1 << ADSC);
     8de:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     8e0:	36 99       	sbic	0x06, 6	; 6
     8e2:	fe cf       	rjmp	.-4      	; 0x8e0 <updateAcStatus+0x20>
	adcx = (adcx + ADC) / 2; // Double sum average
     8e4:	24 b1       	in	r18, 0x04	; 4
     8e6:	35 b1       	in	r19, 0x05	; 5
     8e8:	89 81       	ldd	r24, Y+1	; 0x01
     8ea:	9a 81       	ldd	r25, Y+2	; 0x02
     8ec:	82 0f       	add	r24, r18
     8ee:	93 1f       	adc	r25, r19
     8f0:	96 95       	lsr	r25
     8f2:	87 95       	ror	r24
     8f4:	9a 83       	std	Y+2, r25	; 0x02
     8f6:	89 83       	std	Y+1, r24	; 0x01
	if (adcx < POWER_ADC_THRESHOLD) PowerStatus.ac_power_PowerStatus = false;
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	9a 81       	ldd	r25, Y+2	; 0x02
     8fc:	84 3f       	cpi	r24, 0xF4	; 244
     8fe:	91 40       	sbci	r25, 0x01	; 1
     900:	18 f4       	brcc	.+6      	; 0x908 <updateAcStatus+0x48>
     902:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <PowerStatus+0x1>
     906:	03 c0       	rjmp	.+6      	; 0x90e <updateAcStatus+0x4e>
	else PowerStatus.ac_power_PowerStatus = true;
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <PowerStatus+0x1>
}
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <clearWaveformValues>:

void clearWaveformValues() {
	FunctionGenerator.frequency_A = 0; 
     918:	ef e7       	ldi	r30, 0x7F	; 127
     91a:	f2 e0       	ldi	r31, 0x02	; 2
     91c:	10 82       	st	Z, r1
     91e:	11 82       	std	Z+1, r1	; 0x01
     920:	12 82       	std	Z+2, r1	; 0x02
     922:	13 82       	std	Z+3, r1	; 0x03
	FunctionGenerator.frequency_B = 0;
     924:	14 82       	std	Z+4, r1	; 0x04
     926:	15 82       	std	Z+5, r1	; 0x05
     928:	16 82       	std	Z+6, r1	; 0x06
     92a:	17 82       	std	Z+7, r1	; 0x07
	FunctionGenerator.amplitude_A = 0; 
     92c:	11 86       	std	Z+9, r1	; 0x09
     92e:	10 86       	std	Z+8, r1	; 0x08
	FunctionGenerator.amplitude_B = 0;
     930:	13 86       	std	Z+11, r1	; 0x0b
     932:	12 86       	std	Z+10, r1	; 0x0a
	FunctionGenerator.output_type_A = OFF; 
     934:	85 e0       	ldi	r24, 0x05	; 5
     936:	84 87       	std	Z+12, r24	; 0x0c
	FunctionGenerator.output_type_B = OFF;
     938:	85 87       	std	Z+13, r24	; 0x0d
	FunctionGenerator.bias_A = 0; 
     93a:	17 86       	std	Z+15, r1	; 0x0f
     93c:	16 86       	std	Z+14, r1	; 0x0e
	FunctionGenerator.bias_B = 0;
     93e:	11 8a       	std	Z+17, r1	; 0x11
     940:	10 8a       	std	Z+16, r1	; 0x10
	FunctionGenerator.bias_A_sign = POSITIVE;
     942:	12 8a       	std	Z+18, r1	; 0x12
	FunctionGenerator.bias_B_sign = POSITIVE;
     944:	13 8a       	std	Z+19, r1	; 0x13
     946:	08 95       	ret

00000948 <clearUIValues>:
}

void clearUIValues() {
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
	memset(UI.frequency_A, 0, 7);
     94c:	e2 e5       	ldi	r30, 0x52	; 82
     94e:	f2 e0       	ldi	r31, 0x02	; 2
     950:	87 e0       	ldi	r24, 0x07	; 7
     952:	df 01       	movw	r26, r30
     954:	c8 2f       	mov	r28, r24
     956:	1d 92       	st	X+, r1
     958:	ca 95       	dec	r28
     95a:	e9 f7       	brne	.-6      	; 0x956 <clearUIValues+0xe>
	memset(UI.frequency_B, 0, 7);
     95c:	a9 e5       	ldi	r26, 0x59	; 89
     95e:	b2 e0       	ldi	r27, 0x02	; 2
     960:	ed 01       	movw	r28, r26
     962:	19 92       	st	Y+, r1
     964:	8a 95       	dec	r24
     966:	e9 f7       	brne	.-6      	; 0x962 <clearUIValues+0x1a>
	memset(UI.amplitude_A, 0, 2);
     968:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <UI+0xf>
     96c:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <UI+0xe>
	memset(UI.amplitude_B, 0, 2);
     970:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <UI+0x11>
     974:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <UI+0x10>
	memset(UI.type_A, 0, 3);
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	aa e6       	ldi	r26, 0x6A	; 106
     97c:	b2 e0       	ldi	r27, 0x02	; 2
     97e:	ed 01       	movw	r28, r26
     980:	98 2f       	mov	r25, r24
     982:	19 92       	st	Y+, r1
     984:	9a 95       	dec	r25
     986:	e9 f7       	brne	.-6      	; 0x982 <clearUIValues+0x3a>
	memset(UI.type_B, 0, 3);
     988:	ad e6       	ldi	r26, 0x6D	; 109
     98a:	b2 e0       	ldi	r27, 0x02	; 2
     98c:	ed 01       	movw	r28, r26
     98e:	98 2f       	mov	r25, r24
     990:	19 92       	st	Y+, r1
     992:	9a 95       	dec	r25
     994:	e9 f7       	brne	.-6      	; 0x990 <clearUIValues+0x48>
	memset(UI.bias_A, 0, 3);
     996:	a4 e6       	ldi	r26, 0x64	; 100
     998:	b2 e0       	ldi	r27, 0x02	; 2
     99a:	ed 01       	movw	r28, r26
     99c:	98 2f       	mov	r25, r24
     99e:	19 92       	st	Y+, r1
     9a0:	9a 95       	dec	r25
     9a2:	e9 f7       	brne	.-6      	; 0x99e <clearUIValues+0x56>
	memset(UI.bias_B, 0, 3);
     9a4:	a7 e6       	ldi	r26, 0x67	; 103
     9a6:	b2 e0       	ldi	r27, 0x02	; 2
     9a8:	ed 01       	movw	r28, r26
     9aa:	98 2f       	mov	r25, r24
     9ac:	19 92       	st	Y+, r1
     9ae:	9a 95       	dec	r25
     9b0:	e9 f7       	brne	.-6      	; 0x9ac <clearUIValues+0x64>
	UI.bias_A_sign = ' ';
     9b2:	90 e2       	ldi	r25, 0x20	; 32
     9b4:	96 8f       	std	Z+30, r25	; 0x1e
	UI.bias_B_sign = ' ';
     9b6:	97 8f       	std	Z+31, r25	; 0x1f
	memset(UI.lcd_contrast, 0, 3);
     9b8:	e8 e7       	ldi	r30, 0x78	; 120
     9ba:	f2 e0       	ldi	r31, 0x02	; 2
     9bc:	df 01       	movw	r26, r30
     9be:	c8 2f       	mov	r28, r24
     9c0:	1d 92       	st	X+, r1
     9c2:	ca 95       	dec	r28
     9c4:	e9 f7       	brne	.-6      	; 0x9c0 <clearUIValues+0x78>
	memset(UI.lcd_brightness, 0, 3);
     9c6:	e5 e7       	ldi	r30, 0x75	; 117
     9c8:	f2 e0       	ldi	r31, 0x02	; 2
     9ca:	df 01       	movw	r26, r30
     9cc:	c8 2f       	mov	r28, r24
     9ce:	1d 92       	st	X+, r1
     9d0:	ca 95       	dec	r28
     9d2:	e9 f7       	brne	.-6      	; 0x9ce <clearUIValues+0x86>
	memset(UI.batteryPowerStatus, 0, 3);
     9d4:	e2 e7       	ldi	r30, 0x72	; 114
     9d6:	f2 e0       	ldi	r31, 0x02	; 2
     9d8:	df 01       	movw	r26, r30
     9da:	1d 92       	st	X+, r1
     9dc:	8a 95       	dec	r24
     9de:	e9 f7       	brne	.-6      	; 0x9da <clearUIValues+0x92>
}
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <clearLCDParameterValues>:

void clearLCDParameterValues() {
	LCD.brightness = 100;
     9e6:	e3 e9       	ldi	r30, 0x93	; 147
     9e8:	f2 e0       	ldi	r31, 0x02	; 2
     9ea:	84 e6       	ldi	r24, 0x64	; 100
     9ec:	80 83       	st	Z, r24
	LCD.contrast = 100;
     9ee:	81 83       	std	Z+1, r24	; 0x01
     9f0:	08 95       	ret

000009f2 <handleFunctionGenerator>:
		}					
	}
}

void handleFunctionGenerator(DisplayPointer displayPointer) {
	switch(displayPointer) {
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	fc 01       	movw	r30, r24
     9f6:	32 97       	sbiw	r30, 0x02	; 2
     9f8:	e8 30       	cpi	r30, 0x08	; 8
     9fa:	f1 05       	cpc	r31, r1
     9fc:	08 f0       	brcs	.+2      	; 0xa00 <handleFunctionGenerator+0xe>
     9fe:	b3 c0       	rjmp	.+358    	; 0xb66 <handleFunctionGenerator+0x174>
     a00:	e6 5d       	subi	r30, 0xD6	; 214
     a02:	ff 4f       	sbci	r31, 0xFF	; 255
     a04:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__tablejump2__>
		case PTR_TYPE_A: case PTR_FREQ_A: setFunction(FG0, FunctionGenerator.frequency_A, FunctionGenerator.output_type_A); break;
     a08:	ef e7       	ldi	r30, 0x7F	; 127
     a0a:	f2 e0       	ldi	r31, 0x02	; 2
     a0c:	40 81       	ld	r20, Z
     a0e:	51 81       	ldd	r21, Z+1	; 0x01
     a10:	62 81       	ldd	r22, Z+2	; 0x02
     a12:	73 81       	ldd	r23, Z+3	; 0x03
     a14:	24 85       	ldd	r18, Z+12	; 0x0c
     a16:	85 e0       	ldi	r24, 0x05	; 5
     a18:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <setFunction>
     a1c:	08 95       	ret
		case PTR_TYPE_B: case PTR_FREQ_B: setFunction(FG1, FunctionGenerator.frequency_B, FunctionGenerator.output_type_B); break;
     a1e:	ef e7       	ldi	r30, 0x7F	; 127
     a20:	f2 e0       	ldi	r31, 0x02	; 2
     a22:	44 81       	ldd	r20, Z+4	; 0x04
     a24:	55 81       	ldd	r21, Z+5	; 0x05
     a26:	66 81       	ldd	r22, Z+6	; 0x06
     a28:	77 81       	ldd	r23, Z+7	; 0x07
     a2a:	25 85       	ldd	r18, Z+13	; 0x0d
     a2c:	86 e0       	ldi	r24, 0x06	; 6
     a2e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <setFunction>
     a32:	08 95       	ret
		case PTR_AMP_A: setAmplitude(FunctionGenerator.amplitude_A * MAX_12BIT / 70, FG0); break;
     a34:	40 91 87 02 	lds	r20, 0x0287	; 0x800287 <FunctionGenerator+0x8>
     a38:	50 91 88 02 	lds	r21, 0x0288	; 0x800288 <FunctionGenerator+0x9>
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	9f e0       	ldi	r25, 0x0F	; 15
     a40:	48 9f       	mul	r20, r24
     a42:	90 01       	movw	r18, r0
     a44:	49 9f       	mul	r20, r25
     a46:	30 0d       	add	r19, r0
     a48:	58 9f       	mul	r21, r24
     a4a:	30 0d       	add	r19, r0
     a4c:	11 24       	eor	r1, r1
     a4e:	af e0       	ldi	r26, 0x0F	; 15
     a50:	ba ee       	ldi	r27, 0xEA	; 234
     a52:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__umulhisi3>
     a56:	65 e0       	ldi	r22, 0x05	; 5
     a58:	00 24       	eor	r0, r0
     a5a:	88 0f       	add	r24, r24
     a5c:	99 1f       	adc	r25, r25
     a5e:	00 1c       	adc	r0, r0
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	00 1c       	adc	r0, r0
     a66:	89 2f       	mov	r24, r25
     a68:	90 2d       	mov	r25, r0
     a6a:	0e 94 df 02 	call	0x5be	; 0x5be <setAmplitude>
     a6e:	08 95       	ret
		case PTR_AMP_B: setAmplitude(FunctionGenerator.amplitude_B * MAX_12BIT / 70, FG1); break;
     a70:	40 91 89 02 	lds	r20, 0x0289	; 0x800289 <FunctionGenerator+0xa>
     a74:	50 91 8a 02 	lds	r21, 0x028A	; 0x80028a <FunctionGenerator+0xb>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	9f e0       	ldi	r25, 0x0F	; 15
     a7c:	48 9f       	mul	r20, r24
     a7e:	90 01       	movw	r18, r0
     a80:	49 9f       	mul	r20, r25
     a82:	30 0d       	add	r19, r0
     a84:	58 9f       	mul	r21, r24
     a86:	30 0d       	add	r19, r0
     a88:	11 24       	eor	r1, r1
     a8a:	af e0       	ldi	r26, 0x0F	; 15
     a8c:	ba ee       	ldi	r27, 0xEA	; 234
     a8e:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__umulhisi3>
     a92:	66 e0       	ldi	r22, 0x06	; 6
     a94:	00 24       	eor	r0, r0
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	00 1c       	adc	r0, r0
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	00 1c       	adc	r0, r0
     aa2:	89 2f       	mov	r24, r25
     aa4:	90 2d       	mov	r25, r0
     aa6:	0e 94 df 02 	call	0x5be	; 0x5be <setAmplitude>
     aaa:	08 95       	ret
		case PTR_BIAS_A: 
			if (FunctionGenerator.bias_A_sign == POSITIVE) setBiasDC(FG0, 0, NEGATIVE);
     aac:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <FunctionGenerator+0x12>
     ab0:	81 11       	cpse	r24, r1
     ab2:	07 c0       	rjmp	.+14     	; 0xac2 <handleFunctionGenerator+0xd0>
     ab4:	41 e0       	ldi	r20, 0x01	; 1
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	85 e0       	ldi	r24, 0x05	; 5
     abc:	0e 94 12 04 	call	0x824	; 0x824 <setBiasDC>
     ac0:	06 c0       	rjmp	.+12     	; 0xace <handleFunctionGenerator+0xdc>
			else setBiasDC(FG0, 0, POSITIVE);
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	85 e0       	ldi	r24, 0x05	; 5
     aca:	0e 94 12 04 	call	0x824	; 0x824 <setBiasDC>
			setBiasDC(FG0, FunctionGenerator.bias_A * MAX_12BIT / 330, FunctionGenerator.bias_A_sign);
     ace:	ef e7       	ldi	r30, 0x7F	; 127
     ad0:	f2 e0       	ldi	r31, 0x02	; 2
     ad2:	46 85       	ldd	r20, Z+14	; 0x0e
     ad4:	57 85       	ldd	r21, Z+15	; 0x0f
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	9f e0       	ldi	r25, 0x0F	; 15
     ada:	48 9f       	mul	r20, r24
     adc:	90 01       	movw	r18, r0
     ade:	49 9f       	mul	r20, r25
     ae0:	30 0d       	add	r19, r0
     ae2:	58 9f       	mul	r21, r24
     ae4:	30 0d       	add	r19, r0
     ae6:	11 24       	eor	r1, r1
     ae8:	36 95       	lsr	r19
     aea:	27 95       	ror	r18
     aec:	a9 e9       	ldi	r26, 0x99	; 153
     aee:	b6 ec       	ldi	r27, 0xC6	; 198
     af0:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__umulhisi3>
     af4:	bc 01       	movw	r22, r24
     af6:	66 0f       	add	r22, r22
     af8:	67 2f       	mov	r22, r23
     afa:	66 1f       	adc	r22, r22
     afc:	77 0b       	sbc	r23, r23
     afe:	71 95       	neg	r23
     b00:	42 89       	ldd	r20, Z+18	; 0x12
     b02:	85 e0       	ldi	r24, 0x05	; 5
     b04:	0e 94 12 04 	call	0x824	; 0x824 <setBiasDC>
			break;
     b08:	08 95       	ret
		case PTR_BIAS_B:
			if (FunctionGenerator.bias_B_sign == POSITIVE) setBiasDC(FG1, 0, NEGATIVE);
     b0a:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <FunctionGenerator+0x13>
     b0e:	81 11       	cpse	r24, r1
     b10:	07 c0       	rjmp	.+14     	; 0xb20 <handleFunctionGenerator+0x12e>
     b12:	41 e0       	ldi	r20, 0x01	; 1
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	86 e0       	ldi	r24, 0x06	; 6
     b1a:	0e 94 12 04 	call	0x824	; 0x824 <setBiasDC>
     b1e:	06 c0       	rjmp	.+12     	; 0xb2c <handleFunctionGenerator+0x13a>
			else setBiasDC(FG1, 0, POSITIVE);
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	86 e0       	ldi	r24, 0x06	; 6
     b28:	0e 94 12 04 	call	0x824	; 0x824 <setBiasDC>
			setBiasDC(FG0, FunctionGenerator.bias_B * MAX_12BIT / 330, FunctionGenerator.bias_B_sign);
     b2c:	ef e7       	ldi	r30, 0x7F	; 127
     b2e:	f2 e0       	ldi	r31, 0x02	; 2
     b30:	40 89       	ldd	r20, Z+16	; 0x10
     b32:	51 89       	ldd	r21, Z+17	; 0x11
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	9f e0       	ldi	r25, 0x0F	; 15
     b38:	48 9f       	mul	r20, r24
     b3a:	90 01       	movw	r18, r0
     b3c:	49 9f       	mul	r20, r25
     b3e:	30 0d       	add	r19, r0
     b40:	58 9f       	mul	r21, r24
     b42:	30 0d       	add	r19, r0
     b44:	11 24       	eor	r1, r1
     b46:	36 95       	lsr	r19
     b48:	27 95       	ror	r18
     b4a:	a9 e9       	ldi	r26, 0x99	; 153
     b4c:	b6 ec       	ldi	r27, 0xC6	; 198
     b4e:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__umulhisi3>
     b52:	bc 01       	movw	r22, r24
     b54:	66 0f       	add	r22, r22
     b56:	67 2f       	mov	r22, r23
     b58:	66 1f       	adc	r22, r22
     b5a:	77 0b       	sbc	r23, r23
     b5c:	71 95       	neg	r23
     b5e:	43 89       	ldd	r20, Z+19	; 0x13
     b60:	85 e0       	ldi	r24, 0x05	; 5
     b62:	0e 94 12 04 	call	0x824	; 0x824 <setBiasDC>
     b66:	08 95       	ret

00000b68 <handleLCDParameter>:
			default: break;
	}
}

void handleLCDParameter(DisplayPointer displayPointer) {
	switch(displayPointer) {
     b68:	8e 30       	cpi	r24, 0x0E	; 14
     b6a:	19 f0       	breq	.+6      	; 0xb72 <handleLCDParameter+0xa>
     b6c:	8f 30       	cpi	r24, 0x0F	; 15
     b6e:	31 f0       	breq	.+12     	; 0xb7c <handleLCDParameter+0x14>
     b70:	08 95       	ret
		case PTR_BRIGHT: setBrightnessLCD(LCD.brightness); break;
     b72:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <LCD>
     b76:	0e 94 de 03 	call	0x7bc	; 0x7bc <setBrightnessLCD>
     b7a:	08 95       	ret
		case PTR_CONTR: setContrastLCD(LCD.contrast); break;
     b7c:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <LCD+0x1>
     b80:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <setContrastLCD>
     b84:	08 95       	ret

00000b86 <uintToString>:
		default: break;
	}
}

void uintToString(uint32_t number, char *string, uint8_t length) {
     b86:	cf 92       	push	r12
     b88:	df 92       	push	r13
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	02 2f       	mov	r16, r18
	uint8_t iPtr = 0;
	while(iPtr < length) {
     b98:	22 23       	and	r18, r18
     b9a:	c1 f0       	breq	.+48     	; 0xbcc <uintToString+0x46>
     b9c:	ea 01       	movw	r28, r20
     b9e:	c2 0f       	add	r28, r18
     ba0:	d1 1d       	adc	r29, r1
     ba2:	10 e0       	ldi	r17, 0x00	; 0
		string[length - iPtr - 1] = (number % 10) + '0';
     ba4:	0f 2e       	mov	r0, r31
     ba6:	fa e0       	ldi	r31, 0x0A	; 10
     ba8:	cf 2e       	mov	r12, r31
     baa:	d1 2c       	mov	r13, r1
     bac:	e1 2c       	mov	r14, r1
     bae:	f1 2c       	mov	r15, r1
     bb0:	f0 2d       	mov	r31, r0
     bb2:	a7 01       	movw	r20, r14
     bb4:	96 01       	movw	r18, r12
     bb6:	0e 94 44 14 	call	0x2888	; 0x2888 <__udivmodsi4>
     bba:	60 5d       	subi	r22, 0xD0	; 208
     bbc:	6a 93       	st	-Y, r22
		number /= 10;
     bbe:	62 2f       	mov	r22, r18
     bc0:	73 2f       	mov	r23, r19
     bc2:	84 2f       	mov	r24, r20
     bc4:	95 2f       	mov	r25, r21
		iPtr++;
     bc6:	1f 5f       	subi	r17, 0xFF	; 255
	}
}

void uintToString(uint32_t number, char *string, uint8_t length) {
	uint8_t iPtr = 0;
	while(iPtr < length) {
     bc8:	01 13       	cpse	r16, r17
     bca:	f3 cf       	rjmp	.-26     	; 0xbb2 <uintToString+0x2c>
		string[length - iPtr - 1] = (number % 10) + '0';
		number /= 10;
		iPtr++;
	}
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	ff 90       	pop	r15
     bd6:	ef 90       	pop	r14
     bd8:	df 90       	pop	r13
     bda:	cf 90       	pop	r12
     bdc:	08 95       	ret

00000bde <handleLCD>:
void clearLCDParameterValues() {
	LCD.brightness = 100;
	LCD.contrast = 100;
}

void handleLCD(MainScreen screen, DisplayPointer displayPointer, bool pointerActive, bool paramActive, bool lcdParamActive) {
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
	
	if (pointerActive) {
     be6:	44 23       	and	r20, r20
     be8:	09 f4       	brne	.+2      	; 0xbec <handleLCD+0xe>
     bea:	74 c0       	rjmp	.+232    	; 0xcd4 <handleLCD+0xf6>
		switch(displayPointer) {
     bec:	86 2f       	mov	r24, r22
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	80 31       	cpi	r24, 0x10	; 16
     bf2:	91 05       	cpc	r25, r1
     bf4:	08 f0       	brcs	.+2      	; 0xbf8 <handleLCD+0x1a>
     bf6:	c3 c3       	rjmp	.+1926   	; 0x137e <handleLCD+0x7a0>
     bf8:	fc 01       	movw	r30, r24
     bfa:	ee 5c       	subi	r30, 0xCE	; 206
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__tablejump2__>
			case PTR_NULL:
			print_LCD_char(' ', LCD_LINE_1, 0);
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	80 e2       	ldi	r24, 0x20	; 32
     c08:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_2, 0);
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	60 e4       	ldi	r22, 0x40	; 64
     c10:	80 e2       	ldi	r24, 0x20	; 32
     c12:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_3, 0);
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	64 e1       	ldi	r22, 0x14	; 20
     c1a:	80 e2       	ldi	r24, 0x20	; 32
     c1c:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_4, 0);
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	64 e5       	ldi	r22, 0x54	; 84
     c24:	80 e2       	ldi	r24, 0x20	; 32
     c26:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
     c2a:	a9 c3       	rjmp	.+1874   	; 0x137e <handleLCD+0x7a0>
			
			case PTR_TYPE_A: case PTR_TYPE_B: 
			print_LCD_char('>', LCD_LINE_1, 0); 
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	8e e3       	ldi	r24, 0x3E	; 62
     c32:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_2, 0);
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	60 e4       	ldi	r22, 0x40	; 64
     c3a:	80 e2       	ldi	r24, 0x20	; 32
     c3c:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_3, 0);
     c40:	40 e0       	ldi	r20, 0x00	; 0
     c42:	64 e1       	ldi	r22, 0x14	; 20
     c44:	80 e2       	ldi	r24, 0x20	; 32
     c46:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_4, 0);
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	64 e5       	ldi	r22, 0x54	; 84
     c4e:	80 e2       	ldi	r24, 0x20	; 32
     c50:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
     c54:	94 c3       	rjmp	.+1832   	; 0x137e <handleLCD+0x7a0>
			
			case PTR_AMP_A: case PTR_AMP_B: case PTR_SAVE_PROF: case PTR_BRIGHT:
			print_LCD_char(' ', LCD_LINE_1, 0);
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	80 e2       	ldi	r24, 0x20	; 32
     c5c:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char('>', LCD_LINE_2, 0);
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	60 e4       	ldi	r22, 0x40	; 64
     c64:	8e e3       	ldi	r24, 0x3E	; 62
     c66:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_3, 0);
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	64 e1       	ldi	r22, 0x14	; 20
     c6e:	80 e2       	ldi	r24, 0x20	; 32
     c70:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_4, 0);
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	64 e5       	ldi	r22, 0x54	; 84
     c78:	80 e2       	ldi	r24, 0x20	; 32
     c7a:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
     c7e:	7f c3       	rjmp	.+1790   	; 0x137e <handleLCD+0x7a0>
			
			case PTR_FREQ_A: case PTR_FREQ_B: case PTR_SETT: case PTR_LOAD_PROF: case PTR_CONTR:
			print_LCD_char(' ', LCD_LINE_1, 0);
     c80:	40 e0       	ldi	r20, 0x00	; 0
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	80 e2       	ldi	r24, 0x20	; 32
     c86:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_2, 0);
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	60 e4       	ldi	r22, 0x40	; 64
     c8e:	80 e2       	ldi	r24, 0x20	; 32
     c90:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char('>', LCD_LINE_3, 0);
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	64 e1       	ldi	r22, 0x14	; 20
     c98:	8e e3       	ldi	r24, 0x3E	; 62
     c9a:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_4, 0);
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	64 e5       	ldi	r22, 0x54	; 84
     ca2:	80 e2       	ldi	r24, 0x20	; 32
     ca4:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
     ca8:	6a c3       	rjmp	.+1748   	; 0x137e <handleLCD+0x7a0>
			
			case PTR_BIAS_A: case PTR_BIAS_B: case PTR_SHUTDOWN: case PTR_BACK:
			print_LCD_char(' ', LCD_LINE_1, 0);
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	80 e2       	ldi	r24, 0x20	; 32
     cb0:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_2, 0);
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	60 e4       	ldi	r22, 0x40	; 64
     cb8:	80 e2       	ldi	r24, 0x20	; 32
     cba:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_3, 0);
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	64 e1       	ldi	r22, 0x14	; 20
     cc2:	80 e2       	ldi	r24, 0x20	; 32
     cc4:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char('>', LCD_LINE_4, 0);
     cc8:	40 e0       	ldi	r20, 0x00	; 0
     cca:	64 e5       	ldi	r22, 0x54	; 84
     ccc:	8e e3       	ldi	r24, 0x3E	; 62
     cce:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
     cd2:	55 c3       	rjmp	.+1706   	; 0x137e <handleLCD+0x7a0>
		}
	}
	
	else if (paramActive) {
     cd4:	22 23       	and	r18, r18
     cd6:	09 f4       	brne	.+2      	; 0xcda <handleLCD+0xfc>
     cd8:	82 c1       	rjmp	.+772    	; 0xfde <handleLCD+0x400>
		switch(displayPointer) {
     cda:	86 2f       	mov	r24, r22
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	fc 01       	movw	r30, r24
     ce0:	32 97       	sbiw	r30, 0x02	; 2
     ce2:	e8 30       	cpi	r30, 0x08	; 8
     ce4:	f1 05       	cpc	r31, r1
     ce6:	08 f0       	brcs	.+2      	; 0xcea <handleLCD+0x10c>
     ce8:	4a c3       	rjmp	.+1684   	; 0x137e <handleLCD+0x7a0>
     cea:	ee 5b       	subi	r30, 0xBE	; 190
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__tablejump2__>
			case PTR_TYPE_A:
			switch(FunctionGenerator.output_type_A) {
     cf2:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <FunctionGenerator+0xc>
     cf6:	83 30       	cpi	r24, 0x03	; 3
     cf8:	e9 f0       	breq	.+58     	; 0xd34 <handleLCD+0x156>
     cfa:	28 f4       	brcc	.+10     	; 0xd06 <handleLCD+0x128>
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	41 f0       	breq	.+16     	; 0xd10 <handleLCD+0x132>
     d00:	82 30       	cpi	r24, 0x02	; 2
     d02:	79 f0       	breq	.+30     	; 0xd22 <handleLCD+0x144>
     d04:	30 c0       	rjmp	.+96     	; 0xd66 <handleLCD+0x188>
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	f1 f0       	breq	.+60     	; 0xd46 <handleLCD+0x168>
     d0a:	85 30       	cpi	r24, 0x05	; 5
     d0c:	29 f1       	breq	.+74     	; 0xd58 <handleLCD+0x17a>
     d0e:	2b c0       	rjmp	.+86     	; 0xd66 <handleLCD+0x188>
				case SINE:
				UI.type_A[0] = 'S';
     d10:	e2 e5       	ldi	r30, 0x52	; 82
     d12:	f2 e0       	ldi	r31, 0x02	; 2
     d14:	83 e5       	ldi	r24, 0x53	; 83
     d16:	80 8f       	std	Z+24, r24	; 0x18
				UI.type_A[1] = 'I';
     d18:	89 e4       	ldi	r24, 0x49	; 73
     d1a:	81 8f       	std	Z+25, r24	; 0x19
				UI.type_A[2] = 'N';
     d1c:	8e e4       	ldi	r24, 0x4E	; 78
     d1e:	82 8f       	std	Z+26, r24	; 0x1a
				break;
     d20:	22 c0       	rjmp	.+68     	; 0xd66 <handleLCD+0x188>
				
				case TRIANGLE:
				UI.type_A[0] = 'T';
     d22:	e2 e5       	ldi	r30, 0x52	; 82
     d24:	f2 e0       	ldi	r31, 0x02	; 2
     d26:	84 e5       	ldi	r24, 0x54	; 84
     d28:	80 8f       	std	Z+24, r24	; 0x18
				UI.type_A[1] = 'R';
     d2a:	82 e5       	ldi	r24, 0x52	; 82
     d2c:	81 8f       	std	Z+25, r24	; 0x19
				UI.type_A[2] = 'N';
     d2e:	8e e4       	ldi	r24, 0x4E	; 78
     d30:	82 8f       	std	Z+26, r24	; 0x1a
				break;
     d32:	19 c0       	rjmp	.+50     	; 0xd66 <handleLCD+0x188>
				
				case SQUARE:
				UI.type_A[0] = 'S';
     d34:	e2 e5       	ldi	r30, 0x52	; 82
     d36:	f2 e0       	ldi	r31, 0x02	; 2
     d38:	83 e5       	ldi	r24, 0x53	; 83
     d3a:	80 8f       	std	Z+24, r24	; 0x18
				UI.type_A[1] = 'Q';
     d3c:	81 e5       	ldi	r24, 0x51	; 81
     d3e:	81 8f       	std	Z+25, r24	; 0x19
				UI.type_A[2] = 'R';
     d40:	82 e5       	ldi	r24, 0x52	; 82
     d42:	82 8f       	std	Z+26, r24	; 0x1a
				break;
     d44:	10 c0       	rjmp	.+32     	; 0xd66 <handleLCD+0x188>
				
				case DC:
				UI.type_A[0] = ' ';
     d46:	e2 e5       	ldi	r30, 0x52	; 82
     d48:	f2 e0       	ldi	r31, 0x02	; 2
     d4a:	80 e2       	ldi	r24, 0x20	; 32
     d4c:	80 8f       	std	Z+24, r24	; 0x18
				UI.type_A[1] = 'D';
     d4e:	84 e4       	ldi	r24, 0x44	; 68
     d50:	81 8f       	std	Z+25, r24	; 0x19
				UI.type_A[2] = 'C';
     d52:	83 e4       	ldi	r24, 0x43	; 67
     d54:	82 8f       	std	Z+26, r24	; 0x1a
				break;
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <handleLCD+0x188>
				
				case OFF:
				UI.type_A[0] = 'O';
     d58:	e2 e5       	ldi	r30, 0x52	; 82
     d5a:	f2 e0       	ldi	r31, 0x02	; 2
     d5c:	8f e4       	ldi	r24, 0x4F	; 79
     d5e:	80 8f       	std	Z+24, r24	; 0x18
				UI.type_A[1] = 'F';
     d60:	86 e4       	ldi	r24, 0x46	; 70
     d62:	81 8f       	std	Z+25, r24	; 0x19
				UI.type_A[2] = 'F';
     d64:	82 8f       	std	Z+26, r24	; 0x1a
				break;
		}
		
			case PTR_TYPE_B:
			switch(FunctionGenerator.output_type_B) {
     d66:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <FunctionGenerator+0xd>
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	e9 f0       	breq	.+58     	; 0xda8 <handleLCD+0x1ca>
     d6e:	28 f4       	brcc	.+10     	; 0xd7a <handleLCD+0x19c>
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	41 f0       	breq	.+16     	; 0xd84 <handleLCD+0x1a6>
     d74:	82 30       	cpi	r24, 0x02	; 2
     d76:	79 f0       	breq	.+30     	; 0xd96 <handleLCD+0x1b8>
     d78:	30 c0       	rjmp	.+96     	; 0xdda <handleLCD+0x1fc>
     d7a:	84 30       	cpi	r24, 0x04	; 4
     d7c:	f1 f0       	breq	.+60     	; 0xdba <handleLCD+0x1dc>
     d7e:	85 30       	cpi	r24, 0x05	; 5
     d80:	29 f1       	breq	.+74     	; 0xdcc <handleLCD+0x1ee>
     d82:	2b c0       	rjmp	.+86     	; 0xdda <handleLCD+0x1fc>
				case SINE:
				UI.type_B[0] = 'S';
     d84:	e2 e5       	ldi	r30, 0x52	; 82
     d86:	f2 e0       	ldi	r31, 0x02	; 2
     d88:	83 e5       	ldi	r24, 0x53	; 83
     d8a:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_B[1] = 'I';
     d8c:	89 e4       	ldi	r24, 0x49	; 73
     d8e:	84 8f       	std	Z+28, r24	; 0x1c
				UI.type_B[2] = 'N';
     d90:	8e e4       	ldi	r24, 0x4E	; 78
     d92:	85 8f       	std	Z+29, r24	; 0x1d
				break;
     d94:	22 c0       	rjmp	.+68     	; 0xdda <handleLCD+0x1fc>
				
				case TRIANGLE:
				UI.type_B[0] = 'T';
     d96:	e2 e5       	ldi	r30, 0x52	; 82
     d98:	f2 e0       	ldi	r31, 0x02	; 2
     d9a:	84 e5       	ldi	r24, 0x54	; 84
     d9c:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_B[1] = 'R';
     d9e:	82 e5       	ldi	r24, 0x52	; 82
     da0:	84 8f       	std	Z+28, r24	; 0x1c
				UI.type_B[2] = 'N';
     da2:	8e e4       	ldi	r24, 0x4E	; 78
     da4:	85 8f       	std	Z+29, r24	; 0x1d
				break;
     da6:	19 c0       	rjmp	.+50     	; 0xdda <handleLCD+0x1fc>
				
				case SQUARE:
				UI.type_B[0] = 'S';
     da8:	e2 e5       	ldi	r30, 0x52	; 82
     daa:	f2 e0       	ldi	r31, 0x02	; 2
     dac:	83 e5       	ldi	r24, 0x53	; 83
     dae:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_B[1] = 'Q';
     db0:	81 e5       	ldi	r24, 0x51	; 81
     db2:	84 8f       	std	Z+28, r24	; 0x1c
				UI.type_B[2] = 'R';
     db4:	82 e5       	ldi	r24, 0x52	; 82
     db6:	85 8f       	std	Z+29, r24	; 0x1d
				break;
     db8:	10 c0       	rjmp	.+32     	; 0xdda <handleLCD+0x1fc>
				
				case DC:
				UI.type_B[0] = ' ';
     dba:	e2 e5       	ldi	r30, 0x52	; 82
     dbc:	f2 e0       	ldi	r31, 0x02	; 2
     dbe:	80 e2       	ldi	r24, 0x20	; 32
     dc0:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_B[1] = 'D';
     dc2:	84 e4       	ldi	r24, 0x44	; 68
     dc4:	84 8f       	std	Z+28, r24	; 0x1c
				UI.type_B[2] = 'C';
     dc6:	83 e4       	ldi	r24, 0x43	; 67
     dc8:	85 8f       	std	Z+29, r24	; 0x1d
				break;
     dca:	07 c0       	rjmp	.+14     	; 0xdda <handleLCD+0x1fc>
				
				case OFF:
				UI.type_B[0] = 'O';
     dcc:	e2 e5       	ldi	r30, 0x52	; 82
     dce:	f2 e0       	ldi	r31, 0x02	; 2
     dd0:	8f e4       	ldi	r24, 0x4F	; 79
     dd2:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_B[1] = 'F';
     dd4:	86 e4       	ldi	r24, 0x46	; 70
     dd6:	84 8f       	std	Z+28, r24	; 0x1c
				UI.type_B[2] = 'F';
     dd8:	85 8f       	std	Z+29, r24	; 0x1d
				break;
			}
			
			print_LCD_char(UI.type_B[0], LCD_LINE_1, 17);
     dda:	c2 e5       	ldi	r28, 0x52	; 82
     ddc:	d2 e0       	ldi	r29, 0x02	; 2
     dde:	41 e1       	ldi	r20, 0x11	; 17
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     de4:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.type_B[1], LCD_LINE_1, 18);
     de8:	42 e1       	ldi	r20, 0x12	; 18
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	8c 8d       	ldd	r24, Y+28	; 0x1c
     dee:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.type_B[2], LCD_LINE_1, 19);
     df2:	43 e1       	ldi	r20, 0x13	; 19
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     df8:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
     dfc:	c0 c2       	rjmp	.+1408   	; 0x137e <handleLCD+0x7a0>
			
			case PTR_AMP_A:
			uintToString(FunctionGenerator.amplitude_A, &UI.amplitude_A[0], 2);
     dfe:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <FunctionGenerator+0x8>
     e02:	70 91 88 02 	lds	r23, 0x0288	; 0x800288 <FunctionGenerator+0x9>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	22 e0       	ldi	r18, 0x02	; 2
     e0c:	40 e6       	ldi	r20, 0x60	; 96
     e0e:	52 e0       	ldi	r21, 0x02	; 2
     e10:	0e 94 c3 05 	call	0xb86	; 0xb86 <uintToString>
			print_LCD_char(UI.amplitude_A[0], LCD_LINE_2, 14);
     e14:	c2 e5       	ldi	r28, 0x52	; 82
     e16:	d2 e0       	ldi	r29, 0x02	; 2
     e18:	4e e0       	ldi	r20, 0x0E	; 14
     e1a:	60 e4       	ldi	r22, 0x40	; 64
     e1c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e1e:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.amplitude_A[1], LCD_LINE_2, 15);
     e22:	4f e0       	ldi	r20, 0x0F	; 15
     e24:	60 e4       	ldi	r22, 0x40	; 64
     e26:	8f 85       	ldd	r24, Y+15	; 0x0f
     e28:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
     e2c:	a8 c2       	rjmp	.+1360   	; 0x137e <handleLCD+0x7a0>
				
			case PTR_AMP_B:
			uintToString(FunctionGenerator.amplitude_B, &UI.amplitude_B[0], 2);
     e2e:	60 91 89 02 	lds	r22, 0x0289	; 0x800289 <FunctionGenerator+0xa>
     e32:	70 91 8a 02 	lds	r23, 0x028A	; 0x80028a <FunctionGenerator+0xb>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	22 e0       	ldi	r18, 0x02	; 2
     e3c:	42 e6       	ldi	r20, 0x62	; 98
     e3e:	52 e0       	ldi	r21, 0x02	; 2
     e40:	0e 94 c3 05 	call	0xb86	; 0xb86 <uintToString>
			print_LCD_char(UI.amplitude_B[0], LCD_LINE_2, 14);
     e44:	c2 e5       	ldi	r28, 0x52	; 82
     e46:	d2 e0       	ldi	r29, 0x02	; 2
     e48:	4e e0       	ldi	r20, 0x0E	; 14
     e4a:	60 e4       	ldi	r22, 0x40	; 64
     e4c:	88 89       	ldd	r24, Y+16	; 0x10
     e4e:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.amplitude_B[1], LCD_LINE_2, 15);
     e52:	4f e0       	ldi	r20, 0x0F	; 15
     e54:	60 e4       	ldi	r22, 0x40	; 64
     e56:	89 89       	ldd	r24, Y+17	; 0x11
     e58:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
     e5c:	90 c2       	rjmp	.+1312   	; 0x137e <handleLCD+0x7a0>
			
			case PTR_FREQ_A:
			uintToString(FunctionGenerator.frequency_A, &UI.frequency_A[0], 7);
     e5e:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <FunctionGenerator>
     e62:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <FunctionGenerator+0x1>
     e66:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <FunctionGenerator+0x2>
     e6a:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <FunctionGenerator+0x3>
     e6e:	27 e0       	ldi	r18, 0x07	; 7
     e70:	42 e5       	ldi	r20, 0x52	; 82
     e72:	52 e0       	ldi	r21, 0x02	; 2
     e74:	0e 94 c3 05 	call	0xb86	; 0xb86 <uintToString>
			print_LCD_char(UI.frequency_A[0], LCD_LINE_3, 7);
     e78:	c2 e5       	ldi	r28, 0x52	; 82
     e7a:	d2 e0       	ldi	r29, 0x02	; 2
     e7c:	47 e0       	ldi	r20, 0x07	; 7
     e7e:	64 e1       	ldi	r22, 0x14	; 20
     e80:	88 81       	ld	r24, Y
     e82:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_A[1], LCD_LINE_3, 9);
     e86:	49 e0       	ldi	r20, 0x09	; 9
     e88:	64 e1       	ldi	r22, 0x14	; 20
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_A[2], LCD_LINE_3, 10);
     e90:	4a e0       	ldi	r20, 0x0A	; 10
     e92:	64 e1       	ldi	r22, 0x14	; 20
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_A[3], LCD_LINE_3, 11);
     e9a:	4b e0       	ldi	r20, 0x0B	; 11
     e9c:	64 e1       	ldi	r22, 0x14	; 20
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_A[4], LCD_LINE_3, 13);
     ea4:	4d e0       	ldi	r20, 0x0D	; 13
     ea6:	64 e1       	ldi	r22, 0x14	; 20
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_A[5], LCD_LINE_3, 14);
     eae:	4e e0       	ldi	r20, 0x0E	; 14
     eb0:	64 e1       	ldi	r22, 0x14	; 20
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_A[6], LCD_LINE_3, 15);
     eb8:	4f e0       	ldi	r20, 0x0F	; 15
     eba:	64 e1       	ldi	r22, 0x14	; 20
     ebc:	8e 81       	ldd	r24, Y+6	; 0x06
     ebe:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
     ec2:	5d c2       	rjmp	.+1210   	; 0x137e <handleLCD+0x7a0>
			
			case PTR_FREQ_B:
			uintToString(FunctionGenerator.frequency_B, &UI.frequency_B[0], 7);
     ec4:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <FunctionGenerator+0x4>
     ec8:	70 91 84 02 	lds	r23, 0x0284	; 0x800284 <FunctionGenerator+0x5>
     ecc:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <FunctionGenerator+0x6>
     ed0:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <FunctionGenerator+0x7>
     ed4:	27 e0       	ldi	r18, 0x07	; 7
     ed6:	49 e5       	ldi	r20, 0x59	; 89
     ed8:	52 e0       	ldi	r21, 0x02	; 2
     eda:	0e 94 c3 05 	call	0xb86	; 0xb86 <uintToString>
			print_LCD_char(UI.frequency_B[0], LCD_LINE_3, 7);
     ede:	c2 e5       	ldi	r28, 0x52	; 82
     ee0:	d2 e0       	ldi	r29, 0x02	; 2
     ee2:	47 e0       	ldi	r20, 0x07	; 7
     ee4:	64 e1       	ldi	r22, 0x14	; 20
     ee6:	8f 81       	ldd	r24, Y+7	; 0x07
     ee8:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_B[1], LCD_LINE_3, 9);
     eec:	49 e0       	ldi	r20, 0x09	; 9
     eee:	64 e1       	ldi	r22, 0x14	; 20
     ef0:	88 85       	ldd	r24, Y+8	; 0x08
     ef2:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_B[2], LCD_LINE_3, 10);
     ef6:	4a e0       	ldi	r20, 0x0A	; 10
     ef8:	64 e1       	ldi	r22, 0x14	; 20
     efa:	89 85       	ldd	r24, Y+9	; 0x09
     efc:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_B[3], LCD_LINE_3, 11);
     f00:	4b e0       	ldi	r20, 0x0B	; 11
     f02:	64 e1       	ldi	r22, 0x14	; 20
     f04:	8a 85       	ldd	r24, Y+10	; 0x0a
     f06:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_B[4], LCD_LINE_3, 13);
     f0a:	4d e0       	ldi	r20, 0x0D	; 13
     f0c:	64 e1       	ldi	r22, 0x14	; 20
     f0e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f10:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_B[5], LCD_LINE_3, 14);
     f14:	4e e0       	ldi	r20, 0x0E	; 14
     f16:	64 e1       	ldi	r22, 0x14	; 20
     f18:	8c 85       	ldd	r24, Y+12	; 0x0c
     f1a:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_B[6], LCD_LINE_3, 15);
     f1e:	4f e0       	ldi	r20, 0x0F	; 15
     f20:	64 e1       	ldi	r22, 0x14	; 20
     f22:	8d 85       	ldd	r24, Y+13	; 0x0d
     f24:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
     f28:	2a c2       	rjmp	.+1108   	; 0x137e <handleLCD+0x7a0>
			
			case PTR_BIAS_A: 
			if (FunctionGenerator.bias_A_sign == POSITIVE) UI.bias_A_sign = '+';
     f2a:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <FunctionGenerator+0x12>
     f2e:	81 11       	cpse	r24, r1
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <handleLCD+0x35c>
     f32:	8b e2       	ldi	r24, 0x2B	; 43
     f34:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <UI+0x1e>
     f38:	03 c0       	rjmp	.+6      	; 0xf40 <handleLCD+0x362>
			else UI.bias_A_sign = '-';
     f3a:	8d e2       	ldi	r24, 0x2D	; 45
     f3c:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <UI+0x1e>
			uintToString(FunctionGenerator.bias_A, &UI.bias_A[0], 3);
     f40:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <FunctionGenerator+0xe>
     f44:	70 91 8e 02 	lds	r23, 0x028E	; 0x80028e <FunctionGenerator+0xf>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	23 e0       	ldi	r18, 0x03	; 3
     f4e:	44 e6       	ldi	r20, 0x64	; 100
     f50:	52 e0       	ldi	r21, 0x02	; 2
     f52:	0e 94 c3 05 	call	0xb86	; 0xb86 <uintToString>
			print_LCD_char(UI.bias_A_sign, LCD_LINE_4, 7);
     f56:	c2 e5       	ldi	r28, 0x52	; 82
     f58:	d2 e0       	ldi	r29, 0x02	; 2
     f5a:	47 e0       	ldi	r20, 0x07	; 7
     f5c:	64 e5       	ldi	r22, 0x54	; 84
     f5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f60:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.bias_A[0], LCD_LINE_4, 8);
     f64:	48 e0       	ldi	r20, 0x08	; 8
     f66:	64 e5       	ldi	r22, 0x54	; 84
     f68:	8a 89       	ldd	r24, Y+18	; 0x12
     f6a:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.bias_A[1], LCD_LINE_4, 10);
     f6e:	4a e0       	ldi	r20, 0x0A	; 10
     f70:	64 e5       	ldi	r22, 0x54	; 84
     f72:	8b 89       	ldd	r24, Y+19	; 0x13
     f74:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.bias_A[2], LCD_LINE_4, 11);
     f78:	4b e0       	ldi	r20, 0x0B	; 11
     f7a:	64 e5       	ldi	r22, 0x54	; 84
     f7c:	8c 89       	ldd	r24, Y+20	; 0x14
     f7e:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
     f82:	fd c1       	rjmp	.+1018   	; 0x137e <handleLCD+0x7a0>
			
			case PTR_BIAS_B:
			if (FunctionGenerator.bias_B_sign == POSITIVE) UI.bias_B_sign = '+';
     f84:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <FunctionGenerator+0x13>
     f88:	81 11       	cpse	r24, r1
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <handleLCD+0x3b6>
     f8c:	8b e2       	ldi	r24, 0x2B	; 43
     f8e:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <UI+0x1f>
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <handleLCD+0x3bc>
			else UI.bias_B_sign = '-';
     f94:	8d e2       	ldi	r24, 0x2D	; 45
     f96:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <UI+0x1f>
			uintToString(FunctionGenerator.bias_A, &UI.bias_B[0], 3);
     f9a:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <FunctionGenerator+0xe>
     f9e:	70 91 8e 02 	lds	r23, 0x028E	; 0x80028e <FunctionGenerator+0xf>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	23 e0       	ldi	r18, 0x03	; 3
     fa8:	47 e6       	ldi	r20, 0x67	; 103
     faa:	52 e0       	ldi	r21, 0x02	; 2
     fac:	0e 94 c3 05 	call	0xb86	; 0xb86 <uintToString>
			print_LCD_char(UI.bias_B_sign, LCD_LINE_4, 7);
     fb0:	c2 e5       	ldi	r28, 0x52	; 82
     fb2:	d2 e0       	ldi	r29, 0x02	; 2
     fb4:	47 e0       	ldi	r20, 0x07	; 7
     fb6:	64 e5       	ldi	r22, 0x54	; 84
     fb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fba:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.bias_B[0], LCD_LINE_4, 8);
     fbe:	48 e0       	ldi	r20, 0x08	; 8
     fc0:	64 e5       	ldi	r22, 0x54	; 84
     fc2:	8d 89       	ldd	r24, Y+21	; 0x15
     fc4:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.bias_B[1], LCD_LINE_4, 10);
     fc8:	4a e0       	ldi	r20, 0x0A	; 10
     fca:	64 e5       	ldi	r22, 0x54	; 84
     fcc:	8e 89       	ldd	r24, Y+22	; 0x16
     fce:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.bias_B[2], LCD_LINE_4, 11);
     fd2:	4b e0       	ldi	r20, 0x0B	; 11
     fd4:	64 e5       	ldi	r22, 0x54	; 84
     fd6:	8f 89       	ldd	r24, Y+23	; 0x17
     fd8:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
     fdc:	d0 c1       	rjmp	.+928    	; 0x137e <handleLCD+0x7a0>
			default: break;			
			
		}
	}
	
	else if (lcdParamActive) {
     fde:	00 23       	and	r16, r16
     fe0:	e9 f1       	breq	.+122    	; 0x105c <handleLCD+0x47e>
		switch(displayPointer) {
     fe2:	6e 30       	cpi	r22, 0x0E	; 14
     fe4:	19 f0       	breq	.+6      	; 0xfec <handleLCD+0x40e>
     fe6:	6f 30       	cpi	r22, 0x0F	; 15
     fe8:	e9 f0       	breq	.+58     	; 0x1024 <handleLCD+0x446>
     fea:	c9 c1       	rjmp	.+914    	; 0x137e <handleLCD+0x7a0>
			case PTR_BRIGHT:			
			uintToString(LCD.brightness, UI.lcd_brightness, 3);
     fec:	60 91 93 02 	lds	r22, 0x0293	; 0x800293 <LCD>
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	23 e0       	ldi	r18, 0x03	; 3
     ff8:	45 e7       	ldi	r20, 0x75	; 117
     ffa:	52 e0       	ldi	r21, 0x02	; 2
     ffc:	0e 94 c3 05 	call	0xb86	; 0xb86 <uintToString>
			print_LCD_char(UI.lcd_brightness[0], LCD_LINE_2, 13);
    1000:	c2 e5       	ldi	r28, 0x52	; 82
    1002:	d2 e0       	ldi	r29, 0x02	; 2
    1004:	4d e0       	ldi	r20, 0x0D	; 13
    1006:	60 e4       	ldi	r22, 0x40	; 64
    1008:	8b a1       	ldd	r24, Y+35	; 0x23
    100a:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.lcd_brightness[1], LCD_LINE_2, 14);
    100e:	4e e0       	ldi	r20, 0x0E	; 14
    1010:	60 e4       	ldi	r22, 0x40	; 64
    1012:	8c a1       	ldd	r24, Y+36	; 0x24
    1014:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.lcd_brightness[2], LCD_LINE_2, 15);
    1018:	4f e0       	ldi	r20, 0x0F	; 15
    101a:	60 e4       	ldi	r22, 0x40	; 64
    101c:	8d a1       	ldd	r24, Y+37	; 0x25
    101e:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
    1022:	ad c1       	rjmp	.+858    	; 0x137e <handleLCD+0x7a0>

			case PTR_CONTR:
			uintToString(LCD.contrast, UI.lcd_contrast, 3);
    1024:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <LCD+0x1>
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	23 e0       	ldi	r18, 0x03	; 3
    1030:	48 e7       	ldi	r20, 0x78	; 120
    1032:	52 e0       	ldi	r21, 0x02	; 2
    1034:	0e 94 c3 05 	call	0xb86	; 0xb86 <uintToString>
			print_LCD_char(UI.lcd_contrast[0], LCD_LINE_3, 13);
    1038:	c2 e5       	ldi	r28, 0x52	; 82
    103a:	d2 e0       	ldi	r29, 0x02	; 2
    103c:	4d e0       	ldi	r20, 0x0D	; 13
    103e:	64 e1       	ldi	r22, 0x14	; 20
    1040:	8e a1       	ldd	r24, Y+38	; 0x26
    1042:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.lcd_contrast[1], LCD_LINE_3, 14);
    1046:	4e e0       	ldi	r20, 0x0E	; 14
    1048:	64 e1       	ldi	r22, 0x14	; 20
    104a:	8f a1       	ldd	r24, Y+39	; 0x27
    104c:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.lcd_contrast[2], LCD_LINE_3, 15);
    1050:	4f e0       	ldi	r20, 0x0F	; 15
    1052:	64 e1       	ldi	r22, 0x14	; 20
    1054:	88 a5       	ldd	r24, Y+40	; 0x28
    1056:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
    105a:	91 c1       	rjmp	.+802    	; 0x137e <handleLCD+0x7a0>
			default: break;
		}
	}
	
	else {
		switch(screen) {
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	09 f4       	brne	.+2      	; 0x1062 <handleLCD+0x484>
    1060:	dc c0       	rjmp	.+440    	; 0x121a <handleLCD+0x63c>
    1062:	30 f4       	brcc	.+12     	; 0x1070 <handleLCD+0x492>
    1064:	88 23       	and	r24, r24
    1066:	59 f0       	breq	.+22     	; 0x107e <handleLCD+0x4a0>
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	09 f4       	brne	.+2      	; 0x106e <handleLCD+0x490>
    106c:	6f c0       	rjmp	.+222    	; 0x114c <handleLCD+0x56e>
    106e:	87 c1       	rjmp	.+782    	; 0x137e <handleLCD+0x7a0>
    1070:	84 30       	cpi	r24, 0x04	; 4
    1072:	09 f4       	brne	.+2      	; 0x1076 <handleLCD+0x498>
    1074:	27 c1       	rjmp	.+590    	; 0x12c4 <handleLCD+0x6e6>
    1076:	85 30       	cpi	r24, 0x05	; 5
    1078:	09 f4       	brne	.+2      	; 0x107c <handleLCD+0x49e>
    107a:	39 c1       	rjmp	.+626    	; 0x12ee <handleLCD+0x710>
    107c:	80 c1       	rjmp	.+768    	; 0x137e <handleLCD+0x7a0>
			case MAIN_SCREEN_A:
			print_LCD_line(LCD_MAIN_STRING_1, LCD_LINE_1);
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	84 eb       	ldi	r24, 0xB4	; 180
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_MAIN_STRING_2, LCD_LINE_2);
    1088:	60 e4       	ldi	r22, 0x40	; 64
    108a:	89 ec       	ldi	r24, 0xC9	; 201
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_MAIN_STRING_3, LCD_LINE_3);
    1092:	64 e1       	ldi	r22, 0x14	; 20
    1094:	8e ed       	ldi	r24, 0xDE	; 222
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_MAIN_STRING_4, LCD_LINE_4);
    109c:	64 e5       	ldi	r22, 0x54	; 84
    109e:	83 ef       	ldi	r24, 0xF3	; 243
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			
			print_LCD_char(UI.type_A[0], LCD_LINE_1, 17);
    10a6:	c2 e5       	ldi	r28, 0x52	; 82
    10a8:	d2 e0       	ldi	r29, 0x02	; 2
    10aa:	41 e1       	ldi	r20, 0x11	; 17
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	88 8d       	ldd	r24, Y+24	; 0x18
    10b0:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.type_A[1], LCD_LINE_1, 18);
    10b4:	42 e1       	ldi	r20, 0x12	; 18
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	89 8d       	ldd	r24, Y+25	; 0x19
    10ba:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.type_A[2], LCD_LINE_1, 19);
    10be:	43 e1       	ldi	r20, 0x13	; 19
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10c4:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			
			print_LCD_char(UI.amplitude_A[0], LCD_LINE_2, 14);
    10c8:	4e e0       	ldi	r20, 0x0E	; 14
    10ca:	60 e4       	ldi	r22, 0x40	; 64
    10cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    10ce:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.amplitude_A[1], LCD_LINE_2, 15);
    10d2:	4f e0       	ldi	r20, 0x0F	; 15
    10d4:	60 e4       	ldi	r22, 0x40	; 64
    10d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10d8:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			
			print_LCD_char(UI.frequency_A[0], LCD_LINE_3, 7);
    10dc:	47 e0       	ldi	r20, 0x07	; 7
    10de:	64 e1       	ldi	r22, 0x14	; 20
    10e0:	88 81       	ld	r24, Y
    10e2:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_A[1], LCD_LINE_3, 9);
    10e6:	49 e0       	ldi	r20, 0x09	; 9
    10e8:	64 e1       	ldi	r22, 0x14	; 20
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_A[2], LCD_LINE_3, 10);
    10f0:	4a e0       	ldi	r20, 0x0A	; 10
    10f2:	64 e1       	ldi	r22, 0x14	; 20
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_A[3], LCD_LINE_3, 11);
    10fa:	4b e0       	ldi	r20, 0x0B	; 11
    10fc:	64 e1       	ldi	r22, 0x14	; 20
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_A[4], LCD_LINE_3, 13);
    1104:	4d e0       	ldi	r20, 0x0D	; 13
    1106:	64 e1       	ldi	r22, 0x14	; 20
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_A[5], LCD_LINE_3, 14);
    110e:	4e e0       	ldi	r20, 0x0E	; 14
    1110:	64 e1       	ldi	r22, 0x14	; 20
    1112:	8d 81       	ldd	r24, Y+5	; 0x05
    1114:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_A[6], LCD_LINE_3, 15);
    1118:	4f e0       	ldi	r20, 0x0F	; 15
    111a:	64 e1       	ldi	r22, 0x14	; 20
    111c:	8e 81       	ldd	r24, Y+6	; 0x06
    111e:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			
			print_LCD_char(UI.bias_A_sign, LCD_LINE_4, 7);
    1122:	47 e0       	ldi	r20, 0x07	; 7
    1124:	64 e5       	ldi	r22, 0x54	; 84
    1126:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1128:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.bias_A[0], LCD_LINE_4, 8);
    112c:	48 e0       	ldi	r20, 0x08	; 8
    112e:	64 e5       	ldi	r22, 0x54	; 84
    1130:	8a 89       	ldd	r24, Y+18	; 0x12
    1132:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.bias_A[1], LCD_LINE_4, 10);
    1136:	4a e0       	ldi	r20, 0x0A	; 10
    1138:	64 e5       	ldi	r22, 0x54	; 84
    113a:	8b 89       	ldd	r24, Y+19	; 0x13
    113c:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.bias_A[2], LCD_LINE_4, 11);
    1140:	4b e0       	ldi	r20, 0x0B	; 11
    1142:	64 e5       	ldi	r22, 0x54	; 84
    1144:	8c 89       	ldd	r24, Y+20	; 0x14
    1146:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
    114a:	19 c1       	rjmp	.+562    	; 0x137e <handleLCD+0x7a0>
			
			case MAIN_SCREEN_B:
			print_LCD_line(LCD_MAIN_STRING_1, LCD_LINE_1);
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	84 eb       	ldi	r24, 0xB4	; 180
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_MAIN_STRING_2, LCD_LINE_2);
    1156:	60 e4       	ldi	r22, 0x40	; 64
    1158:	89 ec       	ldi	r24, 0xC9	; 201
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_MAIN_STRING_3, LCD_LINE_3);
    1160:	64 e1       	ldi	r22, 0x14	; 20
    1162:	8e ed       	ldi	r24, 0xDE	; 222
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_MAIN_STRING_4, LCD_LINE_4);
    116a:	64 e5       	ldi	r22, 0x54	; 84
    116c:	83 ef       	ldi	r24, 0xF3	; 243
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			
			print_LCD_char(UI.type_B[0], LCD_LINE_1, 17);
    1174:	c2 e5       	ldi	r28, 0x52	; 82
    1176:	d2 e0       	ldi	r29, 0x02	; 2
    1178:	41 e1       	ldi	r20, 0x11	; 17
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    117e:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.type_B[1], LCD_LINE_1, 18);
    1182:	42 e1       	ldi	r20, 0x12	; 18
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1188:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.type_B[2], LCD_LINE_1, 19);
    118c:	43 e1       	ldi	r20, 0x13	; 19
    118e:	60 e0       	ldi	r22, 0x00	; 0
    1190:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1192:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			
			print_LCD_char(UI.amplitude_B[0], LCD_LINE_2, 14);
    1196:	4e e0       	ldi	r20, 0x0E	; 14
    1198:	60 e4       	ldi	r22, 0x40	; 64
    119a:	88 89       	ldd	r24, Y+16	; 0x10
    119c:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.amplitude_B[1], LCD_LINE_2, 15);
    11a0:	4f e0       	ldi	r20, 0x0F	; 15
    11a2:	60 e4       	ldi	r22, 0x40	; 64
    11a4:	89 89       	ldd	r24, Y+17	; 0x11
    11a6:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			
			print_LCD_char(UI.frequency_B[0], LCD_LINE_3, 7);
    11aa:	47 e0       	ldi	r20, 0x07	; 7
    11ac:	64 e1       	ldi	r22, 0x14	; 20
    11ae:	8f 81       	ldd	r24, Y+7	; 0x07
    11b0:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_B[1], LCD_LINE_3, 9);
    11b4:	49 e0       	ldi	r20, 0x09	; 9
    11b6:	64 e1       	ldi	r22, 0x14	; 20
    11b8:	88 85       	ldd	r24, Y+8	; 0x08
    11ba:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_B[2], LCD_LINE_3, 10);
    11be:	4a e0       	ldi	r20, 0x0A	; 10
    11c0:	64 e1       	ldi	r22, 0x14	; 20
    11c2:	89 85       	ldd	r24, Y+9	; 0x09
    11c4:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_B[3], LCD_LINE_3, 11);
    11c8:	4b e0       	ldi	r20, 0x0B	; 11
    11ca:	64 e1       	ldi	r22, 0x14	; 20
    11cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ce:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_B[4], LCD_LINE_3, 13);
    11d2:	4d e0       	ldi	r20, 0x0D	; 13
    11d4:	64 e1       	ldi	r22, 0x14	; 20
    11d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    11d8:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_B[5], LCD_LINE_3, 14);
    11dc:	4e e0       	ldi	r20, 0x0E	; 14
    11de:	64 e1       	ldi	r22, 0x14	; 20
    11e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e2:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.frequency_B[6], LCD_LINE_3, 15);
    11e6:	4f e0       	ldi	r20, 0x0F	; 15
    11e8:	64 e1       	ldi	r22, 0x14	; 20
    11ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ec:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			
			print_LCD_char(UI.bias_B_sign, LCD_LINE_4, 7);
    11f0:	47 e0       	ldi	r20, 0x07	; 7
    11f2:	64 e5       	ldi	r22, 0x54	; 84
    11f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11f6:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.bias_B[0], LCD_LINE_4, 8);
    11fa:	48 e0       	ldi	r20, 0x08	; 8
    11fc:	64 e5       	ldi	r22, 0x54	; 84
    11fe:	8d 89       	ldd	r24, Y+21	; 0x15
    1200:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.bias_B[1], LCD_LINE_4, 10);
    1204:	4a e0       	ldi	r20, 0x0A	; 10
    1206:	64 e5       	ldi	r22, 0x54	; 84
    1208:	8e 89       	ldd	r24, Y+22	; 0x16
    120a:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.bias_B[2], LCD_LINE_4, 11);
    120e:	4b e0       	ldi	r20, 0x0B	; 11
    1210:	64 e5       	ldi	r22, 0x54	; 84
    1212:	8f 89       	ldd	r24, Y+23	; 0x17
    1214:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
    1218:	b2 c0       	rjmp	.+356    	; 0x137e <handleLCD+0x7a0>
			
			case PARAMS_SCREEN:
			print_LCD_line(LCD_MAIN_SETTINGS_STRING_1, LCD_LINE_1);
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	88 e0       	ldi	r24, 0x08	; 8
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_MAIN_SETTINGS_STRING_2, LCD_LINE_2);
    1224:	60 e4       	ldi	r22, 0x40	; 64
    1226:	8d e1       	ldi	r24, 0x1D	; 29
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_MAIN_SETTINGS_STRING_3, LCD_LINE_3);
    122e:	64 e1       	ldi	r22, 0x14	; 20
    1230:	82 e3       	ldi	r24, 0x32	; 50
    1232:	91 e0       	ldi	r25, 0x01	; 1
    1234:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_MAIN_SETTINGS_STRING_4, LCD_LINE_4);
    1238:	64 e5       	ldi	r22, 0x54	; 84
    123a:	87 e4       	ldi	r24, 0x47	; 71
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			
			uintToString(PowerStatus.battery_voltage, UI.batteryPowerStatus, 3);
    1242:	00 e5       	ldi	r16, 0x50	; 80
    1244:	12 e0       	ldi	r17, 0x02	; 2
    1246:	f8 01       	movw	r30, r16
    1248:	60 81       	ld	r22, Z
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	23 e0       	ldi	r18, 0x03	; 3
    1252:	42 e7       	ldi	r20, 0x72	; 114
    1254:	52 e0       	ldi	r21, 0x02	; 2
    1256:	0e 94 c3 05 	call	0xb86	; 0xb86 <uintToString>
			print_LCD_char(UI.batteryPowerStatus[0], LCD_LINE_1, 13);
    125a:	c2 e5       	ldi	r28, 0x52	; 82
    125c:	d2 e0       	ldi	r29, 0x02	; 2
    125e:	4d e0       	ldi	r20, 0x0D	; 13
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	88 a1       	ldd	r24, Y+32	; 0x20
    1264:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.batteryPowerStatus[1], LCD_LINE_1, 15);
    1268:	4f e0       	ldi	r20, 0x0F	; 15
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	89 a1       	ldd	r24, Y+33	; 0x21
    126e:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.batteryPowerStatus[2], LCD_LINE_1, 16);
    1272:	40 e1       	ldi	r20, 0x10	; 16
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	8a a1       	ldd	r24, Y+34	; 0x22
    1278:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			
			if (PowerStatus.ac_power_PowerStatus) {
    127c:	f8 01       	movw	r30, r16
    127e:	81 81       	ldd	r24, Z+1	; 0x01
    1280:	88 23       	and	r24, r24
    1282:	81 f0       	breq	.+32     	; 0x12a4 <handleLCD+0x6c6>
				print_LCD_char('O', LCD_LINE_2, 16);
    1284:	40 e1       	ldi	r20, 0x10	; 16
    1286:	60 e4       	ldi	r22, 0x40	; 64
    1288:	8f e4       	ldi	r24, 0x4F	; 79
    128a:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
				print_LCD_char('N', LCD_LINE_2, 17);
    128e:	41 e1       	ldi	r20, 0x11	; 17
    1290:	60 e4       	ldi	r22, 0x40	; 64
    1292:	8e e4       	ldi	r24, 0x4E	; 78
    1294:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
				print_LCD_char(' ', LCD_LINE_2, 18);
    1298:	42 e1       	ldi	r20, 0x12	; 18
    129a:	60 e4       	ldi	r22, 0x40	; 64
    129c:	80 e2       	ldi	r24, 0x20	; 32
    129e:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
    12a2:	6d c0       	rjmp	.+218    	; 0x137e <handleLCD+0x7a0>
			}
			
			else {
				print_LCD_char('O', LCD_LINE_2, 16);
    12a4:	40 e1       	ldi	r20, 0x10	; 16
    12a6:	60 e4       	ldi	r22, 0x40	; 64
    12a8:	8f e4       	ldi	r24, 0x4F	; 79
    12aa:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
				print_LCD_char('F', LCD_LINE_2, 17);
    12ae:	41 e1       	ldi	r20, 0x11	; 17
    12b0:	60 e4       	ldi	r22, 0x40	; 64
    12b2:	86 e4       	ldi	r24, 0x46	; 70
    12b4:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
				print_LCD_char('F', LCD_LINE_2, 18);
    12b8:	42 e1       	ldi	r20, 0x12	; 18
    12ba:	60 e4       	ldi	r22, 0x40	; 64
    12bc:	86 e4       	ldi	r24, 0x46	; 70
    12be:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
    12c2:	5d c0       	rjmp	.+186    	; 0x137e <handleLCD+0x7a0>
			}
			break;
			
			case PROFILE_SCREEN:
			print_LCD_line(LCD_PROFILE_SETTINGS_STRING_1, LCD_LINE_1);
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	8c e5       	ldi	r24, 0x5C	; 92
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_PROFILE_SETTINGS_STRING_2, LCD_LINE_2);
    12ce:	60 e4       	ldi	r22, 0x40	; 64
    12d0:	81 e7       	ldi	r24, 0x71	; 113
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_PROFILE_SETTINGS_STRING_3, LCD_LINE_3);
    12d8:	64 e1       	ldi	r22, 0x14	; 20
    12da:	84 e8       	ldi	r24, 0x84	; 132
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_PROFILE_SETTINGS_STRING_4, LCD_LINE_4);
    12e2:	64 e5       	ldi	r22, 0x54	; 84
    12e4:	87 e9       	ldi	r24, 0x97	; 151
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			break;
    12ec:	48 c0       	rjmp	.+144    	; 0x137e <handleLCD+0x7a0>

			case LCD_SCREEN:
			print_LCD_line(LCD_SCREEN_SETTINGS_STRING_1, LCD_LINE_1);
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	8c ea       	ldi	r24, 0xAC	; 172
    12f2:	91 e0       	ldi	r25, 0x01	; 1
    12f4:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_SCREEN_SETTINGS_STRING_2, LCD_LINE_2);
    12f8:	60 e4       	ldi	r22, 0x40	; 64
    12fa:	81 ec       	ldi	r24, 0xC1	; 193
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_SCREEN_SETTINGS_STRING_3, LCD_LINE_3);
    1302:	64 e1       	ldi	r22, 0x14	; 20
    1304:	86 ed       	ldi	r24, 0xD6	; 214
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			print_LCD_line(LCD_SCREEN_SETTINGS_STRING_4, LCD_LINE_4);
    130c:	64 e5       	ldi	r22, 0x54	; 84
    130e:	87 e9       	ldi	r24, 0x97	; 151
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
			
			uintToString(LCD.brightness, UI.lcd_brightness, 3);
    1316:	c3 e9       	ldi	r28, 0x93	; 147
    1318:	d2 e0       	ldi	r29, 0x02	; 2
    131a:	68 81       	ld	r22, Y
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	23 e0       	ldi	r18, 0x03	; 3
    1324:	45 e7       	ldi	r20, 0x75	; 117
    1326:	52 e0       	ldi	r21, 0x02	; 2
    1328:	0e 94 c3 05 	call	0xb86	; 0xb86 <uintToString>
			uintToString(LCD.contrast, UI.lcd_contrast, 3);
    132c:	69 81       	ldd	r22, Y+1	; 0x01
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	23 e0       	ldi	r18, 0x03	; 3
    1336:	48 e7       	ldi	r20, 0x78	; 120
    1338:	52 e0       	ldi	r21, 0x02	; 2
    133a:	0e 94 c3 05 	call	0xb86	; 0xb86 <uintToString>
			
			print_LCD_char(UI.lcd_brightness[0], LCD_LINE_2, 13);
    133e:	c2 e5       	ldi	r28, 0x52	; 82
    1340:	d2 e0       	ldi	r29, 0x02	; 2
    1342:	4d e0       	ldi	r20, 0x0D	; 13
    1344:	60 e4       	ldi	r22, 0x40	; 64
    1346:	8b a1       	ldd	r24, Y+35	; 0x23
    1348:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.lcd_brightness[1], LCD_LINE_2, 14);
    134c:	4e e0       	ldi	r20, 0x0E	; 14
    134e:	60 e4       	ldi	r22, 0x40	; 64
    1350:	8c a1       	ldd	r24, Y+36	; 0x24
    1352:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.lcd_brightness[2], LCD_LINE_2, 15);
    1356:	4f e0       	ldi	r20, 0x0F	; 15
    1358:	60 e4       	ldi	r22, 0x40	; 64
    135a:	8d a1       	ldd	r24, Y+37	; 0x25
    135c:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			
			print_LCD_char(UI.lcd_contrast[0], LCD_LINE_3, 13);
    1360:	4d e0       	ldi	r20, 0x0D	; 13
    1362:	64 e1       	ldi	r22, 0x14	; 20
    1364:	8e a1       	ldd	r24, Y+38	; 0x26
    1366:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.lcd_contrast[1], LCD_LINE_3, 14);
    136a:	4e e0       	ldi	r20, 0x0E	; 14
    136c:	64 e1       	ldi	r22, 0x14	; 20
    136e:	8f a1       	ldd	r24, Y+39	; 0x27
    1370:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			print_LCD_char(UI.lcd_contrast[2], LCD_LINE_3, 15);
    1374:	4f e0       	ldi	r20, 0x0F	; 15
    1376:	64 e1       	ldi	r22, 0x14	; 20
    1378:	88 a5       	ldd	r24, Y+40	; 0x28
    137a:	0e 94 67 01 	call	0x2ce	; 0x2ce <print_LCD_char>
			break;
			
			default: break;
		}					
	}
}
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	08 95       	ret

00001388 <LCD_logo_display>:
		number /= 10;
		iPtr++;
	}
}

void LCD_logo_display() {
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	64 97       	sbiw	r28, 0x14	; 20
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
	char lbuff[20];
	print_LCD_line("Mobile Function Generator", LCD_LINE_1);
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	8b ee       	ldi	r24, 0xEB	; 235
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
	snprintf(lbuff, 20, " Firmware V%c.%c.%c ", FIRMWARE_VERSION_MAJOR, FIRMWARE_VERSION_MINOR, FIRMWARE_VERSION_BUILD);
    13aa:	1f 92       	push	r1
    13ac:	82 e3       	ldi	r24, 0x32	; 50
    13ae:	8f 93       	push	r24
    13b0:	1f 92       	push	r1
    13b2:	90 e3       	ldi	r25, 0x30	; 48
    13b4:	9f 93       	push	r25
    13b6:	1f 92       	push	r1
    13b8:	8f 93       	push	r24
    13ba:	85 e0       	ldi	r24, 0x05	; 5
    13bc:	92 e0       	ldi	r25, 0x02	; 2
    13be:	9f 93       	push	r25
    13c0:	8f 93       	push	r24
    13c2:	1f 92       	push	r1
    13c4:	84 e1       	ldi	r24, 0x14	; 20
    13c6:	8f 93       	push	r24
    13c8:	8e 01       	movw	r16, r28
    13ca:	0f 5f       	subi	r16, 0xFF	; 255
    13cc:	1f 4f       	sbci	r17, 0xFF	; 255
    13ce:	1f 93       	push	r17
    13d0:	0f 93       	push	r16
    13d2:	0e 94 8f 14 	call	0x291e	; 0x291e <snprintf>
	print_LCD_line(lbuff, LCD_LINE_2);
    13d6:	60 e4       	ldi	r22, 0x40	; 64
    13d8:	c8 01       	movw	r24, r16
    13da:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
	print_LCD_line("  KhomLabs Design   ", LCD_LINE_3);
    13de:	64 e1       	ldi	r22, 0x14	; 20
    13e0:	8a e1       	ldi	r24, 0x1A	; 26
    13e2:	92 e0       	ldi	r25, 0x02	; 2
    13e4:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
	print_LCD_line("  <Initializing...> ", LCD_LINE_4);
    13e8:	64 e5       	ldi	r22, 0x54	; 84
    13ea:	8f e2       	ldi	r24, 0x2F	; 47
    13ec:	92 e0       	ldi	r25, 0x02	; 2
    13ee:	0e 94 47 01 	call	0x28e	; 0x28e <print_LCD_line>
}
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	64 96       	adiw	r28, 0x14	; 20
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	08 95       	ret

00001412 <Init_UI>:
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
	ADMUX |= (1 << REFS0);
}

void Init_UI() {
	brightnessAnimation();
    1412:	0e 94 02 04 	call	0x804	; 0x804 <brightnessAnimation>
	setContrastLCD(100);
    1416:	84 e6       	ldi	r24, 0x64	; 100
    1418:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <setContrastLCD>
	LCD_logo_display();
    141c:	0e 94 c4 09 	call	0x1388	; 0x1388 <LCD_logo_display>
	playMelody(true);
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	0e 94 85 01 	call	0x30a	; 0x30a <playMelody>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1426:	2f ef       	ldi	r18, 0xFF	; 255
    1428:	83 ed       	ldi	r24, 0xD3	; 211
    142a:	90 e3       	ldi	r25, 0x30	; 48
    142c:	21 50       	subi	r18, 0x01	; 1
    142e:	80 40       	sbci	r24, 0x00	; 0
    1430:	90 40       	sbci	r25, 0x00	; 0
    1432:	e1 f7       	brne	.-8      	; 0x142c <Init_UI+0x1a>
    1434:	00 c0       	rjmp	.+0      	; 0x1436 <Init_UI+0x24>
    1436:	00 00       	nop
    1438:	08 95       	ret

0000143a <EEPROM_SaveProfile>:
	print_LCD_line("  KhomLabs Design   ", LCD_LINE_3);
	print_LCD_line("  <Initializing...> ", LCD_LINE_4);
}

void EEPROM_SaveProfile() {
	eeprom_write_dword((uint32_t *)0x00, FunctionGenerator.frequency_A); eeprom_busy_wait();
    143a:	40 91 7f 02 	lds	r20, 0x027F	; 0x80027f <FunctionGenerator>
    143e:	50 91 80 02 	lds	r21, 0x0280	; 0x800280 <FunctionGenerator+0x1>
    1442:	60 91 81 02 	lds	r22, 0x0281	; 0x800281 <FunctionGenerator+0x2>
    1446:	70 91 82 02 	lds	r23, 0x0282	; 0x800282 <FunctionGenerator+0x3>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <eeprom_write_dword>
    1452:	e1 99       	sbic	0x1c, 1	; 28
    1454:	fe cf       	rjmp	.-4      	; 0x1452 <EEPROM_SaveProfile+0x18>
	eeprom_write_dword((uint32_t *)0x04, FunctionGenerator.frequency_B); eeprom_busy_wait();
    1456:	40 91 83 02 	lds	r20, 0x0283	; 0x800283 <FunctionGenerator+0x4>
    145a:	50 91 84 02 	lds	r21, 0x0284	; 0x800284 <FunctionGenerator+0x5>
    145e:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <FunctionGenerator+0x6>
    1462:	70 91 86 02 	lds	r23, 0x0286	; 0x800286 <FunctionGenerator+0x7>
    1466:	84 e0       	ldi	r24, 0x04	; 4
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <eeprom_write_dword>
    146e:	e1 99       	sbic	0x1c, 1	; 28
    1470:	fe cf       	rjmp	.-4      	; 0x146e <EEPROM_SaveProfile+0x34>
	eeprom_write_byte((uint8_t *)0x08, FunctionGenerator.amplitude_A); eeprom_busy_wait();
    1472:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <FunctionGenerator+0x8>
    1476:	88 e0       	ldi	r24, 0x08	; 8
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <eeprom_write_byte>
    147e:	e1 99       	sbic	0x1c, 1	; 28
    1480:	fe cf       	rjmp	.-4      	; 0x147e <EEPROM_SaveProfile+0x44>
	eeprom_write_byte((uint8_t *)0x09, FunctionGenerator.amplitude_B); eeprom_busy_wait();
    1482:	60 91 89 02 	lds	r22, 0x0289	; 0x800289 <FunctionGenerator+0xa>
    1486:	89 e0       	ldi	r24, 0x09	; 9
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <eeprom_write_byte>
    148e:	e1 99       	sbic	0x1c, 1	; 28
    1490:	fe cf       	rjmp	.-4      	; 0x148e <EEPROM_SaveProfile+0x54>
	eeprom_write_word((uint16_t *)0x0A, FunctionGenerator.bias_A); eeprom_busy_wait();
    1492:	60 91 8d 02 	lds	r22, 0x028D	; 0x80028d <FunctionGenerator+0xe>
    1496:	70 91 8e 02 	lds	r23, 0x028E	; 0x80028e <FunctionGenerator+0xf>
    149a:	8a e0       	ldi	r24, 0x0A	; 10
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <eeprom_write_word>
    14a2:	e1 99       	sbic	0x1c, 1	; 28
    14a4:	fe cf       	rjmp	.-4      	; 0x14a2 <EEPROM_SaveProfile+0x68>
	eeprom_write_word((uint16_t *)0x0C, FunctionGenerator.bias_B); eeprom_busy_wait();
    14a6:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <FunctionGenerator+0x10>
    14aa:	70 91 90 02 	lds	r23, 0x0290	; 0x800290 <FunctionGenerator+0x11>
    14ae:	8c e0       	ldi	r24, 0x0C	; 12
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <eeprom_write_word>
    14b6:	e1 99       	sbic	0x1c, 1	; 28
    14b8:	fe cf       	rjmp	.-4      	; 0x14b6 <EEPROM_SaveProfile+0x7c>
	eeprom_write_byte((uint8_t *)0x0E, FunctionGenerator.bias_A_sign); eeprom_busy_wait();
    14ba:	60 91 91 02 	lds	r22, 0x0291	; 0x800291 <FunctionGenerator+0x12>
    14be:	8e e0       	ldi	r24, 0x0E	; 14
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <eeprom_write_byte>
    14c6:	e1 99       	sbic	0x1c, 1	; 28
    14c8:	fe cf       	rjmp	.-4      	; 0x14c6 <EEPROM_SaveProfile+0x8c>
	eeprom_write_byte((uint8_t *)0x0F, FunctionGenerator.bias_B_sign); eeprom_busy_wait();
    14ca:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <FunctionGenerator+0x13>
    14ce:	8f e0       	ldi	r24, 0x0F	; 15
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <eeprom_write_byte>
    14d6:	e1 99       	sbic	0x1c, 1	; 28
    14d8:	fe cf       	rjmp	.-4      	; 0x14d6 <EEPROM_SaveProfile+0x9c>
	eeprom_write_byte((uint8_t *)0x10, FunctionGenerator.output_type_A); eeprom_busy_wait();
    14da:	60 91 8b 02 	lds	r22, 0x028B	; 0x80028b <FunctionGenerator+0xc>
    14de:	80 e1       	ldi	r24, 0x10	; 16
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <eeprom_write_byte>
    14e6:	e1 99       	sbic	0x1c, 1	; 28
    14e8:	fe cf       	rjmp	.-4      	; 0x14e6 <EEPROM_SaveProfile+0xac>
	eeprom_write_byte((uint8_t *)0x11, FunctionGenerator.output_type_B); eeprom_busy_wait();
    14ea:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <FunctionGenerator+0xd>
    14ee:	81 e1       	ldi	r24, 0x11	; 17
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <eeprom_write_byte>
    14f6:	e1 99       	sbic	0x1c, 1	; 28
    14f8:	fe cf       	rjmp	.-4      	; 0x14f6 <EEPROM_SaveProfile+0xbc>
	eeprom_write_byte((uint8_t *)0x12, LCD.brightness); eeprom_busy_wait();
    14fa:	60 91 93 02 	lds	r22, 0x0293	; 0x800293 <LCD>
    14fe:	82 e1       	ldi	r24, 0x12	; 18
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <eeprom_write_byte>
    1506:	e1 99       	sbic	0x1c, 1	; 28
    1508:	fe cf       	rjmp	.-4      	; 0x1506 <EEPROM_SaveProfile+0xcc>
	eeprom_write_byte((uint8_t *)0x13, LCD.contrast); eeprom_busy_wait();
    150a:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <LCD+0x1>
    150e:	83 e1       	ldi	r24, 0x13	; 19
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <eeprom_write_byte>
    1516:	e1 99       	sbic	0x1c, 1	; 28
    1518:	fe cf       	rjmp	.-4      	; 0x1516 <EEPROM_SaveProfile+0xdc>
}
    151a:	08 95       	ret

0000151c <EEPROM_LoadProfile>:

void EEPROM_LoadProfile() {
	FunctionGenerator.frequency_A = eeprom_read_dword((uint32_t *)0x00); eeprom_busy_wait();
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <eeprom_read_dword>
    1524:	60 93 7f 02 	sts	0x027F, r22	; 0x80027f <FunctionGenerator>
    1528:	70 93 80 02 	sts	0x0280, r23	; 0x800280 <FunctionGenerator+0x1>
    152c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <FunctionGenerator+0x2>
    1530:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <FunctionGenerator+0x3>
    1534:	e1 99       	sbic	0x1c, 1	; 28
    1536:	fe cf       	rjmp	.-4      	; 0x1534 <EEPROM_LoadProfile+0x18>
	FunctionGenerator.frequency_B = eeprom_read_dword((uint32_t *)0x04); eeprom_busy_wait();
    1538:	84 e0       	ldi	r24, 0x04	; 4
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <eeprom_read_dword>
    1540:	60 93 83 02 	sts	0x0283, r22	; 0x800283 <FunctionGenerator+0x4>
    1544:	70 93 84 02 	sts	0x0284, r23	; 0x800284 <FunctionGenerator+0x5>
    1548:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <FunctionGenerator+0x6>
    154c:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <FunctionGenerator+0x7>
    1550:	e1 99       	sbic	0x1c, 1	; 28
    1552:	fe cf       	rjmp	.-4      	; 0x1550 <EEPROM_LoadProfile+0x34>
	FunctionGenerator.amplitude_A = eeprom_read_byte((uint8_t *)0x08); eeprom_busy_wait();
    1554:	88 e0       	ldi	r24, 0x08	; 8
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <eeprom_read_byte>
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <FunctionGenerator+0x9>
    1562:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <FunctionGenerator+0x8>
    1566:	e1 99       	sbic	0x1c, 1	; 28
    1568:	fe cf       	rjmp	.-4      	; 0x1566 <EEPROM_LoadProfile+0x4a>
	FunctionGenerator.amplitude_B = eeprom_read_byte((uint8_t *)0x09); eeprom_busy_wait();
    156a:	89 e0       	ldi	r24, 0x09	; 9
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <eeprom_read_byte>
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <FunctionGenerator+0xb>
    1578:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <FunctionGenerator+0xa>
    157c:	e1 99       	sbic	0x1c, 1	; 28
    157e:	fe cf       	rjmp	.-4      	; 0x157c <EEPROM_LoadProfile+0x60>
	FunctionGenerator.bias_A = eeprom_read_word((uint16_t *)0x0A); eeprom_busy_wait();
    1580:	8a e0       	ldi	r24, 0x0A	; 10
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <eeprom_read_word>
    1588:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <FunctionGenerator+0xf>
    158c:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <FunctionGenerator+0xe>
    1590:	e1 99       	sbic	0x1c, 1	; 28
    1592:	fe cf       	rjmp	.-4      	; 0x1590 <EEPROM_LoadProfile+0x74>
	FunctionGenerator.bias_B = eeprom_read_word((uint16_t *)0x0C); eeprom_busy_wait();
    1594:	8c e0       	ldi	r24, 0x0C	; 12
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <eeprom_read_word>
    159c:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <FunctionGenerator+0x11>
    15a0:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <FunctionGenerator+0x10>
    15a4:	e1 99       	sbic	0x1c, 1	; 28
    15a6:	fe cf       	rjmp	.-4      	; 0x15a4 <EEPROM_LoadProfile+0x88>
	FunctionGenerator.bias_A_sign = eeprom_read_byte((uint8_t *)0x0E); eeprom_busy_wait();
    15a8:	8e e0       	ldi	r24, 0x0E	; 14
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <eeprom_read_byte>
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	81 11       	cpse	r24, r1
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <EEPROM_LoadProfile+0x9c>
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <FunctionGenerator+0x12>
    15bc:	e1 99       	sbic	0x1c, 1	; 28
    15be:	fe cf       	rjmp	.-4      	; 0x15bc <EEPROM_LoadProfile+0xa0>
	FunctionGenerator.bias_B_sign = eeprom_read_byte((uint8_t *)0x0F); eeprom_busy_wait();
    15c0:	8f e0       	ldi	r24, 0x0F	; 15
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <eeprom_read_byte>
    15c8:	91 e0       	ldi	r25, 0x01	; 1
    15ca:	81 11       	cpse	r24, r1
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <EEPROM_LoadProfile+0xb4>
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <FunctionGenerator+0x13>
    15d4:	e1 99       	sbic	0x1c, 1	; 28
    15d6:	fe cf       	rjmp	.-4      	; 0x15d4 <EEPROM_LoadProfile+0xb8>
	FunctionGenerator.output_type_A = eeprom_read_byte((uint8_t *)0x10); eeprom_busy_wait();
    15d8:	80 e1       	ldi	r24, 0x10	; 16
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <eeprom_read_byte>
    15e0:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <FunctionGenerator+0xc>
    15e4:	e1 99       	sbic	0x1c, 1	; 28
    15e6:	fe cf       	rjmp	.-4      	; 0x15e4 <EEPROM_LoadProfile+0xc8>
	FunctionGenerator.output_type_B = eeprom_read_byte((uint8_t *)0x11); eeprom_busy_wait();
    15e8:	81 e1       	ldi	r24, 0x11	; 17
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <eeprom_read_byte>
    15f0:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <FunctionGenerator+0xd>
    15f4:	e1 99       	sbic	0x1c, 1	; 28
    15f6:	fe cf       	rjmp	.-4      	; 0x15f4 <EEPROM_LoadProfile+0xd8>
	LCD.brightness = eeprom_read_byte((uint8_t *)0x12); eeprom_busy_wait();
    15f8:	82 e1       	ldi	r24, 0x12	; 18
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <eeprom_read_byte>
    1600:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <LCD>
    1604:	e1 99       	sbic	0x1c, 1	; 28
    1606:	fe cf       	rjmp	.-4      	; 0x1604 <EEPROM_LoadProfile+0xe8>
	LCD.contrast = eeprom_read_byte((uint8_t *)0x13); eeprom_busy_wait();
    1608:	83 e1       	ldi	r24, 0x13	; 19
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <eeprom_read_byte>
    1610:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <LCD+0x1>
    1614:	e1 99       	sbic	0x1c, 1	; 28
    1616:	fe cf       	rjmp	.-4      	; 0x1614 <EEPROM_LoadProfile+0xf8>
}
    1618:	08 95       	ret

0000161a <main>:
	static uint16_t prevBatVoltage = 0;
	static bool prevAcPowerStatus = false;
	static bool lcdParameterChanged = false;
	static bool lcdFunctionChanged = false;

	Init_Device();
    161a:	0e 94 42 02 	call	0x484	; 0x484 <Init_Device>
	Init_UI();
    161e:	0e 94 09 0a 	call	0x1412	; 0x1412 <Init_UI>

	/* Initialization sequence */
	display.mainScreen = MAIN_SCREEN_A;
    1622:	ee e4       	ldi	r30, 0x4E	; 78
    1624:	f2 e0       	ldi	r31, 0x02	; 2
    1626:	11 82       	std	Z+1, r1	; 0x01
	display.stateChanged = false;
    1628:	10 82       	st	Z, r1
	buttonPressCounter = 0;
    162a:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <buttonPressCounter.2753>
	
	clearWaveformValues();
    162e:	0e 94 8c 04 	call	0x918	; 0x918 <clearWaveformValues>
	clearUIValues();
    1632:	0e 94 a4 04 	call	0x948	; 0x948 <clearUIValues>
	clearLCDParameterValues();
    1636:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <clearLCDParameterValues>
	handleLCD(display.mainScreen, PTR_NULL, false, false, false);
    163a:	00 e0       	ldi	r16, 0x00	; 0
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	0e 94 ef 05 	call	0xbde	; 0xbde <handleLCD>
    1648:	2f ef       	ldi	r18, 0xFF	; 255
    164a:	8e e9       	ldi	r24, 0x9E	; 158
    164c:	94 e2       	ldi	r25, 0x24	; 36
    164e:	21 50       	subi	r18, 0x01	; 1
    1650:	80 40       	sbci	r24, 0x00	; 0
    1652:	90 40       	sbci	r25, 0x00	; 0
    1654:	e1 f7       	brne	.-8      	; 0x164e <main+0x34>
    1656:	00 c0       	rjmp	.+0      	; 0x1658 <main+0x3e>
    1658:	00 00       	nop
	while(1) {
		
		encoderState = pollEncoder();
		switchState = pollSwitch();
		
		if (display.stateChanged) {
    165a:	ce e4       	ldi	r28, 0x4E	; 78
    165c:	d2 e0       	ldi	r29, 0x02	; 2
					parameterSelectionActivated = false;
					functionalityChanged = false;
					displayPointerActivated = false;
					lcdParameterChanged = false;
					displayPointer = PTR_NULL;
					display.stateChanged = true;
    165e:	ee 24       	eor	r14, r14
    1660:	e3 94       	inc	r14
					else LCD.brightness++;
				}
				else if (encoderState == CCW) {
					display.stateChanged = true;
					lcdFunctionChanged = true;
					if (LCD.brightness <= 0) LCD.brightness = 0;
    1662:	0f 2e       	mov	r0, r31
    1664:	f3 e9       	ldi	r31, 0x93	; 147
    1666:	af 2e       	mov	r10, r31
    1668:	f2 e0       	ldi	r31, 0x02	; 2
    166a:	bf 2e       	mov	r11, r31
    166c:	f0 2d       	mov	r31, r0
				functionalityChanged = false;
				displayPointerActivated = false;
				lcdParameterChanged = false;
				displayPointer = PTR_NULL;
				display.stateChanged = true;
				display.mainScreen = PARAMS_SCREEN;
    166e:	68 94       	set
    1670:	33 24       	eor	r3, r3
    1672:	31 f8       	bld	r3, 1
					if (encoderState == CW) {
						displayPointer = PTR_SETT;
						display.stateChanged = true;
					}
					else if (encoderState == CCW) {
						displayPointer = PTR_SETT;
    1674:	0f 2e       	mov	r0, r31
    1676:	fa e0       	ldi	r31, 0x0A	; 10
    1678:	2f 2e       	mov	r2, r31
    167a:	f0 2d       	mov	r31, r0
				}
							
				else if (encoderState == CCW) {
					display.stateChanged = true;
					functionalityChanged = true;
					if (FunctionGenerator.bias_B_sign == NEGATIVE) {
    167c:	0f 2e       	mov	r0, r31
    167e:	ff e7       	ldi	r31, 0x7F	; 127
    1680:	cf 2e       	mov	r12, r31
    1682:	f2 e0       	ldi	r31, 0x02	; 2
    1684:	df 2e       	mov	r13, r31
    1686:	f0 2d       	mov	r31, r0

				case PTR_FREQ_B:
				if (encoderState == CW) {
					display.stateChanged = true;
					functionalityChanged = true;
					if (FunctionGenerator.frequency_B >= 1000000) FunctionGenerator.frequency_B = 1000000;
    1688:	0f 2e       	mov	r0, r31
    168a:	f0 e4       	ldi	r31, 0x40	; 64
    168c:	4f 2e       	mov	r4, r31
    168e:	f2 e4       	ldi	r31, 0x42	; 66
    1690:	5f 2e       	mov	r5, r31
    1692:	ff e0       	ldi	r31, 0x0F	; 15
    1694:	6f 2e       	mov	r6, r31
    1696:	71 2c       	mov	r7, r1
    1698:	f0 2d       	mov	r31, r0
						displayPointer = PTR_SETT;
						display.stateChanged = true;
					}
					updateAcStatus();
					updateBatteryStatus();
					if ((PowerStatus.battery_voltage != prevBatVoltage) || (PowerStatus.ac_power_PowerStatus != prevAcPowerStatus)) display.stateChanged = true;
    169a:	0f 2e       	mov	r0, r31
    169c:	f0 e5       	ldi	r31, 0x50	; 80
    169e:	8f 2e       	mov	r8, r31
    16a0:	f2 e0       	ldi	r31, 0x02	; 2
    16a2:	9f 2e       	mov	r9, r31
    16a4:	f0 2d       	mov	r31, r0
	handleLCD(display.mainScreen, PTR_NULL, false, false, false);
	_delay_ms(1500);
	
	while(1) {
		
		encoderState = pollEncoder();
    16a6:	0e 94 04 03 	call	0x608	; 0x608 <pollEncoder>
    16aa:	18 2f       	mov	r17, r24
		switchState = pollSwitch();
    16ac:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <pollSwitch>
    16b0:	f8 2e       	mov	r15, r24
		
		if (display.stateChanged) {
    16b2:	88 81       	ld	r24, Y
    16b4:	88 23       	and	r24, r24
    16b6:	61 f0       	breq	.+24     	; 0x16d0 <main+0xb6>
			display.stateChanged = false;
    16b8:	18 82       	st	Y, r1
			handleLCD(display.mainScreen, displayPointer, displayPointerActivated, parameterSelectionActivated, lcdFunctionChanged);
    16ba:	00 91 4c 02 	lds	r16, 0x024C	; 0x80024c <lcdFunctionChanged.2757>
    16be:	20 91 4b 02 	lds	r18, 0x024B	; 0x80024b <parameterSelectionActivated.2750>
    16c2:	40 91 4a 02 	lds	r20, 0x024A	; 0x80024a <displayPointerActivated.2751>
    16c6:	60 91 49 02 	lds	r22, 0x0249	; 0x800249 <displayPointer.2749>
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	0e 94 ef 05 	call	0xbde	; 0xbde <handleLCD>
		}
		if (functionalityChanged) {
    16d0:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <functionalityChanged.2752>
    16d4:	88 23       	and	r24, r24
    16d6:	31 f0       	breq	.+12     	; 0x16e4 <main+0xca>
			functionalityChanged = false;
    16d8:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
			handleFunctionGenerator(displayPointer);
    16dc:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <displayPointer.2749>
    16e0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <handleFunctionGenerator>
		}
		
		if (lcdFunctionChanged) {
    16e4:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <lcdFunctionChanged.2757>
    16e8:	88 23       	and	r24, r24
    16ea:	31 f0       	breq	.+12     	; 0x16f8 <main+0xde>
			lcdFunctionChanged = false;
    16ec:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <lcdFunctionChanged.2757>
			handleLCDParameter(displayPointer);
    16f0:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <displayPointer.2749>
    16f4:	0e 94 b4 05 	call	0xb68	; 0xb68 <handleLCDParameter>
		}
		
		if (!displayPointerActivated && !parameterSelectionActivated) {
    16f8:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <displayPointerActivated.2751>
    16fc:	81 11       	cpse	r24, r1
    16fe:	92 c0       	rjmp	.+292    	; 0x1824 <main+0x20a>
    1700:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <parameterSelectionActivated.2750>
    1704:	81 11       	cpse	r24, r1
    1706:	fb c1       	rjmp	.+1014   	; 0x1afe <main+0x4e4>
			switch(display.mainScreen) {
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	82 30       	cpi	r24, 0x02	; 2
    170c:	91 f1       	breq	.+100    	; 0x1772 <main+0x158>
    170e:	28 f4       	brcc	.+10     	; 0x171a <main+0x100>
    1710:	88 23       	and	r24, r24
    1712:	51 f0       	breq	.+20     	; 0x1728 <main+0x10e>
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	d1 f0       	breq	.+52     	; 0x174c <main+0x132>
    1718:	c6 cf       	rjmp	.-116    	; 0x16a6 <main+0x8c>
    171a:	84 30       	cpi	r24, 0x04	; 4
    171c:	09 f4       	brne	.+2      	; 0x1720 <main+0x106>
    171e:	56 c0       	rjmp	.+172    	; 0x17cc <main+0x1b2>
    1720:	85 30       	cpi	r24, 0x05	; 5
    1722:	09 f4       	brne	.+2      	; 0x1726 <main+0x10c>
    1724:	69 c0       	rjmp	.+210    	; 0x17f8 <main+0x1de>
    1726:	bf cf       	rjmp	.-130    	; 0x16a6 <main+0x8c>
				case MAIN_SCREEN_A:
					if (encoderState == CW) {
    1728:	11 30       	cpi	r17, 0x01	; 1
    172a:	19 f4       	brne	.+6      	; 0x1732 <main+0x118>
						display.mainScreen = MAIN_SCREEN_B;
    172c:	e9 82       	std	Y+1, r14	; 0x01
						display.stateChanged = true;
    172e:	e8 82       	st	Y, r14
    1730:	ba cf       	rjmp	.-140    	; 0x16a6 <main+0x8c>
					}
					
					else if (encoderState == CCW) {
    1732:	12 30       	cpi	r17, 0x02	; 2
    1734:	19 f4       	brne	.+6      	; 0x173c <main+0x122>
						display.mainScreen = PARAMS_SCREEN;
    1736:	39 82       	std	Y+1, r3	; 0x01
						display.stateChanged = true;
    1738:	e8 82       	st	Y, r14
    173a:	b5 cf       	rjmp	.-150    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    173c:	ff 20       	and	r15, r15
    173e:	09 f4       	brne	.+2      	; 0x1742 <main+0x128>
    1740:	b2 cf       	rjmp	.-156    	; 0x16a6 <main+0x8c>
						displayPointerActivated = true;
    1742:	e0 92 4a 02 	sts	0x024A, r14	; 0x80024a <displayPointerActivated.2751>
						displayPointer = PTR_TYPE_A;
    1746:	30 92 49 02 	sts	0x0249, r3	; 0x800249 <displayPointer.2749>
    174a:	ad cf       	rjmp	.-166    	; 0x16a6 <main+0x8c>
					}
					break;
					
				case MAIN_SCREEN_B:
					if (encoderState == CW) {
    174c:	11 30       	cpi	r17, 0x01	; 1
    174e:	19 f4       	brne	.+6      	; 0x1756 <main+0x13c>
						display.mainScreen = PARAMS_SCREEN;
    1750:	39 82       	std	Y+1, r3	; 0x01
						display.stateChanged = true;
    1752:	e8 82       	st	Y, r14
    1754:	a8 cf       	rjmp	.-176    	; 0x16a6 <main+0x8c>
					}
					
					else if (encoderState == CCW) {
    1756:	12 30       	cpi	r17, 0x02	; 2
    1758:	19 f4       	brne	.+6      	; 0x1760 <main+0x146>
						display.mainScreen = MAIN_SCREEN_A;
    175a:	19 82       	std	Y+1, r1	; 0x01
						display.stateChanged = true;
    175c:	e8 82       	st	Y, r14
    175e:	a3 cf       	rjmp	.-186    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    1760:	ff 20       	and	r15, r15
    1762:	09 f4       	brne	.+2      	; 0x1766 <main+0x14c>
    1764:	a0 cf       	rjmp	.-192    	; 0x16a6 <main+0x8c>
						displayPointerActivated = true;
    1766:	e0 92 4a 02 	sts	0x024A, r14	; 0x80024a <displayPointerActivated.2751>
						displayPointer = PTR_TYPE_B;
    176a:	86 e0       	ldi	r24, 0x06	; 6
    176c:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
    1770:	9a cf       	rjmp	.-204    	; 0x16a6 <main+0x8c>
					}
					break;
					
				case PARAMS_SCREEN:
					if (encoderState == CW) {
    1772:	11 30       	cpi	r17, 0x01	; 1
    1774:	19 f4       	brne	.+6      	; 0x177c <main+0x162>
						display.mainScreen = MAIN_SCREEN_A;
    1776:	19 82       	std	Y+1, r1	; 0x01
						display.stateChanged = true;
    1778:	e8 82       	st	Y, r14
    177a:	0c c0       	rjmp	.+24     	; 0x1794 <main+0x17a>
					}
					
					else if (encoderState == CCW) {
    177c:	12 30       	cpi	r17, 0x02	; 2
    177e:	19 f4       	brne	.+6      	; 0x1786 <main+0x16c>
						display.mainScreen = MAIN_SCREEN_B;
    1780:	e9 82       	std	Y+1, r14	; 0x01
						display.stateChanged = true;
    1782:	e8 82       	st	Y, r14
    1784:	07 c0       	rjmp	.+14     	; 0x1794 <main+0x17a>
					}
					else if (switchState) {
    1786:	ff 20       	and	r15, r15
    1788:	29 f0       	breq	.+10     	; 0x1794 <main+0x17a>
						displayPointerActivated = true;
    178a:	e0 92 4a 02 	sts	0x024A, r14	; 0x80024a <displayPointerActivated.2751>
						displayPointer = PTR_SETT;
    178e:	20 92 49 02 	sts	0x0249, r2	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1792:	e8 82       	st	Y, r14
					}
					updateAcStatus();
    1794:	0e 94 60 04 	call	0x8c0	; 0x8c0 <updateAcStatus>
					updateBatteryStatus();
    1798:	0e 94 3f 04 	call	0x87e	; 0x87e <updateBatteryStatus>
					if ((PowerStatus.battery_voltage != prevBatVoltage) || (PowerStatus.ac_power_PowerStatus != prevAcPowerStatus)) display.stateChanged = true;
    179c:	f4 01       	movw	r30, r8
    179e:	80 81       	ld	r24, Z
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <prevBatVoltage.2754>
    17a6:	30 91 47 02 	lds	r19, 0x0247	; 0x800247 <prevBatVoltage.2754+0x1>
    17aa:	82 17       	cp	r24, r18
    17ac:	93 07       	cpc	r25, r19
    17ae:	21 f4       	brne	.+8      	; 0x17b8 <main+0x19e>
    17b0:	31 81       	ldd	r19, Z+1	; 0x01
    17b2:	20 91 45 02 	lds	r18, 0x0245	; 0x800245 <prevAcPowerStatus.2755>
    17b6:	32 13       	cpse	r19, r18
    17b8:	e8 82       	st	Y, r14
					prevBatVoltage = PowerStatus.battery_voltage;
    17ba:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <prevBatVoltage.2754+0x1>
    17be:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <prevBatVoltage.2754>
					prevAcPowerStatus = PowerStatus.ac_power_PowerStatus;
    17c2:	f4 01       	movw	r30, r8
    17c4:	81 81       	ldd	r24, Z+1	; 0x01
    17c6:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <prevAcPowerStatus.2755>
			
					break;	
    17ca:	6d cf       	rjmp	.-294    	; 0x16a6 <main+0x8c>
					
				case PROFILE_SCREEN:
					if (encoderState == CW) {
    17cc:	11 30       	cpi	r17, 0x01	; 1
    17ce:	21 f4       	brne	.+8      	; 0x17d8 <main+0x1be>
						display.mainScreen = LCD_SCREEN;
    17d0:	85 e0       	ldi	r24, 0x05	; 5
    17d2:	89 83       	std	Y+1, r24	; 0x01
						display.stateChanged = true;
    17d4:	e8 82       	st	Y, r14
    17d6:	67 cf       	rjmp	.-306    	; 0x16a6 <main+0x8c>
					}
					
					else if (encoderState == CCW) {
    17d8:	12 30       	cpi	r17, 0x02	; 2
    17da:	21 f4       	brne	.+8      	; 0x17e4 <main+0x1ca>
						display.mainScreen = LCD_SCREEN;
    17dc:	85 e0       	ldi	r24, 0x05	; 5
    17de:	89 83       	std	Y+1, r24	; 0x01
						display.stateChanged = true;
    17e0:	e8 82       	st	Y, r14
    17e2:	61 cf       	rjmp	.-318    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    17e4:	ff 20       	and	r15, r15
    17e6:	09 f4       	brne	.+2      	; 0x17ea <main+0x1d0>
    17e8:	5e cf       	rjmp	.-324    	; 0x16a6 <main+0x8c>
						displayPointerActivated = true;
    17ea:	e0 92 4a 02 	sts	0x024A, r14	; 0x80024a <displayPointerActivated.2751>
						displayPointer = PTR_SAVE_PROF;
    17ee:	8c e0       	ldi	r24, 0x0C	; 12
    17f0:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    17f4:	e8 82       	st	Y, r14
    17f6:	57 cf       	rjmp	.-338    	; 0x16a6 <main+0x8c>
					}
					
					break;		
							
				case LCD_SCREEN:
					if (encoderState == CW) {
    17f8:	11 30       	cpi	r17, 0x01	; 1
    17fa:	21 f4       	brne	.+8      	; 0x1804 <main+0x1ea>
						display.mainScreen = PROFILE_SCREEN;
    17fc:	84 e0       	ldi	r24, 0x04	; 4
    17fe:	89 83       	std	Y+1, r24	; 0x01
						display.stateChanged = true;
    1800:	e8 82       	st	Y, r14
    1802:	51 cf       	rjmp	.-350    	; 0x16a6 <main+0x8c>
					}
					
					else if (encoderState == CCW) {
    1804:	12 30       	cpi	r17, 0x02	; 2
    1806:	21 f4       	brne	.+8      	; 0x1810 <main+0x1f6>
						display.mainScreen = PROFILE_SCREEN;
    1808:	84 e0       	ldi	r24, 0x04	; 4
    180a:	89 83       	std	Y+1, r24	; 0x01
						display.stateChanged = true;
    180c:	e8 82       	st	Y, r14
    180e:	4b cf       	rjmp	.-362    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    1810:	ff 20       	and	r15, r15
    1812:	09 f4       	brne	.+2      	; 0x1816 <main+0x1fc>
    1814:	48 cf       	rjmp	.-368    	; 0x16a6 <main+0x8c>
						displayPointerActivated = true;
    1816:	e0 92 4a 02 	sts	0x024A, r14	; 0x80024a <displayPointerActivated.2751>
						displayPointer = PTR_BRIGHT;
    181a:	fe e0       	ldi	r31, 0x0E	; 14
    181c:	f0 93 49 02 	sts	0x0249, r31	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1820:	e8 82       	st	Y, r14
    1822:	41 cf       	rjmp	.-382    	; 0x16a6 <main+0x8c>
						
				default: break;
				
			}
		}
		else if (displayPointerActivated && !parameterSelectionActivated) { 
    1824:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <parameterSelectionActivated.2750>
    1828:	81 11       	cpse	r24, r1
    182a:	9c c5       	rjmp	.+2872   	; 0x2364 <main+0xd4a>
			switch(displayPointer) {
    182c:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <displayPointer.2749>
    1830:	8e 2f       	mov	r24, r30
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	fc 01       	movw	r30, r24
    1836:	31 97       	sbiw	r30, 0x01	; 1
    1838:	ef 30       	cpi	r30, 0x0F	; 15
    183a:	f1 05       	cpc	r31, r1
    183c:	08 f0       	brcs	.+2      	; 0x1840 <main+0x226>
    183e:	33 cf       	rjmp	.-410    	; 0x16a6 <main+0x8c>
    1840:	e6 5b       	subi	r30, 0xB6	; 182
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__tablejump2__>
				case PTR_NULL: break;
				/* Channel A Block */
				case PTR_TYPE_A: 
					if (encoderState == CW) {
    1848:	11 30       	cpi	r17, 0x01	; 1
    184a:	29 f4       	brne	.+10     	; 0x1856 <main+0x23c>
						displayPointer = PTR_AMP_A;
    184c:	85 e0       	ldi	r24, 0x05	; 5
    184e:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1852:	e8 82       	st	Y, r14
    1854:	28 cf       	rjmp	.-432    	; 0x16a6 <main+0x8c>
					}
					else if (encoderState == CCW) {
    1856:	12 30       	cpi	r17, 0x02	; 2
    1858:	29 f4       	brne	.+10     	; 0x1864 <main+0x24a>
						displayPointer = PTR_BIAS_A;
    185a:	84 e0       	ldi	r24, 0x04	; 4
    185c:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1860:	e8 82       	st	Y, r14
    1862:	21 cf       	rjmp	.-446    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    1864:	ff 20       	and	r15, r15
    1866:	09 f4       	brne	.+2      	; 0x186a <main+0x250>
    1868:	1e cf       	rjmp	.-452    	; 0x16a6 <main+0x8c>
						displayPointerActivated = false;
    186a:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						parameterSelectionActivated = true;
    186e:	e0 92 4b 02 	sts	0x024B, r14	; 0x80024b <parameterSelectionActivated.2750>
						display.stateChanged = true;
    1872:	e8 82       	st	Y, r14
    1874:	18 cf       	rjmp	.-464    	; 0x16a6 <main+0x8c>
					}
					break;
				case PTR_AMP_A:
					if (encoderState == CW) {
    1876:	11 30       	cpi	r17, 0x01	; 1
    1878:	29 f4       	brne	.+10     	; 0x1884 <main+0x26a>
						displayPointer = PTR_FREQ_A;
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1880:	e8 82       	st	Y, r14
    1882:	11 cf       	rjmp	.-478    	; 0x16a6 <main+0x8c>
					}
					else if (encoderState == CCW) {
    1884:	12 30       	cpi	r17, 0x02	; 2
    1886:	21 f4       	brne	.+8      	; 0x1890 <main+0x276>
						displayPointer = PTR_TYPE_A;
    1888:	30 92 49 02 	sts	0x0249, r3	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    188c:	e8 82       	st	Y, r14
    188e:	0b cf       	rjmp	.-490    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    1890:	ff 20       	and	r15, r15
    1892:	09 f4       	brne	.+2      	; 0x1896 <main+0x27c>
    1894:	08 cf       	rjmp	.-496    	; 0x16a6 <main+0x8c>
						displayPointerActivated = false;
    1896:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						parameterSelectionActivated = true;
    189a:	e0 92 4b 02 	sts	0x024B, r14	; 0x80024b <parameterSelectionActivated.2750>
						display.stateChanged = true;
    189e:	e8 82       	st	Y, r14
    18a0:	02 cf       	rjmp	.-508    	; 0x16a6 <main+0x8c>
					}
					break;
				case PTR_FREQ_A:
					if (encoderState == CW) {
    18a2:	11 30       	cpi	r17, 0x01	; 1
    18a4:	29 f4       	brne	.+10     	; 0x18b0 <main+0x296>
						displayPointer = PTR_BIAS_A;
    18a6:	84 e0       	ldi	r24, 0x04	; 4
    18a8:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    18ac:	e8 82       	st	Y, r14
    18ae:	fb ce       	rjmp	.-522    	; 0x16a6 <main+0x8c>
					}
					else if (encoderState == CCW) {
    18b0:	12 30       	cpi	r17, 0x02	; 2
    18b2:	29 f4       	brne	.+10     	; 0x18be <main+0x2a4>
						displayPointer = PTR_AMP_A;
    18b4:	85 e0       	ldi	r24, 0x05	; 5
    18b6:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    18ba:	e8 82       	st	Y, r14
    18bc:	f4 ce       	rjmp	.-536    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    18be:	ff 20       	and	r15, r15
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <main+0x2aa>
    18c2:	f1 ce       	rjmp	.-542    	; 0x16a6 <main+0x8c>
						displayPointerActivated = false;
    18c4:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						parameterSelectionActivated = true;
    18c8:	e0 92 4b 02 	sts	0x024B, r14	; 0x80024b <parameterSelectionActivated.2750>
						display.stateChanged = true;
    18cc:	e8 82       	st	Y, r14
    18ce:	eb ce       	rjmp	.-554    	; 0x16a6 <main+0x8c>
					}
					break;
				case PTR_BIAS_A:
					if (encoderState == CW) {
    18d0:	11 30       	cpi	r17, 0x01	; 1
    18d2:	21 f4       	brne	.+8      	; 0x18dc <main+0x2c2>
						displayPointer = PTR_TYPE_A;
    18d4:	30 92 49 02 	sts	0x0249, r3	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    18d8:	e8 82       	st	Y, r14
    18da:	e5 ce       	rjmp	.-566    	; 0x16a6 <main+0x8c>
					}
					else if (encoderState == CCW) {
    18dc:	12 30       	cpi	r17, 0x02	; 2
    18de:	29 f4       	brne	.+10     	; 0x18ea <main+0x2d0>
						displayPointer = PTR_FREQ_A;
    18e0:	83 e0       	ldi	r24, 0x03	; 3
    18e2:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    18e6:	e8 82       	st	Y, r14
    18e8:	de ce       	rjmp	.-580    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    18ea:	ff 20       	and	r15, r15
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <main+0x2d6>
    18ee:	db ce       	rjmp	.-586    	; 0x16a6 <main+0x8c>
						displayPointerActivated = false;
    18f0:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						parameterSelectionActivated = true;
    18f4:	e0 92 4b 02 	sts	0x024B, r14	; 0x80024b <parameterSelectionActivated.2750>
						display.stateChanged = true;
    18f8:	e8 82       	st	Y, r14
    18fa:	d5 ce       	rjmp	.-598    	; 0x16a6 <main+0x8c>
					}
					break;
				/* Channel B Block */
				case PTR_TYPE_B:
					if (encoderState == CW) {
    18fc:	11 30       	cpi	r17, 0x01	; 1
    18fe:	29 f4       	brne	.+10     	; 0x190a <main+0x2f0>
						displayPointer = PTR_AMP_B;
    1900:	89 e0       	ldi	r24, 0x09	; 9
    1902:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1906:	e8 82       	st	Y, r14
    1908:	ce ce       	rjmp	.-612    	; 0x16a6 <main+0x8c>
					}
					else if (encoderState == CCW) {
    190a:	12 30       	cpi	r17, 0x02	; 2
    190c:	29 f4       	brne	.+10     	; 0x1918 <main+0x2fe>
						displayPointer = PTR_BIAS_B;
    190e:	88 e0       	ldi	r24, 0x08	; 8
    1910:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1914:	e8 82       	st	Y, r14
    1916:	c7 ce       	rjmp	.-626    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    1918:	ff 20       	and	r15, r15
    191a:	09 f4       	brne	.+2      	; 0x191e <main+0x304>
    191c:	c4 ce       	rjmp	.-632    	; 0x16a6 <main+0x8c>
						displayPointerActivated = false;
    191e:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						parameterSelectionActivated = true;
    1922:	e0 92 4b 02 	sts	0x024B, r14	; 0x80024b <parameterSelectionActivated.2750>
						display.stateChanged = true;
    1926:	e8 82       	st	Y, r14
    1928:	be ce       	rjmp	.-644    	; 0x16a6 <main+0x8c>
					}
					break;
				case PTR_AMP_B:
					if (encoderState == CW) {
    192a:	11 30       	cpi	r17, 0x01	; 1
    192c:	29 f4       	brne	.+10     	; 0x1938 <main+0x31e>
						displayPointer = PTR_FREQ_B;
    192e:	87 e0       	ldi	r24, 0x07	; 7
    1930:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1934:	e8 82       	st	Y, r14
    1936:	b7 ce       	rjmp	.-658    	; 0x16a6 <main+0x8c>
					}
					else if (encoderState == CCW) {
    1938:	12 30       	cpi	r17, 0x02	; 2
    193a:	29 f4       	brne	.+10     	; 0x1946 <main+0x32c>
						displayPointer = PTR_TYPE_B;
    193c:	86 e0       	ldi	r24, 0x06	; 6
    193e:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1942:	e8 82       	st	Y, r14
    1944:	b0 ce       	rjmp	.-672    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    1946:	ff 20       	and	r15, r15
    1948:	09 f4       	brne	.+2      	; 0x194c <main+0x332>
    194a:	ad ce       	rjmp	.-678    	; 0x16a6 <main+0x8c>
						displayPointerActivated = false;
    194c:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						parameterSelectionActivated = true;
    1950:	e0 92 4b 02 	sts	0x024B, r14	; 0x80024b <parameterSelectionActivated.2750>
						display.stateChanged = true;
    1954:	e8 82       	st	Y, r14
    1956:	a7 ce       	rjmp	.-690    	; 0x16a6 <main+0x8c>
					}
					break;
				case PTR_FREQ_B:
					if (encoderState == CW) {
    1958:	11 30       	cpi	r17, 0x01	; 1
    195a:	29 f4       	brne	.+10     	; 0x1966 <main+0x34c>
						displayPointer = PTR_BIAS_B;
    195c:	88 e0       	ldi	r24, 0x08	; 8
    195e:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1962:	e8 82       	st	Y, r14
    1964:	a0 ce       	rjmp	.-704    	; 0x16a6 <main+0x8c>
					}
					else if (encoderState == CCW) {
    1966:	12 30       	cpi	r17, 0x02	; 2
    1968:	29 f4       	brne	.+10     	; 0x1974 <main+0x35a>
						displayPointer = PTR_AMP_B;
    196a:	89 e0       	ldi	r24, 0x09	; 9
    196c:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1970:	e8 82       	st	Y, r14
    1972:	99 ce       	rjmp	.-718    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    1974:	ff 20       	and	r15, r15
    1976:	09 f4       	brne	.+2      	; 0x197a <main+0x360>
    1978:	96 ce       	rjmp	.-724    	; 0x16a6 <main+0x8c>
						displayPointerActivated = false;
    197a:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						parameterSelectionActivated = true;
    197e:	e0 92 4b 02 	sts	0x024B, r14	; 0x80024b <parameterSelectionActivated.2750>
						display.stateChanged = true;
    1982:	e8 82       	st	Y, r14
    1984:	90 ce       	rjmp	.-736    	; 0x16a6 <main+0x8c>
					}
					break;
				case PTR_BIAS_B:
					if (encoderState == CW) {
    1986:	11 30       	cpi	r17, 0x01	; 1
    1988:	29 f4       	brne	.+10     	; 0x1994 <main+0x37a>
						displayPointer = PTR_TYPE_B;
    198a:	86 e0       	ldi	r24, 0x06	; 6
    198c:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1990:	e8 82       	st	Y, r14
    1992:	89 ce       	rjmp	.-750    	; 0x16a6 <main+0x8c>
					}
					else if (encoderState == CCW) {
    1994:	12 30       	cpi	r17, 0x02	; 2
    1996:	29 f4       	brne	.+10     	; 0x19a2 <main+0x388>
						displayPointer = PTR_FREQ_B;
    1998:	87 e0       	ldi	r24, 0x07	; 7
    199a:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    199e:	e8 82       	st	Y, r14
    19a0:	82 ce       	rjmp	.-764    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    19a2:	ff 20       	and	r15, r15
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <main+0x38e>
    19a6:	7f ce       	rjmp	.-770    	; 0x16a6 <main+0x8c>
						displayPointerActivated = false;
    19a8:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						parameterSelectionActivated = true;
    19ac:	e0 92 4b 02 	sts	0x024B, r14	; 0x80024b <parameterSelectionActivated.2750>
						display.stateChanged = true;
    19b0:	e8 82       	st	Y, r14
    19b2:	79 ce       	rjmp	.-782    	; 0x16a6 <main+0x8c>
					}
					break;
				case PTR_SETT:
					if (encoderState == CW) {
    19b4:	11 30       	cpi	r17, 0x01	; 1
    19b6:	29 f4       	brne	.+10     	; 0x19c2 <main+0x3a8>
						displayPointer = PTR_SHUTDOWN;
    19b8:	8b e0       	ldi	r24, 0x0B	; 11
    19ba:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    19be:	e8 82       	st	Y, r14
    19c0:	72 ce       	rjmp	.-796    	; 0x16a6 <main+0x8c>
					}
					else if (encoderState == CCW) {
    19c2:	12 30       	cpi	r17, 0x02	; 2
    19c4:	29 f4       	brne	.+10     	; 0x19d0 <main+0x3b6>
						displayPointer = PTR_SHUTDOWN;
    19c6:	8b e0       	ldi	r24, 0x0B	; 11
    19c8:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    19cc:	e8 82       	st	Y, r14
    19ce:	6b ce       	rjmp	.-810    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    19d0:	ff 20       	and	r15, r15
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <main+0x3bc>
    19d4:	68 ce       	rjmp	.-816    	; 0x16a6 <main+0x8c>
						displayPointerActivated = false;
    19d6:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						parameterSelectionActivated = false;
    19da:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
						display.mainScreen = PROFILE_SCREEN;
    19de:	84 e0       	ldi	r24, 0x04	; 4
    19e0:	89 83       	std	Y+1, r24	; 0x01
						display.stateChanged = true;
    19e2:	e8 82       	st	Y, r14
    19e4:	60 ce       	rjmp	.-832    	; 0x16a6 <main+0x8c>
					}
					break;
					
				case PTR_SAVE_PROF:
					if (encoderState == CW) {
    19e6:	11 30       	cpi	r17, 0x01	; 1
    19e8:	29 f4       	brne	.+10     	; 0x19f4 <main+0x3da>
						displayPointer = PTR_LOAD_PROF;
    19ea:	8d e0       	ldi	r24, 0x0D	; 13
    19ec:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    19f0:	e8 82       	st	Y, r14
    19f2:	59 ce       	rjmp	.-846    	; 0x16a6 <main+0x8c>
					}
					else if (encoderState == CCW) {
    19f4:	12 30       	cpi	r17, 0x02	; 2
    19f6:	21 f4       	brne	.+8      	; 0x1a00 <main+0x3e6>
						displayPointer = PTR_BACK;
    19f8:	e0 92 49 02 	sts	0x0249, r14	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    19fc:	e8 82       	st	Y, r14
    19fe:	53 ce       	rjmp	.-858    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    1a00:	ff 20       	and	r15, r15
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <main+0x3ec>
    1a04:	50 ce       	rjmp	.-864    	; 0x16a6 <main+0x8c>
						parameterSelectionActivated = false;
						functionalityChanged = false;
    1a06:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
						displayPointerActivated = false;
    1a0a:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						lcdParameterChanged = false;
    1a0e:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <__data_end>
						displayPointer = PTR_NULL;
    1a12:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1a16:	e8 82       	st	Y, r14
						display.mainScreen = PARAMS_SCREEN;
    1a18:	39 82       	std	Y+1, r3	; 0x01
						EEPROM_SaveProfile();
    1a1a:	0e 94 1d 0a 	call	0x143a	; 0x143a <EEPROM_SaveProfile>
						beep();
    1a1e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <beep>
    1a22:	41 ce       	rjmp	.-894    	; 0x16a6 <main+0x8c>
					}
					break;
					
				case PTR_LOAD_PROF:
					if (encoderState == CW) {
    1a24:	11 30       	cpi	r17, 0x01	; 1
    1a26:	21 f4       	brne	.+8      	; 0x1a30 <main+0x416>
						displayPointer = PTR_BACK;
    1a28:	e0 92 49 02 	sts	0x0249, r14	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1a2c:	e8 82       	st	Y, r14
    1a2e:	3b ce       	rjmp	.-906    	; 0x16a6 <main+0x8c>
					}
					else if (encoderState == CCW) {
    1a30:	12 30       	cpi	r17, 0x02	; 2
    1a32:	29 f4       	brne	.+10     	; 0x1a3e <main+0x424>
						displayPointer = PTR_SAVE_PROF;
    1a34:	8c e0       	ldi	r24, 0x0C	; 12
    1a36:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1a3a:	e8 82       	st	Y, r14
    1a3c:	34 ce       	rjmp	.-920    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    1a3e:	ff 20       	and	r15, r15
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <main+0x42a>
    1a42:	31 ce       	rjmp	.-926    	; 0x16a6 <main+0x8c>
						parameterSelectionActivated = false;
						functionalityChanged = false;
    1a44:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
						displayPointerActivated = false;
    1a48:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						lcdParameterChanged = false;
    1a4c:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <__data_end>
						displayPointer = PTR_NULL;
    1a50:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1a54:	e8 82       	st	Y, r14
						display.mainScreen = PARAMS_SCREEN;
    1a56:	39 82       	std	Y+1, r3	; 0x01
						EEPROM_LoadProfile();
    1a58:	0e 94 8e 0a 	call	0x151c	; 0x151c <EEPROM_LoadProfile>
						beep();
    1a5c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <beep>
    1a60:	22 ce       	rjmp	.-956    	; 0x16a6 <main+0x8c>
					}
					break;			
				
				case PTR_BRIGHT:
					if (encoderState == CW) {
    1a62:	11 30       	cpi	r17, 0x01	; 1
    1a64:	29 f4       	brne	.+10     	; 0x1a70 <main+0x456>
						displayPointer = PTR_CONTR;
    1a66:	2f e0       	ldi	r18, 0x0F	; 15
    1a68:	20 93 49 02 	sts	0x0249, r18	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1a6c:	e8 82       	st	Y, r14
    1a6e:	1b ce       	rjmp	.-970    	; 0x16a6 <main+0x8c>
					}
					else if (encoderState == CCW) {
    1a70:	12 30       	cpi	r17, 0x02	; 2
    1a72:	21 f4       	brne	.+8      	; 0x1a7c <main+0x462>
						displayPointer = PTR_BACK;
    1a74:	e0 92 49 02 	sts	0x0249, r14	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1a78:	e8 82       	st	Y, r14
    1a7a:	15 ce       	rjmp	.-982    	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    1a7c:	ff 20       	and	r15, r15
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <main+0x468>
    1a80:	12 ce       	rjmp	.-988    	; 0x16a6 <main+0x8c>
						displayPointerActivated = false;
    1a82:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						parameterSelectionActivated = false;
    1a86:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
						display.stateChanged = true;
    1a8a:	e8 82       	st	Y, r14
						lcdParameterChanged = true;
    1a8c:	e0 92 44 02 	sts	0x0244, r14	; 0x800244 <__data_end>
    1a90:	0a ce       	rjmp	.-1004   	; 0x16a6 <main+0x8c>
					}
					break;
				
				case PTR_CONTR:
					if (encoderState == CW) {
    1a92:	11 30       	cpi	r17, 0x01	; 1
    1a94:	21 f4       	brne	.+8      	; 0x1a9e <main+0x484>
						displayPointer = PTR_BACK;
    1a96:	e0 92 49 02 	sts	0x0249, r14	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1a9a:	e8 82       	st	Y, r14
    1a9c:	04 ce       	rjmp	.-1016   	; 0x16a6 <main+0x8c>
					}
					else if (encoderState == CCW) {
    1a9e:	12 30       	cpi	r17, 0x02	; 2
    1aa0:	29 f4       	brne	.+10     	; 0x1aac <main+0x492>
						displayPointer = PTR_BRIGHT;
    1aa2:	8e e0       	ldi	r24, 0x0E	; 14
    1aa4:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1aa8:	e8 82       	st	Y, r14
    1aaa:	fd cd       	rjmp	.-1030   	; 0x16a6 <main+0x8c>
					}
					else if (switchState) {
    1aac:	ff 20       	and	r15, r15
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <main+0x498>
    1ab0:	fa cd       	rjmp	.-1036   	; 0x16a6 <main+0x8c>
						displayPointerActivated = false;
    1ab2:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						parameterSelectionActivated = false;
    1ab6:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
						display.stateChanged = true;
    1aba:	e8 82       	st	Y, r14
						lcdParameterChanged = true;
    1abc:	e0 92 44 02 	sts	0x0244, r14	; 0x800244 <__data_end>
    1ac0:	f2 cd       	rjmp	.-1052   	; 0x16a6 <main+0x8c>
					}
					break;
												
				case PTR_SHUTDOWN:
					if (encoderState == CW) {
    1ac2:	11 30       	cpi	r17, 0x01	; 1
    1ac4:	21 f4       	brne	.+8      	; 0x1ace <main+0x4b4>
						displayPointer = PTR_SETT;
    1ac6:	20 92 49 02 	sts	0x0249, r2	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1aca:	e8 82       	st	Y, r14
    1acc:	ec cd       	rjmp	.-1064   	; 0x16a6 <main+0x8c>
					}
					else if (encoderState == CCW) {
    1ace:	12 30       	cpi	r17, 0x02	; 2
    1ad0:	21 f4       	brne	.+8      	; 0x1ada <main+0x4c0>
						displayPointer = PTR_SETT;
    1ad2:	20 92 49 02 	sts	0x0249, r2	; 0x800249 <displayPointer.2749>
						display.stateChanged = true;
    1ad6:	e8 82       	st	Y, r14
    1ad8:	e6 cd       	rjmp	.-1076   	; 0x16a6 <main+0x8c>
					}
					else if (switchState) shutdownSequence(false);
    1ada:	ff 20       	and	r15, r15
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <main+0x4c6>
    1ade:	e3 cd       	rjmp	.-1082   	; 0x16a6 <main+0x8c>
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <shutdownSequence>
    1ae6:	df cd       	rjmp	.-1090   	; 0x16a6 <main+0x8c>
					break;
					
				case PTR_BACK: 
					parameterSelectionActivated = false;
					functionalityChanged = false;
    1ae8:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
					displayPointerActivated = false;
    1aec:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
					lcdParameterChanged = false;
    1af0:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <__data_end>
					displayPointer = PTR_NULL;
    1af4:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
					display.stateChanged = true;
    1af8:	e8 82       	st	Y, r14
					display.mainScreen = PARAMS_SCREEN;
    1afa:	39 82       	std	Y+1, r3	; 0x01
					break;
    1afc:	d4 cd       	rjmp	.-1112   	; 0x16a6 <main+0x8c>
					
				default: break;
			}
		}
		else if (!displayPointerActivated && parameterSelectionActivated) {
			switch(displayPointer) {
    1afe:	e0 91 49 02 	lds	r30, 0x0249	; 0x800249 <displayPointer.2749>
    1b02:	8e 2f       	mov	r24, r30
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	fc 01       	movw	r30, r24
    1b08:	31 97       	sbiw	r30, 0x01	; 1
    1b0a:	e9 30       	cpi	r30, 0x09	; 9
    1b0c:	f1 05       	cpc	r31, r1
    1b0e:	08 f0       	brcs	.+2      	; 0x1b12 <main+0x4f8>
    1b10:	ca cd       	rjmp	.-1132   	; 0x16a6 <main+0x8c>
    1b12:	e7 5a       	subi	r30, 0xA7	; 167
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__tablejump2__>
				
				case PTR_NULL: break;
				
				case PTR_TYPE_A:
				if (encoderState == CW) {
    1b1a:	11 30       	cpi	r17, 0x01	; 1
    1b1c:	09 f5       	brne	.+66     	; 0x1b60 <main+0x546>
					display.stateChanged = true;
    1b1e:	e8 82       	st	Y, r14
					functionalityChanged = true;
    1b20:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					switch(FunctionGenerator.output_type_A) {
    1b24:	f6 01       	movw	r30, r12
    1b26:	84 85       	ldd	r24, Z+12	; 0x0c
    1b28:	82 30       	cpi	r24, 0x02	; 2
    1b2a:	71 f0       	breq	.+28     	; 0x1b48 <main+0x52e>
    1b2c:	18 f4       	brcc	.+6      	; 0x1b34 <main+0x51a>
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	41 f0       	breq	.+16     	; 0x1b42 <main+0x528>
    1b32:	12 c0       	rjmp	.+36     	; 0x1b58 <main+0x53e>
    1b34:	83 30       	cpi	r24, 0x03	; 3
    1b36:	61 f0       	breq	.+24     	; 0x1b50 <main+0x536>
    1b38:	85 30       	cpi	r24, 0x05	; 5
    1b3a:	71 f4       	brne	.+28     	; 0x1b58 <main+0x53e>
						case OFF: FunctionGenerator.output_type_A = SINE; break;
    1b3c:	f6 01       	movw	r30, r12
    1b3e:	e4 86       	std	Z+12, r14	; 0x0c
    1b40:	b2 cd       	rjmp	.-1180   	; 0x16a6 <main+0x8c>
						case SINE: FunctionGenerator.output_type_A = TRIANGLE; break;
    1b42:	f6 01       	movw	r30, r12
    1b44:	34 86       	std	Z+12, r3	; 0x0c
    1b46:	af cd       	rjmp	.-1186   	; 0x16a6 <main+0x8c>
						case TRIANGLE: FunctionGenerator.output_type_A = SQUARE; break;
    1b48:	83 e0       	ldi	r24, 0x03	; 3
    1b4a:	f6 01       	movw	r30, r12
    1b4c:	84 87       	std	Z+12, r24	; 0x0c
    1b4e:	ab cd       	rjmp	.-1194   	; 0x16a6 <main+0x8c>
						case SQUARE: FunctionGenerator.output_type_A = DC; break;
    1b50:	84 e0       	ldi	r24, 0x04	; 4
    1b52:	f6 01       	movw	r30, r12
    1b54:	84 87       	std	Z+12, r24	; 0x0c
    1b56:	a7 cd       	rjmp	.-1202   	; 0x16a6 <main+0x8c>
						case DC: default: FunctionGenerator.output_type_A = OFF; break;
    1b58:	85 e0       	ldi	r24, 0x05	; 5
    1b5a:	f6 01       	movw	r30, r12
    1b5c:	84 87       	std	Z+12, r24	; 0x0c
    1b5e:	a3 cd       	rjmp	.-1210   	; 0x16a6 <main+0x8c>
					}
				}
				else if (encoderState == CCW) {
    1b60:	12 30       	cpi	r17, 0x02	; 2
    1b62:	09 f5       	brne	.+66     	; 0x1ba6 <main+0x58c>
					display.stateChanged = true;
    1b64:	e8 82       	st	Y, r14
					functionalityChanged = true;
    1b66:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					switch(FunctionGenerator.output_type_A) {
    1b6a:	f6 01       	movw	r30, r12
    1b6c:	84 85       	ldd	r24, Z+12	; 0x0c
    1b6e:	82 30       	cpi	r24, 0x02	; 2
    1b70:	81 f0       	breq	.+32     	; 0x1b92 <main+0x578>
    1b72:	18 f4       	brcc	.+6      	; 0x1b7a <main+0x560>
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	49 f0       	breq	.+18     	; 0x1b8a <main+0x570>
    1b78:	12 c0       	rjmp	.+36     	; 0x1b9e <main+0x584>
    1b7a:	83 30       	cpi	r24, 0x03	; 3
    1b7c:	69 f0       	breq	.+26     	; 0x1b98 <main+0x57e>
    1b7e:	85 30       	cpi	r24, 0x05	; 5
    1b80:	71 f4       	brne	.+28     	; 0x1b9e <main+0x584>
						case OFF: FunctionGenerator.output_type_A = DC; break;
    1b82:	84 e0       	ldi	r24, 0x04	; 4
    1b84:	f6 01       	movw	r30, r12
    1b86:	84 87       	std	Z+12, r24	; 0x0c
    1b88:	8e cd       	rjmp	.-1252   	; 0x16a6 <main+0x8c>
						case SINE: FunctionGenerator.output_type_A = OFF; break;
    1b8a:	85 e0       	ldi	r24, 0x05	; 5
    1b8c:	f6 01       	movw	r30, r12
    1b8e:	84 87       	std	Z+12, r24	; 0x0c
    1b90:	8a cd       	rjmp	.-1260   	; 0x16a6 <main+0x8c>
						case TRIANGLE: FunctionGenerator.output_type_A = SINE; break;
    1b92:	f6 01       	movw	r30, r12
    1b94:	e4 86       	std	Z+12, r14	; 0x0c
    1b96:	87 cd       	rjmp	.-1266   	; 0x16a6 <main+0x8c>
						case SQUARE: FunctionGenerator.output_type_A = TRIANGLE; break;
    1b98:	f6 01       	movw	r30, r12
    1b9a:	34 86       	std	Z+12, r3	; 0x0c
    1b9c:	84 cd       	rjmp	.-1272   	; 0x16a6 <main+0x8c>
						case DC: default: FunctionGenerator.output_type_A = SQUARE; break;
    1b9e:	83 e0       	ldi	r24, 0x03	; 3
    1ba0:	f6 01       	movw	r30, r12
    1ba2:	84 87       	std	Z+12, r24	; 0x0c
    1ba4:	80 cd       	rjmp	.-1280   	; 0x16a6 <main+0x8c>
					}
				}
				
				else if (switchState) {
    1ba6:	ff 20       	and	r15, r15
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <main+0x592>
    1baa:	7d cd       	rjmp	.-1286   	; 0x16a6 <main+0x8c>
					parameterSelectionActivated = false;
    1bac:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
					functionalityChanged = false;
    1bb0:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
					displayPointerActivated = false;
    1bb4:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
					display.stateChanged = true;
    1bb8:	e8 82       	st	Y, r14
					displayPointer = PTR_NULL;
    1bba:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
    1bbe:	73 cd       	rjmp	.-1306   	; 0x16a6 <main+0x8c>
				}
				
				break;
				
				case PTR_AMP_A:
				if (encoderState == CW) {
    1bc0:	11 30       	cpi	r17, 0x01	; 1
    1bc2:	f9 f4       	brne	.+62     	; 0x1c02 <main+0x5e8>
					display.stateChanged = true;
    1bc4:	e8 82       	st	Y, r14
					functionalityChanged = true;
    1bc6:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					if (FunctionGenerator.amplitude_A >= 70) FunctionGenerator.amplitude_A = 70;
    1bca:	f6 01       	movw	r30, r12
    1bcc:	80 85       	ldd	r24, Z+8	; 0x08
    1bce:	91 85       	ldd	r25, Z+9	; 0x09
    1bd0:	86 34       	cpi	r24, 0x46	; 70
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	28 f0       	brcs	.+10     	; 0x1be0 <main+0x5c6>
    1bd6:	86 e4       	ldi	r24, 0x46	; 70
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	91 87       	std	Z+9, r25	; 0x09
    1bdc:	80 87       	std	Z+8, r24	; 0x08
    1bde:	63 cd       	rjmp	.-1338   	; 0x16a6 <main+0x8c>
					else {
						switch(buttonPressCounter) {
    1be0:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <buttonPressCounter.2753>
    1be4:	22 23       	and	r18, r18
    1be6:	19 f0       	breq	.+6      	; 0x1bee <main+0x5d4>
    1be8:	21 30       	cpi	r18, 0x01	; 1
    1bea:	31 f0       	breq	.+12     	; 0x1bf8 <main+0x5de>
    1bec:	5c cd       	rjmp	.-1352   	; 0x16a6 <main+0x8c>
							case 0: FunctionGenerator.amplitude_A++; break;
    1bee:	01 96       	adiw	r24, 0x01	; 1
    1bf0:	f6 01       	movw	r30, r12
    1bf2:	91 87       	std	Z+9, r25	; 0x09
    1bf4:	80 87       	std	Z+8, r24	; 0x08
    1bf6:	57 cd       	rjmp	.-1362   	; 0x16a6 <main+0x8c>
							case 1: FunctionGenerator.amplitude_A += 10; break;
    1bf8:	0a 96       	adiw	r24, 0x0a	; 10
    1bfa:	f6 01       	movw	r30, r12
    1bfc:	91 87       	std	Z+9, r25	; 0x09
    1bfe:	80 87       	std	Z+8, r24	; 0x08
    1c00:	52 cd       	rjmp	.-1372   	; 0x16a6 <main+0x8c>
						}
					}
				}
				else if (encoderState == CCW) {
    1c02:	12 30       	cpi	r17, 0x02	; 2
    1c04:	d1 f4       	brne	.+52     	; 0x1c3a <main+0x620>
					display.stateChanged = true;
    1c06:	e8 82       	st	Y, r14
					functionalityChanged = true;
    1c08:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					if (FunctionGenerator.amplitude_A <= 0) FunctionGenerator.amplitude_A = 0;
    1c0c:	f6 01       	movw	r30, r12
    1c0e:	80 85       	ldd	r24, Z+8	; 0x08
    1c10:	91 85       	ldd	r25, Z+9	; 0x09
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <main+0x5fe>
    1c16:	47 cd       	rjmp	.-1394   	; 0x16a6 <main+0x8c>
					else {
						switch(buttonPressCounter) {
    1c18:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <buttonPressCounter.2753>
    1c1c:	22 23       	and	r18, r18
    1c1e:	19 f0       	breq	.+6      	; 0x1c26 <main+0x60c>
    1c20:	21 30       	cpi	r18, 0x01	; 1
    1c22:	31 f0       	breq	.+12     	; 0x1c30 <main+0x616>
    1c24:	40 cd       	rjmp	.-1408   	; 0x16a6 <main+0x8c>
							case 0: FunctionGenerator.amplitude_A--; break;
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f6 01       	movw	r30, r12
    1c2a:	91 87       	std	Z+9, r25	; 0x09
    1c2c:	80 87       	std	Z+8, r24	; 0x08
    1c2e:	3b cd       	rjmp	.-1418   	; 0x16a6 <main+0x8c>
							case 1: FunctionGenerator.amplitude_A -= 10; break;
    1c30:	0a 97       	sbiw	r24, 0x0a	; 10
    1c32:	f6 01       	movw	r30, r12
    1c34:	91 87       	std	Z+9, r25	; 0x09
    1c36:	80 87       	std	Z+8, r24	; 0x08
    1c38:	36 cd       	rjmp	.-1428   	; 0x16a6 <main+0x8c>
						}
					}
				}
				
				else if (switchState) {
    1c3a:	ff 20       	and	r15, r15
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <main+0x626>
    1c3e:	33 cd       	rjmp	.-1434   	; 0x16a6 <main+0x8c>
					if (buttonPressCounter < 1) buttonPressCounter++;
    1c40:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <buttonPressCounter.2753>
    1c44:	81 11       	cpse	r24, r1
    1c46:	03 c0       	rjmp	.+6      	; 0x1c4e <main+0x634>
    1c48:	e0 92 4d 02 	sts	0x024D, r14	; 0x80024d <buttonPressCounter.2753>
    1c4c:	0a c0       	rjmp	.+20     	; 0x1c62 <main+0x648>
					else {
						buttonPressCounter = 0;
    1c4e:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <buttonPressCounter.2753>
						parameterSelectionActivated = false;
    1c52:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
						functionalityChanged = false;
    1c56:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
						displayPointerActivated = false;
    1c5a:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						displayPointer = PTR_NULL;
    1c5e:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
					}
					display.stateChanged = true;
    1c62:	e8 82       	st	Y, r14
    1c64:	20 cd       	rjmp	.-1472   	; 0x16a6 <main+0x8c>
				}
				break;

				case PTR_FREQ_A:
				if (encoderState == CW) {
    1c66:	11 30       	cpi	r17, 0x01	; 1
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <main+0x652>
    1c6a:	5f c0       	rjmp	.+190    	; 0x1d2a <main+0x710>
					display.stateChanged = true;
    1c6c:	e8 82       	st	Y, r14
					functionalityChanged = true;
    1c6e:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					if (FunctionGenerator.frequency_A >= 1000000) FunctionGenerator.frequency_A = 1000000;
    1c72:	f6 01       	movw	r30, r12
    1c74:	80 81       	ld	r24, Z
    1c76:	91 81       	ldd	r25, Z+1	; 0x01
    1c78:	a2 81       	ldd	r26, Z+2	; 0x02
    1c7a:	b3 81       	ldd	r27, Z+3	; 0x03
    1c7c:	80 34       	cpi	r24, 0x40	; 64
    1c7e:	f2 e4       	ldi	r31, 0x42	; 66
    1c80:	9f 07       	cpc	r25, r31
    1c82:	ff e0       	ldi	r31, 0x0F	; 15
    1c84:	af 07       	cpc	r26, r31
    1c86:	b1 05       	cpc	r27, r1
    1c88:	30 f0       	brcs	.+12     	; 0x1c96 <main+0x67c>
    1c8a:	f6 01       	movw	r30, r12
    1c8c:	40 82       	st	Z, r4
    1c8e:	51 82       	std	Z+1, r5	; 0x01
    1c90:	62 82       	std	Z+2, r6	; 0x02
    1c92:	73 82       	std	Z+3, r7	; 0x03
    1c94:	08 cd       	rjmp	.-1520   	; 0x16a6 <main+0x8c>
					else {
						switch(buttonPressCounter) {
    1c96:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <buttonPressCounter.2753>
    1c9a:	22 30       	cpi	r18, 0x02	; 2
    1c9c:	f1 f0       	breq	.+60     	; 0x1cda <main+0x6c0>
    1c9e:	28 f4       	brcc	.+10     	; 0x1caa <main+0x690>
    1ca0:	22 23       	and	r18, r18
    1ca2:	49 f0       	breq	.+18     	; 0x1cb6 <main+0x69c>
    1ca4:	21 30       	cpi	r18, 0x01	; 1
    1ca6:	81 f0       	breq	.+32     	; 0x1cc8 <main+0x6ae>
    1ca8:	fe cc       	rjmp	.-1540   	; 0x16a6 <main+0x8c>
    1caa:	24 30       	cpi	r18, 0x04	; 4
    1cac:	51 f1       	breq	.+84     	; 0x1d02 <main+0x6e8>
    1cae:	f8 f0       	brcs	.+62     	; 0x1cee <main+0x6d4>
    1cb0:	25 30       	cpi	r18, 0x05	; 5
    1cb2:	89 f1       	breq	.+98     	; 0x1d16 <main+0x6fc>
    1cb4:	f8 cc       	rjmp	.-1552   	; 0x16a6 <main+0x8c>
							case 0: FunctionGenerator.frequency_A++; break;
    1cb6:	01 96       	adiw	r24, 0x01	; 1
    1cb8:	a1 1d       	adc	r26, r1
    1cba:	b1 1d       	adc	r27, r1
    1cbc:	f6 01       	movw	r30, r12
    1cbe:	80 83       	st	Z, r24
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	a2 83       	std	Z+2, r26	; 0x02
    1cc4:	b3 83       	std	Z+3, r27	; 0x03
    1cc6:	ef cc       	rjmp	.-1570   	; 0x16a6 <main+0x8c>
							case 1: FunctionGenerator.frequency_A += 10; break;
    1cc8:	0a 96       	adiw	r24, 0x0a	; 10
    1cca:	a1 1d       	adc	r26, r1
    1ccc:	b1 1d       	adc	r27, r1
    1cce:	f6 01       	movw	r30, r12
    1cd0:	80 83       	st	Z, r24
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	a2 83       	std	Z+2, r26	; 0x02
    1cd6:	b3 83       	std	Z+3, r27	; 0x03
    1cd8:	e6 cc       	rjmp	.-1588   	; 0x16a6 <main+0x8c>
							case 2: FunctionGenerator.frequency_A += 100; break;
    1cda:	8c 59       	subi	r24, 0x9C	; 156
    1cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cde:	af 4f       	sbci	r26, 0xFF	; 255
    1ce0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce2:	f6 01       	movw	r30, r12
    1ce4:	80 83       	st	Z, r24
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	a2 83       	std	Z+2, r26	; 0x02
    1cea:	b3 83       	std	Z+3, r27	; 0x03
    1cec:	dc cc       	rjmp	.-1608   	; 0x16a6 <main+0x8c>
							case 3: FunctionGenerator.frequency_A += 1000; break;
    1cee:	88 51       	subi	r24, 0x18	; 24
    1cf0:	9c 4f       	sbci	r25, 0xFC	; 252
    1cf2:	af 4f       	sbci	r26, 0xFF	; 255
    1cf4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf6:	f6 01       	movw	r30, r12
    1cf8:	80 83       	st	Z, r24
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	a2 83       	std	Z+2, r26	; 0x02
    1cfe:	b3 83       	std	Z+3, r27	; 0x03
    1d00:	d2 cc       	rjmp	.-1628   	; 0x16a6 <main+0x8c>
							case 4: FunctionGenerator.frequency_A += 10000; break;
    1d02:	80 5f       	subi	r24, 0xF0	; 240
    1d04:	98 4d       	sbci	r25, 0xD8	; 216
    1d06:	af 4f       	sbci	r26, 0xFF	; 255
    1d08:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0a:	f6 01       	movw	r30, r12
    1d0c:	80 83       	st	Z, r24
    1d0e:	91 83       	std	Z+1, r25	; 0x01
    1d10:	a2 83       	std	Z+2, r26	; 0x02
    1d12:	b3 83       	std	Z+3, r27	; 0x03
    1d14:	c8 cc       	rjmp	.-1648   	; 0x16a6 <main+0x8c>
							case 5: FunctionGenerator.frequency_A += 100000; break;
    1d16:	80 56       	subi	r24, 0x60	; 96
    1d18:	99 47       	sbci	r25, 0x79	; 121
    1d1a:	ae 4f       	sbci	r26, 0xFE	; 254
    1d1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d1e:	f6 01       	movw	r30, r12
    1d20:	80 83       	st	Z, r24
    1d22:	91 83       	std	Z+1, r25	; 0x01
    1d24:	a2 83       	std	Z+2, r26	; 0x02
    1d26:	b3 83       	std	Z+3, r27	; 0x03
    1d28:	be cc       	rjmp	.-1668   	; 0x16a6 <main+0x8c>
						}
					}
				}
				else if (encoderState == CCW) {
    1d2a:	12 30       	cpi	r17, 0x02	; 2
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <main+0x716>
    1d2e:	57 c0       	rjmp	.+174    	; 0x1dde <main+0x7c4>
					display.stateChanged = true;
    1d30:	e8 82       	st	Y, r14
					functionalityChanged = true;
    1d32:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					if (FunctionGenerator.frequency_A <= 0) FunctionGenerator.frequency_A = 0;
    1d36:	f6 01       	movw	r30, r12
    1d38:	80 81       	ld	r24, Z
    1d3a:	91 81       	ldd	r25, Z+1	; 0x01
    1d3c:	a2 81       	ldd	r26, Z+2	; 0x02
    1d3e:	b3 81       	ldd	r27, Z+3	; 0x03
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	a1 05       	cpc	r26, r1
    1d44:	b1 05       	cpc	r27, r1
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <main+0x730>
    1d48:	ae cc       	rjmp	.-1700   	; 0x16a6 <main+0x8c>
					else {
						switch(buttonPressCounter) {
    1d4a:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <buttonPressCounter.2753>
    1d4e:	22 30       	cpi	r18, 0x02	; 2
    1d50:	f1 f0       	breq	.+60     	; 0x1d8e <main+0x774>
    1d52:	28 f4       	brcc	.+10     	; 0x1d5e <main+0x744>
    1d54:	22 23       	and	r18, r18
    1d56:	49 f0       	breq	.+18     	; 0x1d6a <main+0x750>
    1d58:	21 30       	cpi	r18, 0x01	; 1
    1d5a:	81 f0       	breq	.+32     	; 0x1d7c <main+0x762>
    1d5c:	a4 cc       	rjmp	.-1720   	; 0x16a6 <main+0x8c>
    1d5e:	24 30       	cpi	r18, 0x04	; 4
    1d60:	51 f1       	breq	.+84     	; 0x1db6 <main+0x79c>
    1d62:	f8 f0       	brcs	.+62     	; 0x1da2 <main+0x788>
    1d64:	25 30       	cpi	r18, 0x05	; 5
    1d66:	89 f1       	breq	.+98     	; 0x1dca <main+0x7b0>
    1d68:	9e cc       	rjmp	.-1732   	; 0x16a6 <main+0x8c>
							case 0: FunctionGenerator.frequency_A--; break;
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	a1 09       	sbc	r26, r1
    1d6e:	b1 09       	sbc	r27, r1
    1d70:	f6 01       	movw	r30, r12
    1d72:	80 83       	st	Z, r24
    1d74:	91 83       	std	Z+1, r25	; 0x01
    1d76:	a2 83       	std	Z+2, r26	; 0x02
    1d78:	b3 83       	std	Z+3, r27	; 0x03
    1d7a:	95 cc       	rjmp	.-1750   	; 0x16a6 <main+0x8c>
							case 1: FunctionGenerator.frequency_A -= 10; break;
    1d7c:	0a 97       	sbiw	r24, 0x0a	; 10
    1d7e:	a1 09       	sbc	r26, r1
    1d80:	b1 09       	sbc	r27, r1
    1d82:	f6 01       	movw	r30, r12
    1d84:	80 83       	st	Z, r24
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	a2 83       	std	Z+2, r26	; 0x02
    1d8a:	b3 83       	std	Z+3, r27	; 0x03
    1d8c:	8c cc       	rjmp	.-1768   	; 0x16a6 <main+0x8c>
							case 2: FunctionGenerator.frequency_A -= 100; break;
    1d8e:	84 56       	subi	r24, 0x64	; 100
    1d90:	91 09       	sbc	r25, r1
    1d92:	a1 09       	sbc	r26, r1
    1d94:	b1 09       	sbc	r27, r1
    1d96:	f6 01       	movw	r30, r12
    1d98:	80 83       	st	Z, r24
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	a2 83       	std	Z+2, r26	; 0x02
    1d9e:	b3 83       	std	Z+3, r27	; 0x03
    1da0:	82 cc       	rjmp	.-1788   	; 0x16a6 <main+0x8c>
							case 3: FunctionGenerator.frequency_A -= 1000; break;
    1da2:	88 5e       	subi	r24, 0xE8	; 232
    1da4:	93 40       	sbci	r25, 0x03	; 3
    1da6:	a1 09       	sbc	r26, r1
    1da8:	b1 09       	sbc	r27, r1
    1daa:	f6 01       	movw	r30, r12
    1dac:	80 83       	st	Z, r24
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	a2 83       	std	Z+2, r26	; 0x02
    1db2:	b3 83       	std	Z+3, r27	; 0x03
    1db4:	78 cc       	rjmp	.-1808   	; 0x16a6 <main+0x8c>
							case 4: FunctionGenerator.frequency_A -= 10000; break;
    1db6:	80 51       	subi	r24, 0x10	; 16
    1db8:	97 42       	sbci	r25, 0x27	; 39
    1dba:	a1 09       	sbc	r26, r1
    1dbc:	b1 09       	sbc	r27, r1
    1dbe:	f6 01       	movw	r30, r12
    1dc0:	80 83       	st	Z, r24
    1dc2:	91 83       	std	Z+1, r25	; 0x01
    1dc4:	a2 83       	std	Z+2, r26	; 0x02
    1dc6:	b3 83       	std	Z+3, r27	; 0x03
    1dc8:	6e cc       	rjmp	.-1828   	; 0x16a6 <main+0x8c>
							case 5: FunctionGenerator.frequency_A -= 100000; break;
    1dca:	80 5a       	subi	r24, 0xA0	; 160
    1dcc:	96 48       	sbci	r25, 0x86	; 134
    1dce:	a1 40       	sbci	r26, 0x01	; 1
    1dd0:	b1 09       	sbc	r27, r1
    1dd2:	f6 01       	movw	r30, r12
    1dd4:	80 83       	st	Z, r24
    1dd6:	91 83       	std	Z+1, r25	; 0x01
    1dd8:	a2 83       	std	Z+2, r26	; 0x02
    1dda:	b3 83       	std	Z+3, r27	; 0x03
    1ddc:	64 cc       	rjmp	.-1848   	; 0x16a6 <main+0x8c>
						}
					}
				}
				
				else if (switchState) {
    1dde:	ff 20       	and	r15, r15
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <main+0x7ca>
    1de2:	61 cc       	rjmp	.-1854   	; 0x16a6 <main+0x8c>
					if (buttonPressCounter < 5) buttonPressCounter++;
    1de4:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <buttonPressCounter.2753>
    1de8:	85 30       	cpi	r24, 0x05	; 5
    1dea:	20 f4       	brcc	.+8      	; 0x1df4 <main+0x7da>
    1dec:	8f 5f       	subi	r24, 0xFF	; 255
    1dee:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <buttonPressCounter.2753>
    1df2:	0a c0       	rjmp	.+20     	; 0x1e08 <main+0x7ee>
					else {
						buttonPressCounter = 0;
    1df4:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <buttonPressCounter.2753>
						parameterSelectionActivated = false;
    1df8:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
						functionalityChanged = false;
    1dfc:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
						displayPointerActivated = false;
    1e00:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						displayPointer = PTR_NULL;
    1e04:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
					}
					display.stateChanged = true;
    1e08:	e8 82       	st	Y, r14
    1e0a:	4d cc       	rjmp	.-1894   	; 0x16a6 <main+0x8c>
				}
				break;
				
				case PTR_BIAS_A:
				if (encoderState == CW) {
    1e0c:	11 30       	cpi	r17, 0x01	; 1
    1e0e:	71 f5       	brne	.+92     	; 0x1e6c <main+0x852>
					display.stateChanged = true;
    1e10:	e8 82       	st	Y, r14
					functionalityChanged = true;
    1e12:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					if (FunctionGenerator.bias_A_sign == POSITIVE) {
    1e16:	f6 01       	movw	r30, r12
    1e18:	82 89       	ldd	r24, Z+18	; 0x12
    1e1a:	81 11       	cpse	r24, r1
    1e1c:	24 c0       	rjmp	.+72     	; 0x1e66 <main+0x84c>
						if (FunctionGenerator.bias_A >= 330) FunctionGenerator.bias_A = 330;
    1e1e:	86 85       	ldd	r24, Z+14	; 0x0e
    1e20:	97 85       	ldd	r25, Z+15	; 0x0f
    1e22:	8a 34       	cpi	r24, 0x4A	; 74
    1e24:	f1 e0       	ldi	r31, 0x01	; 1
    1e26:	9f 07       	cpc	r25, r31
    1e28:	30 f0       	brcs	.+12     	; 0x1e36 <main+0x81c>
    1e2a:	8a e4       	ldi	r24, 0x4A	; 74
    1e2c:	91 e0       	ldi	r25, 0x01	; 1
    1e2e:	f6 01       	movw	r30, r12
    1e30:	97 87       	std	Z+15, r25	; 0x0f
    1e32:	86 87       	std	Z+14, r24	; 0x0e
    1e34:	38 cc       	rjmp	.-1936   	; 0x16a6 <main+0x8c>
						else {
							switch(buttonPressCounter) {
    1e36:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <buttonPressCounter.2753>
    1e3a:	21 30       	cpi	r18, 0x01	; 1
    1e3c:	49 f0       	breq	.+18     	; 0x1e50 <main+0x836>
    1e3e:	18 f0       	brcs	.+6      	; 0x1e46 <main+0x82c>
    1e40:	22 30       	cpi	r18, 0x02	; 2
    1e42:	59 f0       	breq	.+22     	; 0x1e5a <main+0x840>
    1e44:	30 cc       	rjmp	.-1952   	; 0x16a6 <main+0x8c>
								case 0: FunctionGenerator.bias_A++; break;
    1e46:	01 96       	adiw	r24, 0x01	; 1
    1e48:	f6 01       	movw	r30, r12
    1e4a:	97 87       	std	Z+15, r25	; 0x0f
    1e4c:	86 87       	std	Z+14, r24	; 0x0e
    1e4e:	2b cc       	rjmp	.-1962   	; 0x16a6 <main+0x8c>
								case 1: FunctionGenerator.bias_A += 10; break;
    1e50:	0a 96       	adiw	r24, 0x0a	; 10
    1e52:	f6 01       	movw	r30, r12
    1e54:	97 87       	std	Z+15, r25	; 0x0f
    1e56:	86 87       	std	Z+14, r24	; 0x0e
    1e58:	26 cc       	rjmp	.-1972   	; 0x16a6 <main+0x8c>
								case 2: FunctionGenerator.bias_A += 100; break;
    1e5a:	8c 59       	subi	r24, 0x9C	; 156
    1e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5e:	f6 01       	movw	r30, r12
    1e60:	97 87       	std	Z+15, r25	; 0x0f
    1e62:	86 87       	std	Z+14, r24	; 0x0e
    1e64:	20 cc       	rjmp	.-1984   	; 0x16a6 <main+0x8c>
							}
						}
					}		
					
					else if (FunctionGenerator.bias_A_sign == NEGATIVE) {
						if (FunctionGenerator.bias_A >= 0) FunctionGenerator.bias_A_sign = POSITIVE;
    1e66:	f6 01       	movw	r30, r12
    1e68:	12 8a       	std	Z+18, r1	; 0x12
    1e6a:	1d cc       	rjmp	.-1990   	; 0x16a6 <main+0x8c>
							}
						}
					}
				}
				
				else if (encoderState == CCW) {
    1e6c:	12 30       	cpi	r17, 0x02	; 2
    1e6e:	09 f0       	breq	.+2      	; 0x1e72 <main+0x858>
    1e70:	49 c0       	rjmp	.+146    	; 0x1f04 <main+0x8ea>
					display.stateChanged = true;
    1e72:	e8 82       	st	Y, r14
					functionalityChanged = true;
    1e74:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					if (FunctionGenerator.bias_A_sign == NEGATIVE) {
    1e78:	f6 01       	movw	r30, r12
    1e7a:	82 89       	ldd	r24, Z+18	; 0x12
    1e7c:	88 23       	and	r24, r24
    1e7e:	21 f1       	breq	.+72     	; 0x1ec8 <main+0x8ae>
						if (FunctionGenerator.bias_A >= 330) FunctionGenerator.bias_A = 330;
    1e80:	86 85       	ldd	r24, Z+14	; 0x0e
    1e82:	97 85       	ldd	r25, Z+15	; 0x0f
    1e84:	8a 34       	cpi	r24, 0x4A	; 74
    1e86:	f1 e0       	ldi	r31, 0x01	; 1
    1e88:	9f 07       	cpc	r25, r31
    1e8a:	30 f0       	brcs	.+12     	; 0x1e98 <main+0x87e>
    1e8c:	8a e4       	ldi	r24, 0x4A	; 74
    1e8e:	91 e0       	ldi	r25, 0x01	; 1
    1e90:	f6 01       	movw	r30, r12
    1e92:	97 87       	std	Z+15, r25	; 0x0f
    1e94:	86 87       	std	Z+14, r24	; 0x0e
    1e96:	07 cc       	rjmp	.-2034   	; 0x16a6 <main+0x8c>
						else {
							switch(buttonPressCounter) {
    1e98:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <buttonPressCounter.2753>
    1e9c:	21 30       	cpi	r18, 0x01	; 1
    1e9e:	49 f0       	breq	.+18     	; 0x1eb2 <main+0x898>
    1ea0:	18 f0       	brcs	.+6      	; 0x1ea8 <main+0x88e>
    1ea2:	22 30       	cpi	r18, 0x02	; 2
    1ea4:	59 f0       	breq	.+22     	; 0x1ebc <main+0x8a2>
    1ea6:	ff cb       	rjmp	.-2050   	; 0x16a6 <main+0x8c>
								case 0: FunctionGenerator.bias_A++; break;
    1ea8:	01 96       	adiw	r24, 0x01	; 1
    1eaa:	f6 01       	movw	r30, r12
    1eac:	97 87       	std	Z+15, r25	; 0x0f
    1eae:	86 87       	std	Z+14, r24	; 0x0e
    1eb0:	fa cb       	rjmp	.-2060   	; 0x16a6 <main+0x8c>
								case 1: FunctionGenerator.bias_A += 10; break;
    1eb2:	0a 96       	adiw	r24, 0x0a	; 10
    1eb4:	f6 01       	movw	r30, r12
    1eb6:	97 87       	std	Z+15, r25	; 0x0f
    1eb8:	86 87       	std	Z+14, r24	; 0x0e
    1eba:	f5 cb       	rjmp	.-2070   	; 0x16a6 <main+0x8c>
								case 2: FunctionGenerator.bias_A += 100; break;
    1ebc:	8c 59       	subi	r24, 0x9C	; 156
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	f6 01       	movw	r30, r12
    1ec2:	97 87       	std	Z+15, r25	; 0x0f
    1ec4:	86 87       	std	Z+14, r24	; 0x0e
    1ec6:	ef cb       	rjmp	.-2082   	; 0x16a6 <main+0x8c>
							}
						}
					}
					else if (FunctionGenerator.bias_A_sign == POSITIVE) {
						if (FunctionGenerator.bias_A <= 0) FunctionGenerator.bias_A_sign = POSITIVE;
    1ec8:	f6 01       	movw	r30, r12
    1eca:	86 85       	ldd	r24, Z+14	; 0x0e
    1ecc:	97 85       	ldd	r25, Z+15	; 0x0f
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <main+0x8ba>
    1ed2:	e9 cb       	rjmp	.-2094   	; 0x16a6 <main+0x8c>
						else  {
							switch(buttonPressCounter) {
    1ed4:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <buttonPressCounter.2753>
    1ed8:	21 30       	cpi	r18, 0x01	; 1
    1eda:	49 f0       	breq	.+18     	; 0x1eee <main+0x8d4>
    1edc:	18 f0       	brcs	.+6      	; 0x1ee4 <main+0x8ca>
    1ede:	22 30       	cpi	r18, 0x02	; 2
    1ee0:	59 f0       	breq	.+22     	; 0x1ef8 <main+0x8de>
    1ee2:	e1 cb       	rjmp	.-2110   	; 0x16a6 <main+0x8c>
								case 0: FunctionGenerator.bias_A--; break;
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	f6 01       	movw	r30, r12
    1ee8:	97 87       	std	Z+15, r25	; 0x0f
    1eea:	86 87       	std	Z+14, r24	; 0x0e
    1eec:	dc cb       	rjmp	.-2120   	; 0x16a6 <main+0x8c>
								case 1: FunctionGenerator.bias_A -= 10; break;
    1eee:	0a 97       	sbiw	r24, 0x0a	; 10
    1ef0:	f6 01       	movw	r30, r12
    1ef2:	97 87       	std	Z+15, r25	; 0x0f
    1ef4:	86 87       	std	Z+14, r24	; 0x0e
    1ef6:	d7 cb       	rjmp	.-2130   	; 0x16a6 <main+0x8c>
								case 2: FunctionGenerator.bias_A -= 100; break;
    1ef8:	84 56       	subi	r24, 0x64	; 100
    1efa:	91 09       	sbc	r25, r1
    1efc:	f6 01       	movw	r30, r12
    1efe:	97 87       	std	Z+15, r25	; 0x0f
    1f00:	86 87       	std	Z+14, r24	; 0x0e
    1f02:	d1 cb       	rjmp	.-2142   	; 0x16a6 <main+0x8c>
							}
						}
					}
				}
				
				else if (switchState) {
    1f04:	ff 20       	and	r15, r15
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <main+0x8f0>
    1f08:	ce cb       	rjmp	.-2148   	; 0x16a6 <main+0x8c>
					if (buttonPressCounter < 2) buttonPressCounter++;
    1f0a:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <buttonPressCounter.2753>
    1f0e:	82 30       	cpi	r24, 0x02	; 2
    1f10:	20 f4       	brcc	.+8      	; 0x1f1a <main+0x900>
    1f12:	8f 5f       	subi	r24, 0xFF	; 255
    1f14:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <buttonPressCounter.2753>
    1f18:	0a c0       	rjmp	.+20     	; 0x1f2e <main+0x914>
					else {
						buttonPressCounter = 0;
    1f1a:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <buttonPressCounter.2753>
						parameterSelectionActivated = false;
    1f1e:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
						functionalityChanged = false;
    1f22:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
						displayPointerActivated = false;
    1f26:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						displayPointer = PTR_NULL;
    1f2a:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
					}
					display.stateChanged = true;
    1f2e:	e8 82       	st	Y, r14
    1f30:	ba cb       	rjmp	.-2188   	; 0x16a6 <main+0x8c>
				}
				break;
				
				case PTR_TYPE_B:
				if (encoderState == CW) {
    1f32:	11 30       	cpi	r17, 0x01	; 1
    1f34:	09 f5       	brne	.+66     	; 0x1f78 <main+0x95e>
					display.stateChanged = true;
    1f36:	e8 82       	st	Y, r14
					functionalityChanged = true;
    1f38:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					switch(FunctionGenerator.output_type_B) {
    1f3c:	f6 01       	movw	r30, r12
    1f3e:	85 85       	ldd	r24, Z+13	; 0x0d
    1f40:	82 30       	cpi	r24, 0x02	; 2
    1f42:	71 f0       	breq	.+28     	; 0x1f60 <main+0x946>
    1f44:	18 f4       	brcc	.+6      	; 0x1f4c <main+0x932>
    1f46:	81 30       	cpi	r24, 0x01	; 1
    1f48:	41 f0       	breq	.+16     	; 0x1f5a <main+0x940>
    1f4a:	12 c0       	rjmp	.+36     	; 0x1f70 <main+0x956>
    1f4c:	83 30       	cpi	r24, 0x03	; 3
    1f4e:	61 f0       	breq	.+24     	; 0x1f68 <main+0x94e>
    1f50:	85 30       	cpi	r24, 0x05	; 5
    1f52:	71 f4       	brne	.+28     	; 0x1f70 <main+0x956>
						case OFF: FunctionGenerator.output_type_B = SINE; break;
    1f54:	f6 01       	movw	r30, r12
    1f56:	e5 86       	std	Z+13, r14	; 0x0d
    1f58:	a6 cb       	rjmp	.-2228   	; 0x16a6 <main+0x8c>
						case SINE: FunctionGenerator.output_type_B = TRIANGLE; break;
    1f5a:	f6 01       	movw	r30, r12
    1f5c:	35 86       	std	Z+13, r3	; 0x0d
    1f5e:	a3 cb       	rjmp	.-2234   	; 0x16a6 <main+0x8c>
						case TRIANGLE: FunctionGenerator.output_type_B = SQUARE; break;
    1f60:	83 e0       	ldi	r24, 0x03	; 3
    1f62:	f6 01       	movw	r30, r12
    1f64:	85 87       	std	Z+13, r24	; 0x0d
    1f66:	9f cb       	rjmp	.-2242   	; 0x16a6 <main+0x8c>
						case SQUARE: FunctionGenerator.output_type_B = DC; break;
    1f68:	84 e0       	ldi	r24, 0x04	; 4
    1f6a:	f6 01       	movw	r30, r12
    1f6c:	85 87       	std	Z+13, r24	; 0x0d
    1f6e:	9b cb       	rjmp	.-2250   	; 0x16a6 <main+0x8c>
						case DC: default: FunctionGenerator.output_type_B = OFF; break;
    1f70:	85 e0       	ldi	r24, 0x05	; 5
    1f72:	f6 01       	movw	r30, r12
    1f74:	85 87       	std	Z+13, r24	; 0x0d
    1f76:	97 cb       	rjmp	.-2258   	; 0x16a6 <main+0x8c>
					}
				}
				else if (encoderState == CCW) {
    1f78:	12 30       	cpi	r17, 0x02	; 2
    1f7a:	09 f5       	brne	.+66     	; 0x1fbe <main+0x9a4>
					display.stateChanged = true;
    1f7c:	e8 82       	st	Y, r14
					functionalityChanged = true;
    1f7e:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					switch(FunctionGenerator.output_type_B) {
    1f82:	f6 01       	movw	r30, r12
    1f84:	85 85       	ldd	r24, Z+13	; 0x0d
    1f86:	82 30       	cpi	r24, 0x02	; 2
    1f88:	81 f0       	breq	.+32     	; 0x1faa <main+0x990>
    1f8a:	18 f4       	brcc	.+6      	; 0x1f92 <main+0x978>
    1f8c:	81 30       	cpi	r24, 0x01	; 1
    1f8e:	49 f0       	breq	.+18     	; 0x1fa2 <main+0x988>
    1f90:	12 c0       	rjmp	.+36     	; 0x1fb6 <main+0x99c>
    1f92:	83 30       	cpi	r24, 0x03	; 3
    1f94:	69 f0       	breq	.+26     	; 0x1fb0 <main+0x996>
    1f96:	85 30       	cpi	r24, 0x05	; 5
    1f98:	71 f4       	brne	.+28     	; 0x1fb6 <main+0x99c>
						case OFF: FunctionGenerator.output_type_B = DC; break;
    1f9a:	84 e0       	ldi	r24, 0x04	; 4
    1f9c:	f6 01       	movw	r30, r12
    1f9e:	85 87       	std	Z+13, r24	; 0x0d
    1fa0:	82 cb       	rjmp	.-2300   	; 0x16a6 <main+0x8c>
						case SINE: FunctionGenerator.output_type_B = OFF; break;
    1fa2:	85 e0       	ldi	r24, 0x05	; 5
    1fa4:	f6 01       	movw	r30, r12
    1fa6:	85 87       	std	Z+13, r24	; 0x0d
    1fa8:	7e cb       	rjmp	.-2308   	; 0x16a6 <main+0x8c>
						case TRIANGLE: FunctionGenerator.output_type_B = SINE; break;
    1faa:	f6 01       	movw	r30, r12
    1fac:	e5 86       	std	Z+13, r14	; 0x0d
    1fae:	7b cb       	rjmp	.-2314   	; 0x16a6 <main+0x8c>
						case SQUARE: FunctionGenerator.output_type_B = TRIANGLE; break;
    1fb0:	f6 01       	movw	r30, r12
    1fb2:	35 86       	std	Z+13, r3	; 0x0d
    1fb4:	78 cb       	rjmp	.-2320   	; 0x16a6 <main+0x8c>
						case DC: default: FunctionGenerator.output_type_B = SQUARE; break;
    1fb6:	83 e0       	ldi	r24, 0x03	; 3
    1fb8:	f6 01       	movw	r30, r12
    1fba:	85 87       	std	Z+13, r24	; 0x0d
    1fbc:	74 cb       	rjmp	.-2328   	; 0x16a6 <main+0x8c>
					}
				}
				
				else if (switchState) {
    1fbe:	ff 20       	and	r15, r15
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <main+0x9aa>
    1fc2:	71 cb       	rjmp	.-2334   	; 0x16a6 <main+0x8c>
					parameterSelectionActivated = false;
    1fc4:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
					functionalityChanged = false;
    1fc8:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
					displayPointerActivated = false;
    1fcc:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
					display.stateChanged = true;
    1fd0:	e8 82       	st	Y, r14
					displayPointer = PTR_NULL;
    1fd2:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
    1fd6:	67 cb       	rjmp	.-2354   	; 0x16a6 <main+0x8c>
				}
				
				break;
				
				case PTR_AMP_B:
				if (encoderState == CW) {
    1fd8:	11 30       	cpi	r17, 0x01	; 1
    1fda:	f9 f4       	brne	.+62     	; 0x201a <main+0xa00>
					display.stateChanged = true;
    1fdc:	e8 82       	st	Y, r14
					functionalityChanged = true;
    1fde:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					if (FunctionGenerator.amplitude_B >= 70) FunctionGenerator.amplitude_B = 70;
    1fe2:	f6 01       	movw	r30, r12
    1fe4:	82 85       	ldd	r24, Z+10	; 0x0a
    1fe6:	93 85       	ldd	r25, Z+11	; 0x0b
    1fe8:	86 34       	cpi	r24, 0x46	; 70
    1fea:	91 05       	cpc	r25, r1
    1fec:	28 f0       	brcs	.+10     	; 0x1ff8 <main+0x9de>
    1fee:	86 e4       	ldi	r24, 0x46	; 70
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	93 87       	std	Z+11, r25	; 0x0b
    1ff4:	82 87       	std	Z+10, r24	; 0x0a
    1ff6:	57 cb       	rjmp	.-2386   	; 0x16a6 <main+0x8c>
					else {
						switch(buttonPressCounter) {
    1ff8:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <buttonPressCounter.2753>
    1ffc:	22 23       	and	r18, r18
    1ffe:	19 f0       	breq	.+6      	; 0x2006 <main+0x9ec>
    2000:	21 30       	cpi	r18, 0x01	; 1
    2002:	31 f0       	breq	.+12     	; 0x2010 <main+0x9f6>
    2004:	50 cb       	rjmp	.-2400   	; 0x16a6 <main+0x8c>
							case 0: FunctionGenerator.amplitude_B++; break;
    2006:	01 96       	adiw	r24, 0x01	; 1
    2008:	f6 01       	movw	r30, r12
    200a:	93 87       	std	Z+11, r25	; 0x0b
    200c:	82 87       	std	Z+10, r24	; 0x0a
    200e:	4b cb       	rjmp	.-2410   	; 0x16a6 <main+0x8c>
							case 1: FunctionGenerator.amplitude_B += 10; break;
    2010:	0a 96       	adiw	r24, 0x0a	; 10
    2012:	f6 01       	movw	r30, r12
    2014:	93 87       	std	Z+11, r25	; 0x0b
    2016:	82 87       	std	Z+10, r24	; 0x0a
    2018:	46 cb       	rjmp	.-2420   	; 0x16a6 <main+0x8c>
						}
					}
				}
				else if (encoderState == CCW) {
    201a:	12 30       	cpi	r17, 0x02	; 2
    201c:	d1 f4       	brne	.+52     	; 0x2052 <main+0xa38>
					display.stateChanged = true;
    201e:	e8 82       	st	Y, r14
					functionalityChanged = true;
    2020:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					if (FunctionGenerator.amplitude_B <= 0) FunctionGenerator.amplitude_B = 0;
    2024:	f6 01       	movw	r30, r12
    2026:	82 85       	ldd	r24, Z+10	; 0x0a
    2028:	93 85       	ldd	r25, Z+11	; 0x0b
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	09 f4       	brne	.+2      	; 0x2030 <main+0xa16>
    202e:	3b cb       	rjmp	.-2442   	; 0x16a6 <main+0x8c>
					else {
						switch(buttonPressCounter) {
    2030:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <buttonPressCounter.2753>
    2034:	22 23       	and	r18, r18
    2036:	19 f0       	breq	.+6      	; 0x203e <main+0xa24>
    2038:	21 30       	cpi	r18, 0x01	; 1
    203a:	31 f0       	breq	.+12     	; 0x2048 <main+0xa2e>
    203c:	34 cb       	rjmp	.-2456   	; 0x16a6 <main+0x8c>
							case 0: FunctionGenerator.amplitude_B--; break;
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f6 01       	movw	r30, r12
    2042:	93 87       	std	Z+11, r25	; 0x0b
    2044:	82 87       	std	Z+10, r24	; 0x0a
    2046:	2f cb       	rjmp	.-2466   	; 0x16a6 <main+0x8c>
							case 1: FunctionGenerator.amplitude_B -= 10; break;
    2048:	0a 97       	sbiw	r24, 0x0a	; 10
    204a:	f6 01       	movw	r30, r12
    204c:	93 87       	std	Z+11, r25	; 0x0b
    204e:	82 87       	std	Z+10, r24	; 0x0a
    2050:	2a cb       	rjmp	.-2476   	; 0x16a6 <main+0x8c>
						}
					}
				}
				
				else if (switchState) {
    2052:	ff 20       	and	r15, r15
    2054:	09 f4       	brne	.+2      	; 0x2058 <main+0xa3e>
    2056:	27 cb       	rjmp	.-2482   	; 0x16a6 <main+0x8c>
					if (buttonPressCounter < 1) buttonPressCounter++;
    2058:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <buttonPressCounter.2753>
    205c:	81 11       	cpse	r24, r1
    205e:	03 c0       	rjmp	.+6      	; 0x2066 <main+0xa4c>
    2060:	e0 92 4d 02 	sts	0x024D, r14	; 0x80024d <buttonPressCounter.2753>
    2064:	0a c0       	rjmp	.+20     	; 0x207a <main+0xa60>
					else {
						buttonPressCounter = 0;
    2066:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <buttonPressCounter.2753>
						parameterSelectionActivated = false;
    206a:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
						functionalityChanged = false;
    206e:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
						displayPointerActivated = false;
    2072:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						displayPointer = PTR_NULL;
    2076:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
					}
					display.stateChanged = true;
    207a:	e8 82       	st	Y, r14
    207c:	14 cb       	rjmp	.-2520   	; 0x16a6 <main+0x8c>
				}
				
				break;

				case PTR_FREQ_B:
				if (encoderState == CW) {
    207e:	11 30       	cpi	r17, 0x01	; 1
    2080:	09 f0       	breq	.+2      	; 0x2084 <main+0xa6a>
    2082:	5f c0       	rjmp	.+190    	; 0x2142 <main+0xb28>
					display.stateChanged = true;
    2084:	e8 82       	st	Y, r14
					functionalityChanged = true;
    2086:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					if (FunctionGenerator.frequency_B >= 1000000) FunctionGenerator.frequency_B = 1000000;
    208a:	f6 01       	movw	r30, r12
    208c:	84 81       	ldd	r24, Z+4	; 0x04
    208e:	95 81       	ldd	r25, Z+5	; 0x05
    2090:	a6 81       	ldd	r26, Z+6	; 0x06
    2092:	b7 81       	ldd	r27, Z+7	; 0x07
    2094:	80 34       	cpi	r24, 0x40	; 64
    2096:	f2 e4       	ldi	r31, 0x42	; 66
    2098:	9f 07       	cpc	r25, r31
    209a:	ff e0       	ldi	r31, 0x0F	; 15
    209c:	af 07       	cpc	r26, r31
    209e:	b1 05       	cpc	r27, r1
    20a0:	30 f0       	brcs	.+12     	; 0x20ae <main+0xa94>
    20a2:	f6 01       	movw	r30, r12
    20a4:	44 82       	std	Z+4, r4	; 0x04
    20a6:	55 82       	std	Z+5, r5	; 0x05
    20a8:	66 82       	std	Z+6, r6	; 0x06
    20aa:	77 82       	std	Z+7, r7	; 0x07
    20ac:	fc ca       	rjmp	.-2568   	; 0x16a6 <main+0x8c>
					else {
						switch(buttonPressCounter) {
    20ae:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <buttonPressCounter.2753>
    20b2:	22 30       	cpi	r18, 0x02	; 2
    20b4:	f1 f0       	breq	.+60     	; 0x20f2 <main+0xad8>
    20b6:	28 f4       	brcc	.+10     	; 0x20c2 <main+0xaa8>
    20b8:	22 23       	and	r18, r18
    20ba:	49 f0       	breq	.+18     	; 0x20ce <main+0xab4>
    20bc:	21 30       	cpi	r18, 0x01	; 1
    20be:	81 f0       	breq	.+32     	; 0x20e0 <main+0xac6>
    20c0:	f2 ca       	rjmp	.-2588   	; 0x16a6 <main+0x8c>
    20c2:	24 30       	cpi	r18, 0x04	; 4
    20c4:	51 f1       	breq	.+84     	; 0x211a <main+0xb00>
    20c6:	f8 f0       	brcs	.+62     	; 0x2106 <main+0xaec>
    20c8:	25 30       	cpi	r18, 0x05	; 5
    20ca:	89 f1       	breq	.+98     	; 0x212e <main+0xb14>
    20cc:	ec ca       	rjmp	.-2600   	; 0x16a6 <main+0x8c>
							case 0: FunctionGenerator.frequency_B++; break;
    20ce:	01 96       	adiw	r24, 0x01	; 1
    20d0:	a1 1d       	adc	r26, r1
    20d2:	b1 1d       	adc	r27, r1
    20d4:	f6 01       	movw	r30, r12
    20d6:	84 83       	std	Z+4, r24	; 0x04
    20d8:	95 83       	std	Z+5, r25	; 0x05
    20da:	a6 83       	std	Z+6, r26	; 0x06
    20dc:	b7 83       	std	Z+7, r27	; 0x07
    20de:	e3 ca       	rjmp	.-2618   	; 0x16a6 <main+0x8c>
							case 1: FunctionGenerator.frequency_B += 10; break;
    20e0:	0a 96       	adiw	r24, 0x0a	; 10
    20e2:	a1 1d       	adc	r26, r1
    20e4:	b1 1d       	adc	r27, r1
    20e6:	f6 01       	movw	r30, r12
    20e8:	84 83       	std	Z+4, r24	; 0x04
    20ea:	95 83       	std	Z+5, r25	; 0x05
    20ec:	a6 83       	std	Z+6, r26	; 0x06
    20ee:	b7 83       	std	Z+7, r27	; 0x07
    20f0:	da ca       	rjmp	.-2636   	; 0x16a6 <main+0x8c>
							case 2: FunctionGenerator.frequency_B += 100; break;
    20f2:	8c 59       	subi	r24, 0x9C	; 156
    20f4:	9f 4f       	sbci	r25, 0xFF	; 255
    20f6:	af 4f       	sbci	r26, 0xFF	; 255
    20f8:	bf 4f       	sbci	r27, 0xFF	; 255
    20fa:	f6 01       	movw	r30, r12
    20fc:	84 83       	std	Z+4, r24	; 0x04
    20fe:	95 83       	std	Z+5, r25	; 0x05
    2100:	a6 83       	std	Z+6, r26	; 0x06
    2102:	b7 83       	std	Z+7, r27	; 0x07
    2104:	d0 ca       	rjmp	.-2656   	; 0x16a6 <main+0x8c>
							case 3: FunctionGenerator.frequency_B += 1000; break;
    2106:	88 51       	subi	r24, 0x18	; 24
    2108:	9c 4f       	sbci	r25, 0xFC	; 252
    210a:	af 4f       	sbci	r26, 0xFF	; 255
    210c:	bf 4f       	sbci	r27, 0xFF	; 255
    210e:	f6 01       	movw	r30, r12
    2110:	84 83       	std	Z+4, r24	; 0x04
    2112:	95 83       	std	Z+5, r25	; 0x05
    2114:	a6 83       	std	Z+6, r26	; 0x06
    2116:	b7 83       	std	Z+7, r27	; 0x07
    2118:	c6 ca       	rjmp	.-2676   	; 0x16a6 <main+0x8c>
							case 4: FunctionGenerator.frequency_B += 10000; break;
    211a:	80 5f       	subi	r24, 0xF0	; 240
    211c:	98 4d       	sbci	r25, 0xD8	; 216
    211e:	af 4f       	sbci	r26, 0xFF	; 255
    2120:	bf 4f       	sbci	r27, 0xFF	; 255
    2122:	f6 01       	movw	r30, r12
    2124:	84 83       	std	Z+4, r24	; 0x04
    2126:	95 83       	std	Z+5, r25	; 0x05
    2128:	a6 83       	std	Z+6, r26	; 0x06
    212a:	b7 83       	std	Z+7, r27	; 0x07
    212c:	bc ca       	rjmp	.-2696   	; 0x16a6 <main+0x8c>
							case 5: FunctionGenerator.frequency_B += 100000; break;
    212e:	80 56       	subi	r24, 0x60	; 96
    2130:	99 47       	sbci	r25, 0x79	; 121
    2132:	ae 4f       	sbci	r26, 0xFE	; 254
    2134:	bf 4f       	sbci	r27, 0xFF	; 255
    2136:	f6 01       	movw	r30, r12
    2138:	84 83       	std	Z+4, r24	; 0x04
    213a:	95 83       	std	Z+5, r25	; 0x05
    213c:	a6 83       	std	Z+6, r26	; 0x06
    213e:	b7 83       	std	Z+7, r27	; 0x07
    2140:	b2 ca       	rjmp	.-2716   	; 0x16a6 <main+0x8c>
							default: break;
						}
					}
				}
				else if (encoderState == CCW) {
    2142:	12 30       	cpi	r17, 0x02	; 2
    2144:	09 f0       	breq	.+2      	; 0x2148 <main+0xb2e>
    2146:	57 c0       	rjmp	.+174    	; 0x21f6 <main+0xbdc>
					display.stateChanged = true;
    2148:	e8 82       	st	Y, r14
					functionalityChanged = true;
    214a:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					if (FunctionGenerator.frequency_B <= 0) FunctionGenerator.frequency_B = 0;
    214e:	f6 01       	movw	r30, r12
    2150:	84 81       	ldd	r24, Z+4	; 0x04
    2152:	95 81       	ldd	r25, Z+5	; 0x05
    2154:	a6 81       	ldd	r26, Z+6	; 0x06
    2156:	b7 81       	ldd	r27, Z+7	; 0x07
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	a1 05       	cpc	r26, r1
    215c:	b1 05       	cpc	r27, r1
    215e:	09 f4       	brne	.+2      	; 0x2162 <main+0xb48>
    2160:	a2 ca       	rjmp	.-2748   	; 0x16a6 <main+0x8c>
					else {
						switch(buttonPressCounter) {
    2162:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <buttonPressCounter.2753>
    2166:	22 30       	cpi	r18, 0x02	; 2
    2168:	f1 f0       	breq	.+60     	; 0x21a6 <main+0xb8c>
    216a:	28 f4       	brcc	.+10     	; 0x2176 <main+0xb5c>
    216c:	22 23       	and	r18, r18
    216e:	49 f0       	breq	.+18     	; 0x2182 <main+0xb68>
    2170:	21 30       	cpi	r18, 0x01	; 1
    2172:	81 f0       	breq	.+32     	; 0x2194 <main+0xb7a>
    2174:	98 ca       	rjmp	.-2768   	; 0x16a6 <main+0x8c>
    2176:	24 30       	cpi	r18, 0x04	; 4
    2178:	51 f1       	breq	.+84     	; 0x21ce <main+0xbb4>
    217a:	f8 f0       	brcs	.+62     	; 0x21ba <main+0xba0>
    217c:	25 30       	cpi	r18, 0x05	; 5
    217e:	89 f1       	breq	.+98     	; 0x21e2 <main+0xbc8>
    2180:	92 ca       	rjmp	.-2780   	; 0x16a6 <main+0x8c>
							case 0: FunctionGenerator.frequency_B--; break;
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	a1 09       	sbc	r26, r1
    2186:	b1 09       	sbc	r27, r1
    2188:	f6 01       	movw	r30, r12
    218a:	84 83       	std	Z+4, r24	; 0x04
    218c:	95 83       	std	Z+5, r25	; 0x05
    218e:	a6 83       	std	Z+6, r26	; 0x06
    2190:	b7 83       	std	Z+7, r27	; 0x07
    2192:	89 ca       	rjmp	.-2798   	; 0x16a6 <main+0x8c>
							case 1: FunctionGenerator.frequency_B -= 10; break;
    2194:	0a 97       	sbiw	r24, 0x0a	; 10
    2196:	a1 09       	sbc	r26, r1
    2198:	b1 09       	sbc	r27, r1
    219a:	f6 01       	movw	r30, r12
    219c:	84 83       	std	Z+4, r24	; 0x04
    219e:	95 83       	std	Z+5, r25	; 0x05
    21a0:	a6 83       	std	Z+6, r26	; 0x06
    21a2:	b7 83       	std	Z+7, r27	; 0x07
    21a4:	80 ca       	rjmp	.-2816   	; 0x16a6 <main+0x8c>
							case 2: FunctionGenerator.frequency_B -= 100; break;
    21a6:	84 56       	subi	r24, 0x64	; 100
    21a8:	91 09       	sbc	r25, r1
    21aa:	a1 09       	sbc	r26, r1
    21ac:	b1 09       	sbc	r27, r1
    21ae:	f6 01       	movw	r30, r12
    21b0:	84 83       	std	Z+4, r24	; 0x04
    21b2:	95 83       	std	Z+5, r25	; 0x05
    21b4:	a6 83       	std	Z+6, r26	; 0x06
    21b6:	b7 83       	std	Z+7, r27	; 0x07
    21b8:	76 ca       	rjmp	.-2836   	; 0x16a6 <main+0x8c>
							case 3: FunctionGenerator.frequency_B -= 1000; break;
    21ba:	88 5e       	subi	r24, 0xE8	; 232
    21bc:	93 40       	sbci	r25, 0x03	; 3
    21be:	a1 09       	sbc	r26, r1
    21c0:	b1 09       	sbc	r27, r1
    21c2:	f6 01       	movw	r30, r12
    21c4:	84 83       	std	Z+4, r24	; 0x04
    21c6:	95 83       	std	Z+5, r25	; 0x05
    21c8:	a6 83       	std	Z+6, r26	; 0x06
    21ca:	b7 83       	std	Z+7, r27	; 0x07
    21cc:	6c ca       	rjmp	.-2856   	; 0x16a6 <main+0x8c>
							case 4: FunctionGenerator.frequency_B -= 10000; break;
    21ce:	80 51       	subi	r24, 0x10	; 16
    21d0:	97 42       	sbci	r25, 0x27	; 39
    21d2:	a1 09       	sbc	r26, r1
    21d4:	b1 09       	sbc	r27, r1
    21d6:	f6 01       	movw	r30, r12
    21d8:	84 83       	std	Z+4, r24	; 0x04
    21da:	95 83       	std	Z+5, r25	; 0x05
    21dc:	a6 83       	std	Z+6, r26	; 0x06
    21de:	b7 83       	std	Z+7, r27	; 0x07
    21e0:	62 ca       	rjmp	.-2876   	; 0x16a6 <main+0x8c>
							case 5: FunctionGenerator.frequency_B -= 100000; break;
    21e2:	80 5a       	subi	r24, 0xA0	; 160
    21e4:	96 48       	sbci	r25, 0x86	; 134
    21e6:	a1 40       	sbci	r26, 0x01	; 1
    21e8:	b1 09       	sbc	r27, r1
    21ea:	f6 01       	movw	r30, r12
    21ec:	84 83       	std	Z+4, r24	; 0x04
    21ee:	95 83       	std	Z+5, r25	; 0x05
    21f0:	a6 83       	std	Z+6, r26	; 0x06
    21f2:	b7 83       	std	Z+7, r27	; 0x07
    21f4:	58 ca       	rjmp	.-2896   	; 0x16a6 <main+0x8c>
							default: break;
						}
					}
				}
					
				else if (switchState) {
    21f6:	ff 20       	and	r15, r15
    21f8:	09 f4       	brne	.+2      	; 0x21fc <main+0xbe2>
    21fa:	55 ca       	rjmp	.-2902   	; 0x16a6 <main+0x8c>
					if (buttonPressCounter < 5) buttonPressCounter++;
    21fc:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <buttonPressCounter.2753>
    2200:	85 30       	cpi	r24, 0x05	; 5
    2202:	20 f4       	brcc	.+8      	; 0x220c <main+0xbf2>
    2204:	8f 5f       	subi	r24, 0xFF	; 255
    2206:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <buttonPressCounter.2753>
    220a:	0a c0       	rjmp	.+20     	; 0x2220 <main+0xc06>
					else {
						buttonPressCounter = 0;
    220c:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <buttonPressCounter.2753>
						parameterSelectionActivated = false;
    2210:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
						functionalityChanged = false;
    2214:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
						displayPointerActivated = false;
    2218:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						displayPointer = PTR_NULL;
    221c:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
					}
					display.stateChanged = true;
    2220:	e8 82       	st	Y, r14
    2222:	41 ca       	rjmp	.-2942   	; 0x16a6 <main+0x8c>
				}
				break;
					
				case PTR_BIAS_B:
				if (encoderState == CW) {
    2224:	11 30       	cpi	r17, 0x01	; 1
    2226:	71 f5       	brne	.+92     	; 0x2284 <main+0xc6a>
					display.stateChanged = true;
    2228:	e8 82       	st	Y, r14
					functionalityChanged = true;
    222a:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					if (FunctionGenerator.bias_B_sign == POSITIVE) {
    222e:	f6 01       	movw	r30, r12
    2230:	83 89       	ldd	r24, Z+19	; 0x13
    2232:	81 11       	cpse	r24, r1
    2234:	24 c0       	rjmp	.+72     	; 0x227e <main+0xc64>
						if (FunctionGenerator.bias_B >= 330) FunctionGenerator.bias_B = 330;
    2236:	80 89       	ldd	r24, Z+16	; 0x10
    2238:	91 89       	ldd	r25, Z+17	; 0x11
    223a:	8a 34       	cpi	r24, 0x4A	; 74
    223c:	f1 e0       	ldi	r31, 0x01	; 1
    223e:	9f 07       	cpc	r25, r31
    2240:	30 f0       	brcs	.+12     	; 0x224e <main+0xc34>
    2242:	8a e4       	ldi	r24, 0x4A	; 74
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	f6 01       	movw	r30, r12
    2248:	91 8b       	std	Z+17, r25	; 0x11
    224a:	80 8b       	std	Z+16, r24	; 0x10
    224c:	2c ca       	rjmp	.-2984   	; 0x16a6 <main+0x8c>
						else {
							switch(buttonPressCounter) {
    224e:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <buttonPressCounter.2753>
    2252:	21 30       	cpi	r18, 0x01	; 1
    2254:	49 f0       	breq	.+18     	; 0x2268 <main+0xc4e>
    2256:	18 f0       	brcs	.+6      	; 0x225e <main+0xc44>
    2258:	22 30       	cpi	r18, 0x02	; 2
    225a:	59 f0       	breq	.+22     	; 0x2272 <main+0xc58>
    225c:	24 ca       	rjmp	.-3000   	; 0x16a6 <main+0x8c>
								case 0: FunctionGenerator.bias_B++; break;
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	f6 01       	movw	r30, r12
    2262:	91 8b       	std	Z+17, r25	; 0x11
    2264:	80 8b       	std	Z+16, r24	; 0x10
    2266:	1f ca       	rjmp	.-3010   	; 0x16a6 <main+0x8c>
								case 1: FunctionGenerator.bias_B += 10; break;
    2268:	0a 96       	adiw	r24, 0x0a	; 10
    226a:	f6 01       	movw	r30, r12
    226c:	91 8b       	std	Z+17, r25	; 0x11
    226e:	80 8b       	std	Z+16, r24	; 0x10
    2270:	1a ca       	rjmp	.-3020   	; 0x16a6 <main+0x8c>
								case 2: FunctionGenerator.bias_B += 100; break;
    2272:	8c 59       	subi	r24, 0x9C	; 156
    2274:	9f 4f       	sbci	r25, 0xFF	; 255
    2276:	f6 01       	movw	r30, r12
    2278:	91 8b       	std	Z+17, r25	; 0x11
    227a:	80 8b       	std	Z+16, r24	; 0x10
    227c:	14 ca       	rjmp	.-3032   	; 0x16a6 <main+0x8c>
								default: break;
							}
						}
					}
					else if (FunctionGenerator.bias_B_sign == NEGATIVE) {
						if (FunctionGenerator.bias_B >= 0) FunctionGenerator.bias_B_sign = POSITIVE;
    227e:	f6 01       	movw	r30, r12
    2280:	13 8a       	std	Z+19, r1	; 0x13
    2282:	11 ca       	rjmp	.-3038   	; 0x16a6 <main+0x8c>
							}
						}
					}
				}
							
				else if (encoderState == CCW) {
    2284:	12 30       	cpi	r17, 0x02	; 2
    2286:	09 f0       	breq	.+2      	; 0x228a <main+0xc70>
    2288:	49 c0       	rjmp	.+146    	; 0x231c <main+0xd02>
					display.stateChanged = true;
    228a:	e8 82       	st	Y, r14
					functionalityChanged = true;
    228c:	e0 92 48 02 	sts	0x0248, r14	; 0x800248 <functionalityChanged.2752>
					if (FunctionGenerator.bias_B_sign == NEGATIVE) {
    2290:	f6 01       	movw	r30, r12
    2292:	83 89       	ldd	r24, Z+19	; 0x13
    2294:	88 23       	and	r24, r24
    2296:	21 f1       	breq	.+72     	; 0x22e0 <main+0xcc6>
						if (FunctionGenerator.bias_B >= 330) FunctionGenerator.bias_B = 330;
    2298:	80 89       	ldd	r24, Z+16	; 0x10
    229a:	91 89       	ldd	r25, Z+17	; 0x11
    229c:	8a 34       	cpi	r24, 0x4A	; 74
    229e:	f1 e0       	ldi	r31, 0x01	; 1
    22a0:	9f 07       	cpc	r25, r31
    22a2:	30 f0       	brcs	.+12     	; 0x22b0 <main+0xc96>
    22a4:	8a e4       	ldi	r24, 0x4A	; 74
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	f6 01       	movw	r30, r12
    22aa:	91 8b       	std	Z+17, r25	; 0x11
    22ac:	80 8b       	std	Z+16, r24	; 0x10
    22ae:	fb c9       	rjmp	.-3082   	; 0x16a6 <main+0x8c>
						else {
							switch(buttonPressCounter) {
    22b0:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <buttonPressCounter.2753>
    22b4:	21 30       	cpi	r18, 0x01	; 1
    22b6:	49 f0       	breq	.+18     	; 0x22ca <main+0xcb0>
    22b8:	18 f0       	brcs	.+6      	; 0x22c0 <main+0xca6>
    22ba:	22 30       	cpi	r18, 0x02	; 2
    22bc:	59 f0       	breq	.+22     	; 0x22d4 <main+0xcba>
    22be:	f3 c9       	rjmp	.-3098   	; 0x16a6 <main+0x8c>
								case 0: FunctionGenerator.bias_B++; break;
    22c0:	01 96       	adiw	r24, 0x01	; 1
    22c2:	f6 01       	movw	r30, r12
    22c4:	91 8b       	std	Z+17, r25	; 0x11
    22c6:	80 8b       	std	Z+16, r24	; 0x10
    22c8:	ee c9       	rjmp	.-3108   	; 0x16a6 <main+0x8c>
								case 1: FunctionGenerator.bias_B += 10; break;
    22ca:	0a 96       	adiw	r24, 0x0a	; 10
    22cc:	f6 01       	movw	r30, r12
    22ce:	91 8b       	std	Z+17, r25	; 0x11
    22d0:	80 8b       	std	Z+16, r24	; 0x10
    22d2:	e9 c9       	rjmp	.-3118   	; 0x16a6 <main+0x8c>
								case 2: FunctionGenerator.bias_B += 100; break;
    22d4:	8c 59       	subi	r24, 0x9C	; 156
    22d6:	9f 4f       	sbci	r25, 0xFF	; 255
    22d8:	f6 01       	movw	r30, r12
    22da:	91 8b       	std	Z+17, r25	; 0x11
    22dc:	80 8b       	std	Z+16, r24	; 0x10
    22de:	e3 c9       	rjmp	.-3130   	; 0x16a6 <main+0x8c>
							}
						}
					}
					else if (FunctionGenerator.bias_B_sign == POSITIVE) {
						if (FunctionGenerator.bias_B <= 0) FunctionGenerator.bias_B_sign = POSITIVE;
    22e0:	f6 01       	movw	r30, r12
    22e2:	80 89       	ldd	r24, Z+16	; 0x10
    22e4:	91 89       	ldd	r25, Z+17	; 0x11
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	09 f4       	brne	.+2      	; 0x22ec <main+0xcd2>
    22ea:	dd c9       	rjmp	.-3142   	; 0x16a6 <main+0x8c>
						else  {
							switch(buttonPressCounter) {
    22ec:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <buttonPressCounter.2753>
    22f0:	21 30       	cpi	r18, 0x01	; 1
    22f2:	49 f0       	breq	.+18     	; 0x2306 <main+0xcec>
    22f4:	18 f0       	brcs	.+6      	; 0x22fc <main+0xce2>
    22f6:	22 30       	cpi	r18, 0x02	; 2
    22f8:	59 f0       	breq	.+22     	; 0x2310 <main+0xcf6>
    22fa:	d5 c9       	rjmp	.-3158   	; 0x16a6 <main+0x8c>
								case 0: FunctionGenerator.bias_B--; break;
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f6 01       	movw	r30, r12
    2300:	91 8b       	std	Z+17, r25	; 0x11
    2302:	80 8b       	std	Z+16, r24	; 0x10
    2304:	d0 c9       	rjmp	.-3168   	; 0x16a6 <main+0x8c>
								case 1: FunctionGenerator.bias_B -= 10; break;
    2306:	0a 97       	sbiw	r24, 0x0a	; 10
    2308:	f6 01       	movw	r30, r12
    230a:	91 8b       	std	Z+17, r25	; 0x11
    230c:	80 8b       	std	Z+16, r24	; 0x10
    230e:	cb c9       	rjmp	.-3178   	; 0x16a6 <main+0x8c>
								case 2: FunctionGenerator.bias_B -= 100; break;
    2310:	84 56       	subi	r24, 0x64	; 100
    2312:	91 09       	sbc	r25, r1
    2314:	f6 01       	movw	r30, r12
    2316:	91 8b       	std	Z+17, r25	; 0x11
    2318:	80 8b       	std	Z+16, r24	; 0x10
    231a:	c5 c9       	rjmp	.-3190   	; 0x16a6 <main+0x8c>
							}
						}
					}
				}
						
				else if (switchState) {
    231c:	ff 20       	and	r15, r15
    231e:	09 f4       	brne	.+2      	; 0x2322 <main+0xd08>
    2320:	c2 c9       	rjmp	.-3196   	; 0x16a6 <main+0x8c>
					if (buttonPressCounter < 2) buttonPressCounter++;
    2322:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <buttonPressCounter.2753>
    2326:	82 30       	cpi	r24, 0x02	; 2
    2328:	20 f4       	brcc	.+8      	; 0x2332 <main+0xd18>
    232a:	8f 5f       	subi	r24, 0xFF	; 255
    232c:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <buttonPressCounter.2753>
    2330:	0a c0       	rjmp	.+20     	; 0x2346 <main+0xd2c>
					else {
						buttonPressCounter = 0;
    2332:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <buttonPressCounter.2753>
						parameterSelectionActivated = false;
    2336:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
						functionalityChanged = false;
    233a:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
						displayPointerActivated = false;
    233e:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
						displayPointer = PTR_NULL;
    2342:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
					}
					display.stateChanged = true;
    2346:	e8 82       	st	Y, r14
    2348:	ae c9       	rjmp	.-3236   	; 0x16a6 <main+0x8c>
				}
				break;
				
				case PTR_BACK:
				parameterSelectionActivated = false;
    234a:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
				functionalityChanged = false;
    234e:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
				displayPointerActivated = false;
    2352:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
				lcdParameterChanged = false;
    2356:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <__data_end>
				displayPointer = PTR_NULL;
    235a:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
				display.stateChanged = true;
    235e:	e8 82       	st	Y, r14
				display.mainScreen = PARAMS_SCREEN;
    2360:	39 82       	std	Y+1, r3	; 0x01
				break;
    2362:	a1 c9       	rjmp	.-3262   	; 0x16a6 <main+0x8c>
				
				default: break;			}
		}
		else if (lcdParameterChanged) {
    2364:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <__data_end>
    2368:	88 23       	and	r24, r24
    236a:	09 f4       	brne	.+2      	; 0x236e <main+0xd54>
    236c:	9c c9       	rjmp	.-3272   	; 0x16a6 <main+0x8c>
			switch(displayPointer) {
    236e:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <displayPointer.2749>
    2372:	8e 30       	cpi	r24, 0x0E	; 14
    2374:	31 f0       	breq	.+12     	; 0x2382 <main+0xd68>
    2376:	8f 30       	cpi	r24, 0x0F	; 15
    2378:	91 f1       	breq	.+100    	; 0x23de <main+0xdc4>
    237a:	81 30       	cpi	r24, 0x01	; 1
    237c:	09 f0       	breq	.+2      	; 0x2380 <main+0xd66>
    237e:	93 c9       	rjmp	.-3290   	; 0x16a6 <main+0x8c>
    2380:	5d c0       	rjmp	.+186    	; 0x243c <main+0xe22>
				case PTR_BRIGHT:
				if (encoderState == CW) {
    2382:	11 30       	cpi	r17, 0x01	; 1
    2384:	71 f4       	brne	.+28     	; 0x23a2 <main+0xd88>
					display.stateChanged = true;
    2386:	e8 82       	st	Y, r14
					lcdFunctionChanged = true;
    2388:	e0 92 4c 02 	sts	0x024C, r14	; 0x80024c <lcdFunctionChanged.2757>
					if (LCD.brightness >= 100) LCD.brightness = 100;
    238c:	f5 01       	movw	r30, r10
    238e:	80 81       	ld	r24, Z
    2390:	84 36       	cpi	r24, 0x64	; 100
    2392:	18 f0       	brcs	.+6      	; 0x239a <main+0xd80>
    2394:	24 e6       	ldi	r18, 0x64	; 100
    2396:	20 83       	st	Z, r18
    2398:	86 c9       	rjmp	.-3316   	; 0x16a6 <main+0x8c>
					else LCD.brightness++;
    239a:	8f 5f       	subi	r24, 0xFF	; 255
    239c:	f5 01       	movw	r30, r10
    239e:	80 83       	st	Z, r24
    23a0:	82 c9       	rjmp	.-3324   	; 0x16a6 <main+0x8c>
				}
				else if (encoderState == CCW) {
    23a2:	12 30       	cpi	r17, 0x02	; 2
    23a4:	69 f4       	brne	.+26     	; 0x23c0 <main+0xda6>
					display.stateChanged = true;
    23a6:	e8 82       	st	Y, r14
					lcdFunctionChanged = true;
    23a8:	e0 92 4c 02 	sts	0x024C, r14	; 0x80024c <lcdFunctionChanged.2757>
					if (LCD.brightness <= 0) LCD.brightness = 0;
    23ac:	f5 01       	movw	r30, r10
    23ae:	80 81       	ld	r24, Z
    23b0:	81 11       	cpse	r24, r1
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <main+0xd9e>
    23b4:	10 82       	st	Z, r1
    23b6:	77 c9       	rjmp	.-3346   	; 0x16a6 <main+0x8c>
					else LCD.brightness--;
    23b8:	81 50       	subi	r24, 0x01	; 1
    23ba:	f5 01       	movw	r30, r10
    23bc:	80 83       	st	Z, r24
    23be:	73 c9       	rjmp	.-3354   	; 0x16a6 <main+0x8c>
				}
				
				else if (switchState) {
    23c0:	ff 20       	and	r15, r15
    23c2:	09 f4       	brne	.+2      	; 0x23c6 <main+0xdac>
    23c4:	70 c9       	rjmp	.-3360   	; 0x16a6 <main+0x8c>
					parameterSelectionActivated = false;
    23c6:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
					functionalityChanged = false;
    23ca:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
					displayPointerActivated = false;
    23ce:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
					lcdParameterChanged = false;
    23d2:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <__data_end>
					displayPointer = PTR_NULL;
    23d6:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
					display.stateChanged = true;
    23da:	e8 82       	st	Y, r14
    23dc:	64 c9       	rjmp	.-3384   	; 0x16a6 <main+0x8c>
				}
				break;
				
				case PTR_CONTR:
				if (encoderState == CW) {
    23de:	11 30       	cpi	r17, 0x01	; 1
    23e0:	79 f4       	brne	.+30     	; 0x2400 <main+0xde6>
					display.stateChanged = true;
    23e2:	e8 82       	st	Y, r14
					lcdFunctionChanged = true;
    23e4:	e0 92 4c 02 	sts	0x024C, r14	; 0x80024c <lcdFunctionChanged.2757>
					if (LCD.contrast >= 100) LCD.contrast = 100;
    23e8:	f5 01       	movw	r30, r10
    23ea:	81 81       	ldd	r24, Z+1	; 0x01
    23ec:	84 36       	cpi	r24, 0x64	; 100
    23ee:	18 f0       	brcs	.+6      	; 0x23f6 <main+0xddc>
    23f0:	24 e6       	ldi	r18, 0x64	; 100
    23f2:	21 83       	std	Z+1, r18	; 0x01
    23f4:	58 c9       	rjmp	.-3408   	; 0x16a6 <main+0x8c>
					else LCD.brightness++;
    23f6:	f5 01       	movw	r30, r10
    23f8:	80 81       	ld	r24, Z
    23fa:	8f 5f       	subi	r24, 0xFF	; 255
    23fc:	80 83       	st	Z, r24
    23fe:	53 c9       	rjmp	.-3418   	; 0x16a6 <main+0x8c>
				}
				else if (encoderState == CCW) {
    2400:	12 30       	cpi	r17, 0x02	; 2
    2402:	69 f4       	brne	.+26     	; 0x241e <main+0xe04>
					display.stateChanged = true;
    2404:	e8 82       	st	Y, r14
					lcdFunctionChanged = true;
    2406:	e0 92 4c 02 	sts	0x024C, r14	; 0x80024c <lcdFunctionChanged.2757>
					if (LCD.contrast <= 0) LCD.contrast = 0;
    240a:	f5 01       	movw	r30, r10
    240c:	81 81       	ldd	r24, Z+1	; 0x01
    240e:	81 11       	cpse	r24, r1
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <main+0xdfc>
    2412:	11 82       	std	Z+1, r1	; 0x01
    2414:	48 c9       	rjmp	.-3440   	; 0x16a6 <main+0x8c>
					else LCD.contrast--;
    2416:	81 50       	subi	r24, 0x01	; 1
    2418:	f5 01       	movw	r30, r10
    241a:	81 83       	std	Z+1, r24	; 0x01
    241c:	44 c9       	rjmp	.-3448   	; 0x16a6 <main+0x8c>
				}
				
				else if (switchState) {
    241e:	ff 20       	and	r15, r15
    2420:	09 f4       	brne	.+2      	; 0x2424 <main+0xe0a>
    2422:	41 c9       	rjmp	.-3454   	; 0x16a6 <main+0x8c>
					parameterSelectionActivated = false;
    2424:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
					functionalityChanged = false;
    2428:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
					displayPointerActivated = false;
    242c:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
					lcdParameterChanged = false;
    2430:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <__data_end>
					displayPointer = PTR_NULL;
    2434:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
					display.stateChanged = true;
    2438:	e8 82       	st	Y, r14
    243a:	35 c9       	rjmp	.-3478   	; 0x16a6 <main+0x8c>
				}
				break;
				
				case PTR_BACK:
				parameterSelectionActivated = false;
    243c:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <parameterSelectionActivated.2750>
				functionalityChanged = false;
    2440:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <functionalityChanged.2752>
				displayPointerActivated = false;
    2444:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <displayPointerActivated.2751>
				lcdParameterChanged = false;
    2448:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <__data_end>
				displayPointer = PTR_NULL;
    244c:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <displayPointer.2749>
				display.stateChanged = true;
    2450:	e8 82       	st	Y, r14
				display.mainScreen = PARAMS_SCREEN;
    2452:	39 82       	std	Y+1, r3	; 0x01
				break;
    2454:	28 c9       	rjmp	.-3504   	; 0x16a6 <main+0x8c>

00002456 <SPI_write_16bit>:
#include "Headers\main.h"
#include "Headers\SPIMaster.h"

void SPI_write_16bit(uint8_t address_in, uint8_t data_in, enum Device device) {
    2456:	0f 93       	push	r16
    2458:	1f 93       	push	r17
	switch(device) {
    245a:	04 2f       	mov	r16, r20
    245c:	10 e0       	ldi	r17, 0x00	; 0
    245e:	f8 01       	movw	r30, r16
    2460:	31 97       	sbiw	r30, 0x01	; 1
    2462:	e7 30       	cpi	r30, 0x07	; 7
    2464:	f1 05       	cpc	r31, r1
    2466:	88 f4       	brcc	.+34     	; 0x248a <SPI_write_16bit+0x34>
    2468:	ee 59       	subi	r30, 0x9E	; 158
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__tablejump2__>
		case DACA: SPI_CE_PORT &= ~DACA_NCE; break;
    2470:	aa 98       	cbi	0x15, 2	; 21
    2472:	0b c0       	rjmp	.+22     	; 0x248a <SPI_write_16bit+0x34>
		case DACB: SPI_CE_PORT &= ~DACB_NCE; break;
    2474:	ab 98       	cbi	0x15, 3	; 21
    2476:	09 c0       	rjmp	.+18     	; 0x248a <SPI_write_16bit+0x34>
		case DACA_BIAS: SPI_CE_PORT &= ~DACA_BIAS_NCE; break;
    2478:	ac 98       	cbi	0x15, 4	; 21
    247a:	07 c0       	rjmp	.+14     	; 0x248a <SPI_write_16bit+0x34>
		case DACB_BIAS: SPI_CE_PORT &= ~DACB_BIAS_NCE; break;
    247c:	ad 98       	cbi	0x15, 5	; 21
    247e:	05 c0       	rjmp	.+10     	; 0x248a <SPI_write_16bit+0x34>
		case FG0: SPI_CE_PORT &= ~FG0_NCE; break;
    2480:	ae 98       	cbi	0x15, 6	; 21
    2482:	03 c0       	rjmp	.+6      	; 0x248a <SPI_write_16bit+0x34>
		case FG1: SPI_CE_PORT &= ~FG1_NCE; break;
    2484:	af 98       	cbi	0x15, 7	; 21
    2486:	01 c0       	rjmp	.+2      	; 0x248a <SPI_write_16bit+0x34>
		case LCD_POT: LCD_POT_PORT &= ~POT_LCD_NCE; break;
    2488:	dc 98       	cbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    248a:	98 e2       	ldi	r25, 0x28	; 40
    248c:	9a 95       	dec	r25
    248e:	f1 f7       	brne	.-4      	; 0x248c <SPI_write_16bit+0x36>
		default: break;
	}
	_delay_us(15);
	SPDR = address_in;
    2490:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
    2492:	77 9b       	sbis	0x0e, 7	; 14
    2494:	fe cf       	rjmp	.-4      	; 0x2492 <SPI_write_16bit+0x3c>
    2496:	88 e2       	ldi	r24, 0x28	; 40
    2498:	8a 95       	dec	r24
    249a:	f1 f7       	brne	.-4      	; 0x2498 <SPI_write_16bit+0x42>
	_delay_us(15);
	SPDR = data_in;
    249c:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)));
    249e:	77 9b       	sbis	0x0e, 7	; 14
    24a0:	fe cf       	rjmp	.-4      	; 0x249e <SPI_write_16bit+0x48>
    24a2:	98 e2       	ldi	r25, 0x28	; 40
    24a4:	9a 95       	dec	r25
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <SPI_write_16bit+0x4e>
	_delay_us(15);
	switch(device) {
    24a8:	50 e0       	ldi	r21, 0x00	; 0
    24aa:	fa 01       	movw	r30, r20
    24ac:	31 97       	sbiw	r30, 0x01	; 1
    24ae:	e7 30       	cpi	r30, 0x07	; 7
    24b0:	f1 05       	cpc	r31, r1
    24b2:	88 f4       	brcc	.+34     	; 0x24d6 <SPI_write_16bit+0x80>
    24b4:	e7 59       	subi	r30, 0x97	; 151
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__tablejump2__>
		case DACA: SPI_CE_PORT |= DACA_NCE; break;
    24bc:	aa 9a       	sbi	0x15, 2	; 21
    24be:	0b c0       	rjmp	.+22     	; 0x24d6 <SPI_write_16bit+0x80>
		case DACB: SPI_CE_PORT |= DACB_NCE; break;
    24c0:	ab 9a       	sbi	0x15, 3	; 21
    24c2:	09 c0       	rjmp	.+18     	; 0x24d6 <SPI_write_16bit+0x80>
		case DACA_BIAS: SPI_CE_PORT |= DACA_BIAS_NCE; break;
    24c4:	ac 9a       	sbi	0x15, 4	; 21
    24c6:	07 c0       	rjmp	.+14     	; 0x24d6 <SPI_write_16bit+0x80>
		case DACB_BIAS: SPI_CE_PORT |= DACB_BIAS_NCE; break;
    24c8:	ad 9a       	sbi	0x15, 5	; 21
    24ca:	05 c0       	rjmp	.+10     	; 0x24d6 <SPI_write_16bit+0x80>
		case FG0: SPI_CE_PORT |= FG0_NCE; break;
    24cc:	ae 9a       	sbi	0x15, 6	; 21
    24ce:	03 c0       	rjmp	.+6      	; 0x24d6 <SPI_write_16bit+0x80>
		case FG1: SPI_CE_PORT |= FG1_NCE; break;
    24d0:	af 9a       	sbi	0x15, 7	; 21
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <SPI_write_16bit+0x80>
		case LCD_POT: LCD_POT_PORT |= POT_LCD_NCE; break;
    24d4:	dc 9a       	sbi	0x1b, 4	; 27
		default: break;
	}
}
    24d6:	1f 91       	pop	r17
    24d8:	0f 91       	pop	r16
    24da:	08 95       	ret

000024dc <Init_SPI_AD9834>:


void Init_SPI_AD9834(void) {
	SPI_CE_PORT |= DACA_NCE | DACB_NCE | DACA_BIAS_NCE | DACB_BIAS_NCE | FG0_NCE | FG1_NCE;
    24dc:	85 b3       	in	r24, 0x15	; 21
    24de:	8c 6f       	ori	r24, 0xFC	; 252
    24e0:	85 bb       	out	0x15, r24	; 21
	LCD_POT_PORT |= POT_LCD_NCE;
    24e2:	dc 9a       	sbi	0x1b, 4	; 27
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPOL);
    24e4:	89 e5       	ldi	r24, 0x59	; 89
    24e6:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24ec:	8f e1       	ldi	r24, 0x1F	; 31
    24ee:	9e e4       	ldi	r25, 0x4E	; 78
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <Init_SPI_AD9834+0x14>
    24f4:	00 c0       	rjmp	.+0      	; 0x24f6 <Init_SPI_AD9834+0x1a>
    24f6:	00 00       	nop
    24f8:	08 95       	ret

000024fa <Init_SPI_All>:
	_delay_ms(10);
}

void Init_SPI_All(void) {
	SPI_CE_PORT |= DACA_NCE | DACB_NCE | DACA_BIAS_NCE | DACB_BIAS_NCE | FG0_NCE | FG1_NCE;
    24fa:	85 b3       	in	r24, 0x15	; 21
    24fc:	8c 6f       	ori	r24, 0xFC	; 252
    24fe:	85 bb       	out	0x15, r24	; 21
	LCD_POT_PORT |= POT_LCD_NCE;
    2500:	dc 9a       	sbi	0x1b, 4	; 27
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    2502:	81 e5       	ldi	r24, 0x51	; 81
    2504:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	8e b9       	out	0x0e, r24	; 14
    250a:	8f e1       	ldi	r24, 0x1F	; 31
    250c:	9e e4       	ldi	r25, 0x4E	; 78
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <Init_SPI_All+0x14>
    2512:	00 c0       	rjmp	.+0      	; 0x2514 <Init_SPI_All+0x1a>
    2514:	00 00       	nop
    2516:	08 95       	ret

00002518 <Init_UART>:
#include "Headers\USART.h"
#include "Headers\main.h"

void Init_UART() {
	UBRRH = (unsigned char) (3 >> 8);
    2518:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) 3;
    251a:	83 e0       	ldi	r24, 0x03	; 3
    251c:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN);
    251e:	88 e0       	ldi	r24, 0x08	; 8
    2520:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
    2522:	8e e8       	ldi	r24, 0x8E	; 142
    2524:	80 bd       	out	0x20, r24	; 32
    2526:	08 95       	ret

00002528 <__divsf3>:
    2528:	0e 94 a8 12 	call	0x2550	; 0x2550 <__divsf3x>
    252c:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__fp_round>
    2530:	0e 94 82 13 	call	0x2704	; 0x2704 <__fp_pscB>
    2534:	58 f0       	brcs	.+22     	; 0x254c <__divsf3+0x24>
    2536:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__fp_pscA>
    253a:	40 f0       	brcs	.+16     	; 0x254c <__divsf3+0x24>
    253c:	29 f4       	brne	.+10     	; 0x2548 <__divsf3+0x20>
    253e:	5f 3f       	cpi	r21, 0xFF	; 255
    2540:	29 f0       	breq	.+10     	; 0x254c <__divsf3+0x24>
    2542:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_inf>
    2546:	51 11       	cpse	r21, r1
    2548:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__fp_szero>
    254c:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__fp_nan>

00002550 <__divsf3x>:
    2550:	0e 94 9a 13 	call	0x2734	; 0x2734 <__fp_split3>
    2554:	68 f3       	brcs	.-38     	; 0x2530 <__divsf3+0x8>

00002556 <__divsf3_pse>:
    2556:	99 23       	and	r25, r25
    2558:	b1 f3       	breq	.-20     	; 0x2546 <__divsf3+0x1e>
    255a:	55 23       	and	r21, r21
    255c:	91 f3       	breq	.-28     	; 0x2542 <__divsf3+0x1a>
    255e:	95 1b       	sub	r25, r21
    2560:	55 0b       	sbc	r21, r21
    2562:	bb 27       	eor	r27, r27
    2564:	aa 27       	eor	r26, r26
    2566:	62 17       	cp	r22, r18
    2568:	73 07       	cpc	r23, r19
    256a:	84 07       	cpc	r24, r20
    256c:	38 f0       	brcs	.+14     	; 0x257c <__divsf3_pse+0x26>
    256e:	9f 5f       	subi	r25, 0xFF	; 255
    2570:	5f 4f       	sbci	r21, 0xFF	; 255
    2572:	22 0f       	add	r18, r18
    2574:	33 1f       	adc	r19, r19
    2576:	44 1f       	adc	r20, r20
    2578:	aa 1f       	adc	r26, r26
    257a:	a9 f3       	breq	.-22     	; 0x2566 <__divsf3_pse+0x10>
    257c:	35 d0       	rcall	.+106    	; 0x25e8 <__divsf3_pse+0x92>
    257e:	0e 2e       	mov	r0, r30
    2580:	3a f0       	brmi	.+14     	; 0x2590 <__divsf3_pse+0x3a>
    2582:	e0 e8       	ldi	r30, 0x80	; 128
    2584:	32 d0       	rcall	.+100    	; 0x25ea <__divsf3_pse+0x94>
    2586:	91 50       	subi	r25, 0x01	; 1
    2588:	50 40       	sbci	r21, 0x00	; 0
    258a:	e6 95       	lsr	r30
    258c:	00 1c       	adc	r0, r0
    258e:	ca f7       	brpl	.-14     	; 0x2582 <__divsf3_pse+0x2c>
    2590:	2b d0       	rcall	.+86     	; 0x25e8 <__divsf3_pse+0x92>
    2592:	fe 2f       	mov	r31, r30
    2594:	29 d0       	rcall	.+82     	; 0x25e8 <__divsf3_pse+0x92>
    2596:	66 0f       	add	r22, r22
    2598:	77 1f       	adc	r23, r23
    259a:	88 1f       	adc	r24, r24
    259c:	bb 1f       	adc	r27, r27
    259e:	26 17       	cp	r18, r22
    25a0:	37 07       	cpc	r19, r23
    25a2:	48 07       	cpc	r20, r24
    25a4:	ab 07       	cpc	r26, r27
    25a6:	b0 e8       	ldi	r27, 0x80	; 128
    25a8:	09 f0       	breq	.+2      	; 0x25ac <__divsf3_pse+0x56>
    25aa:	bb 0b       	sbc	r27, r27
    25ac:	80 2d       	mov	r24, r0
    25ae:	bf 01       	movw	r22, r30
    25b0:	ff 27       	eor	r31, r31
    25b2:	93 58       	subi	r25, 0x83	; 131
    25b4:	5f 4f       	sbci	r21, 0xFF	; 255
    25b6:	3a f0       	brmi	.+14     	; 0x25c6 <__divsf3_pse+0x70>
    25b8:	9e 3f       	cpi	r25, 0xFE	; 254
    25ba:	51 05       	cpc	r21, r1
    25bc:	78 f0       	brcs	.+30     	; 0x25dc <__divsf3_pse+0x86>
    25be:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_inf>
    25c2:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__fp_szero>
    25c6:	5f 3f       	cpi	r21, 0xFF	; 255
    25c8:	e4 f3       	brlt	.-8      	; 0x25c2 <__divsf3_pse+0x6c>
    25ca:	98 3e       	cpi	r25, 0xE8	; 232
    25cc:	d4 f3       	brlt	.-12     	; 0x25c2 <__divsf3_pse+0x6c>
    25ce:	86 95       	lsr	r24
    25d0:	77 95       	ror	r23
    25d2:	67 95       	ror	r22
    25d4:	b7 95       	ror	r27
    25d6:	f7 95       	ror	r31
    25d8:	9f 5f       	subi	r25, 0xFF	; 255
    25da:	c9 f7       	brne	.-14     	; 0x25ce <__divsf3_pse+0x78>
    25dc:	88 0f       	add	r24, r24
    25de:	91 1d       	adc	r25, r1
    25e0:	96 95       	lsr	r25
    25e2:	87 95       	ror	r24
    25e4:	97 f9       	bld	r25, 7
    25e6:	08 95       	ret
    25e8:	e1 e0       	ldi	r30, 0x01	; 1
    25ea:	66 0f       	add	r22, r22
    25ec:	77 1f       	adc	r23, r23
    25ee:	88 1f       	adc	r24, r24
    25f0:	bb 1f       	adc	r27, r27
    25f2:	62 17       	cp	r22, r18
    25f4:	73 07       	cpc	r23, r19
    25f6:	84 07       	cpc	r24, r20
    25f8:	ba 07       	cpc	r27, r26
    25fa:	20 f0       	brcs	.+8      	; 0x2604 <__divsf3_pse+0xae>
    25fc:	62 1b       	sub	r22, r18
    25fe:	73 0b       	sbc	r23, r19
    2600:	84 0b       	sbc	r24, r20
    2602:	ba 0b       	sbc	r27, r26
    2604:	ee 1f       	adc	r30, r30
    2606:	88 f7       	brcc	.-30     	; 0x25ea <__divsf3_pse+0x94>
    2608:	e0 95       	com	r30
    260a:	08 95       	ret

0000260c <__fixunssfsi>:
    260c:	0e 94 a2 13 	call	0x2744	; 0x2744 <__fp_splitA>
    2610:	88 f0       	brcs	.+34     	; 0x2634 <__fixunssfsi+0x28>
    2612:	9f 57       	subi	r25, 0x7F	; 127
    2614:	98 f0       	brcs	.+38     	; 0x263c <__fixunssfsi+0x30>
    2616:	b9 2f       	mov	r27, r25
    2618:	99 27       	eor	r25, r25
    261a:	b7 51       	subi	r27, 0x17	; 23
    261c:	b0 f0       	brcs	.+44     	; 0x264a <__fixunssfsi+0x3e>
    261e:	e1 f0       	breq	.+56     	; 0x2658 <__fixunssfsi+0x4c>
    2620:	66 0f       	add	r22, r22
    2622:	77 1f       	adc	r23, r23
    2624:	88 1f       	adc	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	1a f0       	brmi	.+6      	; 0x2630 <__fixunssfsi+0x24>
    262a:	ba 95       	dec	r27
    262c:	c9 f7       	brne	.-14     	; 0x2620 <__fixunssfsi+0x14>
    262e:	14 c0       	rjmp	.+40     	; 0x2658 <__fixunssfsi+0x4c>
    2630:	b1 30       	cpi	r27, 0x01	; 1
    2632:	91 f0       	breq	.+36     	; 0x2658 <__fixunssfsi+0x4c>
    2634:	0e 94 bc 13 	call	0x2778	; 0x2778 <__fp_zero>
    2638:	b1 e0       	ldi	r27, 0x01	; 1
    263a:	08 95       	ret
    263c:	0c 94 bc 13 	jmp	0x2778	; 0x2778 <__fp_zero>
    2640:	67 2f       	mov	r22, r23
    2642:	78 2f       	mov	r23, r24
    2644:	88 27       	eor	r24, r24
    2646:	b8 5f       	subi	r27, 0xF8	; 248
    2648:	39 f0       	breq	.+14     	; 0x2658 <__fixunssfsi+0x4c>
    264a:	b9 3f       	cpi	r27, 0xF9	; 249
    264c:	cc f3       	brlt	.-14     	; 0x2640 <__fixunssfsi+0x34>
    264e:	86 95       	lsr	r24
    2650:	77 95       	ror	r23
    2652:	67 95       	ror	r22
    2654:	b3 95       	inc	r27
    2656:	d9 f7       	brne	.-10     	; 0x264e <__fixunssfsi+0x42>
    2658:	3e f4       	brtc	.+14     	; 0x2668 <__fixunssfsi+0x5c>
    265a:	90 95       	com	r25
    265c:	80 95       	com	r24
    265e:	70 95       	com	r23
    2660:	61 95       	neg	r22
    2662:	7f 4f       	sbci	r23, 0xFF	; 255
    2664:	8f 4f       	sbci	r24, 0xFF	; 255
    2666:	9f 4f       	sbci	r25, 0xFF	; 255
    2668:	08 95       	ret

0000266a <__floatunsisf>:
    266a:	e8 94       	clt
    266c:	09 c0       	rjmp	.+18     	; 0x2680 <__floatsisf+0x12>

0000266e <__floatsisf>:
    266e:	97 fb       	bst	r25, 7
    2670:	3e f4       	brtc	.+14     	; 0x2680 <__floatsisf+0x12>
    2672:	90 95       	com	r25
    2674:	80 95       	com	r24
    2676:	70 95       	com	r23
    2678:	61 95       	neg	r22
    267a:	7f 4f       	sbci	r23, 0xFF	; 255
    267c:	8f 4f       	sbci	r24, 0xFF	; 255
    267e:	9f 4f       	sbci	r25, 0xFF	; 255
    2680:	99 23       	and	r25, r25
    2682:	a9 f0       	breq	.+42     	; 0x26ae <__floatsisf+0x40>
    2684:	f9 2f       	mov	r31, r25
    2686:	96 e9       	ldi	r25, 0x96	; 150
    2688:	bb 27       	eor	r27, r27
    268a:	93 95       	inc	r25
    268c:	f6 95       	lsr	r31
    268e:	87 95       	ror	r24
    2690:	77 95       	ror	r23
    2692:	67 95       	ror	r22
    2694:	b7 95       	ror	r27
    2696:	f1 11       	cpse	r31, r1
    2698:	f8 cf       	rjmp	.-16     	; 0x268a <__floatsisf+0x1c>
    269a:	fa f4       	brpl	.+62     	; 0x26da <__floatsisf+0x6c>
    269c:	bb 0f       	add	r27, r27
    269e:	11 f4       	brne	.+4      	; 0x26a4 <__floatsisf+0x36>
    26a0:	60 ff       	sbrs	r22, 0
    26a2:	1b c0       	rjmp	.+54     	; 0x26da <__floatsisf+0x6c>
    26a4:	6f 5f       	subi	r22, 0xFF	; 255
    26a6:	7f 4f       	sbci	r23, 0xFF	; 255
    26a8:	8f 4f       	sbci	r24, 0xFF	; 255
    26aa:	9f 4f       	sbci	r25, 0xFF	; 255
    26ac:	16 c0       	rjmp	.+44     	; 0x26da <__floatsisf+0x6c>
    26ae:	88 23       	and	r24, r24
    26b0:	11 f0       	breq	.+4      	; 0x26b6 <__floatsisf+0x48>
    26b2:	96 e9       	ldi	r25, 0x96	; 150
    26b4:	11 c0       	rjmp	.+34     	; 0x26d8 <__floatsisf+0x6a>
    26b6:	77 23       	and	r23, r23
    26b8:	21 f0       	breq	.+8      	; 0x26c2 <__floatsisf+0x54>
    26ba:	9e e8       	ldi	r25, 0x8E	; 142
    26bc:	87 2f       	mov	r24, r23
    26be:	76 2f       	mov	r23, r22
    26c0:	05 c0       	rjmp	.+10     	; 0x26cc <__floatsisf+0x5e>
    26c2:	66 23       	and	r22, r22
    26c4:	71 f0       	breq	.+28     	; 0x26e2 <__floatsisf+0x74>
    26c6:	96 e8       	ldi	r25, 0x86	; 134
    26c8:	86 2f       	mov	r24, r22
    26ca:	70 e0       	ldi	r23, 0x00	; 0
    26cc:	60 e0       	ldi	r22, 0x00	; 0
    26ce:	2a f0       	brmi	.+10     	; 0x26da <__floatsisf+0x6c>
    26d0:	9a 95       	dec	r25
    26d2:	66 0f       	add	r22, r22
    26d4:	77 1f       	adc	r23, r23
    26d6:	88 1f       	adc	r24, r24
    26d8:	da f7       	brpl	.-10     	; 0x26d0 <__floatsisf+0x62>
    26da:	88 0f       	add	r24, r24
    26dc:	96 95       	lsr	r25
    26de:	87 95       	ror	r24
    26e0:	97 f9       	bld	r25, 7
    26e2:	08 95       	ret

000026e4 <__fp_inf>:
    26e4:	97 f9       	bld	r25, 7
    26e6:	9f 67       	ori	r25, 0x7F	; 127
    26e8:	80 e8       	ldi	r24, 0x80	; 128
    26ea:	70 e0       	ldi	r23, 0x00	; 0
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	08 95       	ret

000026f0 <__fp_nan>:
    26f0:	9f ef       	ldi	r25, 0xFF	; 255
    26f2:	80 ec       	ldi	r24, 0xC0	; 192
    26f4:	08 95       	ret

000026f6 <__fp_pscA>:
    26f6:	00 24       	eor	r0, r0
    26f8:	0a 94       	dec	r0
    26fa:	16 16       	cp	r1, r22
    26fc:	17 06       	cpc	r1, r23
    26fe:	18 06       	cpc	r1, r24
    2700:	09 06       	cpc	r0, r25
    2702:	08 95       	ret

00002704 <__fp_pscB>:
    2704:	00 24       	eor	r0, r0
    2706:	0a 94       	dec	r0
    2708:	12 16       	cp	r1, r18
    270a:	13 06       	cpc	r1, r19
    270c:	14 06       	cpc	r1, r20
    270e:	05 06       	cpc	r0, r21
    2710:	08 95       	ret

00002712 <__fp_round>:
    2712:	09 2e       	mov	r0, r25
    2714:	03 94       	inc	r0
    2716:	00 0c       	add	r0, r0
    2718:	11 f4       	brne	.+4      	; 0x271e <__fp_round+0xc>
    271a:	88 23       	and	r24, r24
    271c:	52 f0       	brmi	.+20     	; 0x2732 <__fp_round+0x20>
    271e:	bb 0f       	add	r27, r27
    2720:	40 f4       	brcc	.+16     	; 0x2732 <__fp_round+0x20>
    2722:	bf 2b       	or	r27, r31
    2724:	11 f4       	brne	.+4      	; 0x272a <__fp_round+0x18>
    2726:	60 ff       	sbrs	r22, 0
    2728:	04 c0       	rjmp	.+8      	; 0x2732 <__fp_round+0x20>
    272a:	6f 5f       	subi	r22, 0xFF	; 255
    272c:	7f 4f       	sbci	r23, 0xFF	; 255
    272e:	8f 4f       	sbci	r24, 0xFF	; 255
    2730:	9f 4f       	sbci	r25, 0xFF	; 255
    2732:	08 95       	ret

00002734 <__fp_split3>:
    2734:	57 fd       	sbrc	r21, 7
    2736:	90 58       	subi	r25, 0x80	; 128
    2738:	44 0f       	add	r20, r20
    273a:	55 1f       	adc	r21, r21
    273c:	59 f0       	breq	.+22     	; 0x2754 <__fp_splitA+0x10>
    273e:	5f 3f       	cpi	r21, 0xFF	; 255
    2740:	71 f0       	breq	.+28     	; 0x275e <__fp_splitA+0x1a>
    2742:	47 95       	ror	r20

00002744 <__fp_splitA>:
    2744:	88 0f       	add	r24, r24
    2746:	97 fb       	bst	r25, 7
    2748:	99 1f       	adc	r25, r25
    274a:	61 f0       	breq	.+24     	; 0x2764 <__fp_splitA+0x20>
    274c:	9f 3f       	cpi	r25, 0xFF	; 255
    274e:	79 f0       	breq	.+30     	; 0x276e <__fp_splitA+0x2a>
    2750:	87 95       	ror	r24
    2752:	08 95       	ret
    2754:	12 16       	cp	r1, r18
    2756:	13 06       	cpc	r1, r19
    2758:	14 06       	cpc	r1, r20
    275a:	55 1f       	adc	r21, r21
    275c:	f2 cf       	rjmp	.-28     	; 0x2742 <__fp_split3+0xe>
    275e:	46 95       	lsr	r20
    2760:	f1 df       	rcall	.-30     	; 0x2744 <__fp_splitA>
    2762:	08 c0       	rjmp	.+16     	; 0x2774 <__fp_splitA+0x30>
    2764:	16 16       	cp	r1, r22
    2766:	17 06       	cpc	r1, r23
    2768:	18 06       	cpc	r1, r24
    276a:	99 1f       	adc	r25, r25
    276c:	f1 cf       	rjmp	.-30     	; 0x2750 <__fp_splitA+0xc>
    276e:	86 95       	lsr	r24
    2770:	71 05       	cpc	r23, r1
    2772:	61 05       	cpc	r22, r1
    2774:	08 94       	sec
    2776:	08 95       	ret

00002778 <__fp_zero>:
    2778:	e8 94       	clt

0000277a <__fp_szero>:
    277a:	bb 27       	eor	r27, r27
    277c:	66 27       	eor	r22, r22
    277e:	77 27       	eor	r23, r23
    2780:	cb 01       	movw	r24, r22
    2782:	97 f9       	bld	r25, 7
    2784:	08 95       	ret

00002786 <__mulsf3>:
    2786:	0e 94 d6 13 	call	0x27ac	; 0x27ac <__mulsf3x>
    278a:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__fp_round>
    278e:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__fp_pscA>
    2792:	38 f0       	brcs	.+14     	; 0x27a2 <__mulsf3+0x1c>
    2794:	0e 94 82 13 	call	0x2704	; 0x2704 <__fp_pscB>
    2798:	20 f0       	brcs	.+8      	; 0x27a2 <__mulsf3+0x1c>
    279a:	95 23       	and	r25, r21
    279c:	11 f0       	breq	.+4      	; 0x27a2 <__mulsf3+0x1c>
    279e:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_inf>
    27a2:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__fp_nan>
    27a6:	11 24       	eor	r1, r1
    27a8:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__fp_szero>

000027ac <__mulsf3x>:
    27ac:	0e 94 9a 13 	call	0x2734	; 0x2734 <__fp_split3>
    27b0:	70 f3       	brcs	.-36     	; 0x278e <__mulsf3+0x8>

000027b2 <__mulsf3_pse>:
    27b2:	95 9f       	mul	r25, r21
    27b4:	c1 f3       	breq	.-16     	; 0x27a6 <__mulsf3+0x20>
    27b6:	95 0f       	add	r25, r21
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	55 1f       	adc	r21, r21
    27bc:	62 9f       	mul	r22, r18
    27be:	f0 01       	movw	r30, r0
    27c0:	72 9f       	mul	r23, r18
    27c2:	bb 27       	eor	r27, r27
    27c4:	f0 0d       	add	r31, r0
    27c6:	b1 1d       	adc	r27, r1
    27c8:	63 9f       	mul	r22, r19
    27ca:	aa 27       	eor	r26, r26
    27cc:	f0 0d       	add	r31, r0
    27ce:	b1 1d       	adc	r27, r1
    27d0:	aa 1f       	adc	r26, r26
    27d2:	64 9f       	mul	r22, r20
    27d4:	66 27       	eor	r22, r22
    27d6:	b0 0d       	add	r27, r0
    27d8:	a1 1d       	adc	r26, r1
    27da:	66 1f       	adc	r22, r22
    27dc:	82 9f       	mul	r24, r18
    27de:	22 27       	eor	r18, r18
    27e0:	b0 0d       	add	r27, r0
    27e2:	a1 1d       	adc	r26, r1
    27e4:	62 1f       	adc	r22, r18
    27e6:	73 9f       	mul	r23, r19
    27e8:	b0 0d       	add	r27, r0
    27ea:	a1 1d       	adc	r26, r1
    27ec:	62 1f       	adc	r22, r18
    27ee:	83 9f       	mul	r24, r19
    27f0:	a0 0d       	add	r26, r0
    27f2:	61 1d       	adc	r22, r1
    27f4:	22 1f       	adc	r18, r18
    27f6:	74 9f       	mul	r23, r20
    27f8:	33 27       	eor	r19, r19
    27fa:	a0 0d       	add	r26, r0
    27fc:	61 1d       	adc	r22, r1
    27fe:	23 1f       	adc	r18, r19
    2800:	84 9f       	mul	r24, r20
    2802:	60 0d       	add	r22, r0
    2804:	21 1d       	adc	r18, r1
    2806:	82 2f       	mov	r24, r18
    2808:	76 2f       	mov	r23, r22
    280a:	6a 2f       	mov	r22, r26
    280c:	11 24       	eor	r1, r1
    280e:	9f 57       	subi	r25, 0x7F	; 127
    2810:	50 40       	sbci	r21, 0x00	; 0
    2812:	9a f0       	brmi	.+38     	; 0x283a <__mulsf3_pse+0x88>
    2814:	f1 f0       	breq	.+60     	; 0x2852 <__mulsf3_pse+0xa0>
    2816:	88 23       	and	r24, r24
    2818:	4a f0       	brmi	.+18     	; 0x282c <__mulsf3_pse+0x7a>
    281a:	ee 0f       	add	r30, r30
    281c:	ff 1f       	adc	r31, r31
    281e:	bb 1f       	adc	r27, r27
    2820:	66 1f       	adc	r22, r22
    2822:	77 1f       	adc	r23, r23
    2824:	88 1f       	adc	r24, r24
    2826:	91 50       	subi	r25, 0x01	; 1
    2828:	50 40       	sbci	r21, 0x00	; 0
    282a:	a9 f7       	brne	.-22     	; 0x2816 <__mulsf3_pse+0x64>
    282c:	9e 3f       	cpi	r25, 0xFE	; 254
    282e:	51 05       	cpc	r21, r1
    2830:	80 f0       	brcs	.+32     	; 0x2852 <__mulsf3_pse+0xa0>
    2832:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__fp_inf>
    2836:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__fp_szero>
    283a:	5f 3f       	cpi	r21, 0xFF	; 255
    283c:	e4 f3       	brlt	.-8      	; 0x2836 <__mulsf3_pse+0x84>
    283e:	98 3e       	cpi	r25, 0xE8	; 232
    2840:	d4 f3       	brlt	.-12     	; 0x2836 <__mulsf3_pse+0x84>
    2842:	86 95       	lsr	r24
    2844:	77 95       	ror	r23
    2846:	67 95       	ror	r22
    2848:	b7 95       	ror	r27
    284a:	f7 95       	ror	r31
    284c:	e7 95       	ror	r30
    284e:	9f 5f       	subi	r25, 0xFF	; 255
    2850:	c1 f7       	brne	.-16     	; 0x2842 <__mulsf3_pse+0x90>
    2852:	fe 2b       	or	r31, r30
    2854:	88 0f       	add	r24, r24
    2856:	91 1d       	adc	r25, r1
    2858:	96 95       	lsr	r25
    285a:	87 95       	ror	r24
    285c:	97 f9       	bld	r25, 7
    285e:	08 95       	ret

00002860 <__divmodhi4>:
    2860:	97 fb       	bst	r25, 7
    2862:	07 2e       	mov	r0, r23
    2864:	16 f4       	brtc	.+4      	; 0x286a <__divmodhi4+0xa>
    2866:	00 94       	com	r0
    2868:	07 d0       	rcall	.+14     	; 0x2878 <__divmodhi4_neg1>
    286a:	77 fd       	sbrc	r23, 7
    286c:	09 d0       	rcall	.+18     	; 0x2880 <__divmodhi4_neg2>
    286e:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <__udivmodhi4>
    2872:	07 fc       	sbrc	r0, 7
    2874:	05 d0       	rcall	.+10     	; 0x2880 <__divmodhi4_neg2>
    2876:	3e f4       	brtc	.+14     	; 0x2886 <__divmodhi4_exit>

00002878 <__divmodhi4_neg1>:
    2878:	90 95       	com	r25
    287a:	81 95       	neg	r24
    287c:	9f 4f       	sbci	r25, 0xFF	; 255
    287e:	08 95       	ret

00002880 <__divmodhi4_neg2>:
    2880:	70 95       	com	r23
    2882:	61 95       	neg	r22
    2884:	7f 4f       	sbci	r23, 0xFF	; 255

00002886 <__divmodhi4_exit>:
    2886:	08 95       	ret

00002888 <__udivmodsi4>:
    2888:	a1 e2       	ldi	r26, 0x21	; 33
    288a:	1a 2e       	mov	r1, r26
    288c:	aa 1b       	sub	r26, r26
    288e:	bb 1b       	sub	r27, r27
    2890:	fd 01       	movw	r30, r26
    2892:	0d c0       	rjmp	.+26     	; 0x28ae <__udivmodsi4_ep>

00002894 <__udivmodsi4_loop>:
    2894:	aa 1f       	adc	r26, r26
    2896:	bb 1f       	adc	r27, r27
    2898:	ee 1f       	adc	r30, r30
    289a:	ff 1f       	adc	r31, r31
    289c:	a2 17       	cp	r26, r18
    289e:	b3 07       	cpc	r27, r19
    28a0:	e4 07       	cpc	r30, r20
    28a2:	f5 07       	cpc	r31, r21
    28a4:	20 f0       	brcs	.+8      	; 0x28ae <__udivmodsi4_ep>
    28a6:	a2 1b       	sub	r26, r18
    28a8:	b3 0b       	sbc	r27, r19
    28aa:	e4 0b       	sbc	r30, r20
    28ac:	f5 0b       	sbc	r31, r21

000028ae <__udivmodsi4_ep>:
    28ae:	66 1f       	adc	r22, r22
    28b0:	77 1f       	adc	r23, r23
    28b2:	88 1f       	adc	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	1a 94       	dec	r1
    28b8:	69 f7       	brne	.-38     	; 0x2894 <__udivmodsi4_loop>
    28ba:	60 95       	com	r22
    28bc:	70 95       	com	r23
    28be:	80 95       	com	r24
    28c0:	90 95       	com	r25
    28c2:	9b 01       	movw	r18, r22
    28c4:	ac 01       	movw	r20, r24
    28c6:	bd 01       	movw	r22, r26
    28c8:	cf 01       	movw	r24, r30
    28ca:	08 95       	ret

000028cc <__tablejump2__>:
    28cc:	ee 0f       	add	r30, r30
    28ce:	ff 1f       	adc	r31, r31
    28d0:	05 90       	lpm	r0, Z+
    28d2:	f4 91       	lpm	r31, Z
    28d4:	e0 2d       	mov	r30, r0
    28d6:	09 94       	ijmp

000028d8 <__umulhisi3>:
    28d8:	a2 9f       	mul	r26, r18
    28da:	b0 01       	movw	r22, r0
    28dc:	b3 9f       	mul	r27, r19
    28de:	c0 01       	movw	r24, r0
    28e0:	a3 9f       	mul	r26, r19
    28e2:	70 0d       	add	r23, r0
    28e4:	81 1d       	adc	r24, r1
    28e6:	11 24       	eor	r1, r1
    28e8:	91 1d       	adc	r25, r1
    28ea:	b2 9f       	mul	r27, r18
    28ec:	70 0d       	add	r23, r0
    28ee:	81 1d       	adc	r24, r1
    28f0:	11 24       	eor	r1, r1
    28f2:	91 1d       	adc	r25, r1
    28f4:	08 95       	ret

000028f6 <__udivmodhi4>:
    28f6:	aa 1b       	sub	r26, r26
    28f8:	bb 1b       	sub	r27, r27
    28fa:	51 e1       	ldi	r21, 0x11	; 17
    28fc:	07 c0       	rjmp	.+14     	; 0x290c <__udivmodhi4_ep>

000028fe <__udivmodhi4_loop>:
    28fe:	aa 1f       	adc	r26, r26
    2900:	bb 1f       	adc	r27, r27
    2902:	a6 17       	cp	r26, r22
    2904:	b7 07       	cpc	r27, r23
    2906:	10 f0       	brcs	.+4      	; 0x290c <__udivmodhi4_ep>
    2908:	a6 1b       	sub	r26, r22
    290a:	b7 0b       	sbc	r27, r23

0000290c <__udivmodhi4_ep>:
    290c:	88 1f       	adc	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	5a 95       	dec	r21
    2912:	a9 f7       	brne	.-22     	; 0x28fe <__udivmodhi4_loop>
    2914:	80 95       	com	r24
    2916:	90 95       	com	r25
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	08 95       	ret

0000291e <snprintf>:
    291e:	ae e0       	ldi	r26, 0x0E	; 14
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	e5 e9       	ldi	r30, 0x95	; 149
    2924:	f4 e1       	ldi	r31, 0x14	; 20
    2926:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <__prologue_saves__+0x1c>
    292a:	0d 89       	ldd	r16, Y+21	; 0x15
    292c:	1e 89       	ldd	r17, Y+22	; 0x16
    292e:	8f 89       	ldd	r24, Y+23	; 0x17
    2930:	98 8d       	ldd	r25, Y+24	; 0x18
    2932:	26 e0       	ldi	r18, 0x06	; 6
    2934:	2c 83       	std	Y+4, r18	; 0x04
    2936:	1a 83       	std	Y+2, r17	; 0x02
    2938:	09 83       	std	Y+1, r16	; 0x01
    293a:	97 ff       	sbrs	r25, 7
    293c:	02 c0       	rjmp	.+4      	; 0x2942 <snprintf+0x24>
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e8       	ldi	r25, 0x80	; 128
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	9e 83       	std	Y+6, r25	; 0x06
    2946:	8d 83       	std	Y+5, r24	; 0x05
    2948:	ae 01       	movw	r20, r28
    294a:	45 5e       	subi	r20, 0xE5	; 229
    294c:	5f 4f       	sbci	r21, 0xFF	; 255
    294e:	69 8d       	ldd	r22, Y+25	; 0x19
    2950:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2952:	ce 01       	movw	r24, r28
    2954:	01 96       	adiw	r24, 0x01	; 1
    2956:	0e 94 bf 14 	call	0x297e	; 0x297e <vfprintf>
    295a:	4d 81       	ldd	r20, Y+5	; 0x05
    295c:	5e 81       	ldd	r21, Y+6	; 0x06
    295e:	57 fd       	sbrc	r21, 7
    2960:	0a c0       	rjmp	.+20     	; 0x2976 <snprintf+0x58>
    2962:	2f 81       	ldd	r18, Y+7	; 0x07
    2964:	38 85       	ldd	r19, Y+8	; 0x08
    2966:	42 17       	cp	r20, r18
    2968:	53 07       	cpc	r21, r19
    296a:	0c f4       	brge	.+2      	; 0x296e <snprintf+0x50>
    296c:	9a 01       	movw	r18, r20
    296e:	f8 01       	movw	r30, r16
    2970:	e2 0f       	add	r30, r18
    2972:	f3 1f       	adc	r31, r19
    2974:	10 82       	st	Z, r1
    2976:	2e 96       	adiw	r28, 0x0e	; 14
    2978:	e4 e0       	ldi	r30, 0x04	; 4
    297a:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__epilogue_restores__+0x1c>

0000297e <vfprintf>:
    297e:	ab e0       	ldi	r26, 0x0B	; 11
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	e5 ec       	ldi	r30, 0xC5	; 197
    2984:	f4 e1       	ldi	r31, 0x14	; 20
    2986:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__prologue_saves__>
    298a:	6c 01       	movw	r12, r24
    298c:	7b 01       	movw	r14, r22
    298e:	8a 01       	movw	r16, r20
    2990:	fc 01       	movw	r30, r24
    2992:	17 82       	std	Z+7, r1	; 0x07
    2994:	16 82       	std	Z+6, r1	; 0x06
    2996:	83 81       	ldd	r24, Z+3	; 0x03
    2998:	81 ff       	sbrs	r24, 1
    299a:	cc c1       	rjmp	.+920    	; 0x2d34 <vfprintf+0x3b6>
    299c:	ce 01       	movw	r24, r28
    299e:	01 96       	adiw	r24, 0x01	; 1
    29a0:	3c 01       	movw	r6, r24
    29a2:	f6 01       	movw	r30, r12
    29a4:	93 81       	ldd	r25, Z+3	; 0x03
    29a6:	f7 01       	movw	r30, r14
    29a8:	93 fd       	sbrc	r25, 3
    29aa:	85 91       	lpm	r24, Z+
    29ac:	93 ff       	sbrs	r25, 3
    29ae:	81 91       	ld	r24, Z+
    29b0:	7f 01       	movw	r14, r30
    29b2:	88 23       	and	r24, r24
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <vfprintf+0x3a>
    29b6:	ba c1       	rjmp	.+884    	; 0x2d2c <vfprintf+0x3ae>
    29b8:	85 32       	cpi	r24, 0x25	; 37
    29ba:	39 f4       	brne	.+14     	; 0x29ca <vfprintf+0x4c>
    29bc:	93 fd       	sbrc	r25, 3
    29be:	85 91       	lpm	r24, Z+
    29c0:	93 ff       	sbrs	r25, 3
    29c2:	81 91       	ld	r24, Z+
    29c4:	7f 01       	movw	r14, r30
    29c6:	85 32       	cpi	r24, 0x25	; 37
    29c8:	29 f4       	brne	.+10     	; 0x29d4 <vfprintf+0x56>
    29ca:	b6 01       	movw	r22, r12
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <fputc>
    29d2:	e7 cf       	rjmp	.-50     	; 0x29a2 <vfprintf+0x24>
    29d4:	91 2c       	mov	r9, r1
    29d6:	21 2c       	mov	r2, r1
    29d8:	31 2c       	mov	r3, r1
    29da:	ff e1       	ldi	r31, 0x1F	; 31
    29dc:	f3 15       	cp	r31, r3
    29de:	d8 f0       	brcs	.+54     	; 0x2a16 <vfprintf+0x98>
    29e0:	8b 32       	cpi	r24, 0x2B	; 43
    29e2:	79 f0       	breq	.+30     	; 0x2a02 <vfprintf+0x84>
    29e4:	38 f4       	brcc	.+14     	; 0x29f4 <vfprintf+0x76>
    29e6:	80 32       	cpi	r24, 0x20	; 32
    29e8:	79 f0       	breq	.+30     	; 0x2a08 <vfprintf+0x8a>
    29ea:	83 32       	cpi	r24, 0x23	; 35
    29ec:	a1 f4       	brne	.+40     	; 0x2a16 <vfprintf+0x98>
    29ee:	23 2d       	mov	r18, r3
    29f0:	20 61       	ori	r18, 0x10	; 16
    29f2:	1d c0       	rjmp	.+58     	; 0x2a2e <vfprintf+0xb0>
    29f4:	8d 32       	cpi	r24, 0x2D	; 45
    29f6:	61 f0       	breq	.+24     	; 0x2a10 <vfprintf+0x92>
    29f8:	80 33       	cpi	r24, 0x30	; 48
    29fa:	69 f4       	brne	.+26     	; 0x2a16 <vfprintf+0x98>
    29fc:	23 2d       	mov	r18, r3
    29fe:	21 60       	ori	r18, 0x01	; 1
    2a00:	16 c0       	rjmp	.+44     	; 0x2a2e <vfprintf+0xb0>
    2a02:	83 2d       	mov	r24, r3
    2a04:	82 60       	ori	r24, 0x02	; 2
    2a06:	38 2e       	mov	r3, r24
    2a08:	e3 2d       	mov	r30, r3
    2a0a:	e4 60       	ori	r30, 0x04	; 4
    2a0c:	3e 2e       	mov	r3, r30
    2a0e:	2a c0       	rjmp	.+84     	; 0x2a64 <vfprintf+0xe6>
    2a10:	f3 2d       	mov	r31, r3
    2a12:	f8 60       	ori	r31, 0x08	; 8
    2a14:	1d c0       	rjmp	.+58     	; 0x2a50 <vfprintf+0xd2>
    2a16:	37 fc       	sbrc	r3, 7
    2a18:	2d c0       	rjmp	.+90     	; 0x2a74 <vfprintf+0xf6>
    2a1a:	20 ed       	ldi	r18, 0xD0	; 208
    2a1c:	28 0f       	add	r18, r24
    2a1e:	2a 30       	cpi	r18, 0x0A	; 10
    2a20:	40 f0       	brcs	.+16     	; 0x2a32 <vfprintf+0xb4>
    2a22:	8e 32       	cpi	r24, 0x2E	; 46
    2a24:	b9 f4       	brne	.+46     	; 0x2a54 <vfprintf+0xd6>
    2a26:	36 fc       	sbrc	r3, 6
    2a28:	81 c1       	rjmp	.+770    	; 0x2d2c <vfprintf+0x3ae>
    2a2a:	23 2d       	mov	r18, r3
    2a2c:	20 64       	ori	r18, 0x40	; 64
    2a2e:	32 2e       	mov	r3, r18
    2a30:	19 c0       	rjmp	.+50     	; 0x2a64 <vfprintf+0xe6>
    2a32:	36 fe       	sbrs	r3, 6
    2a34:	06 c0       	rjmp	.+12     	; 0x2a42 <vfprintf+0xc4>
    2a36:	8a e0       	ldi	r24, 0x0A	; 10
    2a38:	98 9e       	mul	r9, r24
    2a3a:	20 0d       	add	r18, r0
    2a3c:	11 24       	eor	r1, r1
    2a3e:	92 2e       	mov	r9, r18
    2a40:	11 c0       	rjmp	.+34     	; 0x2a64 <vfprintf+0xe6>
    2a42:	ea e0       	ldi	r30, 0x0A	; 10
    2a44:	2e 9e       	mul	r2, r30
    2a46:	20 0d       	add	r18, r0
    2a48:	11 24       	eor	r1, r1
    2a4a:	22 2e       	mov	r2, r18
    2a4c:	f3 2d       	mov	r31, r3
    2a4e:	f0 62       	ori	r31, 0x20	; 32
    2a50:	3f 2e       	mov	r3, r31
    2a52:	08 c0       	rjmp	.+16     	; 0x2a64 <vfprintf+0xe6>
    2a54:	8c 36       	cpi	r24, 0x6C	; 108
    2a56:	21 f4       	brne	.+8      	; 0x2a60 <vfprintf+0xe2>
    2a58:	83 2d       	mov	r24, r3
    2a5a:	80 68       	ori	r24, 0x80	; 128
    2a5c:	38 2e       	mov	r3, r24
    2a5e:	02 c0       	rjmp	.+4      	; 0x2a64 <vfprintf+0xe6>
    2a60:	88 36       	cpi	r24, 0x68	; 104
    2a62:	41 f4       	brne	.+16     	; 0x2a74 <vfprintf+0xf6>
    2a64:	f7 01       	movw	r30, r14
    2a66:	93 fd       	sbrc	r25, 3
    2a68:	85 91       	lpm	r24, Z+
    2a6a:	93 ff       	sbrs	r25, 3
    2a6c:	81 91       	ld	r24, Z+
    2a6e:	7f 01       	movw	r14, r30
    2a70:	81 11       	cpse	r24, r1
    2a72:	b3 cf       	rjmp	.-154    	; 0x29da <vfprintf+0x5c>
    2a74:	98 2f       	mov	r25, r24
    2a76:	9f 7d       	andi	r25, 0xDF	; 223
    2a78:	95 54       	subi	r25, 0x45	; 69
    2a7a:	93 30       	cpi	r25, 0x03	; 3
    2a7c:	28 f4       	brcc	.+10     	; 0x2a88 <vfprintf+0x10a>
    2a7e:	0c 5f       	subi	r16, 0xFC	; 252
    2a80:	1f 4f       	sbci	r17, 0xFF	; 255
    2a82:	9f e3       	ldi	r25, 0x3F	; 63
    2a84:	99 83       	std	Y+1, r25	; 0x01
    2a86:	0d c0       	rjmp	.+26     	; 0x2aa2 <vfprintf+0x124>
    2a88:	83 36       	cpi	r24, 0x63	; 99
    2a8a:	31 f0       	breq	.+12     	; 0x2a98 <vfprintf+0x11a>
    2a8c:	83 37       	cpi	r24, 0x73	; 115
    2a8e:	71 f0       	breq	.+28     	; 0x2aac <vfprintf+0x12e>
    2a90:	83 35       	cpi	r24, 0x53	; 83
    2a92:	09 f0       	breq	.+2      	; 0x2a96 <vfprintf+0x118>
    2a94:	59 c0       	rjmp	.+178    	; 0x2b48 <vfprintf+0x1ca>
    2a96:	21 c0       	rjmp	.+66     	; 0x2ada <vfprintf+0x15c>
    2a98:	f8 01       	movw	r30, r16
    2a9a:	80 81       	ld	r24, Z
    2a9c:	89 83       	std	Y+1, r24	; 0x01
    2a9e:	0e 5f       	subi	r16, 0xFE	; 254
    2aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa2:	88 24       	eor	r8, r8
    2aa4:	83 94       	inc	r8
    2aa6:	91 2c       	mov	r9, r1
    2aa8:	53 01       	movw	r10, r6
    2aaa:	13 c0       	rjmp	.+38     	; 0x2ad2 <vfprintf+0x154>
    2aac:	28 01       	movw	r4, r16
    2aae:	f2 e0       	ldi	r31, 0x02	; 2
    2ab0:	4f 0e       	add	r4, r31
    2ab2:	51 1c       	adc	r5, r1
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	a0 80       	ld	r10, Z
    2ab8:	b1 80       	ldd	r11, Z+1	; 0x01
    2aba:	36 fe       	sbrs	r3, 6
    2abc:	03 c0       	rjmp	.+6      	; 0x2ac4 <vfprintf+0x146>
    2abe:	69 2d       	mov	r22, r9
    2ac0:	70 e0       	ldi	r23, 0x00	; 0
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <vfprintf+0x14a>
    2ac4:	6f ef       	ldi	r22, 0xFF	; 255
    2ac6:	7f ef       	ldi	r23, 0xFF	; 255
    2ac8:	c5 01       	movw	r24, r10
    2aca:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <strnlen>
    2ace:	4c 01       	movw	r8, r24
    2ad0:	82 01       	movw	r16, r4
    2ad2:	f3 2d       	mov	r31, r3
    2ad4:	ff 77       	andi	r31, 0x7F	; 127
    2ad6:	3f 2e       	mov	r3, r31
    2ad8:	16 c0       	rjmp	.+44     	; 0x2b06 <vfprintf+0x188>
    2ada:	28 01       	movw	r4, r16
    2adc:	22 e0       	ldi	r18, 0x02	; 2
    2ade:	42 0e       	add	r4, r18
    2ae0:	51 1c       	adc	r5, r1
    2ae2:	f8 01       	movw	r30, r16
    2ae4:	a0 80       	ld	r10, Z
    2ae6:	b1 80       	ldd	r11, Z+1	; 0x01
    2ae8:	36 fe       	sbrs	r3, 6
    2aea:	03 c0       	rjmp	.+6      	; 0x2af2 <vfprintf+0x174>
    2aec:	69 2d       	mov	r22, r9
    2aee:	70 e0       	ldi	r23, 0x00	; 0
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <vfprintf+0x178>
    2af2:	6f ef       	ldi	r22, 0xFF	; 255
    2af4:	7f ef       	ldi	r23, 0xFF	; 255
    2af6:	c5 01       	movw	r24, r10
    2af8:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <strnlen_P>
    2afc:	4c 01       	movw	r8, r24
    2afe:	f3 2d       	mov	r31, r3
    2b00:	f0 68       	ori	r31, 0x80	; 128
    2b02:	3f 2e       	mov	r3, r31
    2b04:	82 01       	movw	r16, r4
    2b06:	33 fc       	sbrc	r3, 3
    2b08:	1b c0       	rjmp	.+54     	; 0x2b40 <vfprintf+0x1c2>
    2b0a:	82 2d       	mov	r24, r2
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	88 16       	cp	r8, r24
    2b10:	99 06       	cpc	r9, r25
    2b12:	b0 f4       	brcc	.+44     	; 0x2b40 <vfprintf+0x1c2>
    2b14:	b6 01       	movw	r22, r12
    2b16:	80 e2       	ldi	r24, 0x20	; 32
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <fputc>
    2b1e:	2a 94       	dec	r2
    2b20:	f4 cf       	rjmp	.-24     	; 0x2b0a <vfprintf+0x18c>
    2b22:	f5 01       	movw	r30, r10
    2b24:	37 fc       	sbrc	r3, 7
    2b26:	85 91       	lpm	r24, Z+
    2b28:	37 fe       	sbrs	r3, 7
    2b2a:	81 91       	ld	r24, Z+
    2b2c:	5f 01       	movw	r10, r30
    2b2e:	b6 01       	movw	r22, r12
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <fputc>
    2b36:	21 10       	cpse	r2, r1
    2b38:	2a 94       	dec	r2
    2b3a:	21 e0       	ldi	r18, 0x01	; 1
    2b3c:	82 1a       	sub	r8, r18
    2b3e:	91 08       	sbc	r9, r1
    2b40:	81 14       	cp	r8, r1
    2b42:	91 04       	cpc	r9, r1
    2b44:	71 f7       	brne	.-36     	; 0x2b22 <vfprintf+0x1a4>
    2b46:	e8 c0       	rjmp	.+464    	; 0x2d18 <vfprintf+0x39a>
    2b48:	84 36       	cpi	r24, 0x64	; 100
    2b4a:	11 f0       	breq	.+4      	; 0x2b50 <vfprintf+0x1d2>
    2b4c:	89 36       	cpi	r24, 0x69	; 105
    2b4e:	41 f5       	brne	.+80     	; 0x2ba0 <vfprintf+0x222>
    2b50:	f8 01       	movw	r30, r16
    2b52:	37 fe       	sbrs	r3, 7
    2b54:	07 c0       	rjmp	.+14     	; 0x2b64 <vfprintf+0x1e6>
    2b56:	60 81       	ld	r22, Z
    2b58:	71 81       	ldd	r23, Z+1	; 0x01
    2b5a:	82 81       	ldd	r24, Z+2	; 0x02
    2b5c:	93 81       	ldd	r25, Z+3	; 0x03
    2b5e:	0c 5f       	subi	r16, 0xFC	; 252
    2b60:	1f 4f       	sbci	r17, 0xFF	; 255
    2b62:	08 c0       	rjmp	.+16     	; 0x2b74 <vfprintf+0x1f6>
    2b64:	60 81       	ld	r22, Z
    2b66:	71 81       	ldd	r23, Z+1	; 0x01
    2b68:	07 2e       	mov	r0, r23
    2b6a:	00 0c       	add	r0, r0
    2b6c:	88 0b       	sbc	r24, r24
    2b6e:	99 0b       	sbc	r25, r25
    2b70:	0e 5f       	subi	r16, 0xFE	; 254
    2b72:	1f 4f       	sbci	r17, 0xFF	; 255
    2b74:	f3 2d       	mov	r31, r3
    2b76:	ff 76       	andi	r31, 0x6F	; 111
    2b78:	3f 2e       	mov	r3, r31
    2b7a:	97 ff       	sbrs	r25, 7
    2b7c:	09 c0       	rjmp	.+18     	; 0x2b90 <vfprintf+0x212>
    2b7e:	90 95       	com	r25
    2b80:	80 95       	com	r24
    2b82:	70 95       	com	r23
    2b84:	61 95       	neg	r22
    2b86:	7f 4f       	sbci	r23, 0xFF	; 255
    2b88:	8f 4f       	sbci	r24, 0xFF	; 255
    2b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8c:	f0 68       	ori	r31, 0x80	; 128
    2b8e:	3f 2e       	mov	r3, r31
    2b90:	2a e0       	ldi	r18, 0x0A	; 10
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	a3 01       	movw	r20, r6
    2b96:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__ultoa_invert>
    2b9a:	88 2e       	mov	r8, r24
    2b9c:	86 18       	sub	r8, r6
    2b9e:	45 c0       	rjmp	.+138    	; 0x2c2a <vfprintf+0x2ac>
    2ba0:	85 37       	cpi	r24, 0x75	; 117
    2ba2:	31 f4       	brne	.+12     	; 0x2bb0 <vfprintf+0x232>
    2ba4:	23 2d       	mov	r18, r3
    2ba6:	2f 7e       	andi	r18, 0xEF	; 239
    2ba8:	b2 2e       	mov	r11, r18
    2baa:	2a e0       	ldi	r18, 0x0A	; 10
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	25 c0       	rjmp	.+74     	; 0x2bfa <vfprintf+0x27c>
    2bb0:	93 2d       	mov	r25, r3
    2bb2:	99 7f       	andi	r25, 0xF9	; 249
    2bb4:	b9 2e       	mov	r11, r25
    2bb6:	8f 36       	cpi	r24, 0x6F	; 111
    2bb8:	c1 f0       	breq	.+48     	; 0x2bea <vfprintf+0x26c>
    2bba:	18 f4       	brcc	.+6      	; 0x2bc2 <vfprintf+0x244>
    2bbc:	88 35       	cpi	r24, 0x58	; 88
    2bbe:	79 f0       	breq	.+30     	; 0x2bde <vfprintf+0x260>
    2bc0:	b5 c0       	rjmp	.+362    	; 0x2d2c <vfprintf+0x3ae>
    2bc2:	80 37       	cpi	r24, 0x70	; 112
    2bc4:	19 f0       	breq	.+6      	; 0x2bcc <vfprintf+0x24e>
    2bc6:	88 37       	cpi	r24, 0x78	; 120
    2bc8:	21 f0       	breq	.+8      	; 0x2bd2 <vfprintf+0x254>
    2bca:	b0 c0       	rjmp	.+352    	; 0x2d2c <vfprintf+0x3ae>
    2bcc:	e9 2f       	mov	r30, r25
    2bce:	e0 61       	ori	r30, 0x10	; 16
    2bd0:	be 2e       	mov	r11, r30
    2bd2:	b4 fe       	sbrs	r11, 4
    2bd4:	0d c0       	rjmp	.+26     	; 0x2bf0 <vfprintf+0x272>
    2bd6:	fb 2d       	mov	r31, r11
    2bd8:	f4 60       	ori	r31, 0x04	; 4
    2bda:	bf 2e       	mov	r11, r31
    2bdc:	09 c0       	rjmp	.+18     	; 0x2bf0 <vfprintf+0x272>
    2bde:	34 fe       	sbrs	r3, 4
    2be0:	0a c0       	rjmp	.+20     	; 0x2bf6 <vfprintf+0x278>
    2be2:	29 2f       	mov	r18, r25
    2be4:	26 60       	ori	r18, 0x06	; 6
    2be6:	b2 2e       	mov	r11, r18
    2be8:	06 c0       	rjmp	.+12     	; 0x2bf6 <vfprintf+0x278>
    2bea:	28 e0       	ldi	r18, 0x08	; 8
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	05 c0       	rjmp	.+10     	; 0x2bfa <vfprintf+0x27c>
    2bf0:	20 e1       	ldi	r18, 0x10	; 16
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	02 c0       	rjmp	.+4      	; 0x2bfa <vfprintf+0x27c>
    2bf6:	20 e1       	ldi	r18, 0x10	; 16
    2bf8:	32 e0       	ldi	r19, 0x02	; 2
    2bfa:	f8 01       	movw	r30, r16
    2bfc:	b7 fe       	sbrs	r11, 7
    2bfe:	07 c0       	rjmp	.+14     	; 0x2c0e <vfprintf+0x290>
    2c00:	60 81       	ld	r22, Z
    2c02:	71 81       	ldd	r23, Z+1	; 0x01
    2c04:	82 81       	ldd	r24, Z+2	; 0x02
    2c06:	93 81       	ldd	r25, Z+3	; 0x03
    2c08:	0c 5f       	subi	r16, 0xFC	; 252
    2c0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0c:	06 c0       	rjmp	.+12     	; 0x2c1a <vfprintf+0x29c>
    2c0e:	60 81       	ld	r22, Z
    2c10:	71 81       	ldd	r23, Z+1	; 0x01
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	0e 5f       	subi	r16, 0xFE	; 254
    2c18:	1f 4f       	sbci	r17, 0xFF	; 255
    2c1a:	a3 01       	movw	r20, r6
    2c1c:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <__ultoa_invert>
    2c20:	88 2e       	mov	r8, r24
    2c22:	86 18       	sub	r8, r6
    2c24:	fb 2d       	mov	r31, r11
    2c26:	ff 77       	andi	r31, 0x7F	; 127
    2c28:	3f 2e       	mov	r3, r31
    2c2a:	36 fe       	sbrs	r3, 6
    2c2c:	0d c0       	rjmp	.+26     	; 0x2c48 <vfprintf+0x2ca>
    2c2e:	23 2d       	mov	r18, r3
    2c30:	2e 7f       	andi	r18, 0xFE	; 254
    2c32:	a2 2e       	mov	r10, r18
    2c34:	89 14       	cp	r8, r9
    2c36:	58 f4       	brcc	.+22     	; 0x2c4e <vfprintf+0x2d0>
    2c38:	34 fe       	sbrs	r3, 4
    2c3a:	0b c0       	rjmp	.+22     	; 0x2c52 <vfprintf+0x2d4>
    2c3c:	32 fc       	sbrc	r3, 2
    2c3e:	09 c0       	rjmp	.+18     	; 0x2c52 <vfprintf+0x2d4>
    2c40:	83 2d       	mov	r24, r3
    2c42:	8e 7e       	andi	r24, 0xEE	; 238
    2c44:	a8 2e       	mov	r10, r24
    2c46:	05 c0       	rjmp	.+10     	; 0x2c52 <vfprintf+0x2d4>
    2c48:	b8 2c       	mov	r11, r8
    2c4a:	a3 2c       	mov	r10, r3
    2c4c:	03 c0       	rjmp	.+6      	; 0x2c54 <vfprintf+0x2d6>
    2c4e:	b8 2c       	mov	r11, r8
    2c50:	01 c0       	rjmp	.+2      	; 0x2c54 <vfprintf+0x2d6>
    2c52:	b9 2c       	mov	r11, r9
    2c54:	a4 fe       	sbrs	r10, 4
    2c56:	0f c0       	rjmp	.+30     	; 0x2c76 <vfprintf+0x2f8>
    2c58:	fe 01       	movw	r30, r28
    2c5a:	e8 0d       	add	r30, r8
    2c5c:	f1 1d       	adc	r31, r1
    2c5e:	80 81       	ld	r24, Z
    2c60:	80 33       	cpi	r24, 0x30	; 48
    2c62:	21 f4       	brne	.+8      	; 0x2c6c <vfprintf+0x2ee>
    2c64:	9a 2d       	mov	r25, r10
    2c66:	99 7e       	andi	r25, 0xE9	; 233
    2c68:	a9 2e       	mov	r10, r25
    2c6a:	09 c0       	rjmp	.+18     	; 0x2c7e <vfprintf+0x300>
    2c6c:	a2 fe       	sbrs	r10, 2
    2c6e:	06 c0       	rjmp	.+12     	; 0x2c7c <vfprintf+0x2fe>
    2c70:	b3 94       	inc	r11
    2c72:	b3 94       	inc	r11
    2c74:	04 c0       	rjmp	.+8      	; 0x2c7e <vfprintf+0x300>
    2c76:	8a 2d       	mov	r24, r10
    2c78:	86 78       	andi	r24, 0x86	; 134
    2c7a:	09 f0       	breq	.+2      	; 0x2c7e <vfprintf+0x300>
    2c7c:	b3 94       	inc	r11
    2c7e:	a3 fc       	sbrc	r10, 3
    2c80:	11 c0       	rjmp	.+34     	; 0x2ca4 <vfprintf+0x326>
    2c82:	a0 fe       	sbrs	r10, 0
    2c84:	06 c0       	rjmp	.+12     	; 0x2c92 <vfprintf+0x314>
    2c86:	b2 14       	cp	r11, r2
    2c88:	88 f4       	brcc	.+34     	; 0x2cac <vfprintf+0x32e>
    2c8a:	28 0c       	add	r2, r8
    2c8c:	92 2c       	mov	r9, r2
    2c8e:	9b 18       	sub	r9, r11
    2c90:	0e c0       	rjmp	.+28     	; 0x2cae <vfprintf+0x330>
    2c92:	b2 14       	cp	r11, r2
    2c94:	60 f4       	brcc	.+24     	; 0x2cae <vfprintf+0x330>
    2c96:	b6 01       	movw	r22, r12
    2c98:	80 e2       	ldi	r24, 0x20	; 32
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <fputc>
    2ca0:	b3 94       	inc	r11
    2ca2:	f7 cf       	rjmp	.-18     	; 0x2c92 <vfprintf+0x314>
    2ca4:	b2 14       	cp	r11, r2
    2ca6:	18 f4       	brcc	.+6      	; 0x2cae <vfprintf+0x330>
    2ca8:	2b 18       	sub	r2, r11
    2caa:	02 c0       	rjmp	.+4      	; 0x2cb0 <vfprintf+0x332>
    2cac:	98 2c       	mov	r9, r8
    2cae:	21 2c       	mov	r2, r1
    2cb0:	a4 fe       	sbrs	r10, 4
    2cb2:	10 c0       	rjmp	.+32     	; 0x2cd4 <vfprintf+0x356>
    2cb4:	b6 01       	movw	r22, r12
    2cb6:	80 e3       	ldi	r24, 0x30	; 48
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <fputc>
    2cbe:	a2 fe       	sbrs	r10, 2
    2cc0:	17 c0       	rjmp	.+46     	; 0x2cf0 <vfprintf+0x372>
    2cc2:	a1 fc       	sbrc	r10, 1
    2cc4:	03 c0       	rjmp	.+6      	; 0x2ccc <vfprintf+0x34e>
    2cc6:	88 e7       	ldi	r24, 0x78	; 120
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	02 c0       	rjmp	.+4      	; 0x2cd0 <vfprintf+0x352>
    2ccc:	88 e5       	ldi	r24, 0x58	; 88
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	b6 01       	movw	r22, r12
    2cd2:	0c c0       	rjmp	.+24     	; 0x2cec <vfprintf+0x36e>
    2cd4:	8a 2d       	mov	r24, r10
    2cd6:	86 78       	andi	r24, 0x86	; 134
    2cd8:	59 f0       	breq	.+22     	; 0x2cf0 <vfprintf+0x372>
    2cda:	a1 fe       	sbrs	r10, 1
    2cdc:	02 c0       	rjmp	.+4      	; 0x2ce2 <vfprintf+0x364>
    2cde:	8b e2       	ldi	r24, 0x2B	; 43
    2ce0:	01 c0       	rjmp	.+2      	; 0x2ce4 <vfprintf+0x366>
    2ce2:	80 e2       	ldi	r24, 0x20	; 32
    2ce4:	a7 fc       	sbrc	r10, 7
    2ce6:	8d e2       	ldi	r24, 0x2D	; 45
    2ce8:	b6 01       	movw	r22, r12
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <fputc>
    2cf0:	89 14       	cp	r8, r9
    2cf2:	38 f4       	brcc	.+14     	; 0x2d02 <vfprintf+0x384>
    2cf4:	b6 01       	movw	r22, r12
    2cf6:	80 e3       	ldi	r24, 0x30	; 48
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <fputc>
    2cfe:	9a 94       	dec	r9
    2d00:	f7 cf       	rjmp	.-18     	; 0x2cf0 <vfprintf+0x372>
    2d02:	8a 94       	dec	r8
    2d04:	f3 01       	movw	r30, r6
    2d06:	e8 0d       	add	r30, r8
    2d08:	f1 1d       	adc	r31, r1
    2d0a:	80 81       	ld	r24, Z
    2d0c:	b6 01       	movw	r22, r12
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <fputc>
    2d14:	81 10       	cpse	r8, r1
    2d16:	f5 cf       	rjmp	.-22     	; 0x2d02 <vfprintf+0x384>
    2d18:	22 20       	and	r2, r2
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <vfprintf+0x3a0>
    2d1c:	42 ce       	rjmp	.-892    	; 0x29a2 <vfprintf+0x24>
    2d1e:	b6 01       	movw	r22, r12
    2d20:	80 e2       	ldi	r24, 0x20	; 32
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <fputc>
    2d28:	2a 94       	dec	r2
    2d2a:	f6 cf       	rjmp	.-20     	; 0x2d18 <vfprintf+0x39a>
    2d2c:	f6 01       	movw	r30, r12
    2d2e:	86 81       	ldd	r24, Z+6	; 0x06
    2d30:	97 81       	ldd	r25, Z+7	; 0x07
    2d32:	02 c0       	rjmp	.+4      	; 0x2d38 <vfprintf+0x3ba>
    2d34:	8f ef       	ldi	r24, 0xFF	; 255
    2d36:	9f ef       	ldi	r25, 0xFF	; 255
    2d38:	2b 96       	adiw	r28, 0x0b	; 11
    2d3a:	e2 e1       	ldi	r30, 0x12	; 18
    2d3c:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__epilogue_restores__>

00002d40 <strnlen_P>:
    2d40:	fc 01       	movw	r30, r24
    2d42:	05 90       	lpm	r0, Z+
    2d44:	61 50       	subi	r22, 0x01	; 1
    2d46:	70 40       	sbci	r23, 0x00	; 0
    2d48:	01 10       	cpse	r0, r1
    2d4a:	d8 f7       	brcc	.-10     	; 0x2d42 <strnlen_P+0x2>
    2d4c:	80 95       	com	r24
    2d4e:	90 95       	com	r25
    2d50:	8e 0f       	add	r24, r30
    2d52:	9f 1f       	adc	r25, r31
    2d54:	08 95       	ret

00002d56 <strnlen>:
    2d56:	fc 01       	movw	r30, r24
    2d58:	61 50       	subi	r22, 0x01	; 1
    2d5a:	70 40       	sbci	r23, 0x00	; 0
    2d5c:	01 90       	ld	r0, Z+
    2d5e:	01 10       	cpse	r0, r1
    2d60:	d8 f7       	brcc	.-10     	; 0x2d58 <strnlen+0x2>
    2d62:	80 95       	com	r24
    2d64:	90 95       	com	r25
    2d66:	8e 0f       	add	r24, r30
    2d68:	9f 1f       	adc	r25, r31
    2d6a:	08 95       	ret

00002d6c <fputc>:
    2d6c:	0f 93       	push	r16
    2d6e:	1f 93       	push	r17
    2d70:	cf 93       	push	r28
    2d72:	df 93       	push	r29
    2d74:	fb 01       	movw	r30, r22
    2d76:	23 81       	ldd	r18, Z+3	; 0x03
    2d78:	21 fd       	sbrc	r18, 1
    2d7a:	03 c0       	rjmp	.+6      	; 0x2d82 <fputc+0x16>
    2d7c:	8f ef       	ldi	r24, 0xFF	; 255
    2d7e:	9f ef       	ldi	r25, 0xFF	; 255
    2d80:	2c c0       	rjmp	.+88     	; 0x2dda <fputc+0x6e>
    2d82:	22 ff       	sbrs	r18, 2
    2d84:	16 c0       	rjmp	.+44     	; 0x2db2 <fputc+0x46>
    2d86:	46 81       	ldd	r20, Z+6	; 0x06
    2d88:	57 81       	ldd	r21, Z+7	; 0x07
    2d8a:	24 81       	ldd	r18, Z+4	; 0x04
    2d8c:	35 81       	ldd	r19, Z+5	; 0x05
    2d8e:	42 17       	cp	r20, r18
    2d90:	53 07       	cpc	r21, r19
    2d92:	44 f4       	brge	.+16     	; 0x2da4 <fputc+0x38>
    2d94:	a0 81       	ld	r26, Z
    2d96:	b1 81       	ldd	r27, Z+1	; 0x01
    2d98:	9d 01       	movw	r18, r26
    2d9a:	2f 5f       	subi	r18, 0xFF	; 255
    2d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d9e:	31 83       	std	Z+1, r19	; 0x01
    2da0:	20 83       	st	Z, r18
    2da2:	8c 93       	st	X, r24
    2da4:	26 81       	ldd	r18, Z+6	; 0x06
    2da6:	37 81       	ldd	r19, Z+7	; 0x07
    2da8:	2f 5f       	subi	r18, 0xFF	; 255
    2daa:	3f 4f       	sbci	r19, 0xFF	; 255
    2dac:	37 83       	std	Z+7, r19	; 0x07
    2dae:	26 83       	std	Z+6, r18	; 0x06
    2db0:	14 c0       	rjmp	.+40     	; 0x2dda <fputc+0x6e>
    2db2:	8b 01       	movw	r16, r22
    2db4:	ec 01       	movw	r28, r24
    2db6:	fb 01       	movw	r30, r22
    2db8:	00 84       	ldd	r0, Z+8	; 0x08
    2dba:	f1 85       	ldd	r31, Z+9	; 0x09
    2dbc:	e0 2d       	mov	r30, r0
    2dbe:	09 95       	icall
    2dc0:	89 2b       	or	r24, r25
    2dc2:	e1 f6       	brne	.-72     	; 0x2d7c <fputc+0x10>
    2dc4:	d8 01       	movw	r26, r16
    2dc6:	16 96       	adiw	r26, 0x06	; 6
    2dc8:	8d 91       	ld	r24, X+
    2dca:	9c 91       	ld	r25, X
    2dcc:	17 97       	sbiw	r26, 0x07	; 7
    2dce:	01 96       	adiw	r24, 0x01	; 1
    2dd0:	17 96       	adiw	r26, 0x07	; 7
    2dd2:	9c 93       	st	X, r25
    2dd4:	8e 93       	st	-X, r24
    2dd6:	16 97       	sbiw	r26, 0x06	; 6
    2dd8:	ce 01       	movw	r24, r28
    2dda:	df 91       	pop	r29
    2ddc:	cf 91       	pop	r28
    2dde:	1f 91       	pop	r17
    2de0:	0f 91       	pop	r16
    2de2:	08 95       	ret

00002de4 <__ultoa_invert>:
    2de4:	fa 01       	movw	r30, r20
    2de6:	aa 27       	eor	r26, r26
    2de8:	28 30       	cpi	r18, 0x08	; 8
    2dea:	51 f1       	breq	.+84     	; 0x2e40 <__ultoa_invert+0x5c>
    2dec:	20 31       	cpi	r18, 0x10	; 16
    2dee:	81 f1       	breq	.+96     	; 0x2e50 <__ultoa_invert+0x6c>
    2df0:	e8 94       	clt
    2df2:	6f 93       	push	r22
    2df4:	6e 7f       	andi	r22, 0xFE	; 254
    2df6:	6e 5f       	subi	r22, 0xFE	; 254
    2df8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfa:	8f 4f       	sbci	r24, 0xFF	; 255
    2dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfe:	af 4f       	sbci	r26, 0xFF	; 255
    2e00:	b1 e0       	ldi	r27, 0x01	; 1
    2e02:	3e d0       	rcall	.+124    	; 0x2e80 <__ultoa_invert+0x9c>
    2e04:	b4 e0       	ldi	r27, 0x04	; 4
    2e06:	3c d0       	rcall	.+120    	; 0x2e80 <__ultoa_invert+0x9c>
    2e08:	67 0f       	add	r22, r23
    2e0a:	78 1f       	adc	r23, r24
    2e0c:	89 1f       	adc	r24, r25
    2e0e:	9a 1f       	adc	r25, r26
    2e10:	a1 1d       	adc	r26, r1
    2e12:	68 0f       	add	r22, r24
    2e14:	79 1f       	adc	r23, r25
    2e16:	8a 1f       	adc	r24, r26
    2e18:	91 1d       	adc	r25, r1
    2e1a:	a1 1d       	adc	r26, r1
    2e1c:	6a 0f       	add	r22, r26
    2e1e:	71 1d       	adc	r23, r1
    2e20:	81 1d       	adc	r24, r1
    2e22:	91 1d       	adc	r25, r1
    2e24:	a1 1d       	adc	r26, r1
    2e26:	20 d0       	rcall	.+64     	; 0x2e68 <__ultoa_invert+0x84>
    2e28:	09 f4       	brne	.+2      	; 0x2e2c <__ultoa_invert+0x48>
    2e2a:	68 94       	set
    2e2c:	3f 91       	pop	r19
    2e2e:	2a e0       	ldi	r18, 0x0A	; 10
    2e30:	26 9f       	mul	r18, r22
    2e32:	11 24       	eor	r1, r1
    2e34:	30 19       	sub	r19, r0
    2e36:	30 5d       	subi	r19, 0xD0	; 208
    2e38:	31 93       	st	Z+, r19
    2e3a:	de f6       	brtc	.-74     	; 0x2df2 <__ultoa_invert+0xe>
    2e3c:	cf 01       	movw	r24, r30
    2e3e:	08 95       	ret
    2e40:	46 2f       	mov	r20, r22
    2e42:	47 70       	andi	r20, 0x07	; 7
    2e44:	40 5d       	subi	r20, 0xD0	; 208
    2e46:	41 93       	st	Z+, r20
    2e48:	b3 e0       	ldi	r27, 0x03	; 3
    2e4a:	0f d0       	rcall	.+30     	; 0x2e6a <__ultoa_invert+0x86>
    2e4c:	c9 f7       	brne	.-14     	; 0x2e40 <__ultoa_invert+0x5c>
    2e4e:	f6 cf       	rjmp	.-20     	; 0x2e3c <__ultoa_invert+0x58>
    2e50:	46 2f       	mov	r20, r22
    2e52:	4f 70       	andi	r20, 0x0F	; 15
    2e54:	40 5d       	subi	r20, 0xD0	; 208
    2e56:	4a 33       	cpi	r20, 0x3A	; 58
    2e58:	18 f0       	brcs	.+6      	; 0x2e60 <__ultoa_invert+0x7c>
    2e5a:	49 5d       	subi	r20, 0xD9	; 217
    2e5c:	31 fd       	sbrc	r19, 1
    2e5e:	40 52       	subi	r20, 0x20	; 32
    2e60:	41 93       	st	Z+, r20
    2e62:	02 d0       	rcall	.+4      	; 0x2e68 <__ultoa_invert+0x84>
    2e64:	a9 f7       	brne	.-22     	; 0x2e50 <__ultoa_invert+0x6c>
    2e66:	ea cf       	rjmp	.-44     	; 0x2e3c <__ultoa_invert+0x58>
    2e68:	b4 e0       	ldi	r27, 0x04	; 4
    2e6a:	a6 95       	lsr	r26
    2e6c:	97 95       	ror	r25
    2e6e:	87 95       	ror	r24
    2e70:	77 95       	ror	r23
    2e72:	67 95       	ror	r22
    2e74:	ba 95       	dec	r27
    2e76:	c9 f7       	brne	.-14     	; 0x2e6a <__ultoa_invert+0x86>
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	61 05       	cpc	r22, r1
    2e7c:	71 05       	cpc	r23, r1
    2e7e:	08 95       	ret
    2e80:	9b 01       	movw	r18, r22
    2e82:	ac 01       	movw	r20, r24
    2e84:	0a 2e       	mov	r0, r26
    2e86:	06 94       	lsr	r0
    2e88:	57 95       	ror	r21
    2e8a:	47 95       	ror	r20
    2e8c:	37 95       	ror	r19
    2e8e:	27 95       	ror	r18
    2e90:	ba 95       	dec	r27
    2e92:	c9 f7       	brne	.-14     	; 0x2e86 <__ultoa_invert+0xa2>
    2e94:	62 0f       	add	r22, r18
    2e96:	73 1f       	adc	r23, r19
    2e98:	84 1f       	adc	r24, r20
    2e9a:	95 1f       	adc	r25, r21
    2e9c:	a0 1d       	adc	r26, r0
    2e9e:	08 95       	ret

00002ea0 <eeprom_read_byte>:
    2ea0:	e1 99       	sbic	0x1c, 1	; 28
    2ea2:	fe cf       	rjmp	.-4      	; 0x2ea0 <eeprom_read_byte>
    2ea4:	9f bb       	out	0x1f, r25	; 31
    2ea6:	8e bb       	out	0x1e, r24	; 30
    2ea8:	e0 9a       	sbi	0x1c, 0	; 28
    2eaa:	99 27       	eor	r25, r25
    2eac:	8d b3       	in	r24, 0x1d	; 29
    2eae:	08 95       	ret

00002eb0 <eeprom_read_dword>:
    2eb0:	a6 e1       	ldi	r26, 0x16	; 22
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	44 e0       	ldi	r20, 0x04	; 4
    2eb6:	50 e0       	ldi	r21, 0x00	; 0
    2eb8:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <eeprom_read_blraw>

00002ebc <eeprom_read_word>:
    2ebc:	a8 e1       	ldi	r26, 0x18	; 24
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	42 e0       	ldi	r20, 0x02	; 2
    2ec2:	50 e0       	ldi	r21, 0x00	; 0
    2ec4:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <eeprom_read_blraw>

00002ec8 <eeprom_write_byte>:
    2ec8:	26 2f       	mov	r18, r22

00002eca <eeprom_write_r18>:
    2eca:	e1 99       	sbic	0x1c, 1	; 28
    2ecc:	fe cf       	rjmp	.-4      	; 0x2eca <eeprom_write_r18>
    2ece:	9f bb       	out	0x1f, r25	; 31
    2ed0:	8e bb       	out	0x1e, r24	; 30
    2ed2:	2d bb       	out	0x1d, r18	; 29
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	e2 9a       	sbi	0x1c, 2	; 28
    2eda:	e1 9a       	sbi	0x1c, 1	; 28
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	01 96       	adiw	r24, 0x01	; 1
    2ee0:	08 95       	ret

00002ee2 <eeprom_write_dword>:
    2ee2:	24 2f       	mov	r18, r20
    2ee4:	0e 94 65 17 	call	0x2eca	; 0x2eca <eeprom_write_r18>
    2ee8:	25 2f       	mov	r18, r21
    2eea:	0e 94 65 17 	call	0x2eca	; 0x2eca <eeprom_write_r18>
    2eee:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <eeprom_write_word>

00002ef2 <eeprom_write_word>:
    2ef2:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <eeprom_write_byte>
    2ef6:	27 2f       	mov	r18, r23
    2ef8:	0c 94 65 17 	jmp	0x2eca	; 0x2eca <eeprom_write_r18>

00002efc <eeprom_read_block>:
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22

00002f00 <eeprom_read_blraw>:
    2f00:	fc 01       	movw	r30, r24
    2f02:	e1 99       	sbic	0x1c, 1	; 28
    2f04:	fe cf       	rjmp	.-4      	; 0x2f02 <eeprom_read_blraw+0x2>
    2f06:	06 c0       	rjmp	.+12     	; 0x2f14 <eeprom_read_blraw+0x14>
    2f08:	ff bb       	out	0x1f, r31	; 31
    2f0a:	ee bb       	out	0x1e, r30	; 30
    2f0c:	e0 9a       	sbi	0x1c, 0	; 28
    2f0e:	31 96       	adiw	r30, 0x01	; 1
    2f10:	0d b2       	in	r0, 0x1d	; 29
    2f12:	0d 92       	st	X+, r0
    2f14:	41 50       	subi	r20, 0x01	; 1
    2f16:	50 40       	sbci	r21, 0x00	; 0
    2f18:	b8 f7       	brcc	.-18     	; 0x2f08 <eeprom_read_blraw+0x8>
    2f1a:	08 95       	ret

00002f1c <__prologue_saves__>:
    2f1c:	2f 92       	push	r2
    2f1e:	3f 92       	push	r3
    2f20:	4f 92       	push	r4
    2f22:	5f 92       	push	r5
    2f24:	6f 92       	push	r6
    2f26:	7f 92       	push	r7
    2f28:	8f 92       	push	r8
    2f2a:	9f 92       	push	r9
    2f2c:	af 92       	push	r10
    2f2e:	bf 92       	push	r11
    2f30:	cf 92       	push	r12
    2f32:	df 92       	push	r13
    2f34:	ef 92       	push	r14
    2f36:	ff 92       	push	r15
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	ca 1b       	sub	r28, r26
    2f46:	db 0b       	sbc	r29, r27
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	f8 94       	cli
    2f4c:	de bf       	out	0x3e, r29	; 62
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	cd bf       	out	0x3d, r28	; 61
    2f52:	09 94       	ijmp

00002f54 <__epilogue_restores__>:
    2f54:	2a 88       	ldd	r2, Y+18	; 0x12
    2f56:	39 88       	ldd	r3, Y+17	; 0x11
    2f58:	48 88       	ldd	r4, Y+16	; 0x10
    2f5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f60:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f62:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f64:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f66:	b9 84       	ldd	r11, Y+9	; 0x09
    2f68:	c8 84       	ldd	r12, Y+8	; 0x08
    2f6a:	df 80       	ldd	r13, Y+7	; 0x07
    2f6c:	ee 80       	ldd	r14, Y+6	; 0x06
    2f6e:	fd 80       	ldd	r15, Y+5	; 0x05
    2f70:	0c 81       	ldd	r16, Y+4	; 0x04
    2f72:	1b 81       	ldd	r17, Y+3	; 0x03
    2f74:	aa 81       	ldd	r26, Y+2	; 0x02
    2f76:	b9 81       	ldd	r27, Y+1	; 0x01
    2f78:	ce 0f       	add	r28, r30
    2f7a:	d1 1d       	adc	r29, r1
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	de bf       	out	0x3e, r29	; 62
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	cd bf       	out	0x3d, r28	; 61
    2f86:	ed 01       	movw	r28, r26
    2f88:	08 95       	ret

00002f8a <_exit>:
    2f8a:	f8 94       	cli

00002f8c <__stop_program>:
    2f8c:	ff cf       	rjmp	.-2      	; 0x2f8c <__stop_program>
