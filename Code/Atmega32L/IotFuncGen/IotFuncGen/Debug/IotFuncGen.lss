
IotFuncGen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000289a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000160  00800060  0000289a  0000292e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  008001c0  008001c0  00002a8e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002aec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00002b28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a94  00000000  00000000  00002d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ded  00000000  00000000  00006794  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002161  00000000  00000000  00007581  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  000096e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b08  00000000  00000000  00009b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026ca  00000000  00000000  0000a610  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000ccda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
       4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
       c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
      54:	b9 04       	cpc	r11, r9
      56:	b9 04       	cpc	r11, r9
      58:	0b 05       	cpc	r16, r11
      5a:	cf 04       	cpc	r12, r15
      5c:	c4 04       	cpc	r12, r4
      5e:	c4 04       	cpc	r12, r4
      60:	3a 05       	cpc	r19, r10
      62:	ed 04       	cpc	r14, r13
      64:	a7 05       	cpc	r26, r7
      66:	bc 05       	cpc	r27, r12
      68:	e6 05       	cpc	r30, r6
      6a:	fb 05       	cpc	r31, r11
      6c:	d1 05       	cpc	r29, r1
      6e:	bc 05       	cpc	r27, r12
      70:	e6 05       	cpc	r30, r6
      72:	fb 05       	cpc	r31, r11
      74:	d1 05       	cpc	r29, r1
      76:	e6 05       	cpc	r30, r6
      78:	fb 05       	cpc	r31, r11
      7a:	1f 06       	cpc	r1, r31
      7c:	d5 06       	cpc	r13, r21
      7e:	3b 07       	cpc	r19, r27
      80:	a5 06       	cpc	r10, r21
      82:	59 06       	cpc	r5, r25
      84:	08 07       	cpc	r16, r24
      86:	68 07       	cpc	r22, r24
      88:	bd 06       	cpc	r11, r29
      8a:	14 0a       	sbc	r1, r20
      8c:	3a 0a       	sbc	r3, r26
      8e:	4e 0a       	sbc	r4, r30
      90:	28 0a       	sbc	r2, r24
      92:	60 0a       	sbc	r6, r16
      94:	87 0a       	sbc	r8, r23
      96:	9b 0a       	sbc	r9, r27
      98:	74 0a       	sbc	r7, r20
      9a:	ae 0a       	sbc	r10, r30
      9c:	c2 0a       	sbc	r12, r18
      9e:	e1 0a       	sbc	r14, r17
      a0:	7f 0b       	sbc	r23, r31
      a2:	4f 0c       	add	r4, r15
      a4:	2f 0b       	sbc	r18, r31
      a6:	db 0c       	add	r13, r11
      a8:	79 0d       	add	r23, r9
      aa:	49 0e       	add	r4, r25
      ac:	29 0d       	add	r18, r9
      ae:	ef 0e       	add	r14, r31
      b0:	f1 0e       	add	r15, r17
      b2:	f3 0e       	add	r15, r19
      b4:	f5 0e       	add	r15, r21
      b6:	f7 0e       	add	r15, r23
      b8:	f9 0e       	add	r15, r25
      ba:	fb 0e       	add	r15, r27
      bc:	15 0f       	add	r17, r21
      be:	17 0f       	add	r17, r23
      c0:	19 0f       	add	r17, r25
      c2:	1b 0f       	add	r17, r27
      c4:	1d 0f       	add	r17, r29
      c6:	1f 0f       	add	r17, r31
      c8:	21 0f       	add	r18, r17

000000ca <__ctors_end>:
      ca:	11 24       	eor	r1, r1
      cc:	1f be       	out	0x3f, r1	; 63
      ce:	cf e5       	ldi	r28, 0x5F	; 95
      d0:	d8 e0       	ldi	r29, 0x08	; 8
      d2:	de bf       	out	0x3e, r29	; 62
      d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
      d6:	11 e0       	ldi	r17, 0x01	; 1
      d8:	a0 e6       	ldi	r26, 0x60	; 96
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	ea e9       	ldi	r30, 0x9A	; 154
      de:	f8 e2       	ldi	r31, 0x28	; 40
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
      e2:	05 90       	lpm	r0, Z+
      e4:	0d 92       	st	X+, r0
      e6:	a0 3c       	cpi	r26, 0xC0	; 192
      e8:	b1 07       	cpc	r27, r17
      ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_clear_bss>:
      ec:	22 e0       	ldi	r18, 0x02	; 2
      ee:	a0 ec       	ldi	r26, 0xC0	; 192
      f0:	b1 e0       	ldi	r27, 0x01	; 1
      f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
      f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
      f6:	a9 30       	cpi	r26, 0x09	; 9
      f8:	b2 07       	cpc	r27, r18
      fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
      fc:	0e 94 1d 09 	call	0x123a	; 0x123a <main>
     100:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <_exit>

00000104 <__bad_interrupt>:
     104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <Init_LCD>:
#include "Headers/SPIMaster.h"
#include "Headers/LCD.h"

void Init_LCD(void)
{
	lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
     108:	8f 9a       	sbi	0x11, 7	; 17
	lcd_D6_ddr |= (1<<lcd_D6_bit);
     10a:	8e 9a       	sbi	0x11, 6	; 17
	lcd_D5_ddr |= (1<<lcd_D5_bit);
     10c:	8d 9a       	sbi	0x11, 5	; 17
	lcd_D4_ddr |= (1<<lcd_D4_bit);
     10e:	8c 9a       	sbi	0x11, 4	; 17
	lcd_E_ddr  |= (1<<lcd_E_bit);                    // E line - output
     110:	b9 9a       	sbi	0x17, 1	; 23
	lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
     112:	b8 9a       	sbi	0x17, 0	; 23
     114:	08 95       	ret

00000116 <lcd_write_4>:
	lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
	lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
}

void lcd_write_4(uint8_t theByte) {
	lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
     116:	97 98       	cbi	0x12, 7	; 18
	if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
     118:	88 23       	and	r24, r24
     11a:	0c f4       	brge	.+2      	; 0x11e <lcd_write_4+0x8>
     11c:	97 9a       	sbi	0x12, 7	; 18
	lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
     11e:	96 98       	cbi	0x12, 6	; 18
	if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
     120:	86 fd       	sbrc	r24, 6
     122:	96 9a       	sbi	0x12, 6	; 18
	lcd_D5_port &= ~(1<<lcd_D5_bit);
     124:	95 98       	cbi	0x12, 5	; 18
	if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
     126:	85 fd       	sbrc	r24, 5
     128:	95 9a       	sbi	0x12, 5	; 18
	lcd_D4_port &= ~(1<<lcd_D4_bit);
     12a:	94 98       	cbi	0x12, 4	; 18
	if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
     12c:	84 fd       	sbrc	r24, 4
     12e:	94 9a       	sbi	0x12, 4	; 18
	// write the data
	// 'Address set-up time' (40 nS)
	lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
     130:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     132:	8a eb       	ldi	r24, 0xBA	; 186
     134:	8a 95       	dec	r24
     136:	f1 f7       	brne	.-4      	; 0x134 <lcd_write_4+0x1e>
     138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_write_4+0x24>
	_delay_us(70);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
	lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
     13a:	c1 98       	cbi	0x18, 1	; 24
     13c:	8a eb       	ldi	r24, 0xBA	; 186
     13e:	8a 95       	dec	r24
     140:	f1 f7       	brne	.-4      	; 0x13e <lcd_write_4+0x28>
     142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_write_4+0x2e>
     144:	08 95       	ret

00000146 <lcd_write_character_4d>:
	i++;
	_delay_us(160);                              // 40 uS delay (min)
	}
	}

void lcd_write_character_4d(uint8_t theData) {
     146:	cf 93       	push	r28
     148:	c8 2f       	mov	r28, r24
	lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
     14a:	c0 9a       	sbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     14c:	c1 98       	cbi	0x18, 1	; 24
	lcd_write_4(theData);                           // write the upper 4-bits of the data
     14e:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_write_4>
	lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
     152:	8c 2f       	mov	r24, r28
     154:	82 95       	swap	r24
     156:	80 7f       	andi	r24, 0xF0	; 240
     158:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_write_4>
}
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <lcd_write_string_4d>:
	lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
	_delay_us(90);                                  // 40uS delay (min)
}


void lcd_write_string_4d(char theString[]) {
     160:	0f 93       	push	r16
     162:	1f 93       	push	r17
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	00 d0       	rcall	.+0      	; 0x16a <lcd_write_string_4d+0xa>
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
     16e:	8c 01       	movw	r16, r24
	volatile int i = 0;                             // character counter*/
     170:	1a 82       	std	Y+2, r1	; 0x02
     172:	19 82       	std	Y+1, r1	; 0x01
	while (theString[i] != 0)
     174:	e9 81       	ldd	r30, Y+1	; 0x01
     176:	fa 81       	ldd	r31, Y+2	; 0x02
     178:	e8 0f       	add	r30, r24
     17a:	f9 1f       	adc	r31, r25
     17c:	80 81       	ld	r24, Z
     17e:	88 23       	and	r24, r24
     180:	c9 f0       	breq	.+50     	; 0x1b4 <lcd_write_string_4d+0x54>
	{
	lcd_write_character_4d(theString[i]);
     182:	e9 81       	ldd	r30, Y+1	; 0x01
     184:	fa 81       	ldd	r31, Y+2	; 0x02
     186:	e0 0f       	add	r30, r16
     188:	f1 1f       	adc	r31, r17
     18a:	80 81       	ld	r24, Z
     18c:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_write_character_4d>
	i++;
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	9a 81       	ldd	r25, Y+2	; 0x02
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	9a 83       	std	Y+2, r25	; 0x02
     198:	89 83       	std	Y+1, r24	; 0x01
     19a:	8f e3       	ldi	r24, 0x3F	; 63
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_write_string_4d+0x3e>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_write_string_4d+0x44>
     1a4:	00 00       	nop
}


void lcd_write_string_4d(char theString[]) {
	volatile int i = 0;                             // character counter*/
	while (theString[i] != 0)
     1a6:	e9 81       	ldd	r30, Y+1	; 0x01
     1a8:	fa 81       	ldd	r31, Y+2	; 0x02
     1aa:	e0 0f       	add	r30, r16
     1ac:	f1 1f       	adc	r31, r17
     1ae:	80 81       	ld	r24, Z
     1b0:	81 11       	cpse	r24, r1
     1b2:	e7 cf       	rjmp	.-50     	; 0x182 <lcd_write_string_4d+0x22>
	{
	lcd_write_character_4d(theString[i]);
	i++;
	_delay_us(160);                              // 40 uS delay (min)
	}
	}
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	1f 91       	pop	r17
     1be:	0f 91       	pop	r16
     1c0:	08 95       	ret

000001c2 <lcd_write_instruction_4d>:
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
	lcd_write_4(theData);                           // write the upper 4-bits of the data
	lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
}

void lcd_write_instruction_4d(uint8_t theInstruction) {
     1c2:	cf 93       	push	r28
     1c4:	c8 2f       	mov	r28, r24
	lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     1c6:	c0 98       	cbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     1c8:	c1 98       	cbi	0x18, 1	; 24
	lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
     1ca:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_write_4>
	lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
     1ce:	8c 2f       	mov	r24, r28
     1d0:	82 95       	swap	r24
     1d2:	80 7f       	andi	r24, 0xF0	; 240
     1d4:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_write_4>
}
     1d8:	cf 91       	pop	r28
     1da:	08 95       	ret

000001dc <Init_LCD_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1dc:	2f ef       	ldi	r18, 0xFF	; 255
     1de:	80 e7       	ldi	r24, 0x70	; 112
     1e0:	92 e0       	ldi	r25, 0x02	; 2
     1e2:	21 50       	subi	r18, 0x01	; 1
     1e4:	80 40       	sbci	r24, 0x00	; 0
     1e6:	90 40       	sbci	r25, 0x00	; 0
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <Init_LCD_4bit+0x6>
     1ea:	00 c0       	rjmp	.+0      	; 0x1ec <Init_LCD_4bit+0x10>
     1ec:	00 00       	nop
{
	// Power-up delay
	_delay_ms(100);                                 // initial 40 mSec delay

	// Set up the RS and E lines for the 'lcd_write_4' subroutine.
	lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     1ee:	c0 98       	cbi	0x18, 0	; 24
	lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     1f0:	c1 98       	cbi	0x18, 1	; 24

	// Reset the LCD controller
	lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     1f2:	80 e3       	ldi	r24, 0x30	; 48
     1f4:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_write_4>
     1f8:	8f e3       	ldi	r24, 0x3F	; 63
     1fa:	9c e9       	ldi	r25, 0x9C	; 156
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <Init_LCD_4bit+0x20>
     200:	00 c0       	rjmp	.+0      	; 0x202 <Init_LCD_4bit+0x26>
     202:	00 00       	nop
	_delay_ms(20);                                  // 4.1 mS delay (min)

	lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     204:	80 e3       	ldi	r24, 0x30	; 48
     206:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20a:	87 e5       	ldi	r24, 0x57	; 87
     20c:	92 e0       	ldi	r25, 0x02	; 2
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	f1 f7       	brne	.-4      	; 0x20e <Init_LCD_4bit+0x32>
     212:	00 c0       	rjmp	.+0      	; 0x214 <Init_LCD_4bit+0x38>
     214:	00 00       	nop
	_delay_us(300);                                 // 100uS delay (min)

	lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     216:	80 e3       	ldi	r24, 0x30	; 48
     218:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_write_4>
     21c:	87 e5       	ldi	r24, 0x57	; 87
     21e:	92 e0       	ldi	r25, 0x02	; 2
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <Init_LCD_4bit+0x44>
     224:	00 c0       	rjmp	.+0      	; 0x226 <Init_LCD_4bit+0x4a>
     226:	00 00       	nop
	_delay_us(300);                                 // this delay is omitted in the data sheet
	
	lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     228:	88 e2       	ldi	r24, 0x28	; 40
     22a:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_write_4>
     22e:	90 ef       	ldi	r25, 0xF0	; 240
     230:	9a 95       	dec	r25
     232:	f1 f7       	brne	.-4      	; 0x230 <Init_LCD_4bit+0x54>
	_delay_us(90);                                  // 40uS delay (min)

	// Function Set instruction
	lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
     234:	88 e2       	ldi	r24, 0x28	; 40
     236:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_instruction_4d>
     23a:	20 ef       	ldi	r18, 0xF0	; 240
     23c:	2a 95       	dec	r18
     23e:	f1 f7       	brne	.-4      	; 0x23c <Init_LCD_4bit+0x60>
	_delay_us(90);                                  // 40uS delay (min)

	// Display On/Off Control instruction
	lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
     240:	88 e0       	ldi	r24, 0x08	; 8
     242:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_instruction_4d>
     246:	80 ef       	ldi	r24, 0xF0	; 240
     248:	8a 95       	dec	r24
     24a:	f1 f7       	brne	.-4      	; 0x248 <Init_LCD_4bit+0x6c>
	_delay_us(90);                                  // 40uS delay (min)

	// Clear Display instruction
	lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     252:	8f e7       	ldi	r24, 0x7F	; 127
     254:	9e e3       	ldi	r25, 0x3E	; 62
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <Init_LCD_4bit+0x7a>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <Init_LCD_4bit+0x80>
     25c:	00 00       	nop
	_delay_ms(8);                                   // 1.64 mS delay (min)

	// ; Entry Mode Set instruction
	lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
     25e:	86 e0       	ldi	r24, 0x06	; 6
     260:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_instruction_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	90 ef       	ldi	r25, 0xF0	; 240
     266:	9a 95       	dec	r25
     268:	f1 f7       	brne	.-4      	; 0x266 <Init_LCD_4bit+0x8a>
	_delay_us(90);                                  // 40uS delay (min)

	// Display On/Off Control instruction
	lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
     26a:	8c e0       	ldi	r24, 0x0C	; 12
     26c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_instruction_4d>
     270:	20 ef       	ldi	r18, 0xF0	; 240
     272:	2a 95       	dec	r18
     274:	f1 f7       	brne	.-4      	; 0x272 <Init_LCD_4bit+0x96>
     276:	08 95       	ret

00000278 <print_LCD_line>:
	_delay_us(70);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
	lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
	_delay_us(70);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
	}

void print_LCD_line(char *input_string, uint8_t line_number) {
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	ec 01       	movw	r28, r24
	lcd_write_instruction_4d(LCD_SET_CURSOR | line_number);
     27e:	86 2f       	mov	r24, r22
     280:	80 68       	ori	r24, 0x80	; 128
     282:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_instruction_4d>
	lcd_write_string_4d(input_string);
     286:	ce 01       	movw	r24, r28
     288:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_write_string_4d>
}
     28c:	df 91       	pop	r29
     28e:	cf 91       	pop	r28
     290:	08 95       	ret

00000292 <clear_LCD_line>:

void clear_LCD_line(unsigned char line) {
	print_LCD_line("                    ", line);
     292:	68 2f       	mov	r22, r24
     294:	80 e6       	ldi	r24, 0x60	; 96
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
     29c:	08 95       	ret

0000029e <clear_LCD>:
}

void clear_LCD() {
	clear_LCD_line(LCD_LINE_1);
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 49 01 	call	0x292	; 0x292 <clear_LCD_line>
	clear_LCD_line(LCD_LINE_2);
     2a4:	80 e4       	ldi	r24, 0x40	; 64
     2a6:	0e 94 49 01 	call	0x292	; 0x292 <clear_LCD_line>
	clear_LCD_line(LCD_LINE_3);
     2aa:	84 e1       	ldi	r24, 0x14	; 20
     2ac:	0e 94 49 01 	call	0x292	; 0x292 <clear_LCD_line>
	clear_LCD_line(LCD_LINE_4);
     2b0:	84 e5       	ldi	r24, 0x54	; 84
     2b2:	0e 94 49 01 	call	0x292	; 0x292 <clear_LCD_line>
     2b6:	08 95       	ret

000002b8 <print_LCD_char>:
}

void print_LCD_char(uint8_t ch_in, uint8_t line, uint8_t position) {
     2b8:	cf 93       	push	r28
     2ba:	c8 2f       	mov	r28, r24
	lcd_write_instruction_4d((LCD_SET_CURSOR | line) + position);
     2bc:	86 2f       	mov	r24, r22
     2be:	80 68       	ori	r24, 0x80	; 128
     2c0:	84 0f       	add	r24, r20
     2c2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_write_instruction_4d>
	lcd_write_character_4d(ch_in);
     2c6:	8c 2f       	mov	r24, r28
     2c8:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_write_character_4d>
}
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <beep>:
uint8_t getParametersLCD(uint8_t parameter) {
	uint8_t val = 0;
	if (parameter == CONTRAST) LCD.contrast = val;
	else if (parameter == BRIGHTNESS) LCD.brightness = val;
	return val;
}
     2d0:	8e e1       	ldi	r24, 0x1E	; 30
     2d2:	db 9a       	sbi	0x1b, 3	; 27
     2d4:	e3 e5       	ldi	r30, 0x53	; 83
     2d6:	f3 e0       	ldi	r31, 0x03	; 3
     2d8:	31 97       	sbiw	r30, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <beep+0x8>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <beep+0xe>
     2de:	00 00       	nop
     2e0:	db 98       	cbi	0x1b, 3	; 27
     2e2:	e3 e5       	ldi	r30, 0x53	; 83
     2e4:	f3 e0       	ldi	r31, 0x03	; 3
     2e6:	31 97       	sbiw	r30, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <beep+0x16>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <beep+0x1c>
     2ec:	00 00       	nop
     2ee:	81 50       	subi	r24, 0x01	; 1
     2f0:	81 f7       	brne	.-32     	; 0x2d2 <beep+0x2>
     2f2:	08 95       	ret

000002f4 <playMelody>:
     2f4:	88 23       	and	r24, r24
     2f6:	b1 f1       	breq	.+108    	; 0x364 <playMelody+0x70>
     2f8:	8c ee       	ldi	r24, 0xEC	; 236
     2fa:	db 9a       	sbi	0x1b, 3	; 27
     2fc:	e3 e5       	ldi	r30, 0x53	; 83
     2fe:	f3 e0       	ldi	r31, 0x03	; 3
     300:	31 97       	sbiw	r30, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <playMelody+0xc>
     304:	00 c0       	rjmp	.+0      	; 0x306 <playMelody+0x12>
     306:	00 00       	nop
     308:	db 98       	cbi	0x1b, 3	; 27
     30a:	e3 e5       	ldi	r30, 0x53	; 83
     30c:	f3 e0       	ldi	r31, 0x03	; 3
     30e:	31 97       	sbiw	r30, 0x01	; 1
     310:	f1 f7       	brne	.-4      	; 0x30e <playMelody+0x1a>
     312:	00 c0       	rjmp	.+0      	; 0x314 <playMelody+0x20>
     314:	00 00       	nop
     316:	81 50       	subi	r24, 0x01	; 1
     318:	81 f7       	brne	.-32     	; 0x2fa <playMelody+0x6>
     31a:	88 e2       	ldi	r24, 0x28	; 40
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	db 9a       	sbi	0x1b, 3	; 27
     320:	e3 ea       	ldi	r30, 0xA3	; 163
     322:	f2 e0       	ldi	r31, 0x02	; 2
     324:	31 97       	sbiw	r30, 0x01	; 1
     326:	f1 f7       	brne	.-4      	; 0x324 <playMelody+0x30>
     328:	00 c0       	rjmp	.+0      	; 0x32a <playMelody+0x36>
     32a:	00 00       	nop
     32c:	db 98       	cbi	0x1b, 3	; 27
     32e:	e3 ea       	ldi	r30, 0xA3	; 163
     330:	f2 e0       	ldi	r31, 0x02	; 2
     332:	31 97       	sbiw	r30, 0x01	; 1
     334:	f1 f7       	brne	.-4      	; 0x332 <playMelody+0x3e>
     336:	00 c0       	rjmp	.+0      	; 0x338 <playMelody+0x44>
     338:	00 00       	nop
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	81 f7       	brne	.-32     	; 0x31e <playMelody+0x2a>
     33e:	80 ec       	ldi	r24, 0xC0	; 192
     340:	92 e0       	ldi	r25, 0x02	; 2
     342:	db 9a       	sbi	0x1b, 3	; 27
     344:	e7 e3       	ldi	r30, 0x37	; 55
     346:	f2 e0       	ldi	r31, 0x02	; 2
     348:	31 97       	sbiw	r30, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <playMelody+0x54>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <playMelody+0x5a>
     34e:	00 00       	nop
     350:	db 98       	cbi	0x1b, 3	; 27
     352:	e7 e3       	ldi	r30, 0x37	; 55
     354:	f2 e0       	ldi	r31, 0x02	; 2
     356:	31 97       	sbiw	r30, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <playMelody+0x62>
     35a:	00 c0       	rjmp	.+0      	; 0x35c <playMelody+0x68>
     35c:	00 00       	nop
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	81 f7       	brne	.-32     	; 0x342 <playMelody+0x4e>
     362:	08 95       	ret
     364:	88 e2       	ldi	r24, 0x28	; 40
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	db 9a       	sbi	0x1b, 3	; 27
     36a:	e3 ea       	ldi	r30, 0xA3	; 163
     36c:	f2 e0       	ldi	r31, 0x02	; 2
     36e:	31 97       	sbiw	r30, 0x01	; 1
     370:	f1 f7       	brne	.-4      	; 0x36e <playMelody+0x7a>
     372:	00 c0       	rjmp	.+0      	; 0x374 <playMelody+0x80>
     374:	00 00       	nop
     376:	db 98       	cbi	0x1b, 3	; 27
     378:	e3 ea       	ldi	r30, 0xA3	; 163
     37a:	f2 e0       	ldi	r31, 0x02	; 2
     37c:	31 97       	sbiw	r30, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <playMelody+0x88>
     380:	00 c0       	rjmp	.+0      	; 0x382 <playMelody+0x8e>
     382:	00 00       	nop
     384:	01 97       	sbiw	r24, 0x01	; 1
     386:	81 f7       	brne	.-32     	; 0x368 <playMelody+0x74>
     388:	8c ee       	ldi	r24, 0xEC	; 236
     38a:	db 9a       	sbi	0x1b, 3	; 27
     38c:	e3 e5       	ldi	r30, 0x53	; 83
     38e:	f3 e0       	ldi	r31, 0x03	; 3
     390:	31 97       	sbiw	r30, 0x01	; 1
     392:	f1 f7       	brne	.-4      	; 0x390 <playMelody+0x9c>
     394:	00 c0       	rjmp	.+0      	; 0x396 <playMelody+0xa2>
     396:	00 00       	nop
     398:	db 98       	cbi	0x1b, 3	; 27
     39a:	e3 e5       	ldi	r30, 0x53	; 83
     39c:	f3 e0       	ldi	r31, 0x03	; 3
     39e:	31 97       	sbiw	r30, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <playMelody+0xaa>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <playMelody+0xb0>
     3a4:	00 00       	nop
     3a6:	81 50       	subi	r24, 0x01	; 1
     3a8:	81 f7       	brne	.-32     	; 0x38a <playMelody+0x96>
     3aa:	80 e6       	ldi	r24, 0x60	; 96
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	db 9a       	sbi	0x1b, 3	; 27
     3b0:	ef e6       	ldi	r30, 0x6F	; 111
     3b2:	f4 e0       	ldi	r31, 0x04	; 4
     3b4:	31 97       	sbiw	r30, 0x01	; 1
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <playMelody+0xc0>
     3b8:	00 c0       	rjmp	.+0      	; 0x3ba <playMelody+0xc6>
     3ba:	00 00       	nop
     3bc:	db 98       	cbi	0x1b, 3	; 27
     3be:	ef e6       	ldi	r30, 0x6F	; 111
     3c0:	f4 e0       	ldi	r31, 0x04	; 4
     3c2:	31 97       	sbiw	r30, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <playMelody+0xce>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <playMelody+0xd4>
     3c8:	00 00       	nop
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	81 f7       	brne	.-32     	; 0x3ae <playMelody+0xba>
     3ce:	08 95       	ret

000003d0 <Init_Ports>:
     3d0:	ba 98       	cbi	0x17, 2	; 23
     3d2:	bb 98       	cbi	0x17, 3	; 23
     3d4:	c2 9a       	sbi	0x18, 2	; 24
     3d6:	c3 9a       	sbi	0x18, 3	; 24
     3d8:	84 b3       	in	r24, 0x14	; 20
     3da:	8c 6f       	ori	r24, 0xFC	; 252
     3dc:	84 bb       	out	0x14, r24	; 20
     3de:	d4 9a       	sbi	0x1a, 4	; 26
     3e0:	87 b3       	in	r24, 0x17	; 23
     3e2:	83 60       	ori	r24, 0x03	; 3
     3e4:	87 bb       	out	0x17, r24	; 23
     3e6:	81 b3       	in	r24, 0x11	; 17
     3e8:	80 6f       	ori	r24, 0xF0	; 240
     3ea:	81 bb       	out	0x11, r24	; 17
     3ec:	8a b3       	in	r24, 0x1a	; 26
     3ee:	8c 7f       	andi	r24, 0xFC	; 252
     3f0:	8a bb       	out	0x1a, r24	; 26
     3f2:	87 b3       	in	r24, 0x17	; 23
     3f4:	80 6a       	ori	r24, 0xA0	; 160
     3f6:	87 bb       	out	0x17, r24	; 23
     3f8:	be 98       	cbi	0x17, 6	; 23
     3fa:	89 9a       	sbi	0x11, 1	; 17
     3fc:	84 b3       	in	r24, 0x14	; 20
     3fe:	83 60       	ori	r24, 0x03	; 3
     400:	84 bb       	out	0x14, r24	; 20
     402:	8a 98       	cbi	0x11, 2	; 17
     404:	8a b3       	in	r24, 0x1a	; 26
     406:	8c 60       	ori	r24, 0x0C	; 12
     408:	8a bb       	out	0x1a, r24	; 26
     40a:	08 95       	ret

0000040c <Init_ADC>:
     40c:	86 b1       	in	r24, 0x06	; 6
     40e:	87 68       	ori	r24, 0x87	; 135
     410:	86 b9       	out	0x06, r24	; 6
     412:	3e 9a       	sbi	0x07, 6	; 7
     414:	08 95       	ret

00000416 <Init_Device>:
     416:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Init_Ports>
     41a:	da 9a       	sbi	0x1b, 2	; 27
     41c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <Init_SPI_All>
     420:	0e 94 84 00 	call	0x108	; 0x108 <Init_LCD>
     424:	2f ef       	ldi	r18, 0xFF	; 255
     426:	89 e6       	ldi	r24, 0x69	; 105
     428:	98 e1       	ldi	r25, 0x18	; 24
     42a:	21 50       	subi	r18, 0x01	; 1
     42c:	80 40       	sbci	r24, 0x00	; 0
     42e:	90 40       	sbci	r25, 0x00	; 0
     430:	e1 f7       	brne	.-8      	; 0x42a <Init_Device+0x14>
     432:	00 c0       	rjmp	.+0      	; 0x434 <Init_Device+0x1e>
     434:	00 00       	nop
     436:	0e 94 ee 00 	call	0x1dc	; 0x1dc <Init_LCD_4bit>
     43a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <Init_UART>
     43e:	0e 94 06 02 	call	0x40c	; 0x40c <Init_ADC>
     442:	08 95       	ret

00000444 <selectOutputType>:
     444:	63 30       	cpi	r22, 0x03	; 3
     446:	41 f4       	brne	.+16     	; 0x458 <selectOutputType+0x14>
     448:	85 30       	cpi	r24, 0x05	; 5
     44a:	11 f4       	brne	.+4      	; 0x450 <selectOutputType+0xc>
     44c:	a8 98       	cbi	0x15, 0	; 21
     44e:	08 95       	ret
     450:	86 30       	cpi	r24, 0x06	; 6
     452:	49 f4       	brne	.+18     	; 0x466 <selectOutputType+0x22>
     454:	a9 98       	cbi	0x15, 1	; 21
     456:	08 95       	ret
     458:	85 30       	cpi	r24, 0x05	; 5
     45a:	11 f4       	brne	.+4      	; 0x460 <selectOutputType+0x1c>
     45c:	a8 9a       	sbi	0x15, 0	; 21
     45e:	08 95       	ret
     460:	86 30       	cpi	r24, 0x06	; 6
     462:	09 f4       	brne	.+2      	; 0x466 <selectOutputType+0x22>
     464:	a9 9a       	sbi	0x15, 1	; 21
     466:	08 95       	ret

00000468 <setFunction>:
     468:	8f 92       	push	r8
     46a:	9f 92       	push	r9
     46c:	af 92       	push	r10
     46e:	bf 92       	push	r11
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	f8 2e       	mov	r15, r24
     47e:	4a 01       	movw	r8, r20
     480:	5b 01       	movw	r10, r22
     482:	e2 2e       	mov	r14, r18
     484:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <Init_SPI_AD9834>
     488:	c5 01       	movw	r24, r10
     48a:	b4 01       	movw	r22, r8
     48c:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatunsisf>
     490:	27 e7       	ldi	r18, 0x77	; 119
     492:	3c ec       	ldi	r19, 0xCC	; 204
     494:	4b e2       	ldi	r20, 0x2B	; 43
     496:	51 e4       	ldi	r21, 0x41	; 65
     498:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__mulsf3>
     49c:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__fixunssfsi>
     4a0:	eb 01       	movw	r28, r22
     4a2:	df 73       	andi	r29, 0x3F	; 63
     4a4:	dc 01       	movw	r26, r24
     4a6:	cb 01       	movw	r24, r22
     4a8:	07 2e       	mov	r0, r23
     4aa:	7e e0       	ldi	r23, 0x0E	; 14
     4ac:	b6 95       	lsr	r27
     4ae:	a7 95       	ror	r26
     4b0:	97 95       	ror	r25
     4b2:	87 95       	ror	r24
     4b4:	7a 95       	dec	r23
     4b6:	d1 f7       	brne	.-12     	; 0x4ac <setFunction+0x44>
     4b8:	70 2d       	mov	r23, r0
     4ba:	8c 01       	movw	r16, r24
     4bc:	1f 73       	andi	r17, 0x3F	; 63
     4be:	4f 2d       	mov	r20, r15
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	81 e2       	ldi	r24, 0x21	; 33
     4c4:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     4c8:	8d 2f       	mov	r24, r29
     4ca:	8f 73       	andi	r24, 0x3F	; 63
     4cc:	4f 2d       	mov	r20, r15
     4ce:	6c 2f       	mov	r22, r28
     4d0:	80 64       	ori	r24, 0x40	; 64
     4d2:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     4d6:	81 2f       	mov	r24, r17
     4d8:	8f 73       	andi	r24, 0x3F	; 63
     4da:	4f 2d       	mov	r20, r15
     4dc:	60 2f       	mov	r22, r16
     4de:	80 64       	ori	r24, 0x40	; 64
     4e0:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     4e4:	4f 2d       	mov	r20, r15
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	80 ec       	ldi	r24, 0xC0	; 192
     4ea:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	e8 16       	cp	r14, r24
     4f2:	61 f0       	breq	.+24     	; 0x50c <setFunction+0xa4>
     4f4:	83 e0       	ldi	r24, 0x03	; 3
     4f6:	e8 16       	cp	r14, r24
     4f8:	79 f0       	breq	.+30     	; 0x518 <setFunction+0xb0>
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	e8 12       	cpse	r14, r24
     4fe:	12 c0       	rjmp	.+36     	; 0x524 <setFunction+0xbc>
     500:	4f 2d       	mov	r20, r15
     502:	60 e2       	ldi	r22, 0x20	; 32
     504:	80 e2       	ldi	r24, 0x20	; 32
     506:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     50a:	11 c0       	rjmp	.+34     	; 0x52e <setFunction+0xc6>
     50c:	4f 2d       	mov	r20, r15
     50e:	62 e0       	ldi	r22, 0x02	; 2
     510:	80 e2       	ldi	r24, 0x20	; 32
     512:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     516:	0b c0       	rjmp	.+22     	; 0x52e <setFunction+0xc6>
     518:	4f 2d       	mov	r20, r15
     51a:	68 e2       	ldi	r22, 0x28	; 40
     51c:	80 e2       	ldi	r24, 0x20	; 32
     51e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     522:	05 c0       	rjmp	.+10     	; 0x52e <setFunction+0xc6>
     524:	4f 2d       	mov	r20, r15
     526:	60 e8       	ldi	r22, 0x80	; 128
     528:	80 e2       	ldi	r24, 0x20	; 32
     52a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     52e:	6e 2d       	mov	r22, r14
     530:	8f 2d       	mov	r24, r15
     532:	0e 94 22 02 	call	0x444	; 0x444 <selectOutputType>
     536:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <Init_SPI_All>
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	ff 90       	pop	r15
     544:	ef 90       	pop	r14
     546:	bf 90       	pop	r11
     548:	af 90       	pop	r10
     54a:	9f 90       	pop	r9
     54c:	8f 90       	pop	r8
     54e:	08 95       	ret

00000550 <setAmplitude>:
     550:	2f ef       	ldi	r18, 0xFF	; 255
     552:	3f e0       	ldi	r19, 0x0F	; 15
     554:	28 1b       	sub	r18, r24
     556:	39 0b       	sbc	r19, r25
     558:	83 2f       	mov	r24, r19
     55a:	8f 70       	andi	r24, 0x0F	; 15
     55c:	65 30       	cpi	r22, 0x05	; 5
     55e:	41 f4       	brne	.+16     	; 0x570 <setAmplitude+0x20>
     560:	41 e0       	ldi	r20, 0x01	; 1
     562:	62 2f       	mov	r22, r18
     564:	80 6f       	ori	r24, 0xF0	; 240
     566:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	08 95       	ret
     570:	66 30       	cpi	r22, 0x06	; 6
     572:	41 f4       	brne	.+16     	; 0x584 <setAmplitude+0x34>
     574:	42 e0       	ldi	r20, 0x02	; 2
     576:	62 2f       	mov	r22, r18
     578:	80 6f       	ori	r24, 0xF0	; 240
     57a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	08 95       	ret
     584:	8f ef       	ldi	r24, 0xFF	; 255
     586:	9f ef       	ldi	r25, 0xFF	; 255
     588:	08 95       	ret

0000058a <pollSwitch>:
     58a:	82 99       	sbic	0x10, 2	; 16
     58c:	04 c0       	rjmp	.+8      	; 0x596 <pollSwitch+0xc>
     58e:	82 9b       	sbis	0x10, 2	; 16
     590:	fe cf       	rjmp	.-4      	; 0x58e <pollSwitch+0x4>
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	08 95       	ret
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	08 95       	ret

0000059a <pollEncoder>:
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <pollEncoder+0x6>
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	86 b3       	in	r24, 0x16	; 22
     5a6:	19 82       	std	Y+1, r1	; 0x01
     5a8:	86 b3       	in	r24, 0x16	; 22
     5aa:	82 95       	swap	r24
     5ac:	81 70       	andi	r24, 0x01	; 1
     5ae:	8a 83       	std	Y+2, r24	; 0x02
     5b0:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <Encoder>
     5b4:	88 23       	and	r24, r24
     5b6:	81 f0       	breq	.+32     	; 0x5d8 <pollEncoder+0x3e>
     5b8:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Encoder+0x1>
     5bc:	88 23       	and	r24, r24
     5be:	61 f0       	breq	.+24     	; 0x5d8 <pollEncoder+0x3e>
     5c0:	8a 81       	ldd	r24, Y+2	; 0x02
     5c2:	81 11       	cpse	r24, r1
     5c4:	09 c0       	rjmp	.+18     	; 0x5d8 <pollEncoder+0x3e>
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	88 23       	and	r24, r24
     5ca:	31 f0       	breq	.+12     	; 0x5d8 <pollEncoder+0x3e>
     5cc:	ef ee       	ldi	r30, 0xEF	; 239
     5ce:	f1 e0       	ldi	r31, 0x01	; 1
     5d0:	82 81       	ldd	r24, Z+2	; 0x02
     5d2:	8f 5f       	subi	r24, 0xFF	; 255
     5d4:	82 83       	std	Z+2, r24	; 0x02
     5d6:	8b c0       	rjmp	.+278    	; 0x6ee <pollEncoder+0x154>
     5d8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <Encoder>
     5dc:	81 11       	cpse	r24, r1
     5de:	10 c0       	rjmp	.+32     	; 0x600 <pollEncoder+0x66>
     5e0:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Encoder+0x1>
     5e4:	88 23       	and	r24, r24
     5e6:	61 f0       	breq	.+24     	; 0x600 <pollEncoder+0x66>
     5e8:	8a 81       	ldd	r24, Y+2	; 0x02
     5ea:	81 11       	cpse	r24, r1
     5ec:	09 c0       	rjmp	.+18     	; 0x600 <pollEncoder+0x66>
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	81 11       	cpse	r24, r1
     5f2:	06 c0       	rjmp	.+12     	; 0x600 <pollEncoder+0x66>
     5f4:	ef ee       	ldi	r30, 0xEF	; 239
     5f6:	f1 e0       	ldi	r31, 0x01	; 1
     5f8:	82 81       	ldd	r24, Z+2	; 0x02
     5fa:	8f 5f       	subi	r24, 0xFF	; 255
     5fc:	82 83       	std	Z+2, r24	; 0x02
     5fe:	77 c0       	rjmp	.+238    	; 0x6ee <pollEncoder+0x154>
     600:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <Encoder>
     604:	81 11       	cpse	r24, r1
     606:	10 c0       	rjmp	.+32     	; 0x628 <pollEncoder+0x8e>
     608:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Encoder+0x1>
     60c:	81 11       	cpse	r24, r1
     60e:	0c c0       	rjmp	.+24     	; 0x628 <pollEncoder+0x8e>
     610:	8a 81       	ldd	r24, Y+2	; 0x02
     612:	88 23       	and	r24, r24
     614:	49 f0       	breq	.+18     	; 0x628 <pollEncoder+0x8e>
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	81 11       	cpse	r24, r1
     61a:	06 c0       	rjmp	.+12     	; 0x628 <pollEncoder+0x8e>
     61c:	ef ee       	ldi	r30, 0xEF	; 239
     61e:	f1 e0       	ldi	r31, 0x01	; 1
     620:	82 81       	ldd	r24, Z+2	; 0x02
     622:	8f 5f       	subi	r24, 0xFF	; 255
     624:	82 83       	std	Z+2, r24	; 0x02
     626:	63 c0       	rjmp	.+198    	; 0x6ee <pollEncoder+0x154>
     628:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <Encoder>
     62c:	88 23       	and	r24, r24
     62e:	81 f0       	breq	.+32     	; 0x650 <pollEncoder+0xb6>
     630:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Encoder+0x1>
     634:	81 11       	cpse	r24, r1
     636:	0c c0       	rjmp	.+24     	; 0x650 <pollEncoder+0xb6>
     638:	8a 81       	ldd	r24, Y+2	; 0x02
     63a:	88 23       	and	r24, r24
     63c:	49 f0       	breq	.+18     	; 0x650 <pollEncoder+0xb6>
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	88 23       	and	r24, r24
     642:	31 f0       	breq	.+12     	; 0x650 <pollEncoder+0xb6>
     644:	ef ee       	ldi	r30, 0xEF	; 239
     646:	f1 e0       	ldi	r31, 0x01	; 1
     648:	82 81       	ldd	r24, Z+2	; 0x02
     64a:	8f 5f       	subi	r24, 0xFF	; 255
     64c:	82 83       	std	Z+2, r24	; 0x02
     64e:	4f c0       	rjmp	.+158    	; 0x6ee <pollEncoder+0x154>
     650:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <Encoder>
     654:	88 23       	and	r24, r24
     656:	81 f0       	breq	.+32     	; 0x678 <pollEncoder+0xde>
     658:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Encoder+0x1>
     65c:	88 23       	and	r24, r24
     65e:	61 f0       	breq	.+24     	; 0x678 <pollEncoder+0xde>
     660:	8a 81       	ldd	r24, Y+2	; 0x02
     662:	88 23       	and	r24, r24
     664:	49 f0       	breq	.+18     	; 0x678 <pollEncoder+0xde>
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	81 11       	cpse	r24, r1
     66a:	06 c0       	rjmp	.+12     	; 0x678 <pollEncoder+0xde>
     66c:	ef ee       	ldi	r30, 0xEF	; 239
     66e:	f1 e0       	ldi	r31, 0x01	; 1
     670:	83 81       	ldd	r24, Z+3	; 0x03
     672:	8f 5f       	subi	r24, 0xFF	; 255
     674:	83 83       	std	Z+3, r24	; 0x03
     676:	3b c0       	rjmp	.+118    	; 0x6ee <pollEncoder+0x154>
     678:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <Encoder>
     67c:	88 23       	and	r24, r24
     67e:	81 f0       	breq	.+32     	; 0x6a0 <pollEncoder+0x106>
     680:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Encoder+0x1>
     684:	81 11       	cpse	r24, r1
     686:	0c c0       	rjmp	.+24     	; 0x6a0 <pollEncoder+0x106>
     688:	8a 81       	ldd	r24, Y+2	; 0x02
     68a:	81 11       	cpse	r24, r1
     68c:	09 c0       	rjmp	.+18     	; 0x6a0 <pollEncoder+0x106>
     68e:	89 81       	ldd	r24, Y+1	; 0x01
     690:	81 11       	cpse	r24, r1
     692:	06 c0       	rjmp	.+12     	; 0x6a0 <pollEncoder+0x106>
     694:	ef ee       	ldi	r30, 0xEF	; 239
     696:	f1 e0       	ldi	r31, 0x01	; 1
     698:	83 81       	ldd	r24, Z+3	; 0x03
     69a:	8f 5f       	subi	r24, 0xFF	; 255
     69c:	83 83       	std	Z+3, r24	; 0x03
     69e:	27 c0       	rjmp	.+78     	; 0x6ee <pollEncoder+0x154>
     6a0:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <Encoder>
     6a4:	81 11       	cpse	r24, r1
     6a6:	10 c0       	rjmp	.+32     	; 0x6c8 <pollEncoder+0x12e>
     6a8:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Encoder+0x1>
     6ac:	81 11       	cpse	r24, r1
     6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <pollEncoder+0x12e>
     6b0:	8a 81       	ldd	r24, Y+2	; 0x02
     6b2:	81 11       	cpse	r24, r1
     6b4:	09 c0       	rjmp	.+18     	; 0x6c8 <pollEncoder+0x12e>
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	88 23       	and	r24, r24
     6ba:	31 f0       	breq	.+12     	; 0x6c8 <pollEncoder+0x12e>
     6bc:	ef ee       	ldi	r30, 0xEF	; 239
     6be:	f1 e0       	ldi	r31, 0x01	; 1
     6c0:	83 81       	ldd	r24, Z+3	; 0x03
     6c2:	8f 5f       	subi	r24, 0xFF	; 255
     6c4:	83 83       	std	Z+3, r24	; 0x03
     6c6:	13 c0       	rjmp	.+38     	; 0x6ee <pollEncoder+0x154>
     6c8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <Encoder>
     6cc:	81 11       	cpse	r24, r1
     6ce:	0f c0       	rjmp	.+30     	; 0x6ee <pollEncoder+0x154>
     6d0:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Encoder+0x1>
     6d4:	88 23       	and	r24, r24
     6d6:	59 f0       	breq	.+22     	; 0x6ee <pollEncoder+0x154>
     6d8:	8a 81       	ldd	r24, Y+2	; 0x02
     6da:	88 23       	and	r24, r24
     6dc:	41 f0       	breq	.+16     	; 0x6ee <pollEncoder+0x154>
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	88 23       	and	r24, r24
     6e2:	29 f0       	breq	.+10     	; 0x6ee <pollEncoder+0x154>
     6e4:	ef ee       	ldi	r30, 0xEF	; 239
     6e6:	f1 e0       	ldi	r31, 0x01	; 1
     6e8:	83 81       	ldd	r24, Z+3	; 0x03
     6ea:	8f 5f       	subi	r24, 0xFF	; 255
     6ec:	83 83       	std	Z+3, r24	; 0x03
     6ee:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <Encoder+0x2>
     6f2:	84 30       	cpi	r24, 0x04	; 4
     6f4:	21 f4       	brne	.+8      	; 0x6fe <pollEncoder+0x164>
     6f6:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <Encoder+0x2>
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	09 c0       	rjmp	.+18     	; 0x710 <pollEncoder+0x176>
     6fe:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <Encoder+0x3>
     702:	84 30       	cpi	r24, 0x04	; 4
     704:	21 f4       	brne	.+8      	; 0x70e <pollEncoder+0x174>
     706:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <Encoder+0x3>
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	01 c0       	rjmp	.+2      	; 0x710 <pollEncoder+0x176>
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	9a 81       	ldd	r25, Y+2	; 0x02
     712:	ef ee       	ldi	r30, 0xEF	; 239
     714:	f1 e0       	ldi	r31, 0x01	; 1
     716:	90 83       	st	Z, r25
     718:	99 81       	ldd	r25, Y+1	; 0x01
     71a:	91 83       	std	Z+1, r25	; 0x01
     71c:	e7 ec       	ldi	r30, 0xC7	; 199
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	31 97       	sbiw	r30, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <pollEncoder+0x186>
     724:	00 c0       	rjmp	.+0      	; 0x726 <pollEncoder+0x18c>
     726:	00 00       	nop
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <setContrastLCD>:
     732:	2f ef       	ldi	r18, 0xFF	; 255
     734:	82 9f       	mul	r24, r18
     736:	c0 01       	movw	r24, r0
     738:	11 24       	eor	r1, r1
     73a:	64 e6       	ldi	r22, 0x64	; 100
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__divmodhi4>
     742:	60 95       	com	r22
     744:	47 e0       	ldi	r20, 0x07	; 7
     746:	81 e1       	ldi	r24, 0x11	; 17
     748:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     74c:	08 95       	ret

0000074e <setBrightnessLCD>:
     74e:	85 36       	cpi	r24, 0x65	; 101
     750:	f8 f4       	brcc	.+62     	; 0x790 <setBrightnessLCD+0x42>
     752:	29 e1       	ldi	r18, 0x19	; 25
     754:	82 9f       	mul	r24, r18
     756:	c0 01       	movw	r24, r0
     758:	11 24       	eor	r1, r1
     75a:	64 e6       	ldi	r22, 0x64	; 100
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__divmodhi4>
     762:	65 5b       	subi	r22, 0xB5	; 181
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__floatsisf>
     76e:	2d ec       	ldi	r18, 0xCD	; 205
     770:	3c ec       	ldi	r19, 0xCC	; 204
     772:	43 e2       	ldi	r20, 0x23	; 35
     774:	52 e4       	ldi	r21, 0x42	; 66
     776:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__mulsf3>
     77a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__fixunssfsi>
     77e:	87 2f       	mov	r24, r23
     780:	8f 70       	andi	r24, 0x0F	; 15
     782:	42 e0       	ldi	r20, 0x02	; 2
     784:	80 67       	ori	r24, 0x70	; 112
     786:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	08 95       	ret
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	9f ef       	ldi	r25, 0xFF	; 255
     794:	08 95       	ret

00000796 <brightnessAnimation>:
     796:	cf 93       	push	r28
     798:	c0 e0       	ldi	r28, 0x00	; 0
     79a:	8c 2f       	mov	r24, r28
     79c:	0e 94 a7 03 	call	0x74e	; 0x74e <setBrightnessLCD>
     7a0:	8f e1       	ldi	r24, 0x1F	; 31
     7a2:	9e e4       	ldi	r25, 0x4E	; 78
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <brightnessAnimation+0xe>
     7a8:	00 c0       	rjmp	.+0      	; 0x7aa <brightnessAnimation+0x14>
     7aa:	00 00       	nop
     7ac:	cf 5f       	subi	r28, 0xFF	; 255
     7ae:	c5 36       	cpi	r28, 0x65	; 101
     7b0:	a1 f7       	brne	.-24     	; 0x79a <brightnessAnimation+0x4>
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <setBiasDC>:
     7b6:	7f 70       	andi	r23, 0x0F	; 15
     7b8:	85 30       	cpi	r24, 0x05	; 5
     7ba:	19 f0       	breq	.+6      	; 0x7c2 <setBiasDC+0xc>
     7bc:	86 30       	cpi	r24, 0x06	; 6
     7be:	99 f0       	breq	.+38     	; 0x7e6 <setBiasDC+0x30>
     7c0:	24 c0       	rjmp	.+72     	; 0x80a <setBiasDC+0x54>
     7c2:	44 23       	and	r20, r20
     7c4:	41 f0       	breq	.+16     	; 0x7d6 <setBiasDC+0x20>
     7c6:	43 e0       	ldi	r20, 0x03	; 3
     7c8:	87 2f       	mov	r24, r23
     7ca:	80 67       	ori	r24, 0x70	; 112
     7cc:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	08 95       	ret
     7d6:	43 e0       	ldi	r20, 0x03	; 3
     7d8:	87 2f       	mov	r24, r23
     7da:	80 6f       	ori	r24, 0xF0	; 240
     7dc:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	08 95       	ret
     7e6:	44 23       	and	r20, r20
     7e8:	41 f0       	breq	.+16     	; 0x7fa <setBiasDC+0x44>
     7ea:	44 e0       	ldi	r20, 0x04	; 4
     7ec:	87 2f       	mov	r24, r23
     7ee:	80 67       	ori	r24, 0x70	; 112
     7f0:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	08 95       	ret
     7fa:	44 e0       	ldi	r20, 0x04	; 4
     7fc:	87 2f       	mov	r24, r23
     7fe:	80 6f       	ori	r24, 0xF0	; 240
     800:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <SPI_write_16bit>
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	08 95       	ret
     80a:	8f ef       	ldi	r24, 0xFF	; 255
     80c:	9f ef       	ldi	r25, 0xFF	; 255
     80e:	08 95       	ret

00000810 <erase_EEPROM_1K>:
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	c0 e0       	ldi	r28, 0x00	; 0
     816:	d0 e0       	ldi	r29, 0x00	; 0
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	ce 01       	movw	r24, r28
     81c:	0e 94 07 14 	call	0x280e	; 0x280e <eeprom_write_byte>
     820:	21 96       	adiw	r28, 0x01	; 1
     822:	c1 38       	cpi	r28, 0x81	; 129
     824:	d1 05       	cpc	r29, r1
     826:	c1 f7       	brne	.-16     	; 0x818 <erase_EEPROM_1K+0x8>
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <shutdownSequence>:
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	d8 2f       	mov	r29, r24
     834:	0e 94 68 01 	call	0x2d0	; 0x2d0 <beep>
     838:	0e 94 4f 01 	call	0x29e	; 0x29e <clear_LCD>
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	85 e7       	ldi	r24, 0x75	; 117
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
     846:	60 e4       	ldi	r22, 0x40	; 64
     848:	8a e8       	ldi	r24, 0x8A	; 138
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
     850:	64 e1       	ldi	r22, 0x14	; 20
     852:	8f e9       	ldi	r24, 0x9F	; 159
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
     85a:	c5 e3       	ldi	r28, 0x35	; 53
     85c:	43 e0       	ldi	r20, 0x03	; 3
     85e:	64 e1       	ldi	r22, 0x14	; 20
     860:	8c 2f       	mov	r24, r28
     862:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
     866:	2f ef       	ldi	r18, 0xFF	; 255
     868:	89 e6       	ldi	r24, 0x69	; 105
     86a:	98 e1       	ldi	r25, 0x18	; 24
     86c:	21 50       	subi	r18, 0x01	; 1
     86e:	80 40       	sbci	r24, 0x00	; 0
     870:	90 40       	sbci	r25, 0x00	; 0
     872:	e1 f7       	brne	.-8      	; 0x86c <__stack+0xd>
     874:	00 c0       	rjmp	.+0      	; 0x876 <__stack+0x17>
     876:	00 00       	nop
     878:	c1 50       	subi	r28, 0x01	; 1
     87a:	c0 33       	cpi	r28, 0x30	; 48
     87c:	79 f7       	brne	.-34     	; 0x85c <shutdownSequence+0x2e>
     87e:	d1 11       	cpse	r29, r1
     880:	0e 94 08 04 	call	0x810	; 0x810 <erase_EEPROM_1K>
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <playMelody>
     88a:	da 98       	cbi	0x1b, 2	; 27
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <updateBatteryStatus>:

void updateBatteryStatus() {
	ADMUX = 0;
     892:	17 b8       	out	0x07, r1	; 7
	ADCSRA |= (1 << ADSC);
     894:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     896:	36 99       	sbic	0x06, 6	; 6
     898:	fe cf       	rjmp	.-4      	; 0x896 <updateBatteryStatus+0x4>
	PowerStatus.battery_voltage = ADC * BATTERY_ADC_FACTOR_A * BATTERY_ADC_FACTOR_B / 10;
     89a:	64 b1       	in	r22, 0x04	; 4
     89c:	75 b1       	in	r23, 0x05	; 5
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__floatunsisf>
     8a6:	2c ea       	ldi	r18, 0xAC	; 172
     8a8:	3c e1       	ldi	r19, 0x1C	; 28
     8aa:	4a e7       	ldi	r20, 0x7A	; 122
     8ac:	5f e3       	ldi	r21, 0x3F	; 63
     8ae:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__mulsf3>
     8b2:	26 e9       	ldi	r18, 0x96	; 150
     8b4:	33 e4       	ldi	r19, 0x43	; 67
     8b6:	43 eb       	ldi	r20, 0xB3	; 179
     8b8:	50 e4       	ldi	r21, 0x40	; 64
     8ba:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <__mulsf3>
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	40 e2       	ldi	r20, 0x20	; 32
     8c4:	51 e4       	ldi	r21, 0x41	; 65
     8c6:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__divsf3>
     8ca:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__fixunssfsi>
     8ce:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <PowerStatus>
     8d2:	08 95       	ret

000008d4 <updateAcStatus>:
}

void updateAcStatus() {
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	00 d0       	rcall	.+0      	; 0x8da <updateAcStatus+0x6>
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t adcx = 0;
     8de:	1a 82       	std	Y+2, r1	; 0x02
     8e0:	19 82       	std	Y+1, r1	; 0x01
	ADMUX |= 1;
     8e2:	38 9a       	sbi	0x07, 0	; 7
	ADCSRA |= (1 << ADSC);
     8e4:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     8e6:	36 99       	sbic	0x06, 6	; 6
     8e8:	fe cf       	rjmp	.-4      	; 0x8e6 <updateAcStatus+0x12>
	adcx = ADC;
     8ea:	84 b1       	in	r24, 0x04	; 4
     8ec:	95 b1       	in	r25, 0x05	; 5
     8ee:	9a 83       	std	Y+2, r25	; 0x02
     8f0:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA |= (1 << ADSC);
     8f2:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC));
     8f4:	36 99       	sbic	0x06, 6	; 6
     8f6:	fe cf       	rjmp	.-4      	; 0x8f4 <updateAcStatus+0x20>
	adcx = (adcx + ADC) / 2; // Double sum average
     8f8:	24 b1       	in	r18, 0x04	; 4
     8fa:	35 b1       	in	r19, 0x05	; 5
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	9a 81       	ldd	r25, Y+2	; 0x02
     900:	82 0f       	add	r24, r18
     902:	93 1f       	adc	r25, r19
     904:	96 95       	lsr	r25
     906:	87 95       	ror	r24
     908:	9a 83       	std	Y+2, r25	; 0x02
     90a:	89 83       	std	Y+1, r24	; 0x01
	if (adcx < POWER_ADC_THRESHOLD) PowerStatus.ac_power_PowerStatus = false;
     90c:	89 81       	ldd	r24, Y+1	; 0x01
     90e:	9a 81       	ldd	r25, Y+2	; 0x02
     910:	84 3f       	cpi	r24, 0xF4	; 244
     912:	91 40       	sbci	r25, 0x01	; 1
     914:	18 f4       	brcc	.+6      	; 0x91c <updateAcStatus+0x48>
     916:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <PowerStatus+0x1>
     91a:	03 c0       	rjmp	.+6      	; 0x922 <updateAcStatus+0x4e>
	else PowerStatus.ac_power_PowerStatus = true;
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <PowerStatus+0x1>
}
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <clearWaveformValues>:

void clearWaveformValues() {
	FunctionGenerator.frequency_A = 0; 
     92c:	e3 ef       	ldi	r30, 0xF3	; 243
     92e:	f1 e0       	ldi	r31, 0x01	; 1
     930:	10 82       	st	Z, r1
     932:	11 82       	std	Z+1, r1	; 0x01
     934:	12 82       	std	Z+2, r1	; 0x02
     936:	13 82       	std	Z+3, r1	; 0x03
	FunctionGenerator.frequency_B = 0;
     938:	14 82       	std	Z+4, r1	; 0x04
     93a:	15 82       	std	Z+5, r1	; 0x05
     93c:	16 82       	std	Z+6, r1	; 0x06
     93e:	17 82       	std	Z+7, r1	; 0x07
	FunctionGenerator.amplitude_A = 0; 
     940:	11 86       	std	Z+9, r1	; 0x09
     942:	10 86       	std	Z+8, r1	; 0x08
	FunctionGenerator.amplitude_B = 0;
     944:	13 86       	std	Z+11, r1	; 0x0b
     946:	12 86       	std	Z+10, r1	; 0x0a
	FunctionGenerator.output_type_A = OFF; 
     948:	85 e0       	ldi	r24, 0x05	; 5
     94a:	84 87       	std	Z+12, r24	; 0x0c
	FunctionGenerator.output_type_B = OFF;
     94c:	85 87       	std	Z+13, r24	; 0x0d
	FunctionGenerator.bias_A = 0; 
     94e:	17 86       	std	Z+15, r1	; 0x0f
     950:	16 86       	std	Z+14, r1	; 0x0e
	FunctionGenerator.bias_B = 0;
     952:	11 8a       	std	Z+17, r1	; 0x11
     954:	10 8a       	std	Z+16, r1	; 0x10
	FunctionGenerator.bias_A_sign = POSITIVE;
     956:	12 8a       	std	Z+18, r1	; 0x12
	FunctionGenerator.bias_B_sign = POSITIVE;
     958:	13 8a       	std	Z+19, r1	; 0x13
     95a:	08 95       	ret

0000095c <handleFunctionGenerator>:
		}					
	}
}

void handleFunctionGenerator(DisplayPointer displayPointer) {
	switch(displayPointer) {
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	fc 01       	movw	r30, r24
     960:	31 97       	sbiw	r30, 0x01	; 1
     962:	e8 30       	cpi	r30, 0x08	; 8
     964:	f1 05       	cpc	r31, r1
     966:	08 f0       	brcs	.+2      	; 0x96a <handleFunctionGenerator+0xe>
     968:	b3 c0       	rjmp	.+358    	; 0xad0 <handleFunctionGenerator+0x174>
     96a:	e6 5d       	subi	r30, 0xD6	; 214
     96c:	ff 4f       	sbci	r31, 0xFF	; 255
     96e:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__tablejump2__>
		case PTR_TYPE_A: case PTR_FREQ_A: setFunction(FG0, FunctionGenerator.frequency_A, FunctionGenerator.output_type_A); break;
     972:	e3 ef       	ldi	r30, 0xF3	; 243
     974:	f1 e0       	ldi	r31, 0x01	; 1
     976:	40 81       	ld	r20, Z
     978:	51 81       	ldd	r21, Z+1	; 0x01
     97a:	62 81       	ldd	r22, Z+2	; 0x02
     97c:	73 81       	ldd	r23, Z+3	; 0x03
     97e:	24 85       	ldd	r18, Z+12	; 0x0c
     980:	85 e0       	ldi	r24, 0x05	; 5
     982:	0e 94 34 02 	call	0x468	; 0x468 <setFunction>
     986:	08 95       	ret
		case PTR_TYPE_B: case PTR_FREQ_B: setFunction(FG1, FunctionGenerator.frequency_B, FunctionGenerator.output_type_B); break;
     988:	e3 ef       	ldi	r30, 0xF3	; 243
     98a:	f1 e0       	ldi	r31, 0x01	; 1
     98c:	44 81       	ldd	r20, Z+4	; 0x04
     98e:	55 81       	ldd	r21, Z+5	; 0x05
     990:	66 81       	ldd	r22, Z+6	; 0x06
     992:	77 81       	ldd	r23, Z+7	; 0x07
     994:	25 85       	ldd	r18, Z+13	; 0x0d
     996:	86 e0       	ldi	r24, 0x06	; 6
     998:	0e 94 34 02 	call	0x468	; 0x468 <setFunction>
     99c:	08 95       	ret
		case PTR_AMP_A: setAmplitude(FunctionGenerator.amplitude_A * MAX_12BIT / 70, FG0); break;
     99e:	40 91 fb 01 	lds	r20, 0x01FB	; 0x8001fb <FunctionGenerator+0x8>
     9a2:	50 91 fc 01 	lds	r21, 0x01FC	; 0x8001fc <FunctionGenerator+0x9>
     9a6:	8f ef       	ldi	r24, 0xFF	; 255
     9a8:	9f e0       	ldi	r25, 0x0F	; 15
     9aa:	48 9f       	mul	r20, r24
     9ac:	90 01       	movw	r18, r0
     9ae:	49 9f       	mul	r20, r25
     9b0:	30 0d       	add	r19, r0
     9b2:	58 9f       	mul	r21, r24
     9b4:	30 0d       	add	r19, r0
     9b6:	11 24       	eor	r1, r1
     9b8:	af e0       	ldi	r26, 0x0F	; 15
     9ba:	ba ee       	ldi	r27, 0xEA	; 234
     9bc:	0e 94 23 11 	call	0x2246	; 0x2246 <__umulhisi3>
     9c0:	65 e0       	ldi	r22, 0x05	; 5
     9c2:	00 24       	eor	r0, r0
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	00 1c       	adc	r0, r0
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	00 1c       	adc	r0, r0
     9d0:	89 2f       	mov	r24, r25
     9d2:	90 2d       	mov	r25, r0
     9d4:	0e 94 a8 02 	call	0x550	; 0x550 <setAmplitude>
     9d8:	08 95       	ret
		case PTR_AMP_B: setAmplitude(FunctionGenerator.amplitude_B * MAX_12BIT / 70, FG1); break;
     9da:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <FunctionGenerator+0xa>
     9de:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <FunctionGenerator+0xb>
     9e2:	8f ef       	ldi	r24, 0xFF	; 255
     9e4:	9f e0       	ldi	r25, 0x0F	; 15
     9e6:	48 9f       	mul	r20, r24
     9e8:	90 01       	movw	r18, r0
     9ea:	49 9f       	mul	r20, r25
     9ec:	30 0d       	add	r19, r0
     9ee:	58 9f       	mul	r21, r24
     9f0:	30 0d       	add	r19, r0
     9f2:	11 24       	eor	r1, r1
     9f4:	af e0       	ldi	r26, 0x0F	; 15
     9f6:	ba ee       	ldi	r27, 0xEA	; 234
     9f8:	0e 94 23 11 	call	0x2246	; 0x2246 <__umulhisi3>
     9fc:	66 e0       	ldi	r22, 0x06	; 6
     9fe:	00 24       	eor	r0, r0
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	00 1c       	adc	r0, r0
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	00 1c       	adc	r0, r0
     a0c:	89 2f       	mov	r24, r25
     a0e:	90 2d       	mov	r25, r0
     a10:	0e 94 a8 02 	call	0x550	; 0x550 <setAmplitude>
     a14:	08 95       	ret
		case PTR_BIAS_A: 
			if (FunctionGenerator.bias_A_sign == POSITIVE) setBiasDC(FG0, 0, NEGATIVE);
     a16:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <FunctionGenerator+0x12>
     a1a:	81 11       	cpse	r24, r1
     a1c:	07 c0       	rjmp	.+14     	; 0xa2c <handleFunctionGenerator+0xd0>
     a1e:	41 e0       	ldi	r20, 0x01	; 1
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	85 e0       	ldi	r24, 0x05	; 5
     a26:	0e 94 db 03 	call	0x7b6	; 0x7b6 <setBiasDC>
     a2a:	06 c0       	rjmp	.+12     	; 0xa38 <handleFunctionGenerator+0xdc>
			else setBiasDC(FG0, 0, POSITIVE);
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	85 e0       	ldi	r24, 0x05	; 5
     a34:	0e 94 db 03 	call	0x7b6	; 0x7b6 <setBiasDC>
			setBiasDC(FG0, FunctionGenerator.bias_A * MAX_12BIT / 330, FunctionGenerator.bias_A_sign);
     a38:	e3 ef       	ldi	r30, 0xF3	; 243
     a3a:	f1 e0       	ldi	r31, 0x01	; 1
     a3c:	46 85       	ldd	r20, Z+14	; 0x0e
     a3e:	57 85       	ldd	r21, Z+15	; 0x0f
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	9f e0       	ldi	r25, 0x0F	; 15
     a44:	48 9f       	mul	r20, r24
     a46:	90 01       	movw	r18, r0
     a48:	49 9f       	mul	r20, r25
     a4a:	30 0d       	add	r19, r0
     a4c:	58 9f       	mul	r21, r24
     a4e:	30 0d       	add	r19, r0
     a50:	11 24       	eor	r1, r1
     a52:	36 95       	lsr	r19
     a54:	27 95       	ror	r18
     a56:	a9 e9       	ldi	r26, 0x99	; 153
     a58:	b6 ec       	ldi	r27, 0xC6	; 198
     a5a:	0e 94 23 11 	call	0x2246	; 0x2246 <__umulhisi3>
     a5e:	bc 01       	movw	r22, r24
     a60:	66 0f       	add	r22, r22
     a62:	67 2f       	mov	r22, r23
     a64:	66 1f       	adc	r22, r22
     a66:	77 0b       	sbc	r23, r23
     a68:	71 95       	neg	r23
     a6a:	42 89       	ldd	r20, Z+18	; 0x12
     a6c:	85 e0       	ldi	r24, 0x05	; 5
     a6e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <setBiasDC>
			break;
     a72:	08 95       	ret
		case PTR_BIAS_B:
			if (FunctionGenerator.bias_B_sign == POSITIVE) setBiasDC(FG1, 0, NEGATIVE);
     a74:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <FunctionGenerator+0x13>
     a78:	81 11       	cpse	r24, r1
     a7a:	07 c0       	rjmp	.+14     	; 0xa8a <handleFunctionGenerator+0x12e>
     a7c:	41 e0       	ldi	r20, 0x01	; 1
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	86 e0       	ldi	r24, 0x06	; 6
     a84:	0e 94 db 03 	call	0x7b6	; 0x7b6 <setBiasDC>
     a88:	06 c0       	rjmp	.+12     	; 0xa96 <handleFunctionGenerator+0x13a>
			else setBiasDC(FG1, 0, POSITIVE);
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	86 e0       	ldi	r24, 0x06	; 6
     a92:	0e 94 db 03 	call	0x7b6	; 0x7b6 <setBiasDC>
			setBiasDC(FG0, FunctionGenerator.bias_B * MAX_12BIT / 330, FunctionGenerator.bias_B_sign);
     a96:	e3 ef       	ldi	r30, 0xF3	; 243
     a98:	f1 e0       	ldi	r31, 0x01	; 1
     a9a:	40 89       	ldd	r20, Z+16	; 0x10
     a9c:	51 89       	ldd	r21, Z+17	; 0x11
     a9e:	8f ef       	ldi	r24, 0xFF	; 255
     aa0:	9f e0       	ldi	r25, 0x0F	; 15
     aa2:	48 9f       	mul	r20, r24
     aa4:	90 01       	movw	r18, r0
     aa6:	49 9f       	mul	r20, r25
     aa8:	30 0d       	add	r19, r0
     aaa:	58 9f       	mul	r21, r24
     aac:	30 0d       	add	r19, r0
     aae:	11 24       	eor	r1, r1
     ab0:	36 95       	lsr	r19
     ab2:	27 95       	ror	r18
     ab4:	a9 e9       	ldi	r26, 0x99	; 153
     ab6:	b6 ec       	ldi	r27, 0xC6	; 198
     ab8:	0e 94 23 11 	call	0x2246	; 0x2246 <__umulhisi3>
     abc:	bc 01       	movw	r22, r24
     abe:	66 0f       	add	r22, r22
     ac0:	67 2f       	mov	r22, r23
     ac2:	66 1f       	adc	r22, r22
     ac4:	77 0b       	sbc	r23, r23
     ac6:	71 95       	neg	r23
     ac8:	43 89       	ldd	r20, Z+19	; 0x13
     aca:	85 e0       	ldi	r24, 0x05	; 5
     acc:	0e 94 db 03 	call	0x7b6	; 0x7b6 <setBiasDC>
     ad0:	08 95       	ret

00000ad2 <uintToString>:
			
			default: break;
	}
}

void uintToString(uint32_t number, char *string, uint8_t length) {
     ad2:	cf 92       	push	r12
     ad4:	df 92       	push	r13
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	02 2f       	mov	r16, r18
	uint8_t iPtr = 0;
	while(iPtr < length) {
     ae4:	22 23       	and	r18, r18
     ae6:	c1 f0       	breq	.+48     	; 0xb18 <uintToString+0x46>
     ae8:	ea 01       	movw	r28, r20
     aea:	c2 0f       	add	r28, r18
     aec:	d1 1d       	adc	r29, r1
     aee:	10 e0       	ldi	r17, 0x00	; 0
		string[length - iPtr - 1] = (number % 10) + '0';
     af0:	0f 2e       	mov	r0, r31
     af2:	fa e0       	ldi	r31, 0x0A	; 10
     af4:	cf 2e       	mov	r12, r31
     af6:	d1 2c       	mov	r13, r1
     af8:	e1 2c       	mov	r14, r1
     afa:	f1 2c       	mov	r15, r1
     afc:	f0 2d       	mov	r31, r0
     afe:	a7 01       	movw	r20, r14
     b00:	96 01       	movw	r18, r12
     b02:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__udivmodsi4>
     b06:	60 5d       	subi	r22, 0xD0	; 208
     b08:	6a 93       	st	-Y, r22
		number /= 10;
     b0a:	62 2f       	mov	r22, r18
     b0c:	73 2f       	mov	r23, r19
     b0e:	84 2f       	mov	r24, r20
     b10:	95 2f       	mov	r25, r21
		iPtr++;
     b12:	1f 5f       	subi	r17, 0xFF	; 255
	}
}

void uintToString(uint32_t number, char *string, uint8_t length) {
	uint8_t iPtr = 0;
	while(iPtr < length) {
     b14:	01 13       	cpse	r16, r17
     b16:	f3 cf       	rjmp	.-26     	; 0xafe <uintToString+0x2c>
		string[length - iPtr - 1] = (number % 10) + '0';
		number /= 10;
		iPtr++;
	}
}
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	df 90       	pop	r13
     b26:	cf 90       	pop	r12
     b28:	08 95       	ret

00000b2a <handleLCD>:
	FunctionGenerator.bias_B = 0;
	FunctionGenerator.bias_A_sign = POSITIVE;
	FunctionGenerator.bias_B_sign = POSITIVE;
}

void handleLCD(MainScreen screen, DisplayPointer displayPointer, bool pointerActive, bool paramActive) {
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
	
	if (pointerActive) {
     b32:	44 23       	and	r20, r20
     b34:	09 f4       	brne	.+2      	; 0xb38 <handleLCD+0xe>
     b36:	74 c0       	rjmp	.+232    	; 0xc20 <handleLCD+0xf6>
		switch(displayPointer) {
     b38:	86 2f       	mov	r24, r22
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	8b 30       	cpi	r24, 0x0B	; 11
     b3e:	91 05       	cpc	r25, r1
     b40:	08 f0       	brcs	.+2      	; 0xb44 <handleLCD+0x1a>
     b42:	1d c3       	rjmp	.+1594   	; 0x117e <handleLCD+0x654>
     b44:	fc 01       	movw	r30, r24
     b46:	ee 5c       	subi	r30, 0xCE	; 206
     b48:	ff 4f       	sbci	r31, 0xFF	; 255
     b4a:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__tablejump2__>
			case PTR_NULL:
			print_LCD_char(' ', LCD_LINE_1, 0);
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	80 e2       	ldi	r24, 0x20	; 32
     b54:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_2, 0);
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	60 e4       	ldi	r22, 0x40	; 64
     b5c:	80 e2       	ldi	r24, 0x20	; 32
     b5e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_3, 0);
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	64 e1       	ldi	r22, 0x14	; 20
     b66:	80 e2       	ldi	r24, 0x20	; 32
     b68:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_4, 0);
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	64 e5       	ldi	r22, 0x54	; 84
     b70:	80 e2       	ldi	r24, 0x20	; 32
     b72:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
     b76:	03 c3       	rjmp	.+1542   	; 0x117e <handleLCD+0x654>
			
			case PTR_TYPE_A: case PTR_TYPE_B:
			print_LCD_char('>', LCD_LINE_1, 0);
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	8e e3       	ldi	r24, 0x3E	; 62
     b7e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_2, 0);
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	60 e4       	ldi	r22, 0x40	; 64
     b86:	80 e2       	ldi	r24, 0x20	; 32
     b88:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_3, 0);
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	64 e1       	ldi	r22, 0x14	; 20
     b90:	80 e2       	ldi	r24, 0x20	; 32
     b92:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_4, 0);
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	64 e5       	ldi	r22, 0x54	; 84
     b9a:	80 e2       	ldi	r24, 0x20	; 32
     b9c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
     ba0:	ee c2       	rjmp	.+1500   	; 0x117e <handleLCD+0x654>
			
			case PTR_AMP_A: case PTR_AMP_B:
			print_LCD_char(' ', LCD_LINE_1, 0);
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	80 e2       	ldi	r24, 0x20	; 32
     ba8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char('>', LCD_LINE_2, 0);
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	60 e4       	ldi	r22, 0x40	; 64
     bb0:	8e e3       	ldi	r24, 0x3E	; 62
     bb2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_3, 0);
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	64 e1       	ldi	r22, 0x14	; 20
     bba:	80 e2       	ldi	r24, 0x20	; 32
     bbc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_4, 0);
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	64 e5       	ldi	r22, 0x54	; 84
     bc4:	80 e2       	ldi	r24, 0x20	; 32
     bc6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
     bca:	d9 c2       	rjmp	.+1458   	; 0x117e <handleLCD+0x654>
			
			case PTR_FREQ_A: case PTR_FREQ_B: case PTR_SETT:
			print_LCD_char(' ', LCD_LINE_1, 0);
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	80 e2       	ldi	r24, 0x20	; 32
     bd2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_2, 0);
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	60 e4       	ldi	r22, 0x40	; 64
     bda:	80 e2       	ldi	r24, 0x20	; 32
     bdc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char('>', LCD_LINE_3, 0);
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	64 e1       	ldi	r22, 0x14	; 20
     be4:	8e e3       	ldi	r24, 0x3E	; 62
     be6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_4, 0);
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	64 e5       	ldi	r22, 0x54	; 84
     bee:	80 e2       	ldi	r24, 0x20	; 32
     bf0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
     bf4:	c4 c2       	rjmp	.+1416   	; 0x117e <handleLCD+0x654>
			
			case PTR_BIAS_A: case PTR_BIAS_B: case PTR_SHUTDOWN:
			print_LCD_char(' ', LCD_LINE_1, 0);
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	80 e2       	ldi	r24, 0x20	; 32
     bfc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_2, 0);
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	60 e4       	ldi	r22, 0x40	; 64
     c04:	80 e2       	ldi	r24, 0x20	; 32
     c06:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(' ', LCD_LINE_3, 0);
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	64 e1       	ldi	r22, 0x14	; 20
     c0e:	80 e2       	ldi	r24, 0x20	; 32
     c10:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char('>', LCD_LINE_4, 0);
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	64 e5       	ldi	r22, 0x54	; 84
     c18:	8e e3       	ldi	r24, 0x3E	; 62
     c1a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
     c1e:	af c2       	rjmp	.+1374   	; 0x117e <handleLCD+0x654>
		}
	}
	
	else if (paramActive) {
     c20:	22 23       	and	r18, r18
     c22:	09 f4       	brne	.+2      	; 0xc26 <handleLCD+0xfc>
     c24:	82 c1       	rjmp	.+772    	; 0xf2a <handleLCD+0x400>
		switch(displayPointer) {
     c26:	86 2f       	mov	r24, r22
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	fc 01       	movw	r30, r24
     c2c:	31 97       	sbiw	r30, 0x01	; 1
     c2e:	e8 30       	cpi	r30, 0x08	; 8
     c30:	f1 05       	cpc	r31, r1
     c32:	08 f0       	brcs	.+2      	; 0xc36 <handleLCD+0x10c>
     c34:	a4 c2       	rjmp	.+1352   	; 0x117e <handleLCD+0x654>
     c36:	e3 5c       	subi	r30, 0xC3	; 195
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__tablejump2__>
			case PTR_TYPE_A:
			switch(FunctionGenerator.output_type_A) {
     c3e:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <FunctionGenerator+0xc>
     c42:	83 30       	cpi	r24, 0x03	; 3
     c44:	e9 f0       	breq	.+58     	; 0xc80 <handleLCD+0x156>
     c46:	28 f4       	brcc	.+10     	; 0xc52 <handleLCD+0x128>
     c48:	81 30       	cpi	r24, 0x01	; 1
     c4a:	41 f0       	breq	.+16     	; 0xc5c <handleLCD+0x132>
     c4c:	82 30       	cpi	r24, 0x02	; 2
     c4e:	79 f0       	breq	.+30     	; 0xc6e <handleLCD+0x144>
     c50:	30 c0       	rjmp	.+96     	; 0xcb2 <handleLCD+0x188>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	f1 f0       	breq	.+60     	; 0xc92 <handleLCD+0x168>
     c56:	85 30       	cpi	r24, 0x05	; 5
     c58:	29 f1       	breq	.+74     	; 0xca4 <handleLCD+0x17a>
     c5a:	2b c0       	rjmp	.+86     	; 0xcb2 <handleLCD+0x188>
				case SINE:
				UI.type_A[0] = 'S';
     c5c:	ea ec       	ldi	r30, 0xCA	; 202
     c5e:	f1 e0       	ldi	r31, 0x01	; 1
     c60:	83 e5       	ldi	r24, 0x53	; 83
     c62:	82 8f       	std	Z+26, r24	; 0x1a
				UI.type_A[1] = 'I';
     c64:	89 e4       	ldi	r24, 0x49	; 73
     c66:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_A[2] = 'N';
     c68:	8e e4       	ldi	r24, 0x4E	; 78
     c6a:	84 8f       	std	Z+28, r24	; 0x1c
				break;
     c6c:	22 c0       	rjmp	.+68     	; 0xcb2 <handleLCD+0x188>
				
				case TRIANGLE:
				UI.type_A[0] = 'T';
     c6e:	ea ec       	ldi	r30, 0xCA	; 202
     c70:	f1 e0       	ldi	r31, 0x01	; 1
     c72:	84 e5       	ldi	r24, 0x54	; 84
     c74:	82 8f       	std	Z+26, r24	; 0x1a
				UI.type_A[1] = 'R';
     c76:	82 e5       	ldi	r24, 0x52	; 82
     c78:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_A[2] = 'N';
     c7a:	8e e4       	ldi	r24, 0x4E	; 78
     c7c:	84 8f       	std	Z+28, r24	; 0x1c
				break;
     c7e:	19 c0       	rjmp	.+50     	; 0xcb2 <handleLCD+0x188>
				
				case SQUARE:
				UI.type_A[0] = 'S';
     c80:	ea ec       	ldi	r30, 0xCA	; 202
     c82:	f1 e0       	ldi	r31, 0x01	; 1
     c84:	83 e5       	ldi	r24, 0x53	; 83
     c86:	82 8f       	std	Z+26, r24	; 0x1a
				UI.type_A[1] = 'Q';
     c88:	81 e5       	ldi	r24, 0x51	; 81
     c8a:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_A[2] = 'R';
     c8c:	82 e5       	ldi	r24, 0x52	; 82
     c8e:	84 8f       	std	Z+28, r24	; 0x1c
				break;
     c90:	10 c0       	rjmp	.+32     	; 0xcb2 <handleLCD+0x188>
				
				case DC:
				UI.type_A[0] = ' ';
     c92:	ea ec       	ldi	r30, 0xCA	; 202
     c94:	f1 e0       	ldi	r31, 0x01	; 1
     c96:	80 e2       	ldi	r24, 0x20	; 32
     c98:	82 8f       	std	Z+26, r24	; 0x1a
				UI.type_A[1] = 'D';
     c9a:	84 e4       	ldi	r24, 0x44	; 68
     c9c:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_A[2] = 'C';
     c9e:	83 e4       	ldi	r24, 0x43	; 67
     ca0:	84 8f       	std	Z+28, r24	; 0x1c
				break;
     ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <handleLCD+0x188>
				
				case OFF:
				UI.type_A[0] = 'O';
     ca4:	ea ec       	ldi	r30, 0xCA	; 202
     ca6:	f1 e0       	ldi	r31, 0x01	; 1
     ca8:	8f e4       	ldi	r24, 0x4F	; 79
     caa:	82 8f       	std	Z+26, r24	; 0x1a
				UI.type_A[1] = 'F';
     cac:	86 e4       	ldi	r24, 0x46	; 70
     cae:	83 8f       	std	Z+27, r24	; 0x1b
				UI.type_A[2] = 'F';
     cb0:	84 8f       	std	Z+28, r24	; 0x1c
				break;
		}
		
			case PTR_TYPE_B:
			switch(FunctionGenerator.output_type_B) {
     cb2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <FunctionGenerator+0xd>
     cb6:	83 30       	cpi	r24, 0x03	; 3
     cb8:	e9 f0       	breq	.+58     	; 0xcf4 <handleLCD+0x1ca>
     cba:	28 f4       	brcc	.+10     	; 0xcc6 <handleLCD+0x19c>
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	41 f0       	breq	.+16     	; 0xcd0 <handleLCD+0x1a6>
     cc0:	82 30       	cpi	r24, 0x02	; 2
     cc2:	79 f0       	breq	.+30     	; 0xce2 <handleLCD+0x1b8>
     cc4:	30 c0       	rjmp	.+96     	; 0xd26 <handleLCD+0x1fc>
     cc6:	84 30       	cpi	r24, 0x04	; 4
     cc8:	f1 f0       	breq	.+60     	; 0xd06 <handleLCD+0x1dc>
     cca:	85 30       	cpi	r24, 0x05	; 5
     ccc:	29 f1       	breq	.+74     	; 0xd18 <handleLCD+0x1ee>
     cce:	2b c0       	rjmp	.+86     	; 0xd26 <handleLCD+0x1fc>
				case SINE:
				UI.type_B[0] = 'S';
     cd0:	ea ec       	ldi	r30, 0xCA	; 202
     cd2:	f1 e0       	ldi	r31, 0x01	; 1
     cd4:	83 e5       	ldi	r24, 0x53	; 83
     cd6:	85 8f       	std	Z+29, r24	; 0x1d
				UI.type_B[1] = 'I';
     cd8:	89 e4       	ldi	r24, 0x49	; 73
     cda:	86 8f       	std	Z+30, r24	; 0x1e
				UI.type_B[2] = 'N';
     cdc:	8e e4       	ldi	r24, 0x4E	; 78
     cde:	87 8f       	std	Z+31, r24	; 0x1f
				break;
     ce0:	22 c0       	rjmp	.+68     	; 0xd26 <handleLCD+0x1fc>
				
				case TRIANGLE:
				UI.type_B[0] = 'T';
     ce2:	ea ec       	ldi	r30, 0xCA	; 202
     ce4:	f1 e0       	ldi	r31, 0x01	; 1
     ce6:	84 e5       	ldi	r24, 0x54	; 84
     ce8:	85 8f       	std	Z+29, r24	; 0x1d
				UI.type_B[1] = 'R';
     cea:	82 e5       	ldi	r24, 0x52	; 82
     cec:	86 8f       	std	Z+30, r24	; 0x1e
				UI.type_B[2] = 'N';
     cee:	8e e4       	ldi	r24, 0x4E	; 78
     cf0:	87 8f       	std	Z+31, r24	; 0x1f
				break;
     cf2:	19 c0       	rjmp	.+50     	; 0xd26 <handleLCD+0x1fc>
				
				case SQUARE:
				UI.type_B[0] = 'S';
     cf4:	ea ec       	ldi	r30, 0xCA	; 202
     cf6:	f1 e0       	ldi	r31, 0x01	; 1
     cf8:	83 e5       	ldi	r24, 0x53	; 83
     cfa:	85 8f       	std	Z+29, r24	; 0x1d
				UI.type_B[1] = 'Q';
     cfc:	81 e5       	ldi	r24, 0x51	; 81
     cfe:	86 8f       	std	Z+30, r24	; 0x1e
				UI.type_B[2] = 'R';
     d00:	82 e5       	ldi	r24, 0x52	; 82
     d02:	87 8f       	std	Z+31, r24	; 0x1f
				break;
     d04:	10 c0       	rjmp	.+32     	; 0xd26 <handleLCD+0x1fc>
				
				case DC:
				UI.type_B[0] = ' ';
     d06:	ea ec       	ldi	r30, 0xCA	; 202
     d08:	f1 e0       	ldi	r31, 0x01	; 1
     d0a:	80 e2       	ldi	r24, 0x20	; 32
     d0c:	85 8f       	std	Z+29, r24	; 0x1d
				UI.type_B[1] = 'D';
     d0e:	84 e4       	ldi	r24, 0x44	; 68
     d10:	86 8f       	std	Z+30, r24	; 0x1e
				UI.type_B[2] = 'C';
     d12:	83 e4       	ldi	r24, 0x43	; 67
     d14:	87 8f       	std	Z+31, r24	; 0x1f
				break;
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <handleLCD+0x1fc>
				
				case OFF:
				UI.type_B[0] = 'O';
     d18:	ea ec       	ldi	r30, 0xCA	; 202
     d1a:	f1 e0       	ldi	r31, 0x01	; 1
     d1c:	8f e4       	ldi	r24, 0x4F	; 79
     d1e:	85 8f       	std	Z+29, r24	; 0x1d
				UI.type_B[1] = 'F';
     d20:	86 e4       	ldi	r24, 0x46	; 70
     d22:	86 8f       	std	Z+30, r24	; 0x1e
				UI.type_B[2] = 'F';
     d24:	87 8f       	std	Z+31, r24	; 0x1f
				break;
			}
			
			print_LCD_char(UI.type_B[0], LCD_LINE_1, 17);
     d26:	ca ec       	ldi	r28, 0xCA	; 202
     d28:	d1 e0       	ldi	r29, 0x01	; 1
     d2a:	41 e1       	ldi	r20, 0x11	; 17
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d30:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.type_B[1], LCD_LINE_1, 18);
     d34:	42 e1       	ldi	r20, 0x12	; 18
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d3a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.type_B[2], LCD_LINE_1, 19);
     d3e:	43 e1       	ldi	r20, 0x13	; 19
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d44:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
     d48:	1a c2       	rjmp	.+1076   	; 0x117e <handleLCD+0x654>
			
			case PTR_AMP_A:
			uintToString(FunctionGenerator.amplitude_A, &UI.amplitude_A[0], 2);
     d4a:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <FunctionGenerator+0x8>
     d4e:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <FunctionGenerator+0x9>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	22 e0       	ldi	r18, 0x02	; 2
     d58:	48 ed       	ldi	r20, 0xD8	; 216
     d5a:	51 e0       	ldi	r21, 0x01	; 1
     d5c:	0e 94 69 05 	call	0xad2	; 0xad2 <uintToString>
			print_LCD_char(UI.amplitude_A[0], LCD_LINE_2, 14);
     d60:	ca ec       	ldi	r28, 0xCA	; 202
     d62:	d1 e0       	ldi	r29, 0x01	; 1
     d64:	4e e0       	ldi	r20, 0x0E	; 14
     d66:	60 e4       	ldi	r22, 0x40	; 64
     d68:	8e 85       	ldd	r24, Y+14	; 0x0e
     d6a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.amplitude_A[1], LCD_LINE_2, 15);
     d6e:	4f e0       	ldi	r20, 0x0F	; 15
     d70:	60 e4       	ldi	r22, 0x40	; 64
     d72:	8f 85       	ldd	r24, Y+15	; 0x0f
     d74:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
     d78:	02 c2       	rjmp	.+1028   	; 0x117e <handleLCD+0x654>
				
			case PTR_AMP_B:
			uintToString(FunctionGenerator.amplitude_B, &UI.amplitude_B[0], 2);
     d7a:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <FunctionGenerator+0xa>
     d7e:	70 91 fe 01 	lds	r23, 0x01FE	; 0x8001fe <FunctionGenerator+0xb>
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	22 e0       	ldi	r18, 0x02	; 2
     d88:	4b ed       	ldi	r20, 0xDB	; 219
     d8a:	51 e0       	ldi	r21, 0x01	; 1
     d8c:	0e 94 69 05 	call	0xad2	; 0xad2 <uintToString>
			print_LCD_char(UI.amplitude_B[0], LCD_LINE_2, 14);
     d90:	ca ec       	ldi	r28, 0xCA	; 202
     d92:	d1 e0       	ldi	r29, 0x01	; 1
     d94:	4e e0       	ldi	r20, 0x0E	; 14
     d96:	60 e4       	ldi	r22, 0x40	; 64
     d98:	89 89       	ldd	r24, Y+17	; 0x11
     d9a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.amplitude_B[1], LCD_LINE_2, 15);
     d9e:	4f e0       	ldi	r20, 0x0F	; 15
     da0:	60 e4       	ldi	r22, 0x40	; 64
     da2:	8a 89       	ldd	r24, Y+18	; 0x12
     da4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
     da8:	ea c1       	rjmp	.+980    	; 0x117e <handleLCD+0x654>
			
			case PTR_FREQ_A:
			uintToString(FunctionGenerator.frequency_A, &UI.frequency_A[0], 7);
     daa:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <FunctionGenerator>
     dae:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <FunctionGenerator+0x1>
     db2:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <FunctionGenerator+0x2>
     db6:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <FunctionGenerator+0x3>
     dba:	27 e0       	ldi	r18, 0x07	; 7
     dbc:	4a ec       	ldi	r20, 0xCA	; 202
     dbe:	51 e0       	ldi	r21, 0x01	; 1
     dc0:	0e 94 69 05 	call	0xad2	; 0xad2 <uintToString>
			print_LCD_char(UI.frequency_A[0], LCD_LINE_3, 7);
     dc4:	ca ec       	ldi	r28, 0xCA	; 202
     dc6:	d1 e0       	ldi	r29, 0x01	; 1
     dc8:	47 e0       	ldi	r20, 0x07	; 7
     dca:	64 e1       	ldi	r22, 0x14	; 20
     dcc:	88 81       	ld	r24, Y
     dce:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_A[1], LCD_LINE_3, 9);
     dd2:	49 e0       	ldi	r20, 0x09	; 9
     dd4:	64 e1       	ldi	r22, 0x14	; 20
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_A[2], LCD_LINE_3, 10);
     ddc:	4a e0       	ldi	r20, 0x0A	; 10
     dde:	64 e1       	ldi	r22, 0x14	; 20
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_A[3], LCD_LINE_3, 11);
     de6:	4b e0       	ldi	r20, 0x0B	; 11
     de8:	64 e1       	ldi	r22, 0x14	; 20
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_A[4], LCD_LINE_3, 13);
     df0:	4d e0       	ldi	r20, 0x0D	; 13
     df2:	64 e1       	ldi	r22, 0x14	; 20
     df4:	8c 81       	ldd	r24, Y+4	; 0x04
     df6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_A[5], LCD_LINE_3, 14);
     dfa:	4e e0       	ldi	r20, 0x0E	; 14
     dfc:	64 e1       	ldi	r22, 0x14	; 20
     dfe:	8d 81       	ldd	r24, Y+5	; 0x05
     e00:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_A[6], LCD_LINE_3, 15);
     e04:	4f e0       	ldi	r20, 0x0F	; 15
     e06:	64 e1       	ldi	r22, 0x14	; 20
     e08:	8e 81       	ldd	r24, Y+6	; 0x06
     e0a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
     e0e:	b7 c1       	rjmp	.+878    	; 0x117e <handleLCD+0x654>
			
			case PTR_FREQ_B:
			uintToString(FunctionGenerator.frequency_B, &UI.frequency_B[0], 7);
     e10:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <FunctionGenerator+0x4>
     e14:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <FunctionGenerator+0x5>
     e18:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <FunctionGenerator+0x6>
     e1c:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <FunctionGenerator+0x7>
     e20:	27 e0       	ldi	r18, 0x07	; 7
     e22:	41 ed       	ldi	r20, 0xD1	; 209
     e24:	51 e0       	ldi	r21, 0x01	; 1
     e26:	0e 94 69 05 	call	0xad2	; 0xad2 <uintToString>
			print_LCD_char(UI.frequency_B[0], LCD_LINE_3, 7);
     e2a:	ca ec       	ldi	r28, 0xCA	; 202
     e2c:	d1 e0       	ldi	r29, 0x01	; 1
     e2e:	47 e0       	ldi	r20, 0x07	; 7
     e30:	64 e1       	ldi	r22, 0x14	; 20
     e32:	8f 81       	ldd	r24, Y+7	; 0x07
     e34:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_B[1], LCD_LINE_3, 9);
     e38:	49 e0       	ldi	r20, 0x09	; 9
     e3a:	64 e1       	ldi	r22, 0x14	; 20
     e3c:	88 85       	ldd	r24, Y+8	; 0x08
     e3e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_B[2], LCD_LINE_3, 10);
     e42:	4a e0       	ldi	r20, 0x0A	; 10
     e44:	64 e1       	ldi	r22, 0x14	; 20
     e46:	89 85       	ldd	r24, Y+9	; 0x09
     e48:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_B[3], LCD_LINE_3, 11);
     e4c:	4b e0       	ldi	r20, 0x0B	; 11
     e4e:	64 e1       	ldi	r22, 0x14	; 20
     e50:	8a 85       	ldd	r24, Y+10	; 0x0a
     e52:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_B[4], LCD_LINE_3, 13);
     e56:	4d e0       	ldi	r20, 0x0D	; 13
     e58:	64 e1       	ldi	r22, 0x14	; 20
     e5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e5c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_B[5], LCD_LINE_3, 14);
     e60:	4e e0       	ldi	r20, 0x0E	; 14
     e62:	64 e1       	ldi	r22, 0x14	; 20
     e64:	8c 85       	ldd	r24, Y+12	; 0x0c
     e66:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_B[6], LCD_LINE_3, 15);
     e6a:	4f e0       	ldi	r20, 0x0F	; 15
     e6c:	64 e1       	ldi	r22, 0x14	; 20
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
     e74:	84 c1       	rjmp	.+776    	; 0x117e <handleLCD+0x654>
			
			case PTR_BIAS_A: 
			if (FunctionGenerator.bias_A_sign == POSITIVE) UI.bias_A_sign = '+';
     e76:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <FunctionGenerator+0x12>
     e7a:	81 11       	cpse	r24, r1
     e7c:	04 c0       	rjmp	.+8      	; 0xe86 <handleLCD+0x35c>
     e7e:	8b e2       	ldi	r24, 0x2B	; 43
     e80:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <UI+0x20>
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <handleLCD+0x362>
			else UI.bias_A_sign = '-';
     e86:	8d e2       	ldi	r24, 0x2D	; 45
     e88:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <UI+0x20>
			uintToString(FunctionGenerator.bias_A, &UI.bias_A[0], 3);
     e8c:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <FunctionGenerator+0xe>
     e90:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <FunctionGenerator+0xf>
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	23 e0       	ldi	r18, 0x03	; 3
     e9a:	4e ed       	ldi	r20, 0xDE	; 222
     e9c:	51 e0       	ldi	r21, 0x01	; 1
     e9e:	0e 94 69 05 	call	0xad2	; 0xad2 <uintToString>
			print_LCD_char(UI.bias_A_sign, LCD_LINE_4, 7);
     ea2:	ca ec       	ldi	r28, 0xCA	; 202
     ea4:	d1 e0       	ldi	r29, 0x01	; 1
     ea6:	47 e0       	ldi	r20, 0x07	; 7
     ea8:	64 e5       	ldi	r22, 0x54	; 84
     eaa:	88 a1       	ldd	r24, Y+32	; 0x20
     eac:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.bias_A[0], LCD_LINE_4, 8);
     eb0:	48 e0       	ldi	r20, 0x08	; 8
     eb2:	64 e5       	ldi	r22, 0x54	; 84
     eb4:	8c 89       	ldd	r24, Y+20	; 0x14
     eb6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.bias_A[1], LCD_LINE_4, 10);
     eba:	4a e0       	ldi	r20, 0x0A	; 10
     ebc:	64 e5       	ldi	r22, 0x54	; 84
     ebe:	8d 89       	ldd	r24, Y+21	; 0x15
     ec0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.bias_A[2], LCD_LINE_4, 11);
     ec4:	4b e0       	ldi	r20, 0x0B	; 11
     ec6:	64 e5       	ldi	r22, 0x54	; 84
     ec8:	8e 89       	ldd	r24, Y+22	; 0x16
     eca:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
     ece:	57 c1       	rjmp	.+686    	; 0x117e <handleLCD+0x654>
			
			case PTR_BIAS_B:
			if (FunctionGenerator.bias_B_sign == POSITIVE) UI.bias_B_sign = '+';
     ed0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <FunctionGenerator+0x13>
     ed4:	81 11       	cpse	r24, r1
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <handleLCD+0x3b6>
     ed8:	8b e2       	ldi	r24, 0x2B	; 43
     eda:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <UI+0x21>
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <handleLCD+0x3bc>
			else UI.bias_B_sign = '-';
     ee0:	8d e2       	ldi	r24, 0x2D	; 45
     ee2:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <UI+0x21>
			uintToString(FunctionGenerator.bias_A, &UI.bias_B[0], 3);
     ee6:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <FunctionGenerator+0xe>
     eea:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <FunctionGenerator+0xf>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	23 e0       	ldi	r18, 0x03	; 3
     ef4:	41 ee       	ldi	r20, 0xE1	; 225
     ef6:	51 e0       	ldi	r21, 0x01	; 1
     ef8:	0e 94 69 05 	call	0xad2	; 0xad2 <uintToString>
			print_LCD_char(UI.bias_B_sign, LCD_LINE_4, 7);
     efc:	ca ec       	ldi	r28, 0xCA	; 202
     efe:	d1 e0       	ldi	r29, 0x01	; 1
     f00:	47 e0       	ldi	r20, 0x07	; 7
     f02:	64 e5       	ldi	r22, 0x54	; 84
     f04:	89 a1       	ldd	r24, Y+33	; 0x21
     f06:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.bias_B[0], LCD_LINE_4, 8);
     f0a:	48 e0       	ldi	r20, 0x08	; 8
     f0c:	64 e5       	ldi	r22, 0x54	; 84
     f0e:	8f 89       	ldd	r24, Y+23	; 0x17
     f10:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.bias_B[1], LCD_LINE_4, 10);
     f14:	4a e0       	ldi	r20, 0x0A	; 10
     f16:	64 e5       	ldi	r22, 0x54	; 84
     f18:	88 8d       	ldd	r24, Y+24	; 0x18
     f1a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.bias_B[2], LCD_LINE_4, 11);
     f1e:	4b e0       	ldi	r20, 0x0B	; 11
     f20:	64 e5       	ldi	r22, 0x54	; 84
     f22:	89 8d       	ldd	r24, Y+25	; 0x19
     f24:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
     f28:	2a c1       	rjmp	.+596    	; 0x117e <handleLCD+0x654>
			
		}
	}
	
	else {
		switch(screen) {
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	09 f4       	brne	.+2      	; 0xf30 <handleLCD+0x406>
     f2e:	6c c0       	rjmp	.+216    	; 0x1008 <handleLCD+0x4de>
     f30:	20 f0       	brcs	.+8      	; 0xf3a <handleLCD+0x410>
     f32:	82 30       	cpi	r24, 0x02	; 2
     f34:	09 f4       	brne	.+2      	; 0xf38 <handleLCD+0x40e>
     f36:	cf c0       	rjmp	.+414    	; 0x10d6 <handleLCD+0x5ac>
     f38:	22 c1       	rjmp	.+580    	; 0x117e <handleLCD+0x654>
			case MAIN_SCREEN_A:
			print_LCD_line(LCD_MAIN_STRING_1, LCD_LINE_1);
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	84 eb       	ldi	r24, 0xB4	; 180
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
			print_LCD_line(LCD_MAIN_STRING_2, LCD_LINE_2);
     f44:	60 e4       	ldi	r22, 0x40	; 64
     f46:	89 ec       	ldi	r24, 0xC9	; 201
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
			print_LCD_line(LCD_MAIN_STRING_3, LCD_LINE_3);
     f4e:	64 e1       	ldi	r22, 0x14	; 20
     f50:	8e ed       	ldi	r24, 0xDE	; 222
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
			print_LCD_line(LCD_MAIN_STRING_4, LCD_LINE_4);
     f58:	64 e5       	ldi	r22, 0x54	; 84
     f5a:	83 ef       	ldi	r24, 0xF3	; 243
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
			
			print_LCD_char(UI.type_A[0], LCD_LINE_1, 17);
     f62:	ca ec       	ldi	r28, 0xCA	; 202
     f64:	d1 e0       	ldi	r29, 0x01	; 1
     f66:	41 e1       	ldi	r20, 0x11	; 17
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f6c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.type_A[1], LCD_LINE_1, 18);
     f70:	42 e1       	ldi	r20, 0x12	; 18
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f76:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.type_A[2], LCD_LINE_1, 19);
     f7a:	43 e1       	ldi	r20, 0x13	; 19
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f80:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			
			print_LCD_char(UI.amplitude_A[0], LCD_LINE_2, 14);
     f84:	4e e0       	ldi	r20, 0x0E	; 14
     f86:	60 e4       	ldi	r22, 0x40	; 64
     f88:	8e 85       	ldd	r24, Y+14	; 0x0e
     f8a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.amplitude_A[1], LCD_LINE_2, 15);
     f8e:	4f e0       	ldi	r20, 0x0F	; 15
     f90:	60 e4       	ldi	r22, 0x40	; 64
     f92:	8f 85       	ldd	r24, Y+15	; 0x0f
     f94:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			
			print_LCD_char(UI.frequency_A[0], LCD_LINE_3, 7);
     f98:	47 e0       	ldi	r20, 0x07	; 7
     f9a:	64 e1       	ldi	r22, 0x14	; 20
     f9c:	88 81       	ld	r24, Y
     f9e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_A[1], LCD_LINE_3, 9);
     fa2:	49 e0       	ldi	r20, 0x09	; 9
     fa4:	64 e1       	ldi	r22, 0x14	; 20
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_A[2], LCD_LINE_3, 10);
     fac:	4a e0       	ldi	r20, 0x0A	; 10
     fae:	64 e1       	ldi	r22, 0x14	; 20
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_A[3], LCD_LINE_3, 11);
     fb6:	4b e0       	ldi	r20, 0x0B	; 11
     fb8:	64 e1       	ldi	r22, 0x14	; 20
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_A[4], LCD_LINE_3, 13);
     fc0:	4d e0       	ldi	r20, 0x0D	; 13
     fc2:	64 e1       	ldi	r22, 0x14	; 20
     fc4:	8c 81       	ldd	r24, Y+4	; 0x04
     fc6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_A[5], LCD_LINE_3, 14);
     fca:	4e e0       	ldi	r20, 0x0E	; 14
     fcc:	64 e1       	ldi	r22, 0x14	; 20
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_A[6], LCD_LINE_3, 15);
     fd4:	4f e0       	ldi	r20, 0x0F	; 15
     fd6:	64 e1       	ldi	r22, 0x14	; 20
     fd8:	8e 81       	ldd	r24, Y+6	; 0x06
     fda:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			
			print_LCD_char(UI.bias_A_sign, LCD_LINE_4, 7);
     fde:	47 e0       	ldi	r20, 0x07	; 7
     fe0:	64 e5       	ldi	r22, 0x54	; 84
     fe2:	88 a1       	ldd	r24, Y+32	; 0x20
     fe4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.bias_A[0], LCD_LINE_4, 8);
     fe8:	48 e0       	ldi	r20, 0x08	; 8
     fea:	64 e5       	ldi	r22, 0x54	; 84
     fec:	8c 89       	ldd	r24, Y+20	; 0x14
     fee:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.bias_A[1], LCD_LINE_4, 10);
     ff2:	4a e0       	ldi	r20, 0x0A	; 10
     ff4:	64 e5       	ldi	r22, 0x54	; 84
     ff6:	8d 89       	ldd	r24, Y+21	; 0x15
     ff8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.bias_A[2], LCD_LINE_4, 11);
     ffc:	4b e0       	ldi	r20, 0x0B	; 11
     ffe:	64 e5       	ldi	r22, 0x54	; 84
    1000:	8e 89       	ldd	r24, Y+22	; 0x16
    1002:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
    1006:	bb c0       	rjmp	.+374    	; 0x117e <handleLCD+0x654>
			
			case MAIN_SCREEN_B:
			print_LCD_line(LCD_MAIN_STRING_1, LCD_LINE_1);
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	84 eb       	ldi	r24, 0xB4	; 180
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
			print_LCD_line(LCD_MAIN_STRING_2, LCD_LINE_2);
    1012:	60 e4       	ldi	r22, 0x40	; 64
    1014:	89 ec       	ldi	r24, 0xC9	; 201
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
			print_LCD_line(LCD_MAIN_STRING_3, LCD_LINE_3);
    101c:	64 e1       	ldi	r22, 0x14	; 20
    101e:	8e ed       	ldi	r24, 0xDE	; 222
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
			print_LCD_line(LCD_MAIN_STRING_4, LCD_LINE_4);
    1026:	64 e5       	ldi	r22, 0x54	; 84
    1028:	83 ef       	ldi	r24, 0xF3	; 243
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
			
			print_LCD_char(UI.type_B[0], LCD_LINE_1, 17);
    1030:	ca ec       	ldi	r28, 0xCA	; 202
    1032:	d1 e0       	ldi	r29, 0x01	; 1
    1034:	41 e1       	ldi	r20, 0x11	; 17
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	8d 8d       	ldd	r24, Y+29	; 0x1d
    103a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.type_B[1], LCD_LINE_1, 18);
    103e:	42 e1       	ldi	r20, 0x12	; 18
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1044:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.type_B[2], LCD_LINE_1, 19);
    1048:	43 e1       	ldi	r20, 0x13	; 19
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    104e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			
			print_LCD_char(UI.amplitude_B[0], LCD_LINE_2, 14);
    1052:	4e e0       	ldi	r20, 0x0E	; 14
    1054:	60 e4       	ldi	r22, 0x40	; 64
    1056:	89 89       	ldd	r24, Y+17	; 0x11
    1058:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.amplitude_B[1], LCD_LINE_2, 15);
    105c:	4f e0       	ldi	r20, 0x0F	; 15
    105e:	60 e4       	ldi	r22, 0x40	; 64
    1060:	8a 89       	ldd	r24, Y+18	; 0x12
    1062:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			
			print_LCD_char(UI.frequency_B[0], LCD_LINE_3, 7);
    1066:	47 e0       	ldi	r20, 0x07	; 7
    1068:	64 e1       	ldi	r22, 0x14	; 20
    106a:	8f 81       	ldd	r24, Y+7	; 0x07
    106c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_B[1], LCD_LINE_3, 9);
    1070:	49 e0       	ldi	r20, 0x09	; 9
    1072:	64 e1       	ldi	r22, 0x14	; 20
    1074:	88 85       	ldd	r24, Y+8	; 0x08
    1076:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_B[2], LCD_LINE_3, 10);
    107a:	4a e0       	ldi	r20, 0x0A	; 10
    107c:	64 e1       	ldi	r22, 0x14	; 20
    107e:	89 85       	ldd	r24, Y+9	; 0x09
    1080:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_B[3], LCD_LINE_3, 11);
    1084:	4b e0       	ldi	r20, 0x0B	; 11
    1086:	64 e1       	ldi	r22, 0x14	; 20
    1088:	8a 85       	ldd	r24, Y+10	; 0x0a
    108a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_B[4], LCD_LINE_3, 13);
    108e:	4d e0       	ldi	r20, 0x0D	; 13
    1090:	64 e1       	ldi	r22, 0x14	; 20
    1092:	8b 85       	ldd	r24, Y+11	; 0x0b
    1094:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_B[5], LCD_LINE_3, 14);
    1098:	4e e0       	ldi	r20, 0x0E	; 14
    109a:	64 e1       	ldi	r22, 0x14	; 20
    109c:	8c 85       	ldd	r24, Y+12	; 0x0c
    109e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.frequency_B[6], LCD_LINE_3, 15);
    10a2:	4f e0       	ldi	r20, 0x0F	; 15
    10a4:	64 e1       	ldi	r22, 0x14	; 20
    10a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			
			print_LCD_char(UI.bias_B_sign, LCD_LINE_4, 7);
    10ac:	47 e0       	ldi	r20, 0x07	; 7
    10ae:	64 e5       	ldi	r22, 0x54	; 84
    10b0:	89 a1       	ldd	r24, Y+33	; 0x21
    10b2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.bias_B[0], LCD_LINE_4, 8);
    10b6:	48 e0       	ldi	r20, 0x08	; 8
    10b8:	64 e5       	ldi	r22, 0x54	; 84
    10ba:	8f 89       	ldd	r24, Y+23	; 0x17
    10bc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.bias_B[1], LCD_LINE_4, 10);
    10c0:	4a e0       	ldi	r20, 0x0A	; 10
    10c2:	64 e5       	ldi	r22, 0x54	; 84
    10c4:	88 8d       	ldd	r24, Y+24	; 0x18
    10c6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.bias_B[2], LCD_LINE_4, 11);
    10ca:	4b e0       	ldi	r20, 0x0B	; 11
    10cc:	64 e5       	ldi	r22, 0x54	; 84
    10ce:	89 8d       	ldd	r24, Y+25	; 0x19
    10d0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
    10d4:	54 c0       	rjmp	.+168    	; 0x117e <handleLCD+0x654>
			
			case PARAMS_SCREEN:
			print_LCD_line(LCD_MAIN_SETTINGS_STRING_1, LCD_LINE_1);
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	88 e0       	ldi	r24, 0x08	; 8
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
			print_LCD_line(LCD_MAIN_SETTINGS_STRING_2, LCD_LINE_2);
    10e0:	60 e4       	ldi	r22, 0x40	; 64
    10e2:	8d e1       	ldi	r24, 0x1D	; 29
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
			print_LCD_line(LCD_MAIN_SETTINGS_STRING_3, LCD_LINE_3);
    10ea:	64 e1       	ldi	r22, 0x14	; 20
    10ec:	82 e3       	ldi	r24, 0x32	; 50
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
			print_LCD_line(LCD_MAIN_SETTINGS_STRING_4, LCD_LINE_4);
    10f4:	64 e5       	ldi	r22, 0x54	; 84
    10f6:	82 e4       	ldi	r24, 0x42	; 66
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
			
			uintToString(PowerStatus.battery_voltage, UI.batteryPowerStatus, 3);
    10fe:	08 ec       	ldi	r16, 0xC8	; 200
    1100:	11 e0       	ldi	r17, 0x01	; 1
    1102:	f8 01       	movw	r30, r16
    1104:	60 81       	ld	r22, Z
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	23 e0       	ldi	r18, 0x03	; 3
    110e:	4c ee       	ldi	r20, 0xEC	; 236
    1110:	51 e0       	ldi	r21, 0x01	; 1
    1112:	0e 94 69 05 	call	0xad2	; 0xad2 <uintToString>
			print_LCD_char(UI.batteryPowerStatus[0], LCD_LINE_3, 13);
    1116:	ca ec       	ldi	r28, 0xCA	; 202
    1118:	d1 e0       	ldi	r29, 0x01	; 1
    111a:	4d e0       	ldi	r20, 0x0D	; 13
    111c:	64 e1       	ldi	r22, 0x14	; 20
    111e:	8a a1       	ldd	r24, Y+34	; 0x22
    1120:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.batteryPowerStatus[1], LCD_LINE_3, 15);
    1124:	4f e0       	ldi	r20, 0x0F	; 15
    1126:	64 e1       	ldi	r22, 0x14	; 20
    1128:	8b a1       	ldd	r24, Y+35	; 0x23
    112a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			print_LCD_char(UI.batteryPowerStatus[2], LCD_LINE_3, 16);
    112e:	40 e1       	ldi	r20, 0x10	; 16
    1130:	64 e1       	ldi	r22, 0x14	; 20
    1132:	8c a1       	ldd	r24, Y+36	; 0x24
    1134:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			
			if (PowerStatus.ac_power_PowerStatus) {
    1138:	f8 01       	movw	r30, r16
    113a:	81 81       	ldd	r24, Z+1	; 0x01
    113c:	88 23       	and	r24, r24
    113e:	81 f0       	breq	.+32     	; 0x1160 <handleLCD+0x636>
				print_LCD_char('O', LCD_LINE_3, 16);
    1140:	40 e1       	ldi	r20, 0x10	; 16
    1142:	64 e1       	ldi	r22, 0x14	; 20
    1144:	8f e4       	ldi	r24, 0x4F	; 79
    1146:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
				print_LCD_char('N', LCD_LINE_3, 17);
    114a:	41 e1       	ldi	r20, 0x11	; 17
    114c:	64 e1       	ldi	r22, 0x14	; 20
    114e:	8e e4       	ldi	r24, 0x4E	; 78
    1150:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
				print_LCD_char(' ', LCD_LINE_3, 18);
    1154:	42 e1       	ldi	r20, 0x12	; 18
    1156:	64 e1       	ldi	r22, 0x14	; 20
    1158:	80 e2       	ldi	r24, 0x20	; 32
    115a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
    115e:	0f c0       	rjmp	.+30     	; 0x117e <handleLCD+0x654>
			}
			
			else {
				print_LCD_char('O', LCD_LINE_3, 16);
    1160:	40 e1       	ldi	r20, 0x10	; 16
    1162:	64 e1       	ldi	r22, 0x14	; 20
    1164:	8f e4       	ldi	r24, 0x4F	; 79
    1166:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
				print_LCD_char('F', LCD_LINE_3, 17);
    116a:	41 e1       	ldi	r20, 0x11	; 17
    116c:	64 e1       	ldi	r22, 0x14	; 20
    116e:	86 e4       	ldi	r24, 0x46	; 70
    1170:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
				print_LCD_char('F', LCD_LINE_3, 18);
    1174:	42 e1       	ldi	r20, 0x12	; 18
    1176:	64 e1       	ldi	r22, 0x14	; 20
    1178:	86 e4       	ldi	r24, 0x46	; 70
    117a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <print_LCD_char>
			break;
			
			default: break;
		}					
	}
}
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	08 95       	ret

00001188 <LCD_logo_display>:
		number /= 10;
		iPtr++;
	}
}

void LCD_logo_display() {
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	64 97       	sbiw	r28, 0x14	; 20
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
	char lbuff[20];
	print_LCD_line("Mobile Function Generator", LCD_LINE_1);
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	85 e5       	ldi	r24, 0x55	; 85
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
	snprintf(lbuff, 20, " Firmware V%c.%c.%c ", FIRMWARE_VERSION_MAJOR, FIRMWARE_VERSION_MINOR, FIRMWARE_VERSION_BUILD);
    11aa:	1f 92       	push	r1
    11ac:	82 e3       	ldi	r24, 0x32	; 50
    11ae:	8f 93       	push	r24
    11b0:	1f 92       	push	r1
    11b2:	90 e3       	ldi	r25, 0x30	; 48
    11b4:	9f 93       	push	r25
    11b6:	1f 92       	push	r1
    11b8:	8f 93       	push	r24
    11ba:	8f e6       	ldi	r24, 0x6F	; 111
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	9f 93       	push	r25
    11c0:	8f 93       	push	r24
    11c2:	1f 92       	push	r1
    11c4:	84 e1       	ldi	r24, 0x14	; 20
    11c6:	8f 93       	push	r24
    11c8:	8e 01       	movw	r16, r28
    11ca:	0f 5f       	subi	r16, 0xFF	; 255
    11cc:	1f 4f       	sbci	r17, 0xFF	; 255
    11ce:	1f 93       	push	r17
    11d0:	0f 93       	push	r16
    11d2:	0e 94 46 11 	call	0x228c	; 0x228c <snprintf>
	print_LCD_line(lbuff, LCD_LINE_2);
    11d6:	60 e4       	ldi	r22, 0x40	; 64
    11d8:	c8 01       	movw	r24, r16
    11da:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
	print_LCD_line("  KhomLabs Design   ", LCD_LINE_3);
    11de:	64 e1       	ldi	r22, 0x14	; 20
    11e0:	84 e8       	ldi	r24, 0x84	; 132
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
	print_LCD_line("  <Initializing...> ", LCD_LINE_4);
    11e8:	64 e5       	ldi	r22, 0x54	; 84
    11ea:	89 e9       	ldi	r24, 0x99	; 153
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
}
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	64 96       	adiw	r28, 0x14	; 20
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	08 95       	ret

00001212 <Init_UI>:
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
	ADMUX |= (1 << REFS0);
}

void Init_UI() {
	brightnessAnimation();
    1212:	0e 94 cb 03 	call	0x796	; 0x796 <brightnessAnimation>
	setContrastLCD(100);
    1216:	84 e6       	ldi	r24, 0x64	; 100
    1218:	0e 94 99 03 	call	0x732	; 0x732 <setContrastLCD>
	LCD_logo_display();
    121c:	0e 94 c4 08 	call	0x1188	; 0x1188 <LCD_logo_display>
	playMelody(true);
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <playMelody>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1226:	2f ef       	ldi	r18, 0xFF	; 255
    1228:	83 ed       	ldi	r24, 0xD3	; 211
    122a:	90 e3       	ldi	r25, 0x30	; 48
    122c:	21 50       	subi	r18, 0x01	; 1
    122e:	80 40       	sbci	r24, 0x00	; 0
    1230:	90 40       	sbci	r25, 0x00	; 0
    1232:	e1 f7       	brne	.-8      	; 0x122c <Init_UI+0x1a>
    1234:	00 c0       	rjmp	.+0      	; 0x1236 <Init_UI+0x24>
    1236:	00 00       	nop
    1238:	08 95       	ret

0000123a <main>:
	static bool functionalityChanged = false;
	static uint8_t buttonPressCounter = 0;
	static uint16_t prevBatVoltage = 0;
	static bool prevAcPowerStatus = false;

	Init_Device();
    123a:	0e 94 0b 02 	call	0x416	; 0x416 <Init_Device>
	Init_UI();
    123e:	0e 94 09 09 	call	0x1212	; 0x1212 <Init_UI>
	
	clear_LCD();
    1242:	0e 94 4f 01 	call	0x29e	; 0x29e <clear_LCD>
	print_LCD_line("	 Loading...     ", LCD_LINE_2);
    1246:	60 e4       	ldi	r22, 0x40	; 64
    1248:	8e ea       	ldi	r24, 0xAE	; 174
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	0e 94 3c 01 	call	0x278	; 0x278 <print_LCD_line>
	
	/* Initialization sequence */
	display.mainScreen = MAIN_SCREEN_A;
	display.stateChanged = false;
	functionalityChanged = false;
    1250:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <functionalityChanged.2667>
	parameterSelectionActivated = false;
    1254:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <parameterSelectionActivated.2665>
	displayPointerActivated = false;
    1258:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
	buttonPressCounter = 0;
    125c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <buttonPressCounter.2668>
	clearWaveformValues();
    1260:	0e 94 96 04 	call	0x92c	; 0x92c <clearWaveformValues>
	handleLCD(display.mainScreen, PTR_NULL, false, false);
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	0e 94 95 05 	call	0xb2a	; 0xb2a <handleLCD>
    1270:	2f ef       	ldi	r18, 0xFF	; 255
    1272:	8e e9       	ldi	r24, 0x9E	; 158
    1274:	94 e2       	ldi	r25, 0x24	; 36
    1276:	21 50       	subi	r18, 0x01	; 1
    1278:	80 40       	sbci	r24, 0x00	; 0
    127a:	90 40       	sbci	r25, 0x00	; 0
    127c:	e1 f7       	brne	.-8      	; 0x1276 <main+0x3c>
    127e:	00 c0       	rjmp	.+0      	; 0x1280 <main+0x46>
    1280:	00 00       	nop
	_delay_ms(1500);
	
	while(1) {
		
		encoderState = pollEncoder();
    1282:	0e 94 cd 02 	call	0x59a	; 0x59a <pollEncoder>
    1286:	c8 2f       	mov	r28, r24
		switchState = pollSwitch();
    1288:	0e 94 c5 02 	call	0x58a	; 0x58a <pollSwitch>
    128c:	d8 2f       	mov	r29, r24
	
	clear_LCD();
	print_LCD_line("	 Loading...     ", LCD_LINE_2);
	
	/* Initialization sequence */
	display.mainScreen = MAIN_SCREEN_A;
    128e:	00 e0       	ldi	r16, 0x00	; 0
	display.stateChanged = false;
    1290:	10 e0       	ldi	r17, 0x00	; 0
					if (encoderState == CW) {
						displayPointer = PTR_SETT;
						display.stateChanged = true;
					}
					else if (encoderState == CCW) {
						displayPointer = PTR_SETT;
    1292:	0f 2e       	mov	r0, r31
    1294:	f9 e0       	ldi	r31, 0x09	; 9
    1296:	2f 2e       	mov	r2, r31
    1298:	f0 2d       	mov	r31, r0
						displayPointer = PTR_SHUTDOWN;
						display.stateChanged = true;
					}
					else if (switchState) {
						displayPointerActivated = false;
						parameterSelectionActivated = true;
    129a:	ff 24       	eor	r15, r15
    129c:	f3 94       	inc	r15
						display.stateChanged = true;
					}
					break;
				case PTR_BIAS_B:
					if (encoderState == CW) {
						displayPointer = PTR_TYPE_B;
    129e:	0f 2e       	mov	r0, r31
    12a0:	f5 e0       	ldi	r31, 0x05	; 5
    12a2:	3f 2e       	mov	r3, r31
    12a4:	f0 2d       	mov	r31, r0
					if (encoderState == CW) {
						displayPointer = PTR_TYPE_A;
						display.stateChanged = true;
					}
					else if (encoderState == CCW) {
						displayPointer = PTR_FREQ_A;
    12a6:	68 94       	set
    12a8:	ee 24       	eor	r14, r14
    12aa:	e1 f8       	bld	r14, 1
				}
							
				else if (encoderState == CCW) {
					display.stateChanged = true;
					functionalityChanged = true;
					if (FunctionGenerator.bias_B_sign == NEGATIVE) {
    12ac:	0f 2e       	mov	r0, r31
    12ae:	f3 ef       	ldi	r31, 0xF3	; 243
    12b0:	cf 2e       	mov	r12, r31
    12b2:	f1 e0       	ldi	r31, 0x01	; 1
    12b4:	df 2e       	mov	r13, r31
    12b6:	f0 2d       	mov	r31, r0
						if (FunctionGenerator.bias_B >= 330) FunctionGenerator.bias_B = 330;
    12b8:	0f 2e       	mov	r0, r31
    12ba:	fa e4       	ldi	r31, 0x4A	; 74
    12bc:	8f 2e       	mov	r8, r31
    12be:	99 24       	eor	r9, r9
    12c0:	93 94       	inc	r9
    12c2:	f0 2d       	mov	r31, r0

				case PTR_FREQ_B:
				if (encoderState == CW) {
					display.stateChanged = true;
					functionalityChanged = true;
					if (FunctionGenerator.frequency_B >= 1000000) FunctionGenerator.frequency_B = 1000000;
    12c4:	0f 2e       	mov	r0, r31
    12c6:	f0 e4       	ldi	r31, 0x40	; 64
    12c8:	4f 2e       	mov	r4, r31
    12ca:	f2 e4       	ldi	r31, 0x42	; 66
    12cc:	5f 2e       	mov	r5, r31
    12ce:	ff e0       	ldi	r31, 0x0F	; 15
    12d0:	6f 2e       	mov	r6, r31
    12d2:	71 2c       	mov	r7, r1
    12d4:	f0 2d       	mov	r31, r0
						displayPointer = PTR_SETT;
						display.stateChanged = true;
					}
					updateAcStatus();
					updateBatteryStatus();
					if ((PowerStatus.battery_voltage != prevBatVoltage) || (PowerStatus.ac_power_PowerStatus != prevAcPowerStatus)) display.stateChanged = true;
    12d6:	0f 2e       	mov	r0, r31
    12d8:	f8 ec       	ldi	r31, 0xC8	; 200
    12da:	af 2e       	mov	r10, r31
    12dc:	f1 e0       	ldi	r31, 0x01	; 1
    12de:	bf 2e       	mov	r11, r31
    12e0:	f0 2d       	mov	r31, r0
    12e2:	2d c0       	rjmp	.+90     	; 0x133e <main+0x104>
				
				break;
				
				case PTR_AMP_A:
				if (encoderState == CW) {
					display.stateChanged = true;
    12e4:	1f 2d       	mov	r17, r15
    12e6:	19 c0       	rjmp	.+50     	; 0x131a <main+0xe0>
							case 1: FunctionGenerator.amplitude_A += 10; break;
						}
					}
				}
				else if (encoderState == CCW) {
					display.stateChanged = true;
    12e8:	1f 2d       	mov	r17, r15
    12ea:	17 c0       	rjmp	.+46     	; 0x131a <main+0xe0>
				}
				break;

				case PTR_FREQ_A:
				if (encoderState == CW) {
					display.stateChanged = true;
    12ec:	1f 2d       	mov	r17, r15
    12ee:	15 c0       	rjmp	.+42     	; 0x131a <main+0xe0>
							case 5: FunctionGenerator.frequency_A += 100000; break;
						}
					}
				}
				else if (encoderState == CCW) {
					display.stateChanged = true;
    12f0:	1f 2d       	mov	r17, r15
    12f2:	13 c0       	rjmp	.+38     	; 0x131a <main+0xe0>
				}
				break;
				
				case PTR_BIAS_A:
				if (encoderState == CW) {
					display.stateChanged = true;
    12f4:	1f 2d       	mov	r17, r15
    12f6:	11 c0       	rjmp	.+34     	; 0x131a <main+0xe0>
						}
					}
				}
				
				else if (encoderState == CCW) {
					display.stateChanged = true;
    12f8:	1f 2d       	mov	r17, r15
    12fa:	0f c0       	rjmp	.+30     	; 0x131a <main+0xe0>
    12fc:	1f 2d       	mov	r17, r15
    12fe:	0d c0       	rjmp	.+26     	; 0x131a <main+0xe0>
				
				break;
				
				case PTR_AMP_B:
				if (encoderState == CW) {
					display.stateChanged = true;
    1300:	1f 2d       	mov	r17, r15
    1302:	0b c0       	rjmp	.+22     	; 0x131a <main+0xe0>
							case 1: FunctionGenerator.amplitude_B += 10; break;
						}
					}
				}
				else if (encoderState == CCW) {
					display.stateChanged = true;
    1304:	1f 2d       	mov	r17, r15
    1306:	09 c0       	rjmp	.+18     	; 0x131a <main+0xe0>
				
				break;

				case PTR_FREQ_B:
				if (encoderState == CW) {
					display.stateChanged = true;
    1308:	1f 2d       	mov	r17, r15
    130a:	07 c0       	rjmp	.+14     	; 0x131a <main+0xe0>
							case 5: FunctionGenerator.frequency_B += 100000; break;
						}
					}
				}
				else if (encoderState == CCW) {
					display.stateChanged = true;
    130c:	1f 2d       	mov	r17, r15
    130e:	05 c0       	rjmp	.+10     	; 0x131a <main+0xe0>
				}
				break;
					
				case PTR_BIAS_B:
				if (encoderState == CW) {
					display.stateChanged = true;
    1310:	1f 2d       	mov	r17, r15
    1312:	03 c0       	rjmp	.+6      	; 0x131a <main+0xe0>
						}
					}
				}
							
				else if (encoderState == CCW) {
					display.stateChanged = true;
    1314:	1f 2d       	mov	r17, r15
    1316:	01 c0       	rjmp	.+2      	; 0x131a <main+0xe0>
    1318:	1f 2d       	mov	r17, r15
	handleLCD(display.mainScreen, PTR_NULL, false, false);
	_delay_ms(1500);
	
	while(1) {
		
		encoderState = pollEncoder();
    131a:	0e 94 cd 02 	call	0x59a	; 0x59a <pollEncoder>
    131e:	c8 2f       	mov	r28, r24
		switchState = pollSwitch();
    1320:	0e 94 c5 02 	call	0x58a	; 0x58a <pollSwitch>
    1324:	d8 2f       	mov	r29, r24
		
		if (display.stateChanged) {
    1326:	11 23       	and	r17, r17
    1328:	51 f0       	breq	.+20     	; 0x133e <main+0x104>
			display.stateChanged = false;
			handleLCD(display.mainScreen, displayPointer, displayPointerActivated, parameterSelectionActivated);
    132a:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <parameterSelectionActivated.2665>
    132e:	40 91 c5 01 	lds	r20, 0x01C5	; 0x8001c5 <displayPointerActivated.2666>
    1332:	60 91 c3 01 	lds	r22, 0x01C3	; 0x8001c3 <displayPointer.2663>
    1336:	80 2f       	mov	r24, r16
    1338:	0e 94 95 05 	call	0xb2a	; 0xb2a <handleLCD>
		
		encoderState = pollEncoder();
		switchState = pollSwitch();
		
		if (display.stateChanged) {
			display.stateChanged = false;
    133c:	10 e0       	ldi	r17, 0x00	; 0
			handleLCD(display.mainScreen, displayPointer, displayPointerActivated, parameterSelectionActivated);
		}
		if (functionalityChanged) {
    133e:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <functionalityChanged.2667>
    1342:	88 23       	and	r24, r24
    1344:	31 f0       	breq	.+12     	; 0x1352 <main+0x118>
			functionalityChanged = false;
    1346:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <functionalityChanged.2667>
			handleFunctionGenerator(displayPointer);
    134a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <displayPointer.2663>
    134e:	0e 94 ae 04 	call	0x95c	; 0x95c <handleFunctionGenerator>
		}
		
		if (!displayPointerActivated && !parameterSelectionActivated) {
    1352:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <displayPointerActivated.2666>
    1356:	81 11       	cpse	r24, r1
    1358:	55 c0       	rjmp	.+170    	; 0x1404 <main+0x1ca>
    135a:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <parameterSelectionActivated.2665>
    135e:	81 11       	cpse	r24, r1
    1360:	22 c1       	rjmp	.+580    	; 0x15a6 <main+0x36c>
			switch(display.mainScreen) {
    1362:	01 30       	cpi	r16, 0x01	; 1
    1364:	89 f0       	breq	.+34     	; 0x1388 <main+0x14e>
    1366:	18 f0       	brcs	.+6      	; 0x136e <main+0x134>
    1368:	02 30       	cpi	r16, 0x02	; 2
    136a:	e1 f0       	breq	.+56     	; 0x13a4 <main+0x16a>
    136c:	d6 cf       	rjmp	.-84     	; 0x131a <main+0xe0>
				case MAIN_SCREEN_A:
					if (encoderState == CW) {
    136e:	c1 30       	cpi	r28, 0x01	; 1
    1370:	09 f4       	brne	.+2      	; 0x1374 <main+0x13a>
    1372:	1a c5       	rjmp	.+2612   	; 0x1da8 <main+0xb6e>
						display.mainScreen = MAIN_SCREEN_B;
						display.stateChanged = true;
					}
					
					else if (encoderState == CCW) {
    1374:	c2 30       	cpi	r28, 0x02	; 2
    1376:	09 f4       	brne	.+2      	; 0x137a <main+0x140>
    1378:	19 c5       	rjmp	.+2610   	; 0x1dac <main+0xb72>
						display.mainScreen = PARAMS_SCREEN;
						display.stateChanged = true;
					}
					else if (switchState) {
    137a:	dd 23       	and	r29, r29
    137c:	71 f2       	breq	.-100    	; 0x131a <main+0xe0>
						displayPointerActivated = true;
    137e:	f0 92 c5 01 	sts	0x01C5, r15	; 0x8001c5 <displayPointerActivated.2666>
						displayPointer = PTR_TYPE_A;
    1382:	f0 92 c3 01 	sts	0x01C3, r15	; 0x8001c3 <displayPointer.2663>
    1386:	c9 cf       	rjmp	.-110    	; 0x131a <main+0xe0>
					}
					break;
					
				case MAIN_SCREEN_B:
					if (encoderState == CW) {
    1388:	c1 30       	cpi	r28, 0x01	; 1
    138a:	09 f4       	brne	.+2      	; 0x138e <main+0x154>
    138c:	11 c5       	rjmp	.+2594   	; 0x1db0 <main+0xb76>
						display.mainScreen = PARAMS_SCREEN;
						display.stateChanged = true;
					}
					
					else if (encoderState == CCW) {
    138e:	c2 30       	cpi	r28, 0x02	; 2
    1390:	09 f4       	brne	.+2      	; 0x1394 <main+0x15a>
    1392:	10 c5       	rjmp	.+2592   	; 0x1db4 <main+0xb7a>
						display.mainScreen = MAIN_SCREEN_A;
						display.stateChanged = true;
					}
					else if (switchState) {
    1394:	dd 23       	and	r29, r29
    1396:	09 f4       	brne	.+2      	; 0x139a <main+0x160>
    1398:	c0 cf       	rjmp	.-128    	; 0x131a <main+0xe0>
						displayPointerActivated = true;
    139a:	f0 92 c5 01 	sts	0x01C5, r15	; 0x8001c5 <displayPointerActivated.2666>
						displayPointer = PTR_TYPE_B;
    139e:	30 92 c3 01 	sts	0x01C3, r3	; 0x8001c3 <displayPointer.2663>
    13a2:	bb cf       	rjmp	.-138    	; 0x131a <main+0xe0>
					}
					break;
					
				case PARAMS_SCREEN:
					if (encoderState == CW) {
    13a4:	c1 30       	cpi	r28, 0x01	; 1
    13a6:	51 f0       	breq	.+20     	; 0x13bc <main+0x182>
						display.mainScreen = MAIN_SCREEN_A;
						display.stateChanged = true;
					}
					
					else if (encoderState == CCW) {
    13a8:	c2 30       	cpi	r28, 0x02	; 2
    13aa:	59 f0       	breq	.+22     	; 0x13c2 <main+0x188>
						display.mainScreen = MAIN_SCREEN_B;
						display.stateChanged = true;
					}
					else if (switchState) {
    13ac:	dd 23       	and	r29, r29
    13ae:	59 f0       	breq	.+22     	; 0x13c6 <main+0x18c>
						displayPointerActivated = true;
    13b0:	f0 92 c5 01 	sts	0x01C5, r15	; 0x8001c5 <displayPointerActivated.2666>
						displayPointer = PTR_SETT;
    13b4:	20 92 c3 01 	sts	0x01C3, r2	; 0x8001c3 <displayPointer.2663>
						display.stateChanged = true;
    13b8:	1f 2d       	mov	r17, r15
    13ba:	05 c0       	rjmp	.+10     	; 0x13c6 <main+0x18c>
					}
					break;
					
				case PARAMS_SCREEN:
					if (encoderState == CW) {
						display.mainScreen = MAIN_SCREEN_A;
    13bc:	00 e0       	ldi	r16, 0x00	; 0
						display.stateChanged = true;
    13be:	1f 2d       	mov	r17, r15
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <main+0x18c>
					}
					
					else if (encoderState == CCW) {
						display.mainScreen = MAIN_SCREEN_B;
    13c2:	0f 2d       	mov	r16, r15
						display.stateChanged = true;
    13c4:	1f 2d       	mov	r17, r15
					else if (switchState) {
						displayPointerActivated = true;
						displayPointer = PTR_SETT;
						display.stateChanged = true;
					}
					updateAcStatus();
    13c6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <updateAcStatus>
					updateBatteryStatus();
    13ca:	0e 94 49 04 	call	0x892	; 0x892 <updateBatteryStatus>
					if ((PowerStatus.battery_voltage != prevBatVoltage) || (PowerStatus.ac_power_PowerStatus != prevAcPowerStatus)) display.stateChanged = true;
    13ce:	f5 01       	movw	r30, r10
    13d0:	80 81       	ld	r24, Z
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <prevBatVoltage.2669>
    13d8:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <prevBatVoltage.2669+0x1>
    13dc:	82 17       	cp	r24, r18
    13de:	93 07       	cpc	r25, r19
    13e0:	39 f4       	brne	.+14     	; 0x13f0 <main+0x1b6>
    13e2:	31 81       	ldd	r19, Z+1	; 0x01
    13e4:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <__data_end>
    13e8:	32 17       	cp	r19, r18
    13ea:	19 f0       	breq	.+6      	; 0x13f2 <main+0x1b8>
    13ec:	1f 2d       	mov	r17, r15
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <main+0x1b8>
    13f0:	1f 2d       	mov	r17, r15
					prevBatVoltage = PowerStatus.battery_voltage;
    13f2:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <prevBatVoltage.2669+0x1>
    13f6:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <prevBatVoltage.2669>
					prevAcPowerStatus = PowerStatus.ac_power_PowerStatus;
    13fa:	f5 01       	movw	r30, r10
    13fc:	81 81       	ldd	r24, Z+1	; 0x01
    13fe:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__data_end>
			
					break;	
    1402:	8b cf       	rjmp	.-234    	; 0x131a <main+0xe0>
					
				default: break;
					 				
			}
		}
		else if (displayPointerActivated && !parameterSelectionActivated) { 
    1404:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <parameterSelectionActivated.2665>
    1408:	81 11       	cpse	r24, r1
    140a:	87 cf       	rjmp	.-242    	; 0x131a <main+0xe0>
			switch(displayPointer) {
    140c:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <displayPointer.2663>
    1410:	8e 2f       	mov	r24, r30
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	fc 01       	movw	r30, r24
    1416:	31 97       	sbiw	r30, 0x01	; 1
    1418:	ea 30       	cpi	r30, 0x0A	; 10
    141a:	f1 05       	cpc	r31, r1
    141c:	08 f0       	brcs	.+2      	; 0x1420 <main+0x1e6>
    141e:	7d cf       	rjmp	.-262    	; 0x131a <main+0xe0>
    1420:	eb 5b       	subi	r30, 0xBB	; 187
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__tablejump2__>
				case PTR_NULL: break;
				/* Channel A Block */
				case PTR_TYPE_A: 
					if (encoderState == CW) {
    1428:	c1 30       	cpi	r28, 0x01	; 1
    142a:	21 f4       	brne	.+8      	; 0x1434 <main+0x1fa>
						displayPointer = PTR_AMP_A;
    142c:	84 e0       	ldi	r24, 0x04	; 4
    142e:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <displayPointer.2663>
    1432:	c1 c4       	rjmp	.+2434   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (encoderState == CCW) {
    1434:	c2 30       	cpi	r28, 0x02	; 2
    1436:	21 f4       	brne	.+8      	; 0x1440 <main+0x206>
						displayPointer = PTR_BIAS_A;
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <displayPointer.2663>
    143e:	bb c4       	rjmp	.+2422   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (switchState) {
    1440:	dd 23       	and	r29, r29
    1442:	09 f4       	brne	.+2      	; 0x1446 <main+0x20c>
    1444:	6a cf       	rjmp	.-300    	; 0x131a <main+0xe0>
						displayPointerActivated = false;
    1446:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						parameterSelectionActivated = true;
    144a:	f0 92 c6 01 	sts	0x01C6, r15	; 0x8001c6 <parameterSelectionActivated.2665>
    144e:	b3 c4       	rjmp	.+2406   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					break;
				case PTR_AMP_A:
					if (encoderState == CW) {
    1450:	c1 30       	cpi	r28, 0x01	; 1
    1452:	19 f4       	brne	.+6      	; 0x145a <main+0x220>
						displayPointer = PTR_FREQ_A;
    1454:	e0 92 c3 01 	sts	0x01C3, r14	; 0x8001c3 <displayPointer.2663>
    1458:	ae c4       	rjmp	.+2396   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (encoderState == CCW) {
    145a:	c2 30       	cpi	r28, 0x02	; 2
    145c:	19 f4       	brne	.+6      	; 0x1464 <main+0x22a>
						displayPointer = PTR_TYPE_A;
    145e:	f0 92 c3 01 	sts	0x01C3, r15	; 0x8001c3 <displayPointer.2663>
    1462:	a9 c4       	rjmp	.+2386   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (switchState) {
    1464:	dd 23       	and	r29, r29
    1466:	09 f4       	brne	.+2      	; 0x146a <main+0x230>
    1468:	58 cf       	rjmp	.-336    	; 0x131a <main+0xe0>
						displayPointerActivated = false;
    146a:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						parameterSelectionActivated = true;
    146e:	f0 92 c6 01 	sts	0x01C6, r15	; 0x8001c6 <parameterSelectionActivated.2665>
    1472:	a1 c4       	rjmp	.+2370   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					break;
				case PTR_FREQ_A:
					if (encoderState == CW) {
    1474:	c1 30       	cpi	r28, 0x01	; 1
    1476:	21 f4       	brne	.+8      	; 0x1480 <main+0x246>
						displayPointer = PTR_BIAS_A;
    1478:	83 e0       	ldi	r24, 0x03	; 3
    147a:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <displayPointer.2663>
    147e:	9b c4       	rjmp	.+2358   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (encoderState == CCW) {
    1480:	c2 30       	cpi	r28, 0x02	; 2
    1482:	21 f4       	brne	.+8      	; 0x148c <main+0x252>
						displayPointer = PTR_AMP_A;
    1484:	84 e0       	ldi	r24, 0x04	; 4
    1486:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <displayPointer.2663>
    148a:	95 c4       	rjmp	.+2346   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (switchState) {
    148c:	dd 23       	and	r29, r29
    148e:	09 f4       	brne	.+2      	; 0x1492 <main+0x258>
    1490:	44 cf       	rjmp	.-376    	; 0x131a <main+0xe0>
						displayPointerActivated = false;
    1492:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						parameterSelectionActivated = true;
    1496:	f0 92 c6 01 	sts	0x01C6, r15	; 0x8001c6 <parameterSelectionActivated.2665>
    149a:	8d c4       	rjmp	.+2330   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					break;
				case PTR_BIAS_A:
					if (encoderState == CW) {
    149c:	c1 30       	cpi	r28, 0x01	; 1
    149e:	19 f4       	brne	.+6      	; 0x14a6 <main+0x26c>
						displayPointer = PTR_TYPE_A;
    14a0:	f0 92 c3 01 	sts	0x01C3, r15	; 0x8001c3 <displayPointer.2663>
    14a4:	88 c4       	rjmp	.+2320   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (encoderState == CCW) {
    14a6:	c2 30       	cpi	r28, 0x02	; 2
    14a8:	19 f4       	brne	.+6      	; 0x14b0 <main+0x276>
						displayPointer = PTR_FREQ_A;
    14aa:	e0 92 c3 01 	sts	0x01C3, r14	; 0x8001c3 <displayPointer.2663>
    14ae:	83 c4       	rjmp	.+2310   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (switchState) {
    14b0:	dd 23       	and	r29, r29
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <main+0x27c>
    14b4:	32 cf       	rjmp	.-412    	; 0x131a <main+0xe0>
						displayPointerActivated = false;
    14b6:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						parameterSelectionActivated = true;
    14ba:	f0 92 c6 01 	sts	0x01C6, r15	; 0x8001c6 <parameterSelectionActivated.2665>
    14be:	7b c4       	rjmp	.+2294   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					break;
				/* Channel B Block */
				case PTR_TYPE_B:
					if (encoderState == CW) {
    14c0:	c1 30       	cpi	r28, 0x01	; 1
    14c2:	21 f4       	brne	.+8      	; 0x14cc <main+0x292>
						displayPointer = PTR_AMP_B;
    14c4:	f8 e0       	ldi	r31, 0x08	; 8
    14c6:	f0 93 c3 01 	sts	0x01C3, r31	; 0x8001c3 <displayPointer.2663>
    14ca:	75 c4       	rjmp	.+2282   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (encoderState == CCW) {
    14cc:	c2 30       	cpi	r28, 0x02	; 2
    14ce:	21 f4       	brne	.+8      	; 0x14d8 <main+0x29e>
						displayPointer = PTR_BIAS_B;
    14d0:	27 e0       	ldi	r18, 0x07	; 7
    14d2:	20 93 c3 01 	sts	0x01C3, r18	; 0x8001c3 <displayPointer.2663>
    14d6:	6f c4       	rjmp	.+2270   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (switchState) {
    14d8:	dd 23       	and	r29, r29
    14da:	09 f4       	brne	.+2      	; 0x14de <main+0x2a4>
    14dc:	1e cf       	rjmp	.-452    	; 0x131a <main+0xe0>
						displayPointerActivated = false;
    14de:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						parameterSelectionActivated = true;
    14e2:	f0 92 c6 01 	sts	0x01C6, r15	; 0x8001c6 <parameterSelectionActivated.2665>
    14e6:	67 c4       	rjmp	.+2254   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					break;
				case PTR_AMP_B:
					if (encoderState == CW) {
    14e8:	c1 30       	cpi	r28, 0x01	; 1
    14ea:	21 f4       	brne	.+8      	; 0x14f4 <main+0x2ba>
						displayPointer = PTR_FREQ_B;
    14ec:	86 e0       	ldi	r24, 0x06	; 6
    14ee:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <displayPointer.2663>
    14f2:	61 c4       	rjmp	.+2242   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (encoderState == CCW) {
    14f4:	c2 30       	cpi	r28, 0x02	; 2
    14f6:	19 f4       	brne	.+6      	; 0x14fe <main+0x2c4>
						displayPointer = PTR_TYPE_B;
    14f8:	30 92 c3 01 	sts	0x01C3, r3	; 0x8001c3 <displayPointer.2663>
    14fc:	5c c4       	rjmp	.+2232   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (switchState) {
    14fe:	dd 23       	and	r29, r29
    1500:	09 f4       	brne	.+2      	; 0x1504 <main+0x2ca>
    1502:	0b cf       	rjmp	.-490    	; 0x131a <main+0xe0>
						displayPointerActivated = false;
    1504:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						parameterSelectionActivated = true;
    1508:	f0 92 c6 01 	sts	0x01C6, r15	; 0x8001c6 <parameterSelectionActivated.2665>
    150c:	54 c4       	rjmp	.+2216   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					break;
				case PTR_FREQ_B:
					if (encoderState == CW) {
    150e:	c1 30       	cpi	r28, 0x01	; 1
    1510:	21 f4       	brne	.+8      	; 0x151a <main+0x2e0>
						displayPointer = PTR_BIAS_B;
    1512:	97 e0       	ldi	r25, 0x07	; 7
    1514:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <displayPointer.2663>
    1518:	4e c4       	rjmp	.+2204   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (encoderState == CCW) {
    151a:	c2 30       	cpi	r28, 0x02	; 2
    151c:	21 f4       	brne	.+8      	; 0x1526 <main+0x2ec>
						displayPointer = PTR_AMP_B;
    151e:	e8 e0       	ldi	r30, 0x08	; 8
    1520:	e0 93 c3 01 	sts	0x01C3, r30	; 0x8001c3 <displayPointer.2663>
    1524:	48 c4       	rjmp	.+2192   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (switchState) {
    1526:	dd 23       	and	r29, r29
    1528:	09 f4       	brne	.+2      	; 0x152c <main+0x2f2>
    152a:	f7 ce       	rjmp	.-530    	; 0x131a <main+0xe0>
						displayPointerActivated = false;
    152c:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						parameterSelectionActivated = true;
    1530:	f0 92 c6 01 	sts	0x01C6, r15	; 0x8001c6 <parameterSelectionActivated.2665>
    1534:	40 c4       	rjmp	.+2176   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					break;
				case PTR_BIAS_B:
					if (encoderState == CW) {
    1536:	c1 30       	cpi	r28, 0x01	; 1
    1538:	19 f4       	brne	.+6      	; 0x1540 <main+0x306>
						displayPointer = PTR_TYPE_B;
    153a:	30 92 c3 01 	sts	0x01C3, r3	; 0x8001c3 <displayPointer.2663>
    153e:	3b c4       	rjmp	.+2166   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (encoderState == CCW) {
    1540:	c2 30       	cpi	r28, 0x02	; 2
    1542:	21 f4       	brne	.+8      	; 0x154c <main+0x312>
						displayPointer = PTR_FREQ_B;
    1544:	f6 e0       	ldi	r31, 0x06	; 6
    1546:	f0 93 c3 01 	sts	0x01C3, r31	; 0x8001c3 <displayPointer.2663>
    154a:	35 c4       	rjmp	.+2154   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (switchState) {
    154c:	dd 23       	and	r29, r29
    154e:	09 f4       	brne	.+2      	; 0x1552 <main+0x318>
    1550:	e4 ce       	rjmp	.-568    	; 0x131a <main+0xe0>
						displayPointerActivated = false;
    1552:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						parameterSelectionActivated = true;
    1556:	f0 92 c6 01 	sts	0x01C6, r15	; 0x8001c6 <parameterSelectionActivated.2665>
    155a:	2d c4       	rjmp	.+2138   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					break;
				case PTR_SETT:
					if (encoderState == CW) {
    155c:	c1 30       	cpi	r28, 0x01	; 1
    155e:	21 f4       	brne	.+8      	; 0x1568 <main+0x32e>
						displayPointer = PTR_SHUTDOWN;
    1560:	2a e0       	ldi	r18, 0x0A	; 10
    1562:	20 93 c3 01 	sts	0x01C3, r18	; 0x8001c3 <displayPointer.2663>
    1566:	27 c4       	rjmp	.+2126   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (encoderState == CCW) {
    1568:	c2 30       	cpi	r28, 0x02	; 2
    156a:	21 f4       	brne	.+8      	; 0x1574 <main+0x33a>
						displayPointer = PTR_SHUTDOWN;
    156c:	8a e0       	ldi	r24, 0x0A	; 10
    156e:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <displayPointer.2663>
    1572:	21 c4       	rjmp	.+2114   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (switchState) {
    1574:	dd 23       	and	r29, r29
    1576:	09 f4       	brne	.+2      	; 0x157a <main+0x340>
    1578:	d0 ce       	rjmp	.-608    	; 0x131a <main+0xe0>
						displayPointerActivated = false;
    157a:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						parameterSelectionActivated = true;
    157e:	f0 92 c6 01 	sts	0x01C6, r15	; 0x8001c6 <parameterSelectionActivated.2665>
    1582:	19 c4       	rjmp	.+2098   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					break;
				case PTR_SHUTDOWN:
					if (encoderState == CW) {
    1584:	c1 30       	cpi	r28, 0x01	; 1
    1586:	19 f4       	brne	.+6      	; 0x158e <main+0x354>
						displayPointer = PTR_SETT;
    1588:	20 92 c3 01 	sts	0x01C3, r2	; 0x8001c3 <displayPointer.2663>
    158c:	14 c4       	rjmp	.+2088   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (encoderState == CCW) {
    158e:	c2 30       	cpi	r28, 0x02	; 2
    1590:	19 f4       	brne	.+6      	; 0x1598 <main+0x35e>
						displayPointer = PTR_SETT;
    1592:	20 92 c3 01 	sts	0x01C3, r2	; 0x8001c3 <displayPointer.2663>
    1596:	0f c4       	rjmp	.+2078   	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					else if (switchState) shutdownSequence(false);
    1598:	dd 23       	and	r29, r29
    159a:	09 f4       	brne	.+2      	; 0x159e <main+0x364>
    159c:	be ce       	rjmp	.-644    	; 0x131a <main+0xe0>
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	0e 94 17 04 	call	0x82e	; 0x82e <shutdownSequence>
    15a4:	ba ce       	rjmp	.-652    	; 0x131a <main+0xe0>
					
					default: break;
			}
		}
		else if (!displayPointerActivated && parameterSelectionActivated) {
			switch(displayPointer) {
    15a6:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <displayPointer.2663>
    15aa:	8e 2f       	mov	r24, r30
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	fc 01       	movw	r30, r24
    15b0:	31 97       	sbiw	r30, 0x01	; 1
    15b2:	e8 30       	cpi	r30, 0x08	; 8
    15b4:	f1 05       	cpc	r31, r1
    15b6:	08 f0       	brcs	.+2      	; 0x15ba <main+0x380>
    15b8:	b0 ce       	rjmp	.-672    	; 0x131a <main+0xe0>
    15ba:	e1 5b       	subi	r30, 0xB1	; 177
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__tablejump2__>
				
				case PTR_NULL: break;
				
				case PTR_TYPE_A:
				if (encoderState == CW) {
    15c2:	c1 30       	cpi	r28, 0x01	; 1
    15c4:	f9 f4       	brne	.+62     	; 0x1604 <main+0x3ca>
					display.stateChanged = true;
					functionalityChanged = true;
    15c6:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					switch(FunctionGenerator.output_type_A) {
    15ca:	f6 01       	movw	r30, r12
    15cc:	84 85       	ldd	r24, Z+12	; 0x0c
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	71 f0       	breq	.+28     	; 0x15ee <main+0x3b4>
    15d2:	18 f4       	brcc	.+6      	; 0x15da <main+0x3a0>
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	41 f0       	breq	.+16     	; 0x15e8 <main+0x3ae>
    15d8:	12 c0       	rjmp	.+36     	; 0x15fe <main+0x3c4>
    15da:	83 30       	cpi	r24, 0x03	; 3
    15dc:	61 f0       	breq	.+24     	; 0x15f6 <main+0x3bc>
    15de:	85 30       	cpi	r24, 0x05	; 5
    15e0:	71 f4       	brne	.+28     	; 0x15fe <main+0x3c4>
						case OFF: FunctionGenerator.output_type_A = SINE; break;
    15e2:	f6 01       	movw	r30, r12
    15e4:	f4 86       	std	Z+12, r15	; 0x0c
    15e6:	e7 c3       	rjmp	.+1998   	; 0x1db6 <main+0xb7c>
						case SINE: FunctionGenerator.output_type_A = TRIANGLE; break;
    15e8:	f6 01       	movw	r30, r12
    15ea:	e4 86       	std	Z+12, r14	; 0x0c
    15ec:	e4 c3       	rjmp	.+1992   	; 0x1db6 <main+0xb7c>
						case TRIANGLE: FunctionGenerator.output_type_A = SQUARE; break;
    15ee:	83 e0       	ldi	r24, 0x03	; 3
    15f0:	f6 01       	movw	r30, r12
    15f2:	84 87       	std	Z+12, r24	; 0x0c
    15f4:	e0 c3       	rjmp	.+1984   	; 0x1db6 <main+0xb7c>
						case SQUARE: FunctionGenerator.output_type_A = DC; break;
    15f6:	84 e0       	ldi	r24, 0x04	; 4
    15f8:	f6 01       	movw	r30, r12
    15fa:	84 87       	std	Z+12, r24	; 0x0c
    15fc:	dc c3       	rjmp	.+1976   	; 0x1db6 <main+0xb7c>
						case DC: default: FunctionGenerator.output_type_A = OFF; break;
    15fe:	f6 01       	movw	r30, r12
    1600:	34 86       	std	Z+12, r3	; 0x0c
    1602:	d9 c3       	rjmp	.+1970   	; 0x1db6 <main+0xb7c>
					}
				}
				else if (encoderState == CCW) {
    1604:	c2 30       	cpi	r28, 0x02	; 2
    1606:	f9 f4       	brne	.+62     	; 0x1646 <main+0x40c>
					display.stateChanged = true;
					functionalityChanged = true;
    1608:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					switch(FunctionGenerator.output_type_A) {
    160c:	f6 01       	movw	r30, r12
    160e:	84 85       	ldd	r24, Z+12	; 0x0c
    1610:	82 30       	cpi	r24, 0x02	; 2
    1612:	79 f0       	breq	.+30     	; 0x1632 <main+0x3f8>
    1614:	18 f4       	brcc	.+6      	; 0x161c <main+0x3e2>
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	49 f0       	breq	.+18     	; 0x162c <main+0x3f2>
    161a:	11 c0       	rjmp	.+34     	; 0x163e <main+0x404>
    161c:	83 30       	cpi	r24, 0x03	; 3
    161e:	61 f0       	breq	.+24     	; 0x1638 <main+0x3fe>
    1620:	85 30       	cpi	r24, 0x05	; 5
    1622:	69 f4       	brne	.+26     	; 0x163e <main+0x404>
						case OFF: FunctionGenerator.output_type_A = DC; break;
    1624:	84 e0       	ldi	r24, 0x04	; 4
    1626:	f6 01       	movw	r30, r12
    1628:	84 87       	std	Z+12, r24	; 0x0c
    162a:	c5 c3       	rjmp	.+1930   	; 0x1db6 <main+0xb7c>
						case SINE: FunctionGenerator.output_type_A = OFF; break;
    162c:	f6 01       	movw	r30, r12
    162e:	34 86       	std	Z+12, r3	; 0x0c
    1630:	c2 c3       	rjmp	.+1924   	; 0x1db6 <main+0xb7c>
						case TRIANGLE: FunctionGenerator.output_type_A = SINE; break;
    1632:	f6 01       	movw	r30, r12
    1634:	f4 86       	std	Z+12, r15	; 0x0c
    1636:	bf c3       	rjmp	.+1918   	; 0x1db6 <main+0xb7c>
						case SQUARE: FunctionGenerator.output_type_A = TRIANGLE; break;
    1638:	f6 01       	movw	r30, r12
    163a:	e4 86       	std	Z+12, r14	; 0x0c
    163c:	bc c3       	rjmp	.+1912   	; 0x1db6 <main+0xb7c>
						case DC: default: FunctionGenerator.output_type_A = SQUARE; break;
    163e:	83 e0       	ldi	r24, 0x03	; 3
    1640:	f6 01       	movw	r30, r12
    1642:	84 87       	std	Z+12, r24	; 0x0c
    1644:	b8 c3       	rjmp	.+1904   	; 0x1db6 <main+0xb7c>
					}
				}
				
				else if (switchState) {
    1646:	dd 23       	and	r29, r29
    1648:	09 f4       	brne	.+2      	; 0x164c <main+0x412>
    164a:	67 ce       	rjmp	.-818    	; 0x131a <main+0xe0>
					parameterSelectionActivated = false;
    164c:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <parameterSelectionActivated.2665>
					functionalityChanged = false;
    1650:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <functionalityChanged.2667>
					displayPointerActivated = false;
    1654:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
					display.stateChanged = true;
					displayPointer = PTR_NULL;
    1658:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <displayPointer.2663>
    165c:	ac c3       	rjmp	.+1880   	; 0x1db6 <main+0xb7c>
				}
				
				break;
				
				case PTR_AMP_A:
				if (encoderState == CW) {
    165e:	c1 30       	cpi	r28, 0x01	; 1
    1660:	f1 f4       	brne	.+60     	; 0x169e <main+0x464>
					display.stateChanged = true;
					functionalityChanged = true;
    1662:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					if (FunctionGenerator.amplitude_A >= 70) FunctionGenerator.amplitude_A = 70;
    1666:	f6 01       	movw	r30, r12
    1668:	80 85       	ldd	r24, Z+8	; 0x08
    166a:	91 85       	ldd	r25, Z+9	; 0x09
    166c:	86 34       	cpi	r24, 0x46	; 70
    166e:	91 05       	cpc	r25, r1
    1670:	28 f0       	brcs	.+10     	; 0x167c <main+0x442>
    1672:	86 e4       	ldi	r24, 0x46	; 70
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	91 87       	std	Z+9, r25	; 0x09
    1678:	80 87       	std	Z+8, r24	; 0x08
    167a:	9d c3       	rjmp	.+1850   	; 0x1db6 <main+0xb7c>
					else {
						switch(buttonPressCounter) {
    167c:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    1680:	22 23       	and	r18, r18
    1682:	19 f0       	breq	.+6      	; 0x168a <main+0x450>
    1684:	21 30       	cpi	r18, 0x01	; 1
    1686:	31 f0       	breq	.+12     	; 0x1694 <main+0x45a>
    1688:	2d ce       	rjmp	.-934    	; 0x12e4 <main+0xaa>
							case 0: FunctionGenerator.amplitude_A++; break;
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	f6 01       	movw	r30, r12
    168e:	91 87       	std	Z+9, r25	; 0x09
    1690:	80 87       	std	Z+8, r24	; 0x08
    1692:	91 c3       	rjmp	.+1826   	; 0x1db6 <main+0xb7c>
							case 1: FunctionGenerator.amplitude_A += 10; break;
    1694:	0a 96       	adiw	r24, 0x0a	; 10
    1696:	f6 01       	movw	r30, r12
    1698:	91 87       	std	Z+9, r25	; 0x09
    169a:	80 87       	std	Z+8, r24	; 0x08
    169c:	8c c3       	rjmp	.+1816   	; 0x1db6 <main+0xb7c>
						}
					}
				}
				else if (encoderState == CCW) {
    169e:	c2 30       	cpi	r28, 0x02	; 2
    16a0:	c9 f4       	brne	.+50     	; 0x16d4 <main+0x49a>
					display.stateChanged = true;
					functionalityChanged = true;
    16a2:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					if (FunctionGenerator.amplitude_A <= 0) FunctionGenerator.amplitude_A = 0;
    16a6:	f6 01       	movw	r30, r12
    16a8:	80 85       	ldd	r24, Z+8	; 0x08
    16aa:	91 85       	ldd	r25, Z+9	; 0x09
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <main+0x478>
    16b0:	82 c3       	rjmp	.+1796   	; 0x1db6 <main+0xb7c>
					else {
						switch(buttonPressCounter) {
    16b2:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    16b6:	22 23       	and	r18, r18
    16b8:	19 f0       	breq	.+6      	; 0x16c0 <main+0x486>
    16ba:	21 30       	cpi	r18, 0x01	; 1
    16bc:	31 f0       	breq	.+12     	; 0x16ca <main+0x490>
    16be:	14 ce       	rjmp	.-984    	; 0x12e8 <main+0xae>
							case 0: FunctionGenerator.amplitude_A--; break;
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f6 01       	movw	r30, r12
    16c4:	91 87       	std	Z+9, r25	; 0x09
    16c6:	80 87       	std	Z+8, r24	; 0x08
    16c8:	76 c3       	rjmp	.+1772   	; 0x1db6 <main+0xb7c>
							case 1: FunctionGenerator.amplitude_A -= 10; break;
    16ca:	0a 97       	sbiw	r24, 0x0a	; 10
    16cc:	f6 01       	movw	r30, r12
    16ce:	91 87       	std	Z+9, r25	; 0x09
    16d0:	80 87       	std	Z+8, r24	; 0x08
    16d2:	71 c3       	rjmp	.+1762   	; 0x1db6 <main+0xb7c>
						}
					}
				}
				
				else if (switchState) {
    16d4:	dd 23       	and	r29, r29
    16d6:	09 f4       	brne	.+2      	; 0x16da <main+0x4a0>
    16d8:	20 ce       	rjmp	.-960    	; 0x131a <main+0xe0>
					if (buttonPressCounter < 1) buttonPressCounter++;
    16da:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    16de:	81 11       	cpse	r24, r1
    16e0:	03 c0       	rjmp	.+6      	; 0x16e8 <main+0x4ae>
    16e2:	f0 92 c4 01 	sts	0x01C4, r15	; 0x8001c4 <buttonPressCounter.2668>
    16e6:	67 c3       	rjmp	.+1742   	; 0x1db6 <main+0xb7c>
					else {
						buttonPressCounter = 0;
    16e8:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <buttonPressCounter.2668>
						parameterSelectionActivated = false;
    16ec:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <parameterSelectionActivated.2665>
						functionalityChanged = false;
    16f0:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <functionalityChanged.2667>
						displayPointerActivated = false;
    16f4:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						displayPointer = PTR_NULL;
    16f8:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <displayPointer.2663>
    16fc:	5c c3       	rjmp	.+1720   	; 0x1db6 <main+0xb7c>
					display.stateChanged = true;
				}
				break;

				case PTR_FREQ_A:
				if (encoderState == CW) {
    16fe:	c1 30       	cpi	r28, 0x01	; 1
    1700:	09 f0       	breq	.+2      	; 0x1704 <main+0x4ca>
    1702:	5e c0       	rjmp	.+188    	; 0x17c0 <main+0x586>
					display.stateChanged = true;
					functionalityChanged = true;
    1704:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					if (FunctionGenerator.frequency_A >= 1000000) FunctionGenerator.frequency_A = 1000000;
    1708:	f6 01       	movw	r30, r12
    170a:	80 81       	ld	r24, Z
    170c:	91 81       	ldd	r25, Z+1	; 0x01
    170e:	a2 81       	ldd	r26, Z+2	; 0x02
    1710:	b3 81       	ldd	r27, Z+3	; 0x03
    1712:	80 34       	cpi	r24, 0x40	; 64
    1714:	f2 e4       	ldi	r31, 0x42	; 66
    1716:	9f 07       	cpc	r25, r31
    1718:	ff e0       	ldi	r31, 0x0F	; 15
    171a:	af 07       	cpc	r26, r31
    171c:	b1 05       	cpc	r27, r1
    171e:	30 f0       	brcs	.+12     	; 0x172c <main+0x4f2>
    1720:	f6 01       	movw	r30, r12
    1722:	40 82       	st	Z, r4
    1724:	51 82       	std	Z+1, r5	; 0x01
    1726:	62 82       	std	Z+2, r6	; 0x02
    1728:	73 82       	std	Z+3, r7	; 0x03
    172a:	45 c3       	rjmp	.+1674   	; 0x1db6 <main+0xb7c>
					else {
						switch(buttonPressCounter) {
    172c:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    1730:	22 30       	cpi	r18, 0x02	; 2
    1732:	f1 f0       	breq	.+60     	; 0x1770 <main+0x536>
    1734:	28 f4       	brcc	.+10     	; 0x1740 <main+0x506>
    1736:	22 23       	and	r18, r18
    1738:	49 f0       	breq	.+18     	; 0x174c <main+0x512>
    173a:	21 30       	cpi	r18, 0x01	; 1
    173c:	81 f0       	breq	.+32     	; 0x175e <main+0x524>
    173e:	d6 cd       	rjmp	.-1108   	; 0x12ec <main+0xb2>
    1740:	24 30       	cpi	r18, 0x04	; 4
    1742:	51 f1       	breq	.+84     	; 0x1798 <main+0x55e>
    1744:	f8 f0       	brcs	.+62     	; 0x1784 <main+0x54a>
    1746:	25 30       	cpi	r18, 0x05	; 5
    1748:	89 f1       	breq	.+98     	; 0x17ac <main+0x572>
    174a:	d0 cd       	rjmp	.-1120   	; 0x12ec <main+0xb2>
							case 0: FunctionGenerator.frequency_A++; break;
    174c:	01 96       	adiw	r24, 0x01	; 1
    174e:	a1 1d       	adc	r26, r1
    1750:	b1 1d       	adc	r27, r1
    1752:	f6 01       	movw	r30, r12
    1754:	80 83       	st	Z, r24
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	a2 83       	std	Z+2, r26	; 0x02
    175a:	b3 83       	std	Z+3, r27	; 0x03
    175c:	2c c3       	rjmp	.+1624   	; 0x1db6 <main+0xb7c>
							case 1: FunctionGenerator.frequency_A += 10; break;
    175e:	0a 96       	adiw	r24, 0x0a	; 10
    1760:	a1 1d       	adc	r26, r1
    1762:	b1 1d       	adc	r27, r1
    1764:	f6 01       	movw	r30, r12
    1766:	80 83       	st	Z, r24
    1768:	91 83       	std	Z+1, r25	; 0x01
    176a:	a2 83       	std	Z+2, r26	; 0x02
    176c:	b3 83       	std	Z+3, r27	; 0x03
    176e:	23 c3       	rjmp	.+1606   	; 0x1db6 <main+0xb7c>
							case 2: FunctionGenerator.frequency_A += 100; break;
    1770:	8c 59       	subi	r24, 0x9C	; 156
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	af 4f       	sbci	r26, 0xFF	; 255
    1776:	bf 4f       	sbci	r27, 0xFF	; 255
    1778:	f6 01       	movw	r30, r12
    177a:	80 83       	st	Z, r24
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	a2 83       	std	Z+2, r26	; 0x02
    1780:	b3 83       	std	Z+3, r27	; 0x03
    1782:	19 c3       	rjmp	.+1586   	; 0x1db6 <main+0xb7c>
							case 3: FunctionGenerator.frequency_A += 1000; break;
    1784:	88 51       	subi	r24, 0x18	; 24
    1786:	9c 4f       	sbci	r25, 0xFC	; 252
    1788:	af 4f       	sbci	r26, 0xFF	; 255
    178a:	bf 4f       	sbci	r27, 0xFF	; 255
    178c:	f6 01       	movw	r30, r12
    178e:	80 83       	st	Z, r24
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	a2 83       	std	Z+2, r26	; 0x02
    1794:	b3 83       	std	Z+3, r27	; 0x03
    1796:	0f c3       	rjmp	.+1566   	; 0x1db6 <main+0xb7c>
							case 4: FunctionGenerator.frequency_A += 10000; break;
    1798:	80 5f       	subi	r24, 0xF0	; 240
    179a:	98 4d       	sbci	r25, 0xD8	; 216
    179c:	af 4f       	sbci	r26, 0xFF	; 255
    179e:	bf 4f       	sbci	r27, 0xFF	; 255
    17a0:	f6 01       	movw	r30, r12
    17a2:	80 83       	st	Z, r24
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	a2 83       	std	Z+2, r26	; 0x02
    17a8:	b3 83       	std	Z+3, r27	; 0x03
    17aa:	05 c3       	rjmp	.+1546   	; 0x1db6 <main+0xb7c>
							case 5: FunctionGenerator.frequency_A += 100000; break;
    17ac:	80 56       	subi	r24, 0x60	; 96
    17ae:	99 47       	sbci	r25, 0x79	; 121
    17b0:	ae 4f       	sbci	r26, 0xFE	; 254
    17b2:	bf 4f       	sbci	r27, 0xFF	; 255
    17b4:	f6 01       	movw	r30, r12
    17b6:	80 83       	st	Z, r24
    17b8:	91 83       	std	Z+1, r25	; 0x01
    17ba:	a2 83       	std	Z+2, r26	; 0x02
    17bc:	b3 83       	std	Z+3, r27	; 0x03
    17be:	fb c2       	rjmp	.+1526   	; 0x1db6 <main+0xb7c>
						}
					}
				}
				else if (encoderState == CCW) {
    17c0:	c2 30       	cpi	r28, 0x02	; 2
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <main+0x58c>
    17c4:	56 c0       	rjmp	.+172    	; 0x1872 <main+0x638>
					display.stateChanged = true;
					functionalityChanged = true;
    17c6:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					if (FunctionGenerator.frequency_A <= 0) FunctionGenerator.frequency_A = 0;
    17ca:	f6 01       	movw	r30, r12
    17cc:	80 81       	ld	r24, Z
    17ce:	91 81       	ldd	r25, Z+1	; 0x01
    17d0:	a2 81       	ldd	r26, Z+2	; 0x02
    17d2:	b3 81       	ldd	r27, Z+3	; 0x03
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	a1 05       	cpc	r26, r1
    17d8:	b1 05       	cpc	r27, r1
    17da:	09 f4       	brne	.+2      	; 0x17de <main+0x5a4>
    17dc:	ec c2       	rjmp	.+1496   	; 0x1db6 <main+0xb7c>
					else {
						switch(buttonPressCounter) {
    17de:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    17e2:	22 30       	cpi	r18, 0x02	; 2
    17e4:	f1 f0       	breq	.+60     	; 0x1822 <main+0x5e8>
    17e6:	28 f4       	brcc	.+10     	; 0x17f2 <main+0x5b8>
    17e8:	22 23       	and	r18, r18
    17ea:	49 f0       	breq	.+18     	; 0x17fe <main+0x5c4>
    17ec:	21 30       	cpi	r18, 0x01	; 1
    17ee:	81 f0       	breq	.+32     	; 0x1810 <main+0x5d6>
    17f0:	7f cd       	rjmp	.-1282   	; 0x12f0 <main+0xb6>
    17f2:	24 30       	cpi	r18, 0x04	; 4
    17f4:	51 f1       	breq	.+84     	; 0x184a <main+0x610>
    17f6:	f8 f0       	brcs	.+62     	; 0x1836 <main+0x5fc>
    17f8:	25 30       	cpi	r18, 0x05	; 5
    17fa:	89 f1       	breq	.+98     	; 0x185e <main+0x624>
    17fc:	79 cd       	rjmp	.-1294   	; 0x12f0 <main+0xb6>
							case 0: FunctionGenerator.frequency_A--; break;
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	a1 09       	sbc	r26, r1
    1802:	b1 09       	sbc	r27, r1
    1804:	f6 01       	movw	r30, r12
    1806:	80 83       	st	Z, r24
    1808:	91 83       	std	Z+1, r25	; 0x01
    180a:	a2 83       	std	Z+2, r26	; 0x02
    180c:	b3 83       	std	Z+3, r27	; 0x03
    180e:	d3 c2       	rjmp	.+1446   	; 0x1db6 <main+0xb7c>
							case 1: FunctionGenerator.frequency_A -= 10; break;
    1810:	0a 97       	sbiw	r24, 0x0a	; 10
    1812:	a1 09       	sbc	r26, r1
    1814:	b1 09       	sbc	r27, r1
    1816:	f6 01       	movw	r30, r12
    1818:	80 83       	st	Z, r24
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	a2 83       	std	Z+2, r26	; 0x02
    181e:	b3 83       	std	Z+3, r27	; 0x03
    1820:	ca c2       	rjmp	.+1428   	; 0x1db6 <main+0xb7c>
							case 2: FunctionGenerator.frequency_A -= 100; break;
    1822:	84 56       	subi	r24, 0x64	; 100
    1824:	91 09       	sbc	r25, r1
    1826:	a1 09       	sbc	r26, r1
    1828:	b1 09       	sbc	r27, r1
    182a:	f6 01       	movw	r30, r12
    182c:	80 83       	st	Z, r24
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	a2 83       	std	Z+2, r26	; 0x02
    1832:	b3 83       	std	Z+3, r27	; 0x03
    1834:	c0 c2       	rjmp	.+1408   	; 0x1db6 <main+0xb7c>
							case 3: FunctionGenerator.frequency_A -= 1000; break;
    1836:	88 5e       	subi	r24, 0xE8	; 232
    1838:	93 40       	sbci	r25, 0x03	; 3
    183a:	a1 09       	sbc	r26, r1
    183c:	b1 09       	sbc	r27, r1
    183e:	f6 01       	movw	r30, r12
    1840:	80 83       	st	Z, r24
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	a2 83       	std	Z+2, r26	; 0x02
    1846:	b3 83       	std	Z+3, r27	; 0x03
    1848:	b6 c2       	rjmp	.+1388   	; 0x1db6 <main+0xb7c>
							case 4: FunctionGenerator.frequency_A -= 10000; break;
    184a:	80 51       	subi	r24, 0x10	; 16
    184c:	97 42       	sbci	r25, 0x27	; 39
    184e:	a1 09       	sbc	r26, r1
    1850:	b1 09       	sbc	r27, r1
    1852:	f6 01       	movw	r30, r12
    1854:	80 83       	st	Z, r24
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	a2 83       	std	Z+2, r26	; 0x02
    185a:	b3 83       	std	Z+3, r27	; 0x03
    185c:	ac c2       	rjmp	.+1368   	; 0x1db6 <main+0xb7c>
							case 5: FunctionGenerator.frequency_A -= 100000; break;
    185e:	80 5a       	subi	r24, 0xA0	; 160
    1860:	96 48       	sbci	r25, 0x86	; 134
    1862:	a1 40       	sbci	r26, 0x01	; 1
    1864:	b1 09       	sbc	r27, r1
    1866:	f6 01       	movw	r30, r12
    1868:	80 83       	st	Z, r24
    186a:	91 83       	std	Z+1, r25	; 0x01
    186c:	a2 83       	std	Z+2, r26	; 0x02
    186e:	b3 83       	std	Z+3, r27	; 0x03
    1870:	a2 c2       	rjmp	.+1348   	; 0x1db6 <main+0xb7c>
						}
					}
				}
				
				else if (switchState) {
    1872:	dd 23       	and	r29, r29
    1874:	09 f4       	brne	.+2      	; 0x1878 <main+0x63e>
    1876:	51 cd       	rjmp	.-1374   	; 0x131a <main+0xe0>
					if (buttonPressCounter < 5) buttonPressCounter++;
    1878:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    187c:	85 30       	cpi	r24, 0x05	; 5
    187e:	20 f4       	brcc	.+8      	; 0x1888 <main+0x64e>
    1880:	8f 5f       	subi	r24, 0xFF	; 255
    1882:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <buttonPressCounter.2668>
    1886:	97 c2       	rjmp	.+1326   	; 0x1db6 <main+0xb7c>
					else {
						buttonPressCounter = 0;
    1888:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <buttonPressCounter.2668>
						parameterSelectionActivated = false;
    188c:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <parameterSelectionActivated.2665>
						functionalityChanged = false;
    1890:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <functionalityChanged.2667>
						displayPointerActivated = false;
    1894:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						displayPointer = PTR_NULL;
    1898:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <displayPointer.2663>
    189c:	8c c2       	rjmp	.+1304   	; 0x1db6 <main+0xb7c>
					display.stateChanged = true;
				}
				break;
				
				case PTR_BIAS_A:
				if (encoderState == CW) {
    189e:	c1 30       	cpi	r28, 0x01	; 1
    18a0:	59 f5       	brne	.+86     	; 0x18f8 <main+0x6be>
					display.stateChanged = true;
					functionalityChanged = true;
    18a2:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					if (FunctionGenerator.bias_A_sign == POSITIVE) {
    18a6:	f6 01       	movw	r30, r12
    18a8:	82 89       	ldd	r24, Z+18	; 0x12
    18aa:	81 11       	cpse	r24, r1
    18ac:	22 c0       	rjmp	.+68     	; 0x18f2 <main+0x6b8>
						if (FunctionGenerator.bias_A >= 330) FunctionGenerator.bias_A = 330;
    18ae:	86 85       	ldd	r24, Z+14	; 0x0e
    18b0:	97 85       	ldd	r25, Z+15	; 0x0f
    18b2:	8a 34       	cpi	r24, 0x4A	; 74
    18b4:	f1 e0       	ldi	r31, 0x01	; 1
    18b6:	9f 07       	cpc	r25, r31
    18b8:	20 f0       	brcs	.+8      	; 0x18c2 <main+0x688>
    18ba:	f6 01       	movw	r30, r12
    18bc:	97 86       	std	Z+15, r9	; 0x0f
    18be:	86 86       	std	Z+14, r8	; 0x0e
    18c0:	7a c2       	rjmp	.+1268   	; 0x1db6 <main+0xb7c>
						else {
							switch(buttonPressCounter) {
    18c2:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    18c6:	21 30       	cpi	r18, 0x01	; 1
    18c8:	49 f0       	breq	.+18     	; 0x18dc <main+0x6a2>
    18ca:	18 f0       	brcs	.+6      	; 0x18d2 <main+0x698>
    18cc:	22 30       	cpi	r18, 0x02	; 2
    18ce:	59 f0       	breq	.+22     	; 0x18e6 <main+0x6ac>
    18d0:	11 cd       	rjmp	.-1502   	; 0x12f4 <main+0xba>
								case 0: FunctionGenerator.bias_A++; break;
    18d2:	01 96       	adiw	r24, 0x01	; 1
    18d4:	f6 01       	movw	r30, r12
    18d6:	97 87       	std	Z+15, r25	; 0x0f
    18d8:	86 87       	std	Z+14, r24	; 0x0e
    18da:	6d c2       	rjmp	.+1242   	; 0x1db6 <main+0xb7c>
								case 1: FunctionGenerator.bias_A += 10; break;
    18dc:	0a 96       	adiw	r24, 0x0a	; 10
    18de:	f6 01       	movw	r30, r12
    18e0:	97 87       	std	Z+15, r25	; 0x0f
    18e2:	86 87       	std	Z+14, r24	; 0x0e
    18e4:	68 c2       	rjmp	.+1232   	; 0x1db6 <main+0xb7c>
								case 2: FunctionGenerator.bias_A += 100; break;
    18e6:	8c 59       	subi	r24, 0x9C	; 156
    18e8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ea:	f6 01       	movw	r30, r12
    18ec:	97 87       	std	Z+15, r25	; 0x0f
    18ee:	86 87       	std	Z+14, r24	; 0x0e
    18f0:	62 c2       	rjmp	.+1220   	; 0x1db6 <main+0xb7c>
							}
						}
					}		
					
					else if (FunctionGenerator.bias_A_sign == NEGATIVE) {
						if (FunctionGenerator.bias_A >= 0) FunctionGenerator.bias_A_sign = POSITIVE;
    18f2:	f6 01       	movw	r30, r12
    18f4:	12 8a       	std	Z+18, r1	; 0x12
    18f6:	5f c2       	rjmp	.+1214   	; 0x1db6 <main+0xb7c>
							}
						}
					}
				}
				
				else if (encoderState == CCW) {
    18f8:	c2 30       	cpi	r28, 0x02	; 2
    18fa:	09 f0       	breq	.+2      	; 0x18fe <main+0x6c4>
    18fc:	46 c0       	rjmp	.+140    	; 0x198a <main+0x750>
					display.stateChanged = true;
					functionalityChanged = true;
    18fe:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					if (FunctionGenerator.bias_A_sign == NEGATIVE) {
    1902:	f6 01       	movw	r30, r12
    1904:	82 89       	ldd	r24, Z+18	; 0x12
    1906:	88 23       	and	r24, r24
    1908:	11 f1       	breq	.+68     	; 0x194e <main+0x714>
						if (FunctionGenerator.bias_A >= 330) FunctionGenerator.bias_A = 330;
    190a:	86 85       	ldd	r24, Z+14	; 0x0e
    190c:	97 85       	ldd	r25, Z+15	; 0x0f
    190e:	8a 34       	cpi	r24, 0x4A	; 74
    1910:	f1 e0       	ldi	r31, 0x01	; 1
    1912:	9f 07       	cpc	r25, r31
    1914:	20 f0       	brcs	.+8      	; 0x191e <main+0x6e4>
    1916:	f6 01       	movw	r30, r12
    1918:	97 86       	std	Z+15, r9	; 0x0f
    191a:	86 86       	std	Z+14, r8	; 0x0e
    191c:	4c c2       	rjmp	.+1176   	; 0x1db6 <main+0xb7c>
						else {
							switch(buttonPressCounter) {
    191e:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    1922:	21 30       	cpi	r18, 0x01	; 1
    1924:	49 f0       	breq	.+18     	; 0x1938 <main+0x6fe>
    1926:	18 f0       	brcs	.+6      	; 0x192e <main+0x6f4>
    1928:	22 30       	cpi	r18, 0x02	; 2
    192a:	59 f0       	breq	.+22     	; 0x1942 <main+0x708>
    192c:	e5 cc       	rjmp	.-1590   	; 0x12f8 <main+0xbe>
								case 0: FunctionGenerator.bias_A++; break;
    192e:	01 96       	adiw	r24, 0x01	; 1
    1930:	f6 01       	movw	r30, r12
    1932:	97 87       	std	Z+15, r25	; 0x0f
    1934:	86 87       	std	Z+14, r24	; 0x0e
    1936:	3f c2       	rjmp	.+1150   	; 0x1db6 <main+0xb7c>
								case 1: FunctionGenerator.bias_A += 10; break;
    1938:	0a 96       	adiw	r24, 0x0a	; 10
    193a:	f6 01       	movw	r30, r12
    193c:	97 87       	std	Z+15, r25	; 0x0f
    193e:	86 87       	std	Z+14, r24	; 0x0e
    1940:	3a c2       	rjmp	.+1140   	; 0x1db6 <main+0xb7c>
								case 2: FunctionGenerator.bias_A += 100; break;
    1942:	8c 59       	subi	r24, 0x9C	; 156
    1944:	9f 4f       	sbci	r25, 0xFF	; 255
    1946:	f6 01       	movw	r30, r12
    1948:	97 87       	std	Z+15, r25	; 0x0f
    194a:	86 87       	std	Z+14, r24	; 0x0e
    194c:	34 c2       	rjmp	.+1128   	; 0x1db6 <main+0xb7c>
							}
						}
					}
					else if (FunctionGenerator.bias_A_sign == POSITIVE) {
						if (FunctionGenerator.bias_A <= 0) FunctionGenerator.bias_A_sign = POSITIVE;
    194e:	f6 01       	movw	r30, r12
    1950:	86 85       	ldd	r24, Z+14	; 0x0e
    1952:	97 85       	ldd	r25, Z+15	; 0x0f
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	09 f4       	brne	.+2      	; 0x195a <main+0x720>
    1958:	2e c2       	rjmp	.+1116   	; 0x1db6 <main+0xb7c>
						else  {
							switch(buttonPressCounter) {
    195a:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    195e:	21 30       	cpi	r18, 0x01	; 1
    1960:	49 f0       	breq	.+18     	; 0x1974 <main+0x73a>
    1962:	18 f0       	brcs	.+6      	; 0x196a <main+0x730>
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	59 f0       	breq	.+22     	; 0x197e <main+0x744>
    1968:	c9 cc       	rjmp	.-1646   	; 0x12fc <main+0xc2>
								case 0: FunctionGenerator.bias_A--; break;
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f6 01       	movw	r30, r12
    196e:	97 87       	std	Z+15, r25	; 0x0f
    1970:	86 87       	std	Z+14, r24	; 0x0e
    1972:	21 c2       	rjmp	.+1090   	; 0x1db6 <main+0xb7c>
								case 1: FunctionGenerator.bias_A -= 10; break;
    1974:	0a 97       	sbiw	r24, 0x0a	; 10
    1976:	f6 01       	movw	r30, r12
    1978:	97 87       	std	Z+15, r25	; 0x0f
    197a:	86 87       	std	Z+14, r24	; 0x0e
    197c:	1c c2       	rjmp	.+1080   	; 0x1db6 <main+0xb7c>
								case 2: FunctionGenerator.bias_A -= 100; break;
    197e:	84 56       	subi	r24, 0x64	; 100
    1980:	91 09       	sbc	r25, r1
    1982:	f6 01       	movw	r30, r12
    1984:	97 87       	std	Z+15, r25	; 0x0f
    1986:	86 87       	std	Z+14, r24	; 0x0e
    1988:	16 c2       	rjmp	.+1068   	; 0x1db6 <main+0xb7c>
							}
						}
					}
				}
				
				else if (switchState) {
    198a:	dd 23       	and	r29, r29
    198c:	09 f4       	brne	.+2      	; 0x1990 <main+0x756>
    198e:	c5 cc       	rjmp	.-1654   	; 0x131a <main+0xe0>
					if (buttonPressCounter < 2) buttonPressCounter++;
    1990:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    1994:	82 30       	cpi	r24, 0x02	; 2
    1996:	20 f4       	brcc	.+8      	; 0x19a0 <main+0x766>
    1998:	8f 5f       	subi	r24, 0xFF	; 255
    199a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <buttonPressCounter.2668>
    199e:	0b c2       	rjmp	.+1046   	; 0x1db6 <main+0xb7c>
					else {
						buttonPressCounter = 0;
    19a0:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <buttonPressCounter.2668>
						parameterSelectionActivated = false;
    19a4:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <parameterSelectionActivated.2665>
						functionalityChanged = false;
    19a8:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <functionalityChanged.2667>
						displayPointerActivated = false;
    19ac:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						displayPointer = PTR_NULL;
    19b0:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <displayPointer.2663>
    19b4:	00 c2       	rjmp	.+1024   	; 0x1db6 <main+0xb7c>
					display.stateChanged = true;
				}
				break;
				
				case PTR_TYPE_B:
				if (encoderState == CW) {
    19b6:	c1 30       	cpi	r28, 0x01	; 1
    19b8:	f9 f4       	brne	.+62     	; 0x19f8 <main+0x7be>
					display.stateChanged = true;
					functionalityChanged = true;
    19ba:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					switch(FunctionGenerator.output_type_B) {
    19be:	f6 01       	movw	r30, r12
    19c0:	85 85       	ldd	r24, Z+13	; 0x0d
    19c2:	82 30       	cpi	r24, 0x02	; 2
    19c4:	71 f0       	breq	.+28     	; 0x19e2 <main+0x7a8>
    19c6:	18 f4       	brcc	.+6      	; 0x19ce <main+0x794>
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	41 f0       	breq	.+16     	; 0x19dc <main+0x7a2>
    19cc:	12 c0       	rjmp	.+36     	; 0x19f2 <main+0x7b8>
    19ce:	83 30       	cpi	r24, 0x03	; 3
    19d0:	61 f0       	breq	.+24     	; 0x19ea <main+0x7b0>
    19d2:	85 30       	cpi	r24, 0x05	; 5
    19d4:	71 f4       	brne	.+28     	; 0x19f2 <main+0x7b8>
						case OFF: FunctionGenerator.output_type_B = SINE; break;
    19d6:	f6 01       	movw	r30, r12
    19d8:	f5 86       	std	Z+13, r15	; 0x0d
    19da:	ed c1       	rjmp	.+986    	; 0x1db6 <main+0xb7c>
						case SINE: FunctionGenerator.output_type_B = TRIANGLE; break;
    19dc:	f6 01       	movw	r30, r12
    19de:	e5 86       	std	Z+13, r14	; 0x0d
    19e0:	ea c1       	rjmp	.+980    	; 0x1db6 <main+0xb7c>
						case TRIANGLE: FunctionGenerator.output_type_B = SQUARE; break;
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	f6 01       	movw	r30, r12
    19e6:	85 87       	std	Z+13, r24	; 0x0d
    19e8:	e6 c1       	rjmp	.+972    	; 0x1db6 <main+0xb7c>
						case SQUARE: FunctionGenerator.output_type_B = DC; break;
    19ea:	84 e0       	ldi	r24, 0x04	; 4
    19ec:	f6 01       	movw	r30, r12
    19ee:	85 87       	std	Z+13, r24	; 0x0d
    19f0:	e2 c1       	rjmp	.+964    	; 0x1db6 <main+0xb7c>
						case DC: default: FunctionGenerator.output_type_B = OFF; break;
    19f2:	f6 01       	movw	r30, r12
    19f4:	35 86       	std	Z+13, r3	; 0x0d
    19f6:	df c1       	rjmp	.+958    	; 0x1db6 <main+0xb7c>
					}
				}
				else if (encoderState == CCW) {
    19f8:	c2 30       	cpi	r28, 0x02	; 2
    19fa:	f9 f4       	brne	.+62     	; 0x1a3a <main+0x800>
					display.stateChanged = true;
					functionalityChanged = true;
    19fc:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					switch(FunctionGenerator.output_type_B) {
    1a00:	f6 01       	movw	r30, r12
    1a02:	85 85       	ldd	r24, Z+13	; 0x0d
    1a04:	82 30       	cpi	r24, 0x02	; 2
    1a06:	79 f0       	breq	.+30     	; 0x1a26 <main+0x7ec>
    1a08:	18 f4       	brcc	.+6      	; 0x1a10 <main+0x7d6>
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	49 f0       	breq	.+18     	; 0x1a20 <main+0x7e6>
    1a0e:	11 c0       	rjmp	.+34     	; 0x1a32 <main+0x7f8>
    1a10:	83 30       	cpi	r24, 0x03	; 3
    1a12:	61 f0       	breq	.+24     	; 0x1a2c <main+0x7f2>
    1a14:	85 30       	cpi	r24, 0x05	; 5
    1a16:	69 f4       	brne	.+26     	; 0x1a32 <main+0x7f8>
						case OFF: FunctionGenerator.output_type_B = DC; break;
    1a18:	84 e0       	ldi	r24, 0x04	; 4
    1a1a:	f6 01       	movw	r30, r12
    1a1c:	85 87       	std	Z+13, r24	; 0x0d
    1a1e:	cb c1       	rjmp	.+918    	; 0x1db6 <main+0xb7c>
						case SINE: FunctionGenerator.output_type_B = OFF; break;
    1a20:	f6 01       	movw	r30, r12
    1a22:	35 86       	std	Z+13, r3	; 0x0d
    1a24:	c8 c1       	rjmp	.+912    	; 0x1db6 <main+0xb7c>
						case TRIANGLE: FunctionGenerator.output_type_B = SINE; break;
    1a26:	f6 01       	movw	r30, r12
    1a28:	f5 86       	std	Z+13, r15	; 0x0d
    1a2a:	c5 c1       	rjmp	.+906    	; 0x1db6 <main+0xb7c>
						case SQUARE: FunctionGenerator.output_type_B = TRIANGLE; break;
    1a2c:	f6 01       	movw	r30, r12
    1a2e:	e5 86       	std	Z+13, r14	; 0x0d
    1a30:	c2 c1       	rjmp	.+900    	; 0x1db6 <main+0xb7c>
						case DC: default: FunctionGenerator.output_type_B = SQUARE; break;
    1a32:	83 e0       	ldi	r24, 0x03	; 3
    1a34:	f6 01       	movw	r30, r12
    1a36:	85 87       	std	Z+13, r24	; 0x0d
    1a38:	be c1       	rjmp	.+892    	; 0x1db6 <main+0xb7c>
					}
				}
				
				else if (switchState) {
    1a3a:	dd 23       	and	r29, r29
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <main+0x806>
    1a3e:	6d cc       	rjmp	.-1830   	; 0x131a <main+0xe0>
					parameterSelectionActivated = false;
    1a40:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <parameterSelectionActivated.2665>
					functionalityChanged = false;
    1a44:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <functionalityChanged.2667>
					displayPointerActivated = false;
    1a48:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
					display.stateChanged = true;
					displayPointer = PTR_NULL;
    1a4c:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <displayPointer.2663>
    1a50:	b2 c1       	rjmp	.+868    	; 0x1db6 <main+0xb7c>
				}
				
				break;
				
				case PTR_AMP_B:
				if (encoderState == CW) {
    1a52:	c1 30       	cpi	r28, 0x01	; 1
    1a54:	f1 f4       	brne	.+60     	; 0x1a92 <main+0x858>
					display.stateChanged = true;
					functionalityChanged = true;
    1a56:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					if (FunctionGenerator.amplitude_B >= 70) FunctionGenerator.amplitude_B = 70;
    1a5a:	f6 01       	movw	r30, r12
    1a5c:	82 85       	ldd	r24, Z+10	; 0x0a
    1a5e:	93 85       	ldd	r25, Z+11	; 0x0b
    1a60:	86 34       	cpi	r24, 0x46	; 70
    1a62:	91 05       	cpc	r25, r1
    1a64:	28 f0       	brcs	.+10     	; 0x1a70 <main+0x836>
    1a66:	86 e4       	ldi	r24, 0x46	; 70
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	93 87       	std	Z+11, r25	; 0x0b
    1a6c:	82 87       	std	Z+10, r24	; 0x0a
    1a6e:	a3 c1       	rjmp	.+838    	; 0x1db6 <main+0xb7c>
					else {
						switch(buttonPressCounter) {
    1a70:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    1a74:	22 23       	and	r18, r18
    1a76:	19 f0       	breq	.+6      	; 0x1a7e <main+0x844>
    1a78:	21 30       	cpi	r18, 0x01	; 1
    1a7a:	31 f0       	breq	.+12     	; 0x1a88 <main+0x84e>
    1a7c:	41 cc       	rjmp	.-1918   	; 0x1300 <main+0xc6>
							case 0: FunctionGenerator.amplitude_B++; break;
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	f6 01       	movw	r30, r12
    1a82:	93 87       	std	Z+11, r25	; 0x0b
    1a84:	82 87       	std	Z+10, r24	; 0x0a
    1a86:	97 c1       	rjmp	.+814    	; 0x1db6 <main+0xb7c>
							case 1: FunctionGenerator.amplitude_B += 10; break;
    1a88:	0a 96       	adiw	r24, 0x0a	; 10
    1a8a:	f6 01       	movw	r30, r12
    1a8c:	93 87       	std	Z+11, r25	; 0x0b
    1a8e:	82 87       	std	Z+10, r24	; 0x0a
    1a90:	92 c1       	rjmp	.+804    	; 0x1db6 <main+0xb7c>
						}
					}
				}
				else if (encoderState == CCW) {
    1a92:	c2 30       	cpi	r28, 0x02	; 2
    1a94:	c9 f4       	brne	.+50     	; 0x1ac8 <main+0x88e>
					display.stateChanged = true;
					functionalityChanged = true;
    1a96:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					if (FunctionGenerator.amplitude_B <= 0) FunctionGenerator.amplitude_B = 0;
    1a9a:	f6 01       	movw	r30, r12
    1a9c:	82 85       	ldd	r24, Z+10	; 0x0a
    1a9e:	93 85       	ldd	r25, Z+11	; 0x0b
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <main+0x86c>
    1aa4:	88 c1       	rjmp	.+784    	; 0x1db6 <main+0xb7c>
					else {
						switch(buttonPressCounter) {
    1aa6:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    1aaa:	22 23       	and	r18, r18
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <main+0x87a>
    1aae:	21 30       	cpi	r18, 0x01	; 1
    1ab0:	31 f0       	breq	.+12     	; 0x1abe <main+0x884>
    1ab2:	28 cc       	rjmp	.-1968   	; 0x1304 <main+0xca>
							case 0: FunctionGenerator.amplitude_B--; break;
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f6 01       	movw	r30, r12
    1ab8:	93 87       	std	Z+11, r25	; 0x0b
    1aba:	82 87       	std	Z+10, r24	; 0x0a
    1abc:	7c c1       	rjmp	.+760    	; 0x1db6 <main+0xb7c>
							case 1: FunctionGenerator.amplitude_B -= 10; break;
    1abe:	0a 97       	sbiw	r24, 0x0a	; 10
    1ac0:	f6 01       	movw	r30, r12
    1ac2:	93 87       	std	Z+11, r25	; 0x0b
    1ac4:	82 87       	std	Z+10, r24	; 0x0a
    1ac6:	77 c1       	rjmp	.+750    	; 0x1db6 <main+0xb7c>
						}
					}
				}
				
				else if (switchState) {
    1ac8:	dd 23       	and	r29, r29
    1aca:	09 f4       	brne	.+2      	; 0x1ace <main+0x894>
    1acc:	26 cc       	rjmp	.-1972   	; 0x131a <main+0xe0>
					if (buttonPressCounter < 1) buttonPressCounter++;
    1ace:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    1ad2:	81 11       	cpse	r24, r1
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <main+0x8a2>
    1ad6:	f0 92 c4 01 	sts	0x01C4, r15	; 0x8001c4 <buttonPressCounter.2668>
    1ada:	6d c1       	rjmp	.+730    	; 0x1db6 <main+0xb7c>
					else {
						buttonPressCounter = 0;
    1adc:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <buttonPressCounter.2668>
						parameterSelectionActivated = false;
    1ae0:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <parameterSelectionActivated.2665>
						functionalityChanged = false;
    1ae4:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <functionalityChanged.2667>
						displayPointerActivated = false;
    1ae8:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						displayPointer = PTR_NULL;
    1aec:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <displayPointer.2663>
    1af0:	62 c1       	rjmp	.+708    	; 0x1db6 <main+0xb7c>
				}
				
				break;

				case PTR_FREQ_B:
				if (encoderState == CW) {
    1af2:	c1 30       	cpi	r28, 0x01	; 1
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <main+0x8be>
    1af6:	5e c0       	rjmp	.+188    	; 0x1bb4 <main+0x97a>
					display.stateChanged = true;
					functionalityChanged = true;
    1af8:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					if (FunctionGenerator.frequency_B >= 1000000) FunctionGenerator.frequency_B = 1000000;
    1afc:	f6 01       	movw	r30, r12
    1afe:	84 81       	ldd	r24, Z+4	; 0x04
    1b00:	95 81       	ldd	r25, Z+5	; 0x05
    1b02:	a6 81       	ldd	r26, Z+6	; 0x06
    1b04:	b7 81       	ldd	r27, Z+7	; 0x07
    1b06:	80 34       	cpi	r24, 0x40	; 64
    1b08:	f2 e4       	ldi	r31, 0x42	; 66
    1b0a:	9f 07       	cpc	r25, r31
    1b0c:	ff e0       	ldi	r31, 0x0F	; 15
    1b0e:	af 07       	cpc	r26, r31
    1b10:	b1 05       	cpc	r27, r1
    1b12:	30 f0       	brcs	.+12     	; 0x1b20 <main+0x8e6>
    1b14:	f6 01       	movw	r30, r12
    1b16:	44 82       	std	Z+4, r4	; 0x04
    1b18:	55 82       	std	Z+5, r5	; 0x05
    1b1a:	66 82       	std	Z+6, r6	; 0x06
    1b1c:	77 82       	std	Z+7, r7	; 0x07
    1b1e:	4b c1       	rjmp	.+662    	; 0x1db6 <main+0xb7c>
					else {
						switch(buttonPressCounter) {
    1b20:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    1b24:	22 30       	cpi	r18, 0x02	; 2
    1b26:	f1 f0       	breq	.+60     	; 0x1b64 <main+0x92a>
    1b28:	28 f4       	brcc	.+10     	; 0x1b34 <main+0x8fa>
    1b2a:	22 23       	and	r18, r18
    1b2c:	49 f0       	breq	.+18     	; 0x1b40 <main+0x906>
    1b2e:	21 30       	cpi	r18, 0x01	; 1
    1b30:	81 f0       	breq	.+32     	; 0x1b52 <main+0x918>
    1b32:	ea cb       	rjmp	.-2092   	; 0x1308 <main+0xce>
    1b34:	24 30       	cpi	r18, 0x04	; 4
    1b36:	51 f1       	breq	.+84     	; 0x1b8c <main+0x952>
    1b38:	f8 f0       	brcs	.+62     	; 0x1b78 <main+0x93e>
    1b3a:	25 30       	cpi	r18, 0x05	; 5
    1b3c:	89 f1       	breq	.+98     	; 0x1ba0 <main+0x966>
    1b3e:	e4 cb       	rjmp	.-2104   	; 0x1308 <main+0xce>
							case 0: FunctionGenerator.frequency_B++; break;
    1b40:	01 96       	adiw	r24, 0x01	; 1
    1b42:	a1 1d       	adc	r26, r1
    1b44:	b1 1d       	adc	r27, r1
    1b46:	f6 01       	movw	r30, r12
    1b48:	84 83       	std	Z+4, r24	; 0x04
    1b4a:	95 83       	std	Z+5, r25	; 0x05
    1b4c:	a6 83       	std	Z+6, r26	; 0x06
    1b4e:	b7 83       	std	Z+7, r27	; 0x07
    1b50:	32 c1       	rjmp	.+612    	; 0x1db6 <main+0xb7c>
							case 1: FunctionGenerator.frequency_B += 10; break;
    1b52:	0a 96       	adiw	r24, 0x0a	; 10
    1b54:	a1 1d       	adc	r26, r1
    1b56:	b1 1d       	adc	r27, r1
    1b58:	f6 01       	movw	r30, r12
    1b5a:	84 83       	std	Z+4, r24	; 0x04
    1b5c:	95 83       	std	Z+5, r25	; 0x05
    1b5e:	a6 83       	std	Z+6, r26	; 0x06
    1b60:	b7 83       	std	Z+7, r27	; 0x07
    1b62:	29 c1       	rjmp	.+594    	; 0x1db6 <main+0xb7c>
							case 2: FunctionGenerator.frequency_B += 100; break;
    1b64:	8c 59       	subi	r24, 0x9C	; 156
    1b66:	9f 4f       	sbci	r25, 0xFF	; 255
    1b68:	af 4f       	sbci	r26, 0xFF	; 255
    1b6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b6c:	f6 01       	movw	r30, r12
    1b6e:	84 83       	std	Z+4, r24	; 0x04
    1b70:	95 83       	std	Z+5, r25	; 0x05
    1b72:	a6 83       	std	Z+6, r26	; 0x06
    1b74:	b7 83       	std	Z+7, r27	; 0x07
    1b76:	1f c1       	rjmp	.+574    	; 0x1db6 <main+0xb7c>
							case 3: FunctionGenerator.frequency_B += 1000; break;
    1b78:	88 51       	subi	r24, 0x18	; 24
    1b7a:	9c 4f       	sbci	r25, 0xFC	; 252
    1b7c:	af 4f       	sbci	r26, 0xFF	; 255
    1b7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b80:	f6 01       	movw	r30, r12
    1b82:	84 83       	std	Z+4, r24	; 0x04
    1b84:	95 83       	std	Z+5, r25	; 0x05
    1b86:	a6 83       	std	Z+6, r26	; 0x06
    1b88:	b7 83       	std	Z+7, r27	; 0x07
    1b8a:	15 c1       	rjmp	.+554    	; 0x1db6 <main+0xb7c>
							case 4: FunctionGenerator.frequency_B += 10000; break;
    1b8c:	80 5f       	subi	r24, 0xF0	; 240
    1b8e:	98 4d       	sbci	r25, 0xD8	; 216
    1b90:	af 4f       	sbci	r26, 0xFF	; 255
    1b92:	bf 4f       	sbci	r27, 0xFF	; 255
    1b94:	f6 01       	movw	r30, r12
    1b96:	84 83       	std	Z+4, r24	; 0x04
    1b98:	95 83       	std	Z+5, r25	; 0x05
    1b9a:	a6 83       	std	Z+6, r26	; 0x06
    1b9c:	b7 83       	std	Z+7, r27	; 0x07
    1b9e:	0b c1       	rjmp	.+534    	; 0x1db6 <main+0xb7c>
							case 5: FunctionGenerator.frequency_B += 100000; break;
    1ba0:	80 56       	subi	r24, 0x60	; 96
    1ba2:	99 47       	sbci	r25, 0x79	; 121
    1ba4:	ae 4f       	sbci	r26, 0xFE	; 254
    1ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba8:	f6 01       	movw	r30, r12
    1baa:	84 83       	std	Z+4, r24	; 0x04
    1bac:	95 83       	std	Z+5, r25	; 0x05
    1bae:	a6 83       	std	Z+6, r26	; 0x06
    1bb0:	b7 83       	std	Z+7, r27	; 0x07
    1bb2:	01 c1       	rjmp	.+514    	; 0x1db6 <main+0xb7c>
						}
					}
				}
				else if (encoderState == CCW) {
    1bb4:	c2 30       	cpi	r28, 0x02	; 2
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <main+0x980>
    1bb8:	56 c0       	rjmp	.+172    	; 0x1c66 <main+0xa2c>
					display.stateChanged = true;
					functionalityChanged = true;
    1bba:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					if (FunctionGenerator.frequency_B <= 0) FunctionGenerator.frequency_B = 0;
    1bbe:	f6 01       	movw	r30, r12
    1bc0:	84 81       	ldd	r24, Z+4	; 0x04
    1bc2:	95 81       	ldd	r25, Z+5	; 0x05
    1bc4:	a6 81       	ldd	r26, Z+6	; 0x06
    1bc6:	b7 81       	ldd	r27, Z+7	; 0x07
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	a1 05       	cpc	r26, r1
    1bcc:	b1 05       	cpc	r27, r1
    1bce:	09 f4       	brne	.+2      	; 0x1bd2 <main+0x998>
    1bd0:	f2 c0       	rjmp	.+484    	; 0x1db6 <main+0xb7c>
					else {
						switch(buttonPressCounter) {
    1bd2:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    1bd6:	22 30       	cpi	r18, 0x02	; 2
    1bd8:	f1 f0       	breq	.+60     	; 0x1c16 <main+0x9dc>
    1bda:	28 f4       	brcc	.+10     	; 0x1be6 <main+0x9ac>
    1bdc:	22 23       	and	r18, r18
    1bde:	49 f0       	breq	.+18     	; 0x1bf2 <main+0x9b8>
    1be0:	21 30       	cpi	r18, 0x01	; 1
    1be2:	81 f0       	breq	.+32     	; 0x1c04 <main+0x9ca>
    1be4:	93 cb       	rjmp	.-2266   	; 0x130c <main+0xd2>
    1be6:	24 30       	cpi	r18, 0x04	; 4
    1be8:	51 f1       	breq	.+84     	; 0x1c3e <main+0xa04>
    1bea:	f8 f0       	brcs	.+62     	; 0x1c2a <main+0x9f0>
    1bec:	25 30       	cpi	r18, 0x05	; 5
    1bee:	89 f1       	breq	.+98     	; 0x1c52 <main+0xa18>
    1bf0:	8d cb       	rjmp	.-2278   	; 0x130c <main+0xd2>
							case 0: FunctionGenerator.frequency_B--; break;
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	a1 09       	sbc	r26, r1
    1bf6:	b1 09       	sbc	r27, r1
    1bf8:	f6 01       	movw	r30, r12
    1bfa:	84 83       	std	Z+4, r24	; 0x04
    1bfc:	95 83       	std	Z+5, r25	; 0x05
    1bfe:	a6 83       	std	Z+6, r26	; 0x06
    1c00:	b7 83       	std	Z+7, r27	; 0x07
    1c02:	d9 c0       	rjmp	.+434    	; 0x1db6 <main+0xb7c>
							case 1: FunctionGenerator.frequency_B -= 10; break;
    1c04:	0a 97       	sbiw	r24, 0x0a	; 10
    1c06:	a1 09       	sbc	r26, r1
    1c08:	b1 09       	sbc	r27, r1
    1c0a:	f6 01       	movw	r30, r12
    1c0c:	84 83       	std	Z+4, r24	; 0x04
    1c0e:	95 83       	std	Z+5, r25	; 0x05
    1c10:	a6 83       	std	Z+6, r26	; 0x06
    1c12:	b7 83       	std	Z+7, r27	; 0x07
    1c14:	d0 c0       	rjmp	.+416    	; 0x1db6 <main+0xb7c>
							case 2: FunctionGenerator.frequency_B -= 100; break;
    1c16:	84 56       	subi	r24, 0x64	; 100
    1c18:	91 09       	sbc	r25, r1
    1c1a:	a1 09       	sbc	r26, r1
    1c1c:	b1 09       	sbc	r27, r1
    1c1e:	f6 01       	movw	r30, r12
    1c20:	84 83       	std	Z+4, r24	; 0x04
    1c22:	95 83       	std	Z+5, r25	; 0x05
    1c24:	a6 83       	std	Z+6, r26	; 0x06
    1c26:	b7 83       	std	Z+7, r27	; 0x07
    1c28:	c6 c0       	rjmp	.+396    	; 0x1db6 <main+0xb7c>
							case 3: FunctionGenerator.frequency_B -= 1000; break;
    1c2a:	88 5e       	subi	r24, 0xE8	; 232
    1c2c:	93 40       	sbci	r25, 0x03	; 3
    1c2e:	a1 09       	sbc	r26, r1
    1c30:	b1 09       	sbc	r27, r1
    1c32:	f6 01       	movw	r30, r12
    1c34:	84 83       	std	Z+4, r24	; 0x04
    1c36:	95 83       	std	Z+5, r25	; 0x05
    1c38:	a6 83       	std	Z+6, r26	; 0x06
    1c3a:	b7 83       	std	Z+7, r27	; 0x07
    1c3c:	bc c0       	rjmp	.+376    	; 0x1db6 <main+0xb7c>
							case 4: FunctionGenerator.frequency_B -= 10000; break;
    1c3e:	80 51       	subi	r24, 0x10	; 16
    1c40:	97 42       	sbci	r25, 0x27	; 39
    1c42:	a1 09       	sbc	r26, r1
    1c44:	b1 09       	sbc	r27, r1
    1c46:	f6 01       	movw	r30, r12
    1c48:	84 83       	std	Z+4, r24	; 0x04
    1c4a:	95 83       	std	Z+5, r25	; 0x05
    1c4c:	a6 83       	std	Z+6, r26	; 0x06
    1c4e:	b7 83       	std	Z+7, r27	; 0x07
    1c50:	b2 c0       	rjmp	.+356    	; 0x1db6 <main+0xb7c>
							case 5: FunctionGenerator.frequency_B -= 100000; break;
    1c52:	80 5a       	subi	r24, 0xA0	; 160
    1c54:	96 48       	sbci	r25, 0x86	; 134
    1c56:	a1 40       	sbci	r26, 0x01	; 1
    1c58:	b1 09       	sbc	r27, r1
    1c5a:	f6 01       	movw	r30, r12
    1c5c:	84 83       	std	Z+4, r24	; 0x04
    1c5e:	95 83       	std	Z+5, r25	; 0x05
    1c60:	a6 83       	std	Z+6, r26	; 0x06
    1c62:	b7 83       	std	Z+7, r27	; 0x07
    1c64:	a8 c0       	rjmp	.+336    	; 0x1db6 <main+0xb7c>
						}
					}
				}
					
				else if (switchState) {
    1c66:	dd 23       	and	r29, r29
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <main+0xa32>
    1c6a:	57 cb       	rjmp	.-2386   	; 0x131a <main+0xe0>
					if (buttonPressCounter < 5) buttonPressCounter++;
    1c6c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    1c70:	85 30       	cpi	r24, 0x05	; 5
    1c72:	20 f4       	brcc	.+8      	; 0x1c7c <main+0xa42>
    1c74:	8f 5f       	subi	r24, 0xFF	; 255
    1c76:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <buttonPressCounter.2668>
    1c7a:	9d c0       	rjmp	.+314    	; 0x1db6 <main+0xb7c>
					else {
						buttonPressCounter = 0;
    1c7c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <buttonPressCounter.2668>
						parameterSelectionActivated = false;
    1c80:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <parameterSelectionActivated.2665>
						functionalityChanged = false;
    1c84:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <functionalityChanged.2667>
						displayPointerActivated = false;
    1c88:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						displayPointer = PTR_NULL;
    1c8c:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <displayPointer.2663>
    1c90:	92 c0       	rjmp	.+292    	; 0x1db6 <main+0xb7c>
					display.stateChanged = true;
				}
				break;
					
				case PTR_BIAS_B:
				if (encoderState == CW) {
    1c92:	c1 30       	cpi	r28, 0x01	; 1
    1c94:	59 f5       	brne	.+86     	; 0x1cec <main+0xab2>
					display.stateChanged = true;
					functionalityChanged = true;
    1c96:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					if (FunctionGenerator.bias_B_sign == POSITIVE) {
    1c9a:	f6 01       	movw	r30, r12
    1c9c:	83 89       	ldd	r24, Z+19	; 0x13
    1c9e:	81 11       	cpse	r24, r1
    1ca0:	22 c0       	rjmp	.+68     	; 0x1ce6 <main+0xaac>
						if (FunctionGenerator.bias_B >= 330) FunctionGenerator.bias_B = 330;
    1ca2:	80 89       	ldd	r24, Z+16	; 0x10
    1ca4:	91 89       	ldd	r25, Z+17	; 0x11
    1ca6:	8a 34       	cpi	r24, 0x4A	; 74
    1ca8:	f1 e0       	ldi	r31, 0x01	; 1
    1caa:	9f 07       	cpc	r25, r31
    1cac:	20 f0       	brcs	.+8      	; 0x1cb6 <main+0xa7c>
    1cae:	f6 01       	movw	r30, r12
    1cb0:	91 8a       	std	Z+17, r9	; 0x11
    1cb2:	80 8a       	std	Z+16, r8	; 0x10
    1cb4:	80 c0       	rjmp	.+256    	; 0x1db6 <main+0xb7c>
						else {
							switch(buttonPressCounter) {
    1cb6:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    1cba:	21 30       	cpi	r18, 0x01	; 1
    1cbc:	49 f0       	breq	.+18     	; 0x1cd0 <main+0xa96>
    1cbe:	18 f0       	brcs	.+6      	; 0x1cc6 <main+0xa8c>
    1cc0:	22 30       	cpi	r18, 0x02	; 2
    1cc2:	59 f0       	breq	.+22     	; 0x1cda <main+0xaa0>
    1cc4:	25 cb       	rjmp	.-2486   	; 0x1310 <main+0xd6>
								case 0: FunctionGenerator.bias_B++; break;
    1cc6:	01 96       	adiw	r24, 0x01	; 1
    1cc8:	f6 01       	movw	r30, r12
    1cca:	91 8b       	std	Z+17, r25	; 0x11
    1ccc:	80 8b       	std	Z+16, r24	; 0x10
    1cce:	73 c0       	rjmp	.+230    	; 0x1db6 <main+0xb7c>
								case 1: FunctionGenerator.bias_B += 10; break;
    1cd0:	0a 96       	adiw	r24, 0x0a	; 10
    1cd2:	f6 01       	movw	r30, r12
    1cd4:	91 8b       	std	Z+17, r25	; 0x11
    1cd6:	80 8b       	std	Z+16, r24	; 0x10
    1cd8:	6e c0       	rjmp	.+220    	; 0x1db6 <main+0xb7c>
								case 2: FunctionGenerator.bias_B += 100; break;
    1cda:	8c 59       	subi	r24, 0x9C	; 156
    1cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cde:	f6 01       	movw	r30, r12
    1ce0:	91 8b       	std	Z+17, r25	; 0x11
    1ce2:	80 8b       	std	Z+16, r24	; 0x10
    1ce4:	68 c0       	rjmp	.+208    	; 0x1db6 <main+0xb7c>
							}
						}
					}
					else if (FunctionGenerator.bias_B_sign == NEGATIVE) {
						if (FunctionGenerator.bias_B >= 0) FunctionGenerator.bias_B_sign = POSITIVE;
    1ce6:	f6 01       	movw	r30, r12
    1ce8:	13 8a       	std	Z+19, r1	; 0x13
    1cea:	65 c0       	rjmp	.+202    	; 0x1db6 <main+0xb7c>
							}
						}
					}
				}
							
				else if (encoderState == CCW) {
    1cec:	c2 30       	cpi	r28, 0x02	; 2
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <main+0xab8>
    1cf0:	45 c0       	rjmp	.+138    	; 0x1d7c <main+0xb42>
					display.stateChanged = true;
					functionalityChanged = true;
    1cf2:	f0 92 c7 01 	sts	0x01C7, r15	; 0x8001c7 <functionalityChanged.2667>
					if (FunctionGenerator.bias_B_sign == NEGATIVE) {
    1cf6:	f6 01       	movw	r30, r12
    1cf8:	83 89       	ldd	r24, Z+19	; 0x13
    1cfa:	88 23       	and	r24, r24
    1cfc:	11 f1       	breq	.+68     	; 0x1d42 <main+0xb08>
						if (FunctionGenerator.bias_B >= 330) FunctionGenerator.bias_B = 330;
    1cfe:	80 89       	ldd	r24, Z+16	; 0x10
    1d00:	91 89       	ldd	r25, Z+17	; 0x11
    1d02:	8a 34       	cpi	r24, 0x4A	; 74
    1d04:	f1 e0       	ldi	r31, 0x01	; 1
    1d06:	9f 07       	cpc	r25, r31
    1d08:	20 f0       	brcs	.+8      	; 0x1d12 <main+0xad8>
    1d0a:	f6 01       	movw	r30, r12
    1d0c:	91 8a       	std	Z+17, r9	; 0x11
    1d0e:	80 8a       	std	Z+16, r8	; 0x10
    1d10:	52 c0       	rjmp	.+164    	; 0x1db6 <main+0xb7c>
						else {
							switch(buttonPressCounter) {
    1d12:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    1d16:	21 30       	cpi	r18, 0x01	; 1
    1d18:	49 f0       	breq	.+18     	; 0x1d2c <main+0xaf2>
    1d1a:	18 f0       	brcs	.+6      	; 0x1d22 <main+0xae8>
    1d1c:	22 30       	cpi	r18, 0x02	; 2
    1d1e:	59 f0       	breq	.+22     	; 0x1d36 <main+0xafc>
    1d20:	f9 ca       	rjmp	.-2574   	; 0x1314 <main+0xda>
								case 0: FunctionGenerator.bias_B++; break;
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	f6 01       	movw	r30, r12
    1d26:	91 8b       	std	Z+17, r25	; 0x11
    1d28:	80 8b       	std	Z+16, r24	; 0x10
    1d2a:	45 c0       	rjmp	.+138    	; 0x1db6 <main+0xb7c>
								case 1: FunctionGenerator.bias_B += 10; break;
    1d2c:	0a 96       	adiw	r24, 0x0a	; 10
    1d2e:	f6 01       	movw	r30, r12
    1d30:	91 8b       	std	Z+17, r25	; 0x11
    1d32:	80 8b       	std	Z+16, r24	; 0x10
    1d34:	40 c0       	rjmp	.+128    	; 0x1db6 <main+0xb7c>
								case 2: FunctionGenerator.bias_B += 100; break;
    1d36:	8c 59       	subi	r24, 0x9C	; 156
    1d38:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3a:	f6 01       	movw	r30, r12
    1d3c:	91 8b       	std	Z+17, r25	; 0x11
    1d3e:	80 8b       	std	Z+16, r24	; 0x10
    1d40:	3a c0       	rjmp	.+116    	; 0x1db6 <main+0xb7c>
							}
						}
					}
					else if (FunctionGenerator.bias_B_sign == POSITIVE) {
						if (FunctionGenerator.bias_B <= 0) FunctionGenerator.bias_B_sign = POSITIVE;
    1d42:	f6 01       	movw	r30, r12
    1d44:	80 89       	ldd	r24, Z+16	; 0x10
    1d46:	91 89       	ldd	r25, Z+17	; 0x11
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	a9 f1       	breq	.+106    	; 0x1db6 <main+0xb7c>
						else  {
							switch(buttonPressCounter) {
    1d4c:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    1d50:	21 30       	cpi	r18, 0x01	; 1
    1d52:	49 f0       	breq	.+18     	; 0x1d66 <main+0xb2c>
    1d54:	18 f0       	brcs	.+6      	; 0x1d5c <main+0xb22>
    1d56:	22 30       	cpi	r18, 0x02	; 2
    1d58:	59 f0       	breq	.+22     	; 0x1d70 <main+0xb36>
    1d5a:	de ca       	rjmp	.-2628   	; 0x1318 <main+0xde>
								case 0: FunctionGenerator.bias_B--; break;
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f6 01       	movw	r30, r12
    1d60:	91 8b       	std	Z+17, r25	; 0x11
    1d62:	80 8b       	std	Z+16, r24	; 0x10
    1d64:	28 c0       	rjmp	.+80     	; 0x1db6 <main+0xb7c>
								case 1: FunctionGenerator.bias_B -= 10; break;
    1d66:	0a 97       	sbiw	r24, 0x0a	; 10
    1d68:	f6 01       	movw	r30, r12
    1d6a:	91 8b       	std	Z+17, r25	; 0x11
    1d6c:	80 8b       	std	Z+16, r24	; 0x10
    1d6e:	23 c0       	rjmp	.+70     	; 0x1db6 <main+0xb7c>
								case 2: FunctionGenerator.bias_B -= 100; break;
    1d70:	84 56       	subi	r24, 0x64	; 100
    1d72:	91 09       	sbc	r25, r1
    1d74:	f6 01       	movw	r30, r12
    1d76:	91 8b       	std	Z+17, r25	; 0x11
    1d78:	80 8b       	std	Z+16, r24	; 0x10
    1d7a:	1d c0       	rjmp	.+58     	; 0x1db6 <main+0xb7c>
							}
						}
					}
				}
						
				else if (switchState) {
    1d7c:	dd 23       	and	r29, r29
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <main+0xb48>
    1d80:	cc ca       	rjmp	.-2664   	; 0x131a <main+0xe0>
					if (buttonPressCounter < 2) buttonPressCounter++;
    1d82:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <buttonPressCounter.2668>
    1d86:	82 30       	cpi	r24, 0x02	; 2
    1d88:	20 f4       	brcc	.+8      	; 0x1d92 <main+0xb58>
    1d8a:	8f 5f       	subi	r24, 0xFF	; 255
    1d8c:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <buttonPressCounter.2668>
    1d90:	12 c0       	rjmp	.+36     	; 0x1db6 <main+0xb7c>
					else {
						buttonPressCounter = 0;
    1d92:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <buttonPressCounter.2668>
						parameterSelectionActivated = false;
    1d96:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <parameterSelectionActivated.2665>
						functionalityChanged = false;
    1d9a:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <functionalityChanged.2667>
						displayPointerActivated = false;
    1d9e:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <displayPointerActivated.2666>
						displayPointer = PTR_NULL;
    1da2:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <displayPointer.2663>
    1da6:	07 c0       	rjmp	.+14     	; 0x1db6 <main+0xb7c>
		
		if (!displayPointerActivated && !parameterSelectionActivated) {
			switch(display.mainScreen) {
				case MAIN_SCREEN_A:
					if (encoderState == CW) {
						display.mainScreen = MAIN_SCREEN_B;
    1da8:	0f 2d       	mov	r16, r15
    1daa:	05 c0       	rjmp	.+10     	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					
					else if (encoderState == CCW) {
						display.mainScreen = PARAMS_SCREEN;
    1dac:	0e 2d       	mov	r16, r14
    1dae:	03 c0       	rjmp	.+6      	; 0x1db6 <main+0xb7c>
					}
					break;
					
				case MAIN_SCREEN_B:
					if (encoderState == CW) {
						display.mainScreen = PARAMS_SCREEN;
    1db0:	0e 2d       	mov	r16, r14
    1db2:	01 c0       	rjmp	.+2      	; 0x1db6 <main+0xb7c>
						display.stateChanged = true;
					}
					
					else if (encoderState == CCW) {
						display.mainScreen = MAIN_SCREEN_A;
    1db4:	00 e0       	ldi	r16, 0x00	; 0
	handleLCD(display.mainScreen, PTR_NULL, false, false);
	_delay_ms(1500);
	
	while(1) {
		
		encoderState = pollEncoder();
    1db6:	0e 94 cd 02 	call	0x59a	; 0x59a <pollEncoder>
    1dba:	c8 2f       	mov	r28, r24
		switchState = pollSwitch();
    1dbc:	0e 94 c5 02 	call	0x58a	; 0x58a <pollSwitch>
    1dc0:	d8 2f       	mov	r29, r24
    1dc2:	b3 ca       	rjmp	.-2714   	; 0x132a <main+0xf0>

00001dc4 <SPI_write_16bit>:
#include "Headers\main.h"
#include "Headers\SPIMaster.h"

void SPI_write_16bit(uint8_t address_in, uint8_t data_in, enum Device device) {
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
	switch(device) {
    1dc8:	04 2f       	mov	r16, r20
    1dca:	10 e0       	ldi	r17, 0x00	; 0
    1dcc:	f8 01       	movw	r30, r16
    1dce:	31 97       	sbiw	r30, 0x01	; 1
    1dd0:	e7 30       	cpi	r30, 0x07	; 7
    1dd2:	f1 05       	cpc	r31, r1
    1dd4:	88 f4       	brcc	.+34     	; 0x1df8 <SPI_write_16bit+0x34>
    1dd6:	e9 5a       	subi	r30, 0xA9	; 169
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__tablejump2__>
		case DACA: SPI_CE_PORT &= ~DACA_NCE; break;
    1dde:	aa 98       	cbi	0x15, 2	; 21
    1de0:	0b c0       	rjmp	.+22     	; 0x1df8 <SPI_write_16bit+0x34>
		case DACB: SPI_CE_PORT &= ~DACB_NCE; break;
    1de2:	ab 98       	cbi	0x15, 3	; 21
    1de4:	09 c0       	rjmp	.+18     	; 0x1df8 <SPI_write_16bit+0x34>
		case DACA_BIAS: SPI_CE_PORT &= ~DACA_BIAS_NCE; break;
    1de6:	ac 98       	cbi	0x15, 4	; 21
    1de8:	07 c0       	rjmp	.+14     	; 0x1df8 <SPI_write_16bit+0x34>
		case DACB_BIAS: SPI_CE_PORT &= ~DACB_BIAS_NCE; break;
    1dea:	ad 98       	cbi	0x15, 5	; 21
    1dec:	05 c0       	rjmp	.+10     	; 0x1df8 <SPI_write_16bit+0x34>
		case FG0: SPI_CE_PORT &= ~FG0_NCE; break;
    1dee:	ae 98       	cbi	0x15, 6	; 21
    1df0:	03 c0       	rjmp	.+6      	; 0x1df8 <SPI_write_16bit+0x34>
		case FG1: SPI_CE_PORT &= ~FG1_NCE; break;
    1df2:	af 98       	cbi	0x15, 7	; 21
    1df4:	01 c0       	rjmp	.+2      	; 0x1df8 <SPI_write_16bit+0x34>
		case LCD_POT: LCD_POT_PORT &= ~POT_LCD_NCE; break;
    1df6:	dc 98       	cbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1df8:	98 e2       	ldi	r25, 0x28	; 40
    1dfa:	9a 95       	dec	r25
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <SPI_write_16bit+0x36>
		default: break;
	}
	_delay_us(15);
	SPDR = address_in;
    1dfe:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
    1e00:	77 9b       	sbis	0x0e, 7	; 14
    1e02:	fe cf       	rjmp	.-4      	; 0x1e00 <SPI_write_16bit+0x3c>
    1e04:	88 e2       	ldi	r24, 0x28	; 40
    1e06:	8a 95       	dec	r24
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <SPI_write_16bit+0x42>
	_delay_us(15);
	SPDR = data_in;
    1e0a:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)));
    1e0c:	77 9b       	sbis	0x0e, 7	; 14
    1e0e:	fe cf       	rjmp	.-4      	; 0x1e0c <SPI_write_16bit+0x48>
    1e10:	98 e2       	ldi	r25, 0x28	; 40
    1e12:	9a 95       	dec	r25
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <SPI_write_16bit+0x4e>
	_delay_us(15);
	switch(device) {
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	fa 01       	movw	r30, r20
    1e1a:	31 97       	sbiw	r30, 0x01	; 1
    1e1c:	e7 30       	cpi	r30, 0x07	; 7
    1e1e:	f1 05       	cpc	r31, r1
    1e20:	88 f4       	brcc	.+34     	; 0x1e44 <SPI_write_16bit+0x80>
    1e22:	e2 5a       	subi	r30, 0xA2	; 162
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__tablejump2__>
		case DACA: SPI_CE_PORT |= DACA_NCE; break;
    1e2a:	aa 9a       	sbi	0x15, 2	; 21
    1e2c:	0b c0       	rjmp	.+22     	; 0x1e44 <SPI_write_16bit+0x80>
		case DACB: SPI_CE_PORT |= DACB_NCE; break;
    1e2e:	ab 9a       	sbi	0x15, 3	; 21
    1e30:	09 c0       	rjmp	.+18     	; 0x1e44 <SPI_write_16bit+0x80>
		case DACA_BIAS: SPI_CE_PORT |= DACA_BIAS_NCE; break;
    1e32:	ac 9a       	sbi	0x15, 4	; 21
    1e34:	07 c0       	rjmp	.+14     	; 0x1e44 <SPI_write_16bit+0x80>
		case DACB_BIAS: SPI_CE_PORT |= DACB_BIAS_NCE; break;
    1e36:	ad 9a       	sbi	0x15, 5	; 21
    1e38:	05 c0       	rjmp	.+10     	; 0x1e44 <SPI_write_16bit+0x80>
		case FG0: SPI_CE_PORT |= FG0_NCE; break;
    1e3a:	ae 9a       	sbi	0x15, 6	; 21
    1e3c:	03 c0       	rjmp	.+6      	; 0x1e44 <SPI_write_16bit+0x80>
		case FG1: SPI_CE_PORT |= FG1_NCE; break;
    1e3e:	af 9a       	sbi	0x15, 7	; 21
    1e40:	01 c0       	rjmp	.+2      	; 0x1e44 <SPI_write_16bit+0x80>
		case LCD_POT: LCD_POT_PORT |= POT_LCD_NCE; break;
    1e42:	dc 9a       	sbi	0x1b, 4	; 27
		default: break;
	}
}
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	08 95       	ret

00001e4a <Init_SPI_AD9834>:


void Init_SPI_AD9834(void) {
	SPI_CE_PORT |= DACA_NCE | DACB_NCE | DACA_BIAS_NCE | DACB_BIAS_NCE | FG0_NCE | FG1_NCE;
    1e4a:	85 b3       	in	r24, 0x15	; 21
    1e4c:	8c 6f       	ori	r24, 0xFC	; 252
    1e4e:	85 bb       	out	0x15, r24	; 21
	LCD_POT_PORT |= POT_LCD_NCE;
    1e50:	dc 9a       	sbi	0x1b, 4	; 27
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPOL);
    1e52:	89 e5       	ldi	r24, 0x59	; 89
    1e54:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	8e b9       	out	0x0e, r24	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e5a:	8f e1       	ldi	r24, 0x1F	; 31
    1e5c:	9e e4       	ldi	r25, 0x4E	; 78
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <Init_SPI_AD9834+0x14>
    1e62:	00 c0       	rjmp	.+0      	; 0x1e64 <Init_SPI_AD9834+0x1a>
    1e64:	00 00       	nop
    1e66:	08 95       	ret

00001e68 <Init_SPI_All>:
	_delay_ms(10);
}

void Init_SPI_All(void) {
	SPI_CE_PORT |= DACA_NCE | DACB_NCE | DACA_BIAS_NCE | DACB_BIAS_NCE | FG0_NCE | FG1_NCE;
    1e68:	85 b3       	in	r24, 0x15	; 21
    1e6a:	8c 6f       	ori	r24, 0xFC	; 252
    1e6c:	85 bb       	out	0x15, r24	; 21
	LCD_POT_PORT |= POT_LCD_NCE;
    1e6e:	dc 9a       	sbi	0x1b, 4	; 27
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1e70:	81 e5       	ldi	r24, 0x51	; 81
    1e72:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	8e b9       	out	0x0e, r24	; 14
    1e78:	8f e1       	ldi	r24, 0x1F	; 31
    1e7a:	9e e4       	ldi	r25, 0x4E	; 78
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <Init_SPI_All+0x14>
    1e80:	00 c0       	rjmp	.+0      	; 0x1e82 <Init_SPI_All+0x1a>
    1e82:	00 00       	nop
    1e84:	08 95       	ret

00001e86 <Init_UART>:
#include "Headers\USART.h"
#include "Headers\main.h"

void Init_UART() {
	UBRRH = (unsigned char) (3 >> 8);
    1e86:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) 3;
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN);
    1e8c:	88 e0       	ldi	r24, 0x08	; 8
    1e8e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
    1e90:	8e e8       	ldi	r24, 0x8E	; 142
    1e92:	80 bd       	out	0x20, r24	; 32
    1e94:	08 95       	ret

00001e96 <__divsf3>:
    1e96:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <__divsf3x>
    1e9a:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__fp_round>
    1e9e:	0e 94 39 10 	call	0x2072	; 0x2072 <__fp_pscB>
    1ea2:	58 f0       	brcs	.+22     	; 0x1eba <__divsf3+0x24>
    1ea4:	0e 94 32 10 	call	0x2064	; 0x2064 <__fp_pscA>
    1ea8:	40 f0       	brcs	.+16     	; 0x1eba <__divsf3+0x24>
    1eaa:	29 f4       	brne	.+10     	; 0x1eb6 <__divsf3+0x20>
    1eac:	5f 3f       	cpi	r21, 0xFF	; 255
    1eae:	29 f0       	breq	.+10     	; 0x1eba <__divsf3+0x24>
    1eb0:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__fp_inf>
    1eb4:	51 11       	cpse	r21, r1
    1eb6:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__fp_szero>
    1eba:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__fp_nan>

00001ebe <__divsf3x>:
    1ebe:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__fp_split3>
    1ec2:	68 f3       	brcs	.-38     	; 0x1e9e <__divsf3+0x8>

00001ec4 <__divsf3_pse>:
    1ec4:	99 23       	and	r25, r25
    1ec6:	b1 f3       	breq	.-20     	; 0x1eb4 <__divsf3+0x1e>
    1ec8:	55 23       	and	r21, r21
    1eca:	91 f3       	breq	.-28     	; 0x1eb0 <__divsf3+0x1a>
    1ecc:	95 1b       	sub	r25, r21
    1ece:	55 0b       	sbc	r21, r21
    1ed0:	bb 27       	eor	r27, r27
    1ed2:	aa 27       	eor	r26, r26
    1ed4:	62 17       	cp	r22, r18
    1ed6:	73 07       	cpc	r23, r19
    1ed8:	84 07       	cpc	r24, r20
    1eda:	38 f0       	brcs	.+14     	; 0x1eea <__divsf3_pse+0x26>
    1edc:	9f 5f       	subi	r25, 0xFF	; 255
    1ede:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee0:	22 0f       	add	r18, r18
    1ee2:	33 1f       	adc	r19, r19
    1ee4:	44 1f       	adc	r20, r20
    1ee6:	aa 1f       	adc	r26, r26
    1ee8:	a9 f3       	breq	.-22     	; 0x1ed4 <__divsf3_pse+0x10>
    1eea:	35 d0       	rcall	.+106    	; 0x1f56 <__divsf3_pse+0x92>
    1eec:	0e 2e       	mov	r0, r30
    1eee:	3a f0       	brmi	.+14     	; 0x1efe <__divsf3_pse+0x3a>
    1ef0:	e0 e8       	ldi	r30, 0x80	; 128
    1ef2:	32 d0       	rcall	.+100    	; 0x1f58 <__divsf3_pse+0x94>
    1ef4:	91 50       	subi	r25, 0x01	; 1
    1ef6:	50 40       	sbci	r21, 0x00	; 0
    1ef8:	e6 95       	lsr	r30
    1efa:	00 1c       	adc	r0, r0
    1efc:	ca f7       	brpl	.-14     	; 0x1ef0 <__divsf3_pse+0x2c>
    1efe:	2b d0       	rcall	.+86     	; 0x1f56 <__divsf3_pse+0x92>
    1f00:	fe 2f       	mov	r31, r30
    1f02:	29 d0       	rcall	.+82     	; 0x1f56 <__divsf3_pse+0x92>
    1f04:	66 0f       	add	r22, r22
    1f06:	77 1f       	adc	r23, r23
    1f08:	88 1f       	adc	r24, r24
    1f0a:	bb 1f       	adc	r27, r27
    1f0c:	26 17       	cp	r18, r22
    1f0e:	37 07       	cpc	r19, r23
    1f10:	48 07       	cpc	r20, r24
    1f12:	ab 07       	cpc	r26, r27
    1f14:	b0 e8       	ldi	r27, 0x80	; 128
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <__divsf3_pse+0x56>
    1f18:	bb 0b       	sbc	r27, r27
    1f1a:	80 2d       	mov	r24, r0
    1f1c:	bf 01       	movw	r22, r30
    1f1e:	ff 27       	eor	r31, r31
    1f20:	93 58       	subi	r25, 0x83	; 131
    1f22:	5f 4f       	sbci	r21, 0xFF	; 255
    1f24:	3a f0       	brmi	.+14     	; 0x1f34 <__divsf3_pse+0x70>
    1f26:	9e 3f       	cpi	r25, 0xFE	; 254
    1f28:	51 05       	cpc	r21, r1
    1f2a:	78 f0       	brcs	.+30     	; 0x1f4a <__divsf3_pse+0x86>
    1f2c:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__fp_inf>
    1f30:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__fp_szero>
    1f34:	5f 3f       	cpi	r21, 0xFF	; 255
    1f36:	e4 f3       	brlt	.-8      	; 0x1f30 <__divsf3_pse+0x6c>
    1f38:	98 3e       	cpi	r25, 0xE8	; 232
    1f3a:	d4 f3       	brlt	.-12     	; 0x1f30 <__divsf3_pse+0x6c>
    1f3c:	86 95       	lsr	r24
    1f3e:	77 95       	ror	r23
    1f40:	67 95       	ror	r22
    1f42:	b7 95       	ror	r27
    1f44:	f7 95       	ror	r31
    1f46:	9f 5f       	subi	r25, 0xFF	; 255
    1f48:	c9 f7       	brne	.-14     	; 0x1f3c <__divsf3_pse+0x78>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	91 1d       	adc	r25, r1
    1f4e:	96 95       	lsr	r25
    1f50:	87 95       	ror	r24
    1f52:	97 f9       	bld	r25, 7
    1f54:	08 95       	ret
    1f56:	e1 e0       	ldi	r30, 0x01	; 1
    1f58:	66 0f       	add	r22, r22
    1f5a:	77 1f       	adc	r23, r23
    1f5c:	88 1f       	adc	r24, r24
    1f5e:	bb 1f       	adc	r27, r27
    1f60:	62 17       	cp	r22, r18
    1f62:	73 07       	cpc	r23, r19
    1f64:	84 07       	cpc	r24, r20
    1f66:	ba 07       	cpc	r27, r26
    1f68:	20 f0       	brcs	.+8      	; 0x1f72 <__divsf3_pse+0xae>
    1f6a:	62 1b       	sub	r22, r18
    1f6c:	73 0b       	sbc	r23, r19
    1f6e:	84 0b       	sbc	r24, r20
    1f70:	ba 0b       	sbc	r27, r26
    1f72:	ee 1f       	adc	r30, r30
    1f74:	88 f7       	brcc	.-30     	; 0x1f58 <__divsf3_pse+0x94>
    1f76:	e0 95       	com	r30
    1f78:	08 95       	ret

00001f7a <__fixunssfsi>:
    1f7a:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__fp_splitA>
    1f7e:	88 f0       	brcs	.+34     	; 0x1fa2 <__fixunssfsi+0x28>
    1f80:	9f 57       	subi	r25, 0x7F	; 127
    1f82:	98 f0       	brcs	.+38     	; 0x1faa <__fixunssfsi+0x30>
    1f84:	b9 2f       	mov	r27, r25
    1f86:	99 27       	eor	r25, r25
    1f88:	b7 51       	subi	r27, 0x17	; 23
    1f8a:	b0 f0       	brcs	.+44     	; 0x1fb8 <__fixunssfsi+0x3e>
    1f8c:	e1 f0       	breq	.+56     	; 0x1fc6 <__fixunssfsi+0x4c>
    1f8e:	66 0f       	add	r22, r22
    1f90:	77 1f       	adc	r23, r23
    1f92:	88 1f       	adc	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	1a f0       	brmi	.+6      	; 0x1f9e <__fixunssfsi+0x24>
    1f98:	ba 95       	dec	r27
    1f9a:	c9 f7       	brne	.-14     	; 0x1f8e <__fixunssfsi+0x14>
    1f9c:	14 c0       	rjmp	.+40     	; 0x1fc6 <__fixunssfsi+0x4c>
    1f9e:	b1 30       	cpi	r27, 0x01	; 1
    1fa0:	91 f0       	breq	.+36     	; 0x1fc6 <__fixunssfsi+0x4c>
    1fa2:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__fp_zero>
    1fa6:	b1 e0       	ldi	r27, 0x01	; 1
    1fa8:	08 95       	ret
    1faa:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <__fp_zero>
    1fae:	67 2f       	mov	r22, r23
    1fb0:	78 2f       	mov	r23, r24
    1fb2:	88 27       	eor	r24, r24
    1fb4:	b8 5f       	subi	r27, 0xF8	; 248
    1fb6:	39 f0       	breq	.+14     	; 0x1fc6 <__fixunssfsi+0x4c>
    1fb8:	b9 3f       	cpi	r27, 0xF9	; 249
    1fba:	cc f3       	brlt	.-14     	; 0x1fae <__fixunssfsi+0x34>
    1fbc:	86 95       	lsr	r24
    1fbe:	77 95       	ror	r23
    1fc0:	67 95       	ror	r22
    1fc2:	b3 95       	inc	r27
    1fc4:	d9 f7       	brne	.-10     	; 0x1fbc <__fixunssfsi+0x42>
    1fc6:	3e f4       	brtc	.+14     	; 0x1fd6 <__fixunssfsi+0x5c>
    1fc8:	90 95       	com	r25
    1fca:	80 95       	com	r24
    1fcc:	70 95       	com	r23
    1fce:	61 95       	neg	r22
    1fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fd6:	08 95       	ret

00001fd8 <__floatunsisf>:
    1fd8:	e8 94       	clt
    1fda:	09 c0       	rjmp	.+18     	; 0x1fee <__floatsisf+0x12>

00001fdc <__floatsisf>:
    1fdc:	97 fb       	bst	r25, 7
    1fde:	3e f4       	brtc	.+14     	; 0x1fee <__floatsisf+0x12>
    1fe0:	90 95       	com	r25
    1fe2:	80 95       	com	r24
    1fe4:	70 95       	com	r23
    1fe6:	61 95       	neg	r22
    1fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fea:	8f 4f       	sbci	r24, 0xFF	; 255
    1fec:	9f 4f       	sbci	r25, 0xFF	; 255
    1fee:	99 23       	and	r25, r25
    1ff0:	a9 f0       	breq	.+42     	; 0x201c <__floatsisf+0x40>
    1ff2:	f9 2f       	mov	r31, r25
    1ff4:	96 e9       	ldi	r25, 0x96	; 150
    1ff6:	bb 27       	eor	r27, r27
    1ff8:	93 95       	inc	r25
    1ffa:	f6 95       	lsr	r31
    1ffc:	87 95       	ror	r24
    1ffe:	77 95       	ror	r23
    2000:	67 95       	ror	r22
    2002:	b7 95       	ror	r27
    2004:	f1 11       	cpse	r31, r1
    2006:	f8 cf       	rjmp	.-16     	; 0x1ff8 <__floatsisf+0x1c>
    2008:	fa f4       	brpl	.+62     	; 0x2048 <__floatsisf+0x6c>
    200a:	bb 0f       	add	r27, r27
    200c:	11 f4       	brne	.+4      	; 0x2012 <__floatsisf+0x36>
    200e:	60 ff       	sbrs	r22, 0
    2010:	1b c0       	rjmp	.+54     	; 0x2048 <__floatsisf+0x6c>
    2012:	6f 5f       	subi	r22, 0xFF	; 255
    2014:	7f 4f       	sbci	r23, 0xFF	; 255
    2016:	8f 4f       	sbci	r24, 0xFF	; 255
    2018:	9f 4f       	sbci	r25, 0xFF	; 255
    201a:	16 c0       	rjmp	.+44     	; 0x2048 <__floatsisf+0x6c>
    201c:	88 23       	and	r24, r24
    201e:	11 f0       	breq	.+4      	; 0x2024 <__floatsisf+0x48>
    2020:	96 e9       	ldi	r25, 0x96	; 150
    2022:	11 c0       	rjmp	.+34     	; 0x2046 <__floatsisf+0x6a>
    2024:	77 23       	and	r23, r23
    2026:	21 f0       	breq	.+8      	; 0x2030 <__floatsisf+0x54>
    2028:	9e e8       	ldi	r25, 0x8E	; 142
    202a:	87 2f       	mov	r24, r23
    202c:	76 2f       	mov	r23, r22
    202e:	05 c0       	rjmp	.+10     	; 0x203a <__floatsisf+0x5e>
    2030:	66 23       	and	r22, r22
    2032:	71 f0       	breq	.+28     	; 0x2050 <__floatsisf+0x74>
    2034:	96 e8       	ldi	r25, 0x86	; 134
    2036:	86 2f       	mov	r24, r22
    2038:	70 e0       	ldi	r23, 0x00	; 0
    203a:	60 e0       	ldi	r22, 0x00	; 0
    203c:	2a f0       	brmi	.+10     	; 0x2048 <__floatsisf+0x6c>
    203e:	9a 95       	dec	r25
    2040:	66 0f       	add	r22, r22
    2042:	77 1f       	adc	r23, r23
    2044:	88 1f       	adc	r24, r24
    2046:	da f7       	brpl	.-10     	; 0x203e <__floatsisf+0x62>
    2048:	88 0f       	add	r24, r24
    204a:	96 95       	lsr	r25
    204c:	87 95       	ror	r24
    204e:	97 f9       	bld	r25, 7
    2050:	08 95       	ret

00002052 <__fp_inf>:
    2052:	97 f9       	bld	r25, 7
    2054:	9f 67       	ori	r25, 0x7F	; 127
    2056:	80 e8       	ldi	r24, 0x80	; 128
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	60 e0       	ldi	r22, 0x00	; 0
    205c:	08 95       	ret

0000205e <__fp_nan>:
    205e:	9f ef       	ldi	r25, 0xFF	; 255
    2060:	80 ec       	ldi	r24, 0xC0	; 192
    2062:	08 95       	ret

00002064 <__fp_pscA>:
    2064:	00 24       	eor	r0, r0
    2066:	0a 94       	dec	r0
    2068:	16 16       	cp	r1, r22
    206a:	17 06       	cpc	r1, r23
    206c:	18 06       	cpc	r1, r24
    206e:	09 06       	cpc	r0, r25
    2070:	08 95       	ret

00002072 <__fp_pscB>:
    2072:	00 24       	eor	r0, r0
    2074:	0a 94       	dec	r0
    2076:	12 16       	cp	r1, r18
    2078:	13 06       	cpc	r1, r19
    207a:	14 06       	cpc	r1, r20
    207c:	05 06       	cpc	r0, r21
    207e:	08 95       	ret

00002080 <__fp_round>:
    2080:	09 2e       	mov	r0, r25
    2082:	03 94       	inc	r0
    2084:	00 0c       	add	r0, r0
    2086:	11 f4       	brne	.+4      	; 0x208c <__fp_round+0xc>
    2088:	88 23       	and	r24, r24
    208a:	52 f0       	brmi	.+20     	; 0x20a0 <__fp_round+0x20>
    208c:	bb 0f       	add	r27, r27
    208e:	40 f4       	brcc	.+16     	; 0x20a0 <__fp_round+0x20>
    2090:	bf 2b       	or	r27, r31
    2092:	11 f4       	brne	.+4      	; 0x2098 <__fp_round+0x18>
    2094:	60 ff       	sbrs	r22, 0
    2096:	04 c0       	rjmp	.+8      	; 0x20a0 <__fp_round+0x20>
    2098:	6f 5f       	subi	r22, 0xFF	; 255
    209a:	7f 4f       	sbci	r23, 0xFF	; 255
    209c:	8f 4f       	sbci	r24, 0xFF	; 255
    209e:	9f 4f       	sbci	r25, 0xFF	; 255
    20a0:	08 95       	ret

000020a2 <__fp_split3>:
    20a2:	57 fd       	sbrc	r21, 7
    20a4:	90 58       	subi	r25, 0x80	; 128
    20a6:	44 0f       	add	r20, r20
    20a8:	55 1f       	adc	r21, r21
    20aa:	59 f0       	breq	.+22     	; 0x20c2 <__fp_splitA+0x10>
    20ac:	5f 3f       	cpi	r21, 0xFF	; 255
    20ae:	71 f0       	breq	.+28     	; 0x20cc <__fp_splitA+0x1a>
    20b0:	47 95       	ror	r20

000020b2 <__fp_splitA>:
    20b2:	88 0f       	add	r24, r24
    20b4:	97 fb       	bst	r25, 7
    20b6:	99 1f       	adc	r25, r25
    20b8:	61 f0       	breq	.+24     	; 0x20d2 <__fp_splitA+0x20>
    20ba:	9f 3f       	cpi	r25, 0xFF	; 255
    20bc:	79 f0       	breq	.+30     	; 0x20dc <__fp_splitA+0x2a>
    20be:	87 95       	ror	r24
    20c0:	08 95       	ret
    20c2:	12 16       	cp	r1, r18
    20c4:	13 06       	cpc	r1, r19
    20c6:	14 06       	cpc	r1, r20
    20c8:	55 1f       	adc	r21, r21
    20ca:	f2 cf       	rjmp	.-28     	; 0x20b0 <__fp_split3+0xe>
    20cc:	46 95       	lsr	r20
    20ce:	f1 df       	rcall	.-30     	; 0x20b2 <__fp_splitA>
    20d0:	08 c0       	rjmp	.+16     	; 0x20e2 <__fp_splitA+0x30>
    20d2:	16 16       	cp	r1, r22
    20d4:	17 06       	cpc	r1, r23
    20d6:	18 06       	cpc	r1, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	f1 cf       	rjmp	.-30     	; 0x20be <__fp_splitA+0xc>
    20dc:	86 95       	lsr	r24
    20de:	71 05       	cpc	r23, r1
    20e0:	61 05       	cpc	r22, r1
    20e2:	08 94       	sec
    20e4:	08 95       	ret

000020e6 <__fp_zero>:
    20e6:	e8 94       	clt

000020e8 <__fp_szero>:
    20e8:	bb 27       	eor	r27, r27
    20ea:	66 27       	eor	r22, r22
    20ec:	77 27       	eor	r23, r23
    20ee:	cb 01       	movw	r24, r22
    20f0:	97 f9       	bld	r25, 7
    20f2:	08 95       	ret

000020f4 <__mulsf3>:
    20f4:	0e 94 8d 10 	call	0x211a	; 0x211a <__mulsf3x>
    20f8:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__fp_round>
    20fc:	0e 94 32 10 	call	0x2064	; 0x2064 <__fp_pscA>
    2100:	38 f0       	brcs	.+14     	; 0x2110 <__mulsf3+0x1c>
    2102:	0e 94 39 10 	call	0x2072	; 0x2072 <__fp_pscB>
    2106:	20 f0       	brcs	.+8      	; 0x2110 <__mulsf3+0x1c>
    2108:	95 23       	and	r25, r21
    210a:	11 f0       	breq	.+4      	; 0x2110 <__mulsf3+0x1c>
    210c:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__fp_inf>
    2110:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__fp_nan>
    2114:	11 24       	eor	r1, r1
    2116:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__fp_szero>

0000211a <__mulsf3x>:
    211a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <__fp_split3>
    211e:	70 f3       	brcs	.-36     	; 0x20fc <__mulsf3+0x8>

00002120 <__mulsf3_pse>:
    2120:	95 9f       	mul	r25, r21
    2122:	c1 f3       	breq	.-16     	; 0x2114 <__mulsf3+0x20>
    2124:	95 0f       	add	r25, r21
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	55 1f       	adc	r21, r21
    212a:	62 9f       	mul	r22, r18
    212c:	f0 01       	movw	r30, r0
    212e:	72 9f       	mul	r23, r18
    2130:	bb 27       	eor	r27, r27
    2132:	f0 0d       	add	r31, r0
    2134:	b1 1d       	adc	r27, r1
    2136:	63 9f       	mul	r22, r19
    2138:	aa 27       	eor	r26, r26
    213a:	f0 0d       	add	r31, r0
    213c:	b1 1d       	adc	r27, r1
    213e:	aa 1f       	adc	r26, r26
    2140:	64 9f       	mul	r22, r20
    2142:	66 27       	eor	r22, r22
    2144:	b0 0d       	add	r27, r0
    2146:	a1 1d       	adc	r26, r1
    2148:	66 1f       	adc	r22, r22
    214a:	82 9f       	mul	r24, r18
    214c:	22 27       	eor	r18, r18
    214e:	b0 0d       	add	r27, r0
    2150:	a1 1d       	adc	r26, r1
    2152:	62 1f       	adc	r22, r18
    2154:	73 9f       	mul	r23, r19
    2156:	b0 0d       	add	r27, r0
    2158:	a1 1d       	adc	r26, r1
    215a:	62 1f       	adc	r22, r18
    215c:	83 9f       	mul	r24, r19
    215e:	a0 0d       	add	r26, r0
    2160:	61 1d       	adc	r22, r1
    2162:	22 1f       	adc	r18, r18
    2164:	74 9f       	mul	r23, r20
    2166:	33 27       	eor	r19, r19
    2168:	a0 0d       	add	r26, r0
    216a:	61 1d       	adc	r22, r1
    216c:	23 1f       	adc	r18, r19
    216e:	84 9f       	mul	r24, r20
    2170:	60 0d       	add	r22, r0
    2172:	21 1d       	adc	r18, r1
    2174:	82 2f       	mov	r24, r18
    2176:	76 2f       	mov	r23, r22
    2178:	6a 2f       	mov	r22, r26
    217a:	11 24       	eor	r1, r1
    217c:	9f 57       	subi	r25, 0x7F	; 127
    217e:	50 40       	sbci	r21, 0x00	; 0
    2180:	9a f0       	brmi	.+38     	; 0x21a8 <__mulsf3_pse+0x88>
    2182:	f1 f0       	breq	.+60     	; 0x21c0 <__mulsf3_pse+0xa0>
    2184:	88 23       	and	r24, r24
    2186:	4a f0       	brmi	.+18     	; 0x219a <__mulsf3_pse+0x7a>
    2188:	ee 0f       	add	r30, r30
    218a:	ff 1f       	adc	r31, r31
    218c:	bb 1f       	adc	r27, r27
    218e:	66 1f       	adc	r22, r22
    2190:	77 1f       	adc	r23, r23
    2192:	88 1f       	adc	r24, r24
    2194:	91 50       	subi	r25, 0x01	; 1
    2196:	50 40       	sbci	r21, 0x00	; 0
    2198:	a9 f7       	brne	.-22     	; 0x2184 <__mulsf3_pse+0x64>
    219a:	9e 3f       	cpi	r25, 0xFE	; 254
    219c:	51 05       	cpc	r21, r1
    219e:	80 f0       	brcs	.+32     	; 0x21c0 <__mulsf3_pse+0xa0>
    21a0:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__fp_inf>
    21a4:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__fp_szero>
    21a8:	5f 3f       	cpi	r21, 0xFF	; 255
    21aa:	e4 f3       	brlt	.-8      	; 0x21a4 <__mulsf3_pse+0x84>
    21ac:	98 3e       	cpi	r25, 0xE8	; 232
    21ae:	d4 f3       	brlt	.-12     	; 0x21a4 <__mulsf3_pse+0x84>
    21b0:	86 95       	lsr	r24
    21b2:	77 95       	ror	r23
    21b4:	67 95       	ror	r22
    21b6:	b7 95       	ror	r27
    21b8:	f7 95       	ror	r31
    21ba:	e7 95       	ror	r30
    21bc:	9f 5f       	subi	r25, 0xFF	; 255
    21be:	c1 f7       	brne	.-16     	; 0x21b0 <__mulsf3_pse+0x90>
    21c0:	fe 2b       	or	r31, r30
    21c2:	88 0f       	add	r24, r24
    21c4:	91 1d       	adc	r25, r1
    21c6:	96 95       	lsr	r25
    21c8:	87 95       	ror	r24
    21ca:	97 f9       	bld	r25, 7
    21cc:	08 95       	ret

000021ce <__divmodhi4>:
    21ce:	97 fb       	bst	r25, 7
    21d0:	07 2e       	mov	r0, r23
    21d2:	16 f4       	brtc	.+4      	; 0x21d8 <__divmodhi4+0xa>
    21d4:	00 94       	com	r0
    21d6:	07 d0       	rcall	.+14     	; 0x21e6 <__divmodhi4_neg1>
    21d8:	77 fd       	sbrc	r23, 7
    21da:	09 d0       	rcall	.+18     	; 0x21ee <__divmodhi4_neg2>
    21dc:	0e 94 32 11 	call	0x2264	; 0x2264 <__udivmodhi4>
    21e0:	07 fc       	sbrc	r0, 7
    21e2:	05 d0       	rcall	.+10     	; 0x21ee <__divmodhi4_neg2>
    21e4:	3e f4       	brtc	.+14     	; 0x21f4 <__divmodhi4_exit>

000021e6 <__divmodhi4_neg1>:
    21e6:	90 95       	com	r25
    21e8:	81 95       	neg	r24
    21ea:	9f 4f       	sbci	r25, 0xFF	; 255
    21ec:	08 95       	ret

000021ee <__divmodhi4_neg2>:
    21ee:	70 95       	com	r23
    21f0:	61 95       	neg	r22
    21f2:	7f 4f       	sbci	r23, 0xFF	; 255

000021f4 <__divmodhi4_exit>:
    21f4:	08 95       	ret

000021f6 <__udivmodsi4>:
    21f6:	a1 e2       	ldi	r26, 0x21	; 33
    21f8:	1a 2e       	mov	r1, r26
    21fa:	aa 1b       	sub	r26, r26
    21fc:	bb 1b       	sub	r27, r27
    21fe:	fd 01       	movw	r30, r26
    2200:	0d c0       	rjmp	.+26     	; 0x221c <__udivmodsi4_ep>

00002202 <__udivmodsi4_loop>:
    2202:	aa 1f       	adc	r26, r26
    2204:	bb 1f       	adc	r27, r27
    2206:	ee 1f       	adc	r30, r30
    2208:	ff 1f       	adc	r31, r31
    220a:	a2 17       	cp	r26, r18
    220c:	b3 07       	cpc	r27, r19
    220e:	e4 07       	cpc	r30, r20
    2210:	f5 07       	cpc	r31, r21
    2212:	20 f0       	brcs	.+8      	; 0x221c <__udivmodsi4_ep>
    2214:	a2 1b       	sub	r26, r18
    2216:	b3 0b       	sbc	r27, r19
    2218:	e4 0b       	sbc	r30, r20
    221a:	f5 0b       	sbc	r31, r21

0000221c <__udivmodsi4_ep>:
    221c:	66 1f       	adc	r22, r22
    221e:	77 1f       	adc	r23, r23
    2220:	88 1f       	adc	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	1a 94       	dec	r1
    2226:	69 f7       	brne	.-38     	; 0x2202 <__udivmodsi4_loop>
    2228:	60 95       	com	r22
    222a:	70 95       	com	r23
    222c:	80 95       	com	r24
    222e:	90 95       	com	r25
    2230:	9b 01       	movw	r18, r22
    2232:	ac 01       	movw	r20, r24
    2234:	bd 01       	movw	r22, r26
    2236:	cf 01       	movw	r24, r30
    2238:	08 95       	ret

0000223a <__tablejump2__>:
    223a:	ee 0f       	add	r30, r30
    223c:	ff 1f       	adc	r31, r31
    223e:	05 90       	lpm	r0, Z+
    2240:	f4 91       	lpm	r31, Z
    2242:	e0 2d       	mov	r30, r0
    2244:	09 94       	ijmp

00002246 <__umulhisi3>:
    2246:	a2 9f       	mul	r26, r18
    2248:	b0 01       	movw	r22, r0
    224a:	b3 9f       	mul	r27, r19
    224c:	c0 01       	movw	r24, r0
    224e:	a3 9f       	mul	r26, r19
    2250:	70 0d       	add	r23, r0
    2252:	81 1d       	adc	r24, r1
    2254:	11 24       	eor	r1, r1
    2256:	91 1d       	adc	r25, r1
    2258:	b2 9f       	mul	r27, r18
    225a:	70 0d       	add	r23, r0
    225c:	81 1d       	adc	r24, r1
    225e:	11 24       	eor	r1, r1
    2260:	91 1d       	adc	r25, r1
    2262:	08 95       	ret

00002264 <__udivmodhi4>:
    2264:	aa 1b       	sub	r26, r26
    2266:	bb 1b       	sub	r27, r27
    2268:	51 e1       	ldi	r21, 0x11	; 17
    226a:	07 c0       	rjmp	.+14     	; 0x227a <__udivmodhi4_ep>

0000226c <__udivmodhi4_loop>:
    226c:	aa 1f       	adc	r26, r26
    226e:	bb 1f       	adc	r27, r27
    2270:	a6 17       	cp	r26, r22
    2272:	b7 07       	cpc	r27, r23
    2274:	10 f0       	brcs	.+4      	; 0x227a <__udivmodhi4_ep>
    2276:	a6 1b       	sub	r26, r22
    2278:	b7 0b       	sbc	r27, r23

0000227a <__udivmodhi4_ep>:
    227a:	88 1f       	adc	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	5a 95       	dec	r21
    2280:	a9 f7       	brne	.-22     	; 0x226c <__udivmodhi4_loop>
    2282:	80 95       	com	r24
    2284:	90 95       	com	r25
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	08 95       	ret

0000228c <snprintf>:
    228c:	ae e0       	ldi	r26, 0x0E	; 14
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	ec e4       	ldi	r30, 0x4C	; 76
    2292:	f1 e1       	ldi	r31, 0x11	; 17
    2294:	0c 94 22 14 	jmp	0x2844	; 0x2844 <__prologue_saves__+0x1c>
    2298:	0d 89       	ldd	r16, Y+21	; 0x15
    229a:	1e 89       	ldd	r17, Y+22	; 0x16
    229c:	8f 89       	ldd	r24, Y+23	; 0x17
    229e:	98 8d       	ldd	r25, Y+24	; 0x18
    22a0:	26 e0       	ldi	r18, 0x06	; 6
    22a2:	2c 83       	std	Y+4, r18	; 0x04
    22a4:	1a 83       	std	Y+2, r17	; 0x02
    22a6:	09 83       	std	Y+1, r16	; 0x01
    22a8:	97 ff       	sbrs	r25, 7
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <snprintf+0x24>
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e8       	ldi	r25, 0x80	; 128
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	9e 83       	std	Y+6, r25	; 0x06
    22b4:	8d 83       	std	Y+5, r24	; 0x05
    22b6:	ae 01       	movw	r20, r28
    22b8:	45 5e       	subi	r20, 0xE5	; 229
    22ba:	5f 4f       	sbci	r21, 0xFF	; 255
    22bc:	69 8d       	ldd	r22, Y+25	; 0x19
    22be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c0:	ce 01       	movw	r24, r28
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	0e 94 76 11 	call	0x22ec	; 0x22ec <vfprintf>
    22c8:	4d 81       	ldd	r20, Y+5	; 0x05
    22ca:	5e 81       	ldd	r21, Y+6	; 0x06
    22cc:	57 fd       	sbrc	r21, 7
    22ce:	0a c0       	rjmp	.+20     	; 0x22e4 <snprintf+0x58>
    22d0:	2f 81       	ldd	r18, Y+7	; 0x07
    22d2:	38 85       	ldd	r19, Y+8	; 0x08
    22d4:	42 17       	cp	r20, r18
    22d6:	53 07       	cpc	r21, r19
    22d8:	0c f4       	brge	.+2      	; 0x22dc <snprintf+0x50>
    22da:	9a 01       	movw	r18, r20
    22dc:	f8 01       	movw	r30, r16
    22de:	e2 0f       	add	r30, r18
    22e0:	f3 1f       	adc	r31, r19
    22e2:	10 82       	st	Z, r1
    22e4:	2e 96       	adiw	r28, 0x0e	; 14
    22e6:	e4 e0       	ldi	r30, 0x04	; 4
    22e8:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__epilogue_restores__+0x1c>

000022ec <vfprintf>:
    22ec:	ab e0       	ldi	r26, 0x0B	; 11
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	ec e7       	ldi	r30, 0x7C	; 124
    22f2:	f1 e1       	ldi	r31, 0x11	; 17
    22f4:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__>
    22f8:	6c 01       	movw	r12, r24
    22fa:	7b 01       	movw	r14, r22
    22fc:	8a 01       	movw	r16, r20
    22fe:	fc 01       	movw	r30, r24
    2300:	17 82       	std	Z+7, r1	; 0x07
    2302:	16 82       	std	Z+6, r1	; 0x06
    2304:	83 81       	ldd	r24, Z+3	; 0x03
    2306:	81 ff       	sbrs	r24, 1
    2308:	cc c1       	rjmp	.+920    	; 0x26a2 <vfprintf+0x3b6>
    230a:	ce 01       	movw	r24, r28
    230c:	01 96       	adiw	r24, 0x01	; 1
    230e:	3c 01       	movw	r6, r24
    2310:	f6 01       	movw	r30, r12
    2312:	93 81       	ldd	r25, Z+3	; 0x03
    2314:	f7 01       	movw	r30, r14
    2316:	93 fd       	sbrc	r25, 3
    2318:	85 91       	lpm	r24, Z+
    231a:	93 ff       	sbrs	r25, 3
    231c:	81 91       	ld	r24, Z+
    231e:	7f 01       	movw	r14, r30
    2320:	88 23       	and	r24, r24
    2322:	09 f4       	brne	.+2      	; 0x2326 <vfprintf+0x3a>
    2324:	ba c1       	rjmp	.+884    	; 0x269a <vfprintf+0x3ae>
    2326:	85 32       	cpi	r24, 0x25	; 37
    2328:	39 f4       	brne	.+14     	; 0x2338 <vfprintf+0x4c>
    232a:	93 fd       	sbrc	r25, 3
    232c:	85 91       	lpm	r24, Z+
    232e:	93 ff       	sbrs	r25, 3
    2330:	81 91       	ld	r24, Z+
    2332:	7f 01       	movw	r14, r30
    2334:	85 32       	cpi	r24, 0x25	; 37
    2336:	29 f4       	brne	.+10     	; 0x2342 <vfprintf+0x56>
    2338:	b6 01       	movw	r22, r12
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	0e 94 6d 13 	call	0x26da	; 0x26da <fputc>
    2340:	e7 cf       	rjmp	.-50     	; 0x2310 <vfprintf+0x24>
    2342:	91 2c       	mov	r9, r1
    2344:	21 2c       	mov	r2, r1
    2346:	31 2c       	mov	r3, r1
    2348:	ff e1       	ldi	r31, 0x1F	; 31
    234a:	f3 15       	cp	r31, r3
    234c:	d8 f0       	brcs	.+54     	; 0x2384 <vfprintf+0x98>
    234e:	8b 32       	cpi	r24, 0x2B	; 43
    2350:	79 f0       	breq	.+30     	; 0x2370 <vfprintf+0x84>
    2352:	38 f4       	brcc	.+14     	; 0x2362 <vfprintf+0x76>
    2354:	80 32       	cpi	r24, 0x20	; 32
    2356:	79 f0       	breq	.+30     	; 0x2376 <vfprintf+0x8a>
    2358:	83 32       	cpi	r24, 0x23	; 35
    235a:	a1 f4       	brne	.+40     	; 0x2384 <vfprintf+0x98>
    235c:	23 2d       	mov	r18, r3
    235e:	20 61       	ori	r18, 0x10	; 16
    2360:	1d c0       	rjmp	.+58     	; 0x239c <vfprintf+0xb0>
    2362:	8d 32       	cpi	r24, 0x2D	; 45
    2364:	61 f0       	breq	.+24     	; 0x237e <vfprintf+0x92>
    2366:	80 33       	cpi	r24, 0x30	; 48
    2368:	69 f4       	brne	.+26     	; 0x2384 <vfprintf+0x98>
    236a:	23 2d       	mov	r18, r3
    236c:	21 60       	ori	r18, 0x01	; 1
    236e:	16 c0       	rjmp	.+44     	; 0x239c <vfprintf+0xb0>
    2370:	83 2d       	mov	r24, r3
    2372:	82 60       	ori	r24, 0x02	; 2
    2374:	38 2e       	mov	r3, r24
    2376:	e3 2d       	mov	r30, r3
    2378:	e4 60       	ori	r30, 0x04	; 4
    237a:	3e 2e       	mov	r3, r30
    237c:	2a c0       	rjmp	.+84     	; 0x23d2 <vfprintf+0xe6>
    237e:	f3 2d       	mov	r31, r3
    2380:	f8 60       	ori	r31, 0x08	; 8
    2382:	1d c0       	rjmp	.+58     	; 0x23be <vfprintf+0xd2>
    2384:	37 fc       	sbrc	r3, 7
    2386:	2d c0       	rjmp	.+90     	; 0x23e2 <vfprintf+0xf6>
    2388:	20 ed       	ldi	r18, 0xD0	; 208
    238a:	28 0f       	add	r18, r24
    238c:	2a 30       	cpi	r18, 0x0A	; 10
    238e:	40 f0       	brcs	.+16     	; 0x23a0 <vfprintf+0xb4>
    2390:	8e 32       	cpi	r24, 0x2E	; 46
    2392:	b9 f4       	brne	.+46     	; 0x23c2 <vfprintf+0xd6>
    2394:	36 fc       	sbrc	r3, 6
    2396:	81 c1       	rjmp	.+770    	; 0x269a <vfprintf+0x3ae>
    2398:	23 2d       	mov	r18, r3
    239a:	20 64       	ori	r18, 0x40	; 64
    239c:	32 2e       	mov	r3, r18
    239e:	19 c0       	rjmp	.+50     	; 0x23d2 <vfprintf+0xe6>
    23a0:	36 fe       	sbrs	r3, 6
    23a2:	06 c0       	rjmp	.+12     	; 0x23b0 <vfprintf+0xc4>
    23a4:	8a e0       	ldi	r24, 0x0A	; 10
    23a6:	98 9e       	mul	r9, r24
    23a8:	20 0d       	add	r18, r0
    23aa:	11 24       	eor	r1, r1
    23ac:	92 2e       	mov	r9, r18
    23ae:	11 c0       	rjmp	.+34     	; 0x23d2 <vfprintf+0xe6>
    23b0:	ea e0       	ldi	r30, 0x0A	; 10
    23b2:	2e 9e       	mul	r2, r30
    23b4:	20 0d       	add	r18, r0
    23b6:	11 24       	eor	r1, r1
    23b8:	22 2e       	mov	r2, r18
    23ba:	f3 2d       	mov	r31, r3
    23bc:	f0 62       	ori	r31, 0x20	; 32
    23be:	3f 2e       	mov	r3, r31
    23c0:	08 c0       	rjmp	.+16     	; 0x23d2 <vfprintf+0xe6>
    23c2:	8c 36       	cpi	r24, 0x6C	; 108
    23c4:	21 f4       	brne	.+8      	; 0x23ce <vfprintf+0xe2>
    23c6:	83 2d       	mov	r24, r3
    23c8:	80 68       	ori	r24, 0x80	; 128
    23ca:	38 2e       	mov	r3, r24
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <vfprintf+0xe6>
    23ce:	88 36       	cpi	r24, 0x68	; 104
    23d0:	41 f4       	brne	.+16     	; 0x23e2 <vfprintf+0xf6>
    23d2:	f7 01       	movw	r30, r14
    23d4:	93 fd       	sbrc	r25, 3
    23d6:	85 91       	lpm	r24, Z+
    23d8:	93 ff       	sbrs	r25, 3
    23da:	81 91       	ld	r24, Z+
    23dc:	7f 01       	movw	r14, r30
    23de:	81 11       	cpse	r24, r1
    23e0:	b3 cf       	rjmp	.-154    	; 0x2348 <vfprintf+0x5c>
    23e2:	98 2f       	mov	r25, r24
    23e4:	9f 7d       	andi	r25, 0xDF	; 223
    23e6:	95 54       	subi	r25, 0x45	; 69
    23e8:	93 30       	cpi	r25, 0x03	; 3
    23ea:	28 f4       	brcc	.+10     	; 0x23f6 <vfprintf+0x10a>
    23ec:	0c 5f       	subi	r16, 0xFC	; 252
    23ee:	1f 4f       	sbci	r17, 0xFF	; 255
    23f0:	9f e3       	ldi	r25, 0x3F	; 63
    23f2:	99 83       	std	Y+1, r25	; 0x01
    23f4:	0d c0       	rjmp	.+26     	; 0x2410 <vfprintf+0x124>
    23f6:	83 36       	cpi	r24, 0x63	; 99
    23f8:	31 f0       	breq	.+12     	; 0x2406 <vfprintf+0x11a>
    23fa:	83 37       	cpi	r24, 0x73	; 115
    23fc:	71 f0       	breq	.+28     	; 0x241a <vfprintf+0x12e>
    23fe:	83 35       	cpi	r24, 0x53	; 83
    2400:	09 f0       	breq	.+2      	; 0x2404 <vfprintf+0x118>
    2402:	59 c0       	rjmp	.+178    	; 0x24b6 <vfprintf+0x1ca>
    2404:	21 c0       	rjmp	.+66     	; 0x2448 <vfprintf+0x15c>
    2406:	f8 01       	movw	r30, r16
    2408:	80 81       	ld	r24, Z
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	0e 5f       	subi	r16, 0xFE	; 254
    240e:	1f 4f       	sbci	r17, 0xFF	; 255
    2410:	88 24       	eor	r8, r8
    2412:	83 94       	inc	r8
    2414:	91 2c       	mov	r9, r1
    2416:	53 01       	movw	r10, r6
    2418:	13 c0       	rjmp	.+38     	; 0x2440 <vfprintf+0x154>
    241a:	28 01       	movw	r4, r16
    241c:	f2 e0       	ldi	r31, 0x02	; 2
    241e:	4f 0e       	add	r4, r31
    2420:	51 1c       	adc	r5, r1
    2422:	f8 01       	movw	r30, r16
    2424:	a0 80       	ld	r10, Z
    2426:	b1 80       	ldd	r11, Z+1	; 0x01
    2428:	36 fe       	sbrs	r3, 6
    242a:	03 c0       	rjmp	.+6      	; 0x2432 <vfprintf+0x146>
    242c:	69 2d       	mov	r22, r9
    242e:	70 e0       	ldi	r23, 0x00	; 0
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <vfprintf+0x14a>
    2432:	6f ef       	ldi	r22, 0xFF	; 255
    2434:	7f ef       	ldi	r23, 0xFF	; 255
    2436:	c5 01       	movw	r24, r10
    2438:	0e 94 62 13 	call	0x26c4	; 0x26c4 <strnlen>
    243c:	4c 01       	movw	r8, r24
    243e:	82 01       	movw	r16, r4
    2440:	f3 2d       	mov	r31, r3
    2442:	ff 77       	andi	r31, 0x7F	; 127
    2444:	3f 2e       	mov	r3, r31
    2446:	16 c0       	rjmp	.+44     	; 0x2474 <vfprintf+0x188>
    2448:	28 01       	movw	r4, r16
    244a:	22 e0       	ldi	r18, 0x02	; 2
    244c:	42 0e       	add	r4, r18
    244e:	51 1c       	adc	r5, r1
    2450:	f8 01       	movw	r30, r16
    2452:	a0 80       	ld	r10, Z
    2454:	b1 80       	ldd	r11, Z+1	; 0x01
    2456:	36 fe       	sbrs	r3, 6
    2458:	03 c0       	rjmp	.+6      	; 0x2460 <vfprintf+0x174>
    245a:	69 2d       	mov	r22, r9
    245c:	70 e0       	ldi	r23, 0x00	; 0
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <vfprintf+0x178>
    2460:	6f ef       	ldi	r22, 0xFF	; 255
    2462:	7f ef       	ldi	r23, 0xFF	; 255
    2464:	c5 01       	movw	r24, r10
    2466:	0e 94 57 13 	call	0x26ae	; 0x26ae <strnlen_P>
    246a:	4c 01       	movw	r8, r24
    246c:	f3 2d       	mov	r31, r3
    246e:	f0 68       	ori	r31, 0x80	; 128
    2470:	3f 2e       	mov	r3, r31
    2472:	82 01       	movw	r16, r4
    2474:	33 fc       	sbrc	r3, 3
    2476:	1b c0       	rjmp	.+54     	; 0x24ae <vfprintf+0x1c2>
    2478:	82 2d       	mov	r24, r2
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	88 16       	cp	r8, r24
    247e:	99 06       	cpc	r9, r25
    2480:	b0 f4       	brcc	.+44     	; 0x24ae <vfprintf+0x1c2>
    2482:	b6 01       	movw	r22, r12
    2484:	80 e2       	ldi	r24, 0x20	; 32
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	0e 94 6d 13 	call	0x26da	; 0x26da <fputc>
    248c:	2a 94       	dec	r2
    248e:	f4 cf       	rjmp	.-24     	; 0x2478 <vfprintf+0x18c>
    2490:	f5 01       	movw	r30, r10
    2492:	37 fc       	sbrc	r3, 7
    2494:	85 91       	lpm	r24, Z+
    2496:	37 fe       	sbrs	r3, 7
    2498:	81 91       	ld	r24, Z+
    249a:	5f 01       	movw	r10, r30
    249c:	b6 01       	movw	r22, r12
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	0e 94 6d 13 	call	0x26da	; 0x26da <fputc>
    24a4:	21 10       	cpse	r2, r1
    24a6:	2a 94       	dec	r2
    24a8:	21 e0       	ldi	r18, 0x01	; 1
    24aa:	82 1a       	sub	r8, r18
    24ac:	91 08       	sbc	r9, r1
    24ae:	81 14       	cp	r8, r1
    24b0:	91 04       	cpc	r9, r1
    24b2:	71 f7       	brne	.-36     	; 0x2490 <vfprintf+0x1a4>
    24b4:	e8 c0       	rjmp	.+464    	; 0x2686 <vfprintf+0x39a>
    24b6:	84 36       	cpi	r24, 0x64	; 100
    24b8:	11 f0       	breq	.+4      	; 0x24be <vfprintf+0x1d2>
    24ba:	89 36       	cpi	r24, 0x69	; 105
    24bc:	41 f5       	brne	.+80     	; 0x250e <vfprintf+0x222>
    24be:	f8 01       	movw	r30, r16
    24c0:	37 fe       	sbrs	r3, 7
    24c2:	07 c0       	rjmp	.+14     	; 0x24d2 <vfprintf+0x1e6>
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	0c 5f       	subi	r16, 0xFC	; 252
    24ce:	1f 4f       	sbci	r17, 0xFF	; 255
    24d0:	08 c0       	rjmp	.+16     	; 0x24e2 <vfprintf+0x1f6>
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	07 2e       	mov	r0, r23
    24d8:	00 0c       	add	r0, r0
    24da:	88 0b       	sbc	r24, r24
    24dc:	99 0b       	sbc	r25, r25
    24de:	0e 5f       	subi	r16, 0xFE	; 254
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	f3 2d       	mov	r31, r3
    24e4:	ff 76       	andi	r31, 0x6F	; 111
    24e6:	3f 2e       	mov	r3, r31
    24e8:	97 ff       	sbrs	r25, 7
    24ea:	09 c0       	rjmp	.+18     	; 0x24fe <vfprintf+0x212>
    24ec:	90 95       	com	r25
    24ee:	80 95       	com	r24
    24f0:	70 95       	com	r23
    24f2:	61 95       	neg	r22
    24f4:	7f 4f       	sbci	r23, 0xFF	; 255
    24f6:	8f 4f       	sbci	r24, 0xFF	; 255
    24f8:	9f 4f       	sbci	r25, 0xFF	; 255
    24fa:	f0 68       	ori	r31, 0x80	; 128
    24fc:	3f 2e       	mov	r3, r31
    24fe:	2a e0       	ldi	r18, 0x0A	; 10
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	a3 01       	movw	r20, r6
    2504:	0e 94 a9 13 	call	0x2752	; 0x2752 <__ultoa_invert>
    2508:	88 2e       	mov	r8, r24
    250a:	86 18       	sub	r8, r6
    250c:	45 c0       	rjmp	.+138    	; 0x2598 <vfprintf+0x2ac>
    250e:	85 37       	cpi	r24, 0x75	; 117
    2510:	31 f4       	brne	.+12     	; 0x251e <vfprintf+0x232>
    2512:	23 2d       	mov	r18, r3
    2514:	2f 7e       	andi	r18, 0xEF	; 239
    2516:	b2 2e       	mov	r11, r18
    2518:	2a e0       	ldi	r18, 0x0A	; 10
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	25 c0       	rjmp	.+74     	; 0x2568 <vfprintf+0x27c>
    251e:	93 2d       	mov	r25, r3
    2520:	99 7f       	andi	r25, 0xF9	; 249
    2522:	b9 2e       	mov	r11, r25
    2524:	8f 36       	cpi	r24, 0x6F	; 111
    2526:	c1 f0       	breq	.+48     	; 0x2558 <vfprintf+0x26c>
    2528:	18 f4       	brcc	.+6      	; 0x2530 <vfprintf+0x244>
    252a:	88 35       	cpi	r24, 0x58	; 88
    252c:	79 f0       	breq	.+30     	; 0x254c <vfprintf+0x260>
    252e:	b5 c0       	rjmp	.+362    	; 0x269a <vfprintf+0x3ae>
    2530:	80 37       	cpi	r24, 0x70	; 112
    2532:	19 f0       	breq	.+6      	; 0x253a <vfprintf+0x24e>
    2534:	88 37       	cpi	r24, 0x78	; 120
    2536:	21 f0       	breq	.+8      	; 0x2540 <vfprintf+0x254>
    2538:	b0 c0       	rjmp	.+352    	; 0x269a <vfprintf+0x3ae>
    253a:	e9 2f       	mov	r30, r25
    253c:	e0 61       	ori	r30, 0x10	; 16
    253e:	be 2e       	mov	r11, r30
    2540:	b4 fe       	sbrs	r11, 4
    2542:	0d c0       	rjmp	.+26     	; 0x255e <vfprintf+0x272>
    2544:	fb 2d       	mov	r31, r11
    2546:	f4 60       	ori	r31, 0x04	; 4
    2548:	bf 2e       	mov	r11, r31
    254a:	09 c0       	rjmp	.+18     	; 0x255e <vfprintf+0x272>
    254c:	34 fe       	sbrs	r3, 4
    254e:	0a c0       	rjmp	.+20     	; 0x2564 <vfprintf+0x278>
    2550:	29 2f       	mov	r18, r25
    2552:	26 60       	ori	r18, 0x06	; 6
    2554:	b2 2e       	mov	r11, r18
    2556:	06 c0       	rjmp	.+12     	; 0x2564 <vfprintf+0x278>
    2558:	28 e0       	ldi	r18, 0x08	; 8
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	05 c0       	rjmp	.+10     	; 0x2568 <vfprintf+0x27c>
    255e:	20 e1       	ldi	r18, 0x10	; 16
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <vfprintf+0x27c>
    2564:	20 e1       	ldi	r18, 0x10	; 16
    2566:	32 e0       	ldi	r19, 0x02	; 2
    2568:	f8 01       	movw	r30, r16
    256a:	b7 fe       	sbrs	r11, 7
    256c:	07 c0       	rjmp	.+14     	; 0x257c <vfprintf+0x290>
    256e:	60 81       	ld	r22, Z
    2570:	71 81       	ldd	r23, Z+1	; 0x01
    2572:	82 81       	ldd	r24, Z+2	; 0x02
    2574:	93 81       	ldd	r25, Z+3	; 0x03
    2576:	0c 5f       	subi	r16, 0xFC	; 252
    2578:	1f 4f       	sbci	r17, 0xFF	; 255
    257a:	06 c0       	rjmp	.+12     	; 0x2588 <vfprintf+0x29c>
    257c:	60 81       	ld	r22, Z
    257e:	71 81       	ldd	r23, Z+1	; 0x01
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	0e 5f       	subi	r16, 0xFE	; 254
    2586:	1f 4f       	sbci	r17, 0xFF	; 255
    2588:	a3 01       	movw	r20, r6
    258a:	0e 94 a9 13 	call	0x2752	; 0x2752 <__ultoa_invert>
    258e:	88 2e       	mov	r8, r24
    2590:	86 18       	sub	r8, r6
    2592:	fb 2d       	mov	r31, r11
    2594:	ff 77       	andi	r31, 0x7F	; 127
    2596:	3f 2e       	mov	r3, r31
    2598:	36 fe       	sbrs	r3, 6
    259a:	0d c0       	rjmp	.+26     	; 0x25b6 <vfprintf+0x2ca>
    259c:	23 2d       	mov	r18, r3
    259e:	2e 7f       	andi	r18, 0xFE	; 254
    25a0:	a2 2e       	mov	r10, r18
    25a2:	89 14       	cp	r8, r9
    25a4:	58 f4       	brcc	.+22     	; 0x25bc <vfprintf+0x2d0>
    25a6:	34 fe       	sbrs	r3, 4
    25a8:	0b c0       	rjmp	.+22     	; 0x25c0 <vfprintf+0x2d4>
    25aa:	32 fc       	sbrc	r3, 2
    25ac:	09 c0       	rjmp	.+18     	; 0x25c0 <vfprintf+0x2d4>
    25ae:	83 2d       	mov	r24, r3
    25b0:	8e 7e       	andi	r24, 0xEE	; 238
    25b2:	a8 2e       	mov	r10, r24
    25b4:	05 c0       	rjmp	.+10     	; 0x25c0 <vfprintf+0x2d4>
    25b6:	b8 2c       	mov	r11, r8
    25b8:	a3 2c       	mov	r10, r3
    25ba:	03 c0       	rjmp	.+6      	; 0x25c2 <vfprintf+0x2d6>
    25bc:	b8 2c       	mov	r11, r8
    25be:	01 c0       	rjmp	.+2      	; 0x25c2 <vfprintf+0x2d6>
    25c0:	b9 2c       	mov	r11, r9
    25c2:	a4 fe       	sbrs	r10, 4
    25c4:	0f c0       	rjmp	.+30     	; 0x25e4 <vfprintf+0x2f8>
    25c6:	fe 01       	movw	r30, r28
    25c8:	e8 0d       	add	r30, r8
    25ca:	f1 1d       	adc	r31, r1
    25cc:	80 81       	ld	r24, Z
    25ce:	80 33       	cpi	r24, 0x30	; 48
    25d0:	21 f4       	brne	.+8      	; 0x25da <vfprintf+0x2ee>
    25d2:	9a 2d       	mov	r25, r10
    25d4:	99 7e       	andi	r25, 0xE9	; 233
    25d6:	a9 2e       	mov	r10, r25
    25d8:	09 c0       	rjmp	.+18     	; 0x25ec <vfprintf+0x300>
    25da:	a2 fe       	sbrs	r10, 2
    25dc:	06 c0       	rjmp	.+12     	; 0x25ea <vfprintf+0x2fe>
    25de:	b3 94       	inc	r11
    25e0:	b3 94       	inc	r11
    25e2:	04 c0       	rjmp	.+8      	; 0x25ec <vfprintf+0x300>
    25e4:	8a 2d       	mov	r24, r10
    25e6:	86 78       	andi	r24, 0x86	; 134
    25e8:	09 f0       	breq	.+2      	; 0x25ec <vfprintf+0x300>
    25ea:	b3 94       	inc	r11
    25ec:	a3 fc       	sbrc	r10, 3
    25ee:	11 c0       	rjmp	.+34     	; 0x2612 <vfprintf+0x326>
    25f0:	a0 fe       	sbrs	r10, 0
    25f2:	06 c0       	rjmp	.+12     	; 0x2600 <vfprintf+0x314>
    25f4:	b2 14       	cp	r11, r2
    25f6:	88 f4       	brcc	.+34     	; 0x261a <vfprintf+0x32e>
    25f8:	28 0c       	add	r2, r8
    25fa:	92 2c       	mov	r9, r2
    25fc:	9b 18       	sub	r9, r11
    25fe:	0e c0       	rjmp	.+28     	; 0x261c <vfprintf+0x330>
    2600:	b2 14       	cp	r11, r2
    2602:	60 f4       	brcc	.+24     	; 0x261c <vfprintf+0x330>
    2604:	b6 01       	movw	r22, r12
    2606:	80 e2       	ldi	r24, 0x20	; 32
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	0e 94 6d 13 	call	0x26da	; 0x26da <fputc>
    260e:	b3 94       	inc	r11
    2610:	f7 cf       	rjmp	.-18     	; 0x2600 <vfprintf+0x314>
    2612:	b2 14       	cp	r11, r2
    2614:	18 f4       	brcc	.+6      	; 0x261c <vfprintf+0x330>
    2616:	2b 18       	sub	r2, r11
    2618:	02 c0       	rjmp	.+4      	; 0x261e <vfprintf+0x332>
    261a:	98 2c       	mov	r9, r8
    261c:	21 2c       	mov	r2, r1
    261e:	a4 fe       	sbrs	r10, 4
    2620:	10 c0       	rjmp	.+32     	; 0x2642 <vfprintf+0x356>
    2622:	b6 01       	movw	r22, r12
    2624:	80 e3       	ldi	r24, 0x30	; 48
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	0e 94 6d 13 	call	0x26da	; 0x26da <fputc>
    262c:	a2 fe       	sbrs	r10, 2
    262e:	17 c0       	rjmp	.+46     	; 0x265e <vfprintf+0x372>
    2630:	a1 fc       	sbrc	r10, 1
    2632:	03 c0       	rjmp	.+6      	; 0x263a <vfprintf+0x34e>
    2634:	88 e7       	ldi	r24, 0x78	; 120
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	02 c0       	rjmp	.+4      	; 0x263e <vfprintf+0x352>
    263a:	88 e5       	ldi	r24, 0x58	; 88
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	b6 01       	movw	r22, r12
    2640:	0c c0       	rjmp	.+24     	; 0x265a <vfprintf+0x36e>
    2642:	8a 2d       	mov	r24, r10
    2644:	86 78       	andi	r24, 0x86	; 134
    2646:	59 f0       	breq	.+22     	; 0x265e <vfprintf+0x372>
    2648:	a1 fe       	sbrs	r10, 1
    264a:	02 c0       	rjmp	.+4      	; 0x2650 <vfprintf+0x364>
    264c:	8b e2       	ldi	r24, 0x2B	; 43
    264e:	01 c0       	rjmp	.+2      	; 0x2652 <vfprintf+0x366>
    2650:	80 e2       	ldi	r24, 0x20	; 32
    2652:	a7 fc       	sbrc	r10, 7
    2654:	8d e2       	ldi	r24, 0x2D	; 45
    2656:	b6 01       	movw	r22, r12
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0e 94 6d 13 	call	0x26da	; 0x26da <fputc>
    265e:	89 14       	cp	r8, r9
    2660:	38 f4       	brcc	.+14     	; 0x2670 <vfprintf+0x384>
    2662:	b6 01       	movw	r22, r12
    2664:	80 e3       	ldi	r24, 0x30	; 48
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	0e 94 6d 13 	call	0x26da	; 0x26da <fputc>
    266c:	9a 94       	dec	r9
    266e:	f7 cf       	rjmp	.-18     	; 0x265e <vfprintf+0x372>
    2670:	8a 94       	dec	r8
    2672:	f3 01       	movw	r30, r6
    2674:	e8 0d       	add	r30, r8
    2676:	f1 1d       	adc	r31, r1
    2678:	80 81       	ld	r24, Z
    267a:	b6 01       	movw	r22, r12
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	0e 94 6d 13 	call	0x26da	; 0x26da <fputc>
    2682:	81 10       	cpse	r8, r1
    2684:	f5 cf       	rjmp	.-22     	; 0x2670 <vfprintf+0x384>
    2686:	22 20       	and	r2, r2
    2688:	09 f4       	brne	.+2      	; 0x268c <vfprintf+0x3a0>
    268a:	42 ce       	rjmp	.-892    	; 0x2310 <vfprintf+0x24>
    268c:	b6 01       	movw	r22, r12
    268e:	80 e2       	ldi	r24, 0x20	; 32
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	0e 94 6d 13 	call	0x26da	; 0x26da <fputc>
    2696:	2a 94       	dec	r2
    2698:	f6 cf       	rjmp	.-20     	; 0x2686 <vfprintf+0x39a>
    269a:	f6 01       	movw	r30, r12
    269c:	86 81       	ldd	r24, Z+6	; 0x06
    269e:	97 81       	ldd	r25, Z+7	; 0x07
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <vfprintf+0x3ba>
    26a2:	8f ef       	ldi	r24, 0xFF	; 255
    26a4:	9f ef       	ldi	r25, 0xFF	; 255
    26a6:	2b 96       	adiw	r28, 0x0b	; 11
    26a8:	e2 e1       	ldi	r30, 0x12	; 18
    26aa:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__>

000026ae <strnlen_P>:
    26ae:	fc 01       	movw	r30, r24
    26b0:	05 90       	lpm	r0, Z+
    26b2:	61 50       	subi	r22, 0x01	; 1
    26b4:	70 40       	sbci	r23, 0x00	; 0
    26b6:	01 10       	cpse	r0, r1
    26b8:	d8 f7       	brcc	.-10     	; 0x26b0 <strnlen_P+0x2>
    26ba:	80 95       	com	r24
    26bc:	90 95       	com	r25
    26be:	8e 0f       	add	r24, r30
    26c0:	9f 1f       	adc	r25, r31
    26c2:	08 95       	ret

000026c4 <strnlen>:
    26c4:	fc 01       	movw	r30, r24
    26c6:	61 50       	subi	r22, 0x01	; 1
    26c8:	70 40       	sbci	r23, 0x00	; 0
    26ca:	01 90       	ld	r0, Z+
    26cc:	01 10       	cpse	r0, r1
    26ce:	d8 f7       	brcc	.-10     	; 0x26c6 <strnlen+0x2>
    26d0:	80 95       	com	r24
    26d2:	90 95       	com	r25
    26d4:	8e 0f       	add	r24, r30
    26d6:	9f 1f       	adc	r25, r31
    26d8:	08 95       	ret

000026da <fputc>:
    26da:	0f 93       	push	r16
    26dc:	1f 93       	push	r17
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	fb 01       	movw	r30, r22
    26e4:	23 81       	ldd	r18, Z+3	; 0x03
    26e6:	21 fd       	sbrc	r18, 1
    26e8:	03 c0       	rjmp	.+6      	; 0x26f0 <fputc+0x16>
    26ea:	8f ef       	ldi	r24, 0xFF	; 255
    26ec:	9f ef       	ldi	r25, 0xFF	; 255
    26ee:	2c c0       	rjmp	.+88     	; 0x2748 <fputc+0x6e>
    26f0:	22 ff       	sbrs	r18, 2
    26f2:	16 c0       	rjmp	.+44     	; 0x2720 <fputc+0x46>
    26f4:	46 81       	ldd	r20, Z+6	; 0x06
    26f6:	57 81       	ldd	r21, Z+7	; 0x07
    26f8:	24 81       	ldd	r18, Z+4	; 0x04
    26fa:	35 81       	ldd	r19, Z+5	; 0x05
    26fc:	42 17       	cp	r20, r18
    26fe:	53 07       	cpc	r21, r19
    2700:	44 f4       	brge	.+16     	; 0x2712 <fputc+0x38>
    2702:	a0 81       	ld	r26, Z
    2704:	b1 81       	ldd	r27, Z+1	; 0x01
    2706:	9d 01       	movw	r18, r26
    2708:	2f 5f       	subi	r18, 0xFF	; 255
    270a:	3f 4f       	sbci	r19, 0xFF	; 255
    270c:	31 83       	std	Z+1, r19	; 0x01
    270e:	20 83       	st	Z, r18
    2710:	8c 93       	st	X, r24
    2712:	26 81       	ldd	r18, Z+6	; 0x06
    2714:	37 81       	ldd	r19, Z+7	; 0x07
    2716:	2f 5f       	subi	r18, 0xFF	; 255
    2718:	3f 4f       	sbci	r19, 0xFF	; 255
    271a:	37 83       	std	Z+7, r19	; 0x07
    271c:	26 83       	std	Z+6, r18	; 0x06
    271e:	14 c0       	rjmp	.+40     	; 0x2748 <fputc+0x6e>
    2720:	8b 01       	movw	r16, r22
    2722:	ec 01       	movw	r28, r24
    2724:	fb 01       	movw	r30, r22
    2726:	00 84       	ldd	r0, Z+8	; 0x08
    2728:	f1 85       	ldd	r31, Z+9	; 0x09
    272a:	e0 2d       	mov	r30, r0
    272c:	09 95       	icall
    272e:	89 2b       	or	r24, r25
    2730:	e1 f6       	brne	.-72     	; 0x26ea <fputc+0x10>
    2732:	d8 01       	movw	r26, r16
    2734:	16 96       	adiw	r26, 0x06	; 6
    2736:	8d 91       	ld	r24, X+
    2738:	9c 91       	ld	r25, X
    273a:	17 97       	sbiw	r26, 0x07	; 7
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	17 96       	adiw	r26, 0x07	; 7
    2740:	9c 93       	st	X, r25
    2742:	8e 93       	st	-X, r24
    2744:	16 97       	sbiw	r26, 0x06	; 6
    2746:	ce 01       	movw	r24, r28
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	08 95       	ret

00002752 <__ultoa_invert>:
    2752:	fa 01       	movw	r30, r20
    2754:	aa 27       	eor	r26, r26
    2756:	28 30       	cpi	r18, 0x08	; 8
    2758:	51 f1       	breq	.+84     	; 0x27ae <__ultoa_invert+0x5c>
    275a:	20 31       	cpi	r18, 0x10	; 16
    275c:	81 f1       	breq	.+96     	; 0x27be <__ultoa_invert+0x6c>
    275e:	e8 94       	clt
    2760:	6f 93       	push	r22
    2762:	6e 7f       	andi	r22, 0xFE	; 254
    2764:	6e 5f       	subi	r22, 0xFE	; 254
    2766:	7f 4f       	sbci	r23, 0xFF	; 255
    2768:	8f 4f       	sbci	r24, 0xFF	; 255
    276a:	9f 4f       	sbci	r25, 0xFF	; 255
    276c:	af 4f       	sbci	r26, 0xFF	; 255
    276e:	b1 e0       	ldi	r27, 0x01	; 1
    2770:	3e d0       	rcall	.+124    	; 0x27ee <__ultoa_invert+0x9c>
    2772:	b4 e0       	ldi	r27, 0x04	; 4
    2774:	3c d0       	rcall	.+120    	; 0x27ee <__ultoa_invert+0x9c>
    2776:	67 0f       	add	r22, r23
    2778:	78 1f       	adc	r23, r24
    277a:	89 1f       	adc	r24, r25
    277c:	9a 1f       	adc	r25, r26
    277e:	a1 1d       	adc	r26, r1
    2780:	68 0f       	add	r22, r24
    2782:	79 1f       	adc	r23, r25
    2784:	8a 1f       	adc	r24, r26
    2786:	91 1d       	adc	r25, r1
    2788:	a1 1d       	adc	r26, r1
    278a:	6a 0f       	add	r22, r26
    278c:	71 1d       	adc	r23, r1
    278e:	81 1d       	adc	r24, r1
    2790:	91 1d       	adc	r25, r1
    2792:	a1 1d       	adc	r26, r1
    2794:	20 d0       	rcall	.+64     	; 0x27d6 <__ultoa_invert+0x84>
    2796:	09 f4       	brne	.+2      	; 0x279a <__ultoa_invert+0x48>
    2798:	68 94       	set
    279a:	3f 91       	pop	r19
    279c:	2a e0       	ldi	r18, 0x0A	; 10
    279e:	26 9f       	mul	r18, r22
    27a0:	11 24       	eor	r1, r1
    27a2:	30 19       	sub	r19, r0
    27a4:	30 5d       	subi	r19, 0xD0	; 208
    27a6:	31 93       	st	Z+, r19
    27a8:	de f6       	brtc	.-74     	; 0x2760 <__ultoa_invert+0xe>
    27aa:	cf 01       	movw	r24, r30
    27ac:	08 95       	ret
    27ae:	46 2f       	mov	r20, r22
    27b0:	47 70       	andi	r20, 0x07	; 7
    27b2:	40 5d       	subi	r20, 0xD0	; 208
    27b4:	41 93       	st	Z+, r20
    27b6:	b3 e0       	ldi	r27, 0x03	; 3
    27b8:	0f d0       	rcall	.+30     	; 0x27d8 <__ultoa_invert+0x86>
    27ba:	c9 f7       	brne	.-14     	; 0x27ae <__ultoa_invert+0x5c>
    27bc:	f6 cf       	rjmp	.-20     	; 0x27aa <__ultoa_invert+0x58>
    27be:	46 2f       	mov	r20, r22
    27c0:	4f 70       	andi	r20, 0x0F	; 15
    27c2:	40 5d       	subi	r20, 0xD0	; 208
    27c4:	4a 33       	cpi	r20, 0x3A	; 58
    27c6:	18 f0       	brcs	.+6      	; 0x27ce <__ultoa_invert+0x7c>
    27c8:	49 5d       	subi	r20, 0xD9	; 217
    27ca:	31 fd       	sbrc	r19, 1
    27cc:	40 52       	subi	r20, 0x20	; 32
    27ce:	41 93       	st	Z+, r20
    27d0:	02 d0       	rcall	.+4      	; 0x27d6 <__ultoa_invert+0x84>
    27d2:	a9 f7       	brne	.-22     	; 0x27be <__ultoa_invert+0x6c>
    27d4:	ea cf       	rjmp	.-44     	; 0x27aa <__ultoa_invert+0x58>
    27d6:	b4 e0       	ldi	r27, 0x04	; 4
    27d8:	a6 95       	lsr	r26
    27da:	97 95       	ror	r25
    27dc:	87 95       	ror	r24
    27de:	77 95       	ror	r23
    27e0:	67 95       	ror	r22
    27e2:	ba 95       	dec	r27
    27e4:	c9 f7       	brne	.-14     	; 0x27d8 <__ultoa_invert+0x86>
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	61 05       	cpc	r22, r1
    27ea:	71 05       	cpc	r23, r1
    27ec:	08 95       	ret
    27ee:	9b 01       	movw	r18, r22
    27f0:	ac 01       	movw	r20, r24
    27f2:	0a 2e       	mov	r0, r26
    27f4:	06 94       	lsr	r0
    27f6:	57 95       	ror	r21
    27f8:	47 95       	ror	r20
    27fa:	37 95       	ror	r19
    27fc:	27 95       	ror	r18
    27fe:	ba 95       	dec	r27
    2800:	c9 f7       	brne	.-14     	; 0x27f4 <__ultoa_invert+0xa2>
    2802:	62 0f       	add	r22, r18
    2804:	73 1f       	adc	r23, r19
    2806:	84 1f       	adc	r24, r20
    2808:	95 1f       	adc	r25, r21
    280a:	a0 1d       	adc	r26, r0
    280c:	08 95       	ret

0000280e <eeprom_write_byte>:
    280e:	26 2f       	mov	r18, r22

00002810 <eeprom_write_r18>:
    2810:	e1 99       	sbic	0x1c, 1	; 28
    2812:	fe cf       	rjmp	.-4      	; 0x2810 <eeprom_write_r18>
    2814:	9f bb       	out	0x1f, r25	; 31
    2816:	8e bb       	out	0x1e, r24	; 30
    2818:	2d bb       	out	0x1d, r18	; 29
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	f8 94       	cli
    281e:	e2 9a       	sbi	0x1c, 2	; 28
    2820:	e1 9a       	sbi	0x1c, 1	; 28
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	08 95       	ret

00002828 <__prologue_saves__>:
    2828:	2f 92       	push	r2
    282a:	3f 92       	push	r3
    282c:	4f 92       	push	r4
    282e:	5f 92       	push	r5
    2830:	6f 92       	push	r6
    2832:	7f 92       	push	r7
    2834:	8f 92       	push	r8
    2836:	9f 92       	push	r9
    2838:	af 92       	push	r10
    283a:	bf 92       	push	r11
    283c:	cf 92       	push	r12
    283e:	df 92       	push	r13
    2840:	ef 92       	push	r14
    2842:	ff 92       	push	r15
    2844:	0f 93       	push	r16
    2846:	1f 93       	push	r17
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	ca 1b       	sub	r28, r26
    2852:	db 0b       	sbc	r29, r27
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	09 94       	ijmp

00002860 <__epilogue_restores__>:
    2860:	2a 88       	ldd	r2, Y+18	; 0x12
    2862:	39 88       	ldd	r3, Y+17	; 0x11
    2864:	48 88       	ldd	r4, Y+16	; 0x10
    2866:	5f 84       	ldd	r5, Y+15	; 0x0f
    2868:	6e 84       	ldd	r6, Y+14	; 0x0e
    286a:	7d 84       	ldd	r7, Y+13	; 0x0d
    286c:	8c 84       	ldd	r8, Y+12	; 0x0c
    286e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2870:	aa 84       	ldd	r10, Y+10	; 0x0a
    2872:	b9 84       	ldd	r11, Y+9	; 0x09
    2874:	c8 84       	ldd	r12, Y+8	; 0x08
    2876:	df 80       	ldd	r13, Y+7	; 0x07
    2878:	ee 80       	ldd	r14, Y+6	; 0x06
    287a:	fd 80       	ldd	r15, Y+5	; 0x05
    287c:	0c 81       	ldd	r16, Y+4	; 0x04
    287e:	1b 81       	ldd	r17, Y+3	; 0x03
    2880:	aa 81       	ldd	r26, Y+2	; 0x02
    2882:	b9 81       	ldd	r27, Y+1	; 0x01
    2884:	ce 0f       	add	r28, r30
    2886:	d1 1d       	adc	r29, r1
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	ed 01       	movw	r28, r26
    2894:	08 95       	ret

00002896 <_exit>:
    2896:	f8 94       	cli

00002898 <__stop_program>:
    2898:	ff cf       	rjmp	.-2      	; 0x2898 <__stop_program>
